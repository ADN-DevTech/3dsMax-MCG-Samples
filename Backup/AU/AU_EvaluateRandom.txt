(InstanceState state, Boolean keep custom channels, TriMesh mesh, IArray[INode] nodes, Single default box size, Int32 seed, Int32 flux channel id) => 
  {
    IArray[INode] _0Filter;// 2:MeshesFromNodes->3:Filter 162286
    IArray[TriMesh] _1Map;// 2:MeshesFromNodes->2:Map 162285
    Int32 _2Count;// 7:MeshesFromNodesOrDefault->3:Count 162283
    Int32 _3Zero;// 4:GreaterThanZero->1:Zero 162282
    Boolean _4GreaterThan;// 4:GreaterThanZero->3:GreaterThan 162281
    IArray[TriMesh] _20Pass-through: array;// 0:Pass-through: array 162255
    Func[Random, TriMesh] _21Pass-through: function1;// 0:Pass-through: function1 162258
    Random _22RandomNumberGenerator;// 15:RandomNumberGenerator 162319
    Func[TriMesh] _23Bind;// 4:RandomArray->4:Bind 162262
    Int32 _24Count;// 11:RandomElements->8:Count 162275
    Int32 _25Zero;// 4:GreaterThanZero->1:Zero 162274
    Boolean _26GreaterThan;// 4:GreaterThanZero->3:GreaterThan 162273
    Int32 _37Pass-through: Int32;// 0:Pass-through: Int32 162260
    IArray[TriMesh] _38ArrayOfFunction;// 4:RandomArray->5:ArrayOfFunction 162261
    MapChannel _39GetMapChannel;// 1:MatricesFromMapChannel->9:GetMapChannel 162334
    IArray[Vector3] _40MapChannelVertexBuffer;// 1:MatricesFromMapChannel->8:MapChannelVertexBuffer 162333
    Int32 _41Count;// 2:Slices->2:Count 162330
    Int32 _42Constant;// 1:MatricesFromMapChannel->0:Constant 162335
    Int32 _43Divide;// 2:Slices->3:Divide 162329
    IArray[Int32] _44Range;// 2:Slices->4:Range 162328
    IArray[IArray[Vector3]] _45Map;// 2:Slices->5:Map 162327
    IArray[Matrix] _46Map;// 1:MatricesFromMapChannel->5:Map 162324
    IArray[TriMesh] _47Combine;// 4:Combine 162254
    TriMesh _48CombineAllMeshes;// 5:CombineAllMeshes 162253
    Int32 _51Count;// 18:Count 162321
    Int32 _52Zero;// 11:RandomElements->9:Zero 162276
    _0Filter = Filter(nodes, (INode x0) => 
      {
        Boolean _0CanGetMeshFromNode;// 2:MeshesFromNodes->4:CanGetMeshFromNode 162287
        _0CanGetMeshFromNode = CanGetMeshFromNode(x0);
        _0CanGetMeshFromNode;
        });
    _1Map = Map(_0Filter, (INode x0) => 
      {
        TriMesh _0MeshFromNode;// 2:MeshesFromNodes->5:MeshFromNode 162288
        _0MeshFromNode = MeshFromNode(x0);
        _0MeshFromNode;
        });
    _2Count = Count(_1Map);
    _3Zero = Zero();
    _4GreaterThan = GreaterThan(_2Count, _3Zero);
    _20Pass-through: array = if (_4GreaterThan)
      {
        _1Map;
        }else
      {
        Single _5Constant;// 1:Origin->0:Constant 162314
        Vector3 _6Vector3;// 1:Origin->1:Vector3 162313
        Single _7Constant;// 1:MultiplyTwoFloat->0:Constant 162317
        Single _8Multiply;// 1:MultiplyTwoFloat->0:Multiply 162316
        BoundingSphere _9Sphere;// 0:BoxFromPointAndRadius->3:Sphere 162312
        BoundingBox _10BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 162311
        QuadMesh _11BoxQuadMesh;// 3:BoxTriMesh->2:BoxQuadMesh 162307
        TriMesh _12Triangulate;// 3:BoxTriMesh->3:Triangulate 162306
        IArray[Int32] _13MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 162297
        IArray[Int32] _14Indices;// 4:HideEveryThirdEdge->8:Indices 162296
        Int32 _15Constant;// 4:HideEveryThirdEdge->0:Constant 162304
        Int32 _16Constant;// 4:HideEveryThirdEdge->0:Constant 162305
        IArray[Boolean] _17Map;// 4:HideEveryThirdEdge->5:Map 162295
        TriMesh _18SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 162294
        IArray[TriMesh] _19Unit;// 7:MeshesFromNodesOrDefault->6:Unit 162289
        _5Constant = 0;
        _6Vector3 = Vector3(_5Constant, _5Constant, _5Constant);
        _7Constant = 2;
        _8Multiply = Multiply(default box size, _7Constant);
        _9Sphere = Sphere(_6Vector3, _8Multiply);
        _10BoxFromSphere = BoxFromSphere(_9Sphere);
        _11BoxQuadMesh = BoxQuadMesh(_10BoxFromSphere);
        _12Triangulate = Triangulate(_11BoxQuadMesh);
        _13MeshIndices = MeshIndices(_12Triangulate);
        _14Indices = Indices(_13MeshIndices);
        _15Constant = 3;
        _16Constant = 2;
        _17Map = Map(_14Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 162303
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 162302
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 162298
            _0Modulo = Modulo(x0, _15Constant);
            _1Equal = Equal(_0Modulo, _16Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _18SetVisibleEdges = SetVisibleEdges(_12Triangulate, _17Map);
        _19Unit = Unit(_18SetVisibleEdges);
        _19Unit;
        };
    _21Pass-through: function1 = (Random x0) => 
      {
        Int32 _0Count;// 2:RandomElement->3:Count 162267
        TriMesh _1At;// 2:RandomElement->5:At 162265
        _0Count = Count(_20Pass-through: array);
        _1At = At(_20Pass-through: array, PseudoRandomInt(x0, _0Count));
        _1At;
        };
    _22RandomNumberGenerator = RandomNumberGenerator(seed);
    _23Bind = Bind(_21Pass-through: function1, _22RandomNumberGenerator);
    _24Count = Count(_20Pass-through: array);
    _25Zero = Zero();
    _26GreaterThan = GreaterThan(_24Count, _25Zero);
    _37Pass-through: Int32 = if (_26GreaterThan)
      {
        MapChannel _27GetMapChannel;// 1:MatricesFromMapChannel->9:GetMapChannel 162334
        IArray[Vector3] _28MapChannelVertexBuffer;// 1:MatricesFromMapChannel->8:MapChannelVertexBuffer 162333
        Int32 _29Count;// 2:Slices->2:Count 162330
        Int32 _30Constant;// 1:MatricesFromMapChannel->0:Constant 162335
        Int32 _31Divide;// 2:Slices->3:Divide 162329
        IArray[Int32] _32Range;// 2:Slices->4:Range 162328
        IArray[IArray[Vector3]] _33Map;// 2:Slices->5:Map 162327
        IArray[Matrix] _34Map;// 1:MatricesFromMapChannel->5:Map 162324
        Int32 _35Count;// 18:Count 162321
        _27GetMapChannel = GetMapChannel(mesh, flux channel id);
        _28MapChannelVertexBuffer = MapChannelVertexBuffer(_27GetMapChannel);
        _29Count = Count(_28MapChannelVertexBuffer);
        _30Constant = 4;
        _31Divide = Divide(_29Count, _30Constant);
        _32Range = Range(_31Divide);
        _33Map = Map(_32Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 162332
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 162331
            _0Multiply = Multiply(_30Constant, x0);
            _1Slice = Slice(_28MapChannelVertexBuffer, _0Multiply, _30Constant);
            _1Slice;
            });
        _34Map = Map(_33Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 162344
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 162345
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 162349
            Vector3 _3At;// 6:MatrixFromRows->3:At 162348
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 162343
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 162346
            Int32 _6One;// 8:PlusOne->1:One 162353
            Int32 _7Add;// 8:PlusOne->0:Add 162352
            Vector3 _8At;// 6:MatrixFromRows->4:At 162350
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 162342
            Int32 _10Constant;// 25:Three->0:Constant 162347
            Int32 _11One;// 9:PlusOne->1:One 162357
            Int32 _12Add;// 9:PlusOne->0:Add 162356
            Vector3 _13At;// 6:MatrixFromRows->5:At 162354
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 162341
            Int32 _15One;// 10:PlusOne->1:One 162361
            Int32 _16Add;// 10:PlusOne->0:Add 162360
            Vector3 _17At;// 6:MatrixFromRows->6:At 162358
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 162337
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _35Count = Count(_34Map);
        _35Count;
        }else
      {
        Int32 _36Zero;// 11:RandomElements->9:Zero 162276
        _36Zero = Zero();
        _36Zero;
        };
    _38ArrayOfFunction = ArrayOfFunction(_23Bind, _37Pass-through: Int32);
    _39GetMapChannel = GetMapChannel(mesh, flux channel id);
    _40MapChannelVertexBuffer = MapChannelVertexBuffer(_39GetMapChannel);
    _41Count = Count(_40MapChannelVertexBuffer);
    _42Constant = 4;
    _43Divide = Divide(_41Count, _42Constant);
    _44Range = Range(_43Divide);
    _45Map = Map(_44Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 162332
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 162331
        _0Multiply = Multiply(_42Constant, x0);
        _1Slice = Slice(_40MapChannelVertexBuffer, _0Multiply, _42Constant);
        _1Slice;
        });
    _46Map = Map(_45Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 162344
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 162345
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 162349
        Vector3 _3At;// 6:MatrixFromRows->3:At 162348
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 162343
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 162346
        Int32 _6One;// 8:PlusOne->1:One 162353
        Int32 _7Add;// 8:PlusOne->0:Add 162352
        Vector3 _8At;// 6:MatrixFromRows->4:At 162350
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 162342
        Int32 _10Constant;// 25:Three->0:Constant 162347
        Int32 _11One;// 9:PlusOne->1:One 162357
        Int32 _12Add;// 9:PlusOne->0:Add 162356
        Vector3 _13At;// 6:MatrixFromRows->5:At 162354
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 162341
        Int32 _15One;// 10:PlusOne->1:One 162361
        Int32 _16Add;// 10:PlusOne->0:Add 162360
        Vector3 _17At;// 6:MatrixFromRows->6:At 162358
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 162337
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _47Combine = Combine(_38ArrayOfFunction, _46Map, (TriMesh x0, Matrix x1) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 162369
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 162366
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 162368
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 162367
        _0MeshVertices = MeshVertices(x0);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 9:TransformMesh->0:Transform 162370
            _0Transform = Transform(x0, x1);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(x0, _2Map);
        _3SetMeshVertices;
        });
    _48CombineAllMeshes = CombineAllMeshes(_47Combine);
    _51Count = Count(_46Map);
    _52Zero = Zero();
    if (keep custom channels)
      {
        Int32 _53Constant;// 21:MeshCopyCustomMapChannelVertexBuffers->0:Constant 162207
        IArray[Int32] _54Range;// 21:MeshCopyCustomMapChannelVertexBuffers->1:Range 162206
        Int32 _55Two;// 21:MeshCopyCustomMapChannelVertexBuffers->4:Two 162208
        IArray[Int32] _56Skip;// 21:MeshCopyCustomMapChannelVertexBuffers->3:Skip 162205
        IArray[Int32] _57Filter;// 21:MeshCopyCustomMapChannelVertexBuffers->13:Filter 162204
        TriMesh _58Aggregate;// 21:MeshCopyCustomMapChannelVertexBuffers->6:Aggregate 162203
        _53Constant = 100;
        _54Range = Range(_53Constant);
        _55Two = Two();
        _56Skip = Skip(_54Range, _55Two);
        _57Filter = Filter(_56Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry->0:Constant 162221
            Boolean _1Equal;// 5:GetMapChannelOrGeometry->4:Equal 162220
            MapChannel _4Pass-through: any;// 0:Pass-through: any 162212
            Object _5Null;// 6:IsNullFix2->3:Null 162216
            Object _6As;// 6:IsNullFix2->23:As 162214
            Boolean _7Equal;// 6:IsNullFix2->1:Equal 162213
            Boolean _8Not;// 12:MapChannelExists->4:Not 162211
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _4Pass-through: any = if (_1Equal)
              {
                MapChannel _2TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 162222
                _2TopologyChannel = TopologyChannel(mesh);
                _2TopologyChannel;
                }else
              {
                MapChannel _3GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 162223
                _3GetMapChannel = GetMapChannel(mesh, x0);
                _3GetMapChannel;
                };
            _5Null = Null();
            _6As = As(_4Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 162215
                _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                _0IgnoreFirst;
                });
            _7Equal = Equal(_6As, _5Null);
            _8Not = Not(_7Equal);
            _8Not;
            });
        _58Aggregate = Aggregate(_57Filter, _48CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer->10:TryCatch 162227
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 21:MeshCopyCustomMapChannelVertexBuffers->7:IgnoreFirst 162249
                Int32 _1Constant;// 5:GetMapChannelOrGeometry->0:Constant 162241
                Boolean _2Equal;// 5:GetMapChannelOrGeometry->4:Equal 162240
                MapChannel _5Pass-through: any;// 0:Pass-through: any 162232
                Object _6Null;// 6:IsNullFix2->3:Null 162236
                Object _7As;// 6:IsNullFix2->23:As 162234
                Boolean _8Equal;// 6:IsNullFix2->1:Equal 162233
                Boolean _9Not;// 5:MapChannelExists->4:Not 162231
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _5Pass-through: any = if (_2Equal)
                  {
                    MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 162242
                    _3TopologyChannel = TopologyChannel(mesh);
                    _3TopologyChannel;
                    }else
                  {
                    MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 162243
                    _4GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _4GetMapChannel;
                    };
                _6Null = Null();
                _7As = As(_5Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 162235
                    _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                    _0IgnoreFirst;
                    });
                _8Equal = Equal(_7As, _6Null);
                _9Not = Not(_8Equal);
                if (_9Not)
                  {
                    MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer->1:GetMapChannel 162246
                    IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer->8:MapChannelVertexBuffer 162245
                    IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer->0:MeshIndices 162247
                    TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer->7:SetMapChannel 162244
                    _10GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                    _12MeshIndices = MeshIndices(x0);
                    _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                    _13SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer->11:IgnoreFirst 162248
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _58Aggregate;
        }else
      {
        _48CombineAllMeshes;
        };
    }