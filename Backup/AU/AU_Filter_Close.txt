(InstanceState state, TriMesh mesh, Int32 flux channel, Single min distance) => 
  {
    MapChannel _0GetMapChannel;// 19:MatricesFromMapChannel->9:GetMapChannel 162649
    IArray[Vector3] _1MapChannelVertexBuffer;// 19:MatricesFromMapChannel->8:MapChannelVertexBuffer 162648
    Int32 _2Count;// 2:Slices->2:Count 162645
    Int32 _3Constant;// 19:MatricesFromMapChannel->0:Constant 162650
    Int32 _4Divide;// 2:Slices->3:Divide 162644
    IArray[Int32] _5Range;// 2:Slices->4:Range 162643
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 162642
    IArray[Matrix] _7Map;// 19:MatricesFromMapChannel->5:Map 162639
    Int32 _8One;// 9:MatricesFilterClose->8:One 162636
    IArray[Matrix] _9Filter;// 9:MatricesFilterClose->5:Filter 162627
    Func[Matrix, IArray[Vector3]] _10Pass-through: function1;// 0:Pass-through: function1 162611
    IArray[IArray[Vector3]] _11Map;// 5:FlatMap->4:Map 162613
    IArray[Vector3] _12Flatten;// 5:FlatMap->3:Flatten 162612
    IArray[Int32] _13MeshIndices;// 6:StoreMatricesInMapChannel->0:MeshIndices 162622
    TriMesh _14SetMapChannel;// 6:StoreMatricesInMapChannel->7:SetMapChannel 162609
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 162647
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 162646
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 162659
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 162660
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 162664
        Vector3 _3At;// 6:MatrixFromRows->3:At 162663
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 162658
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 162661
        Int32 _6One;// 8:PlusOne->1:One 162668
        Int32 _7Add;// 8:PlusOne->0:Add 162667
        Vector3 _8At;// 6:MatrixFromRows->4:At 162665
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 162657
        Int32 _10Constant;// 25:Three->0:Constant 162662
        Int32 _11One;// 9:PlusOne->1:One 162672
        Int32 _12Add;// 9:PlusOne->0:Add 162671
        Vector3 _13At;// 6:MatrixFromRows->5:At 162669
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 162656
        Int32 _15One;// 10:PlusOne->1:One 162676
        Int32 _16Add;// 10:PlusOne->0:Add 162675
        Vector3 _17At;// 6:MatrixFromRows->6:At 162673
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 162652
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8One = One();
    _9Filter = Filter(_7Map, (Matrix x0) => 
      {
        IArray[Vector3] _0Map;// 2:MatrixPositions->1:Map 162633
        Vector3 _1GetMatrixTranslation;// 9:MatricesFilterClose->10:GetMatrixTranslation 162635
        IArray[Int32] _2OctreeNearPoints;// 9:MatricesFilterClose->4:OctreeNearPoints 162630
        Int32 _3Count;// 9:MatricesFilterClose->6:Count 162629
        Boolean _4LessThanOrEqual;// 9:MatricesFilterClose->7:LessThanOrEqual 162628
        _0Map = Map(_7Map, (Matrix x0) => 
          {
            Vector3 _0GetMatrixTranslation;// 2:MatrixPositions->2:GetMatrixTranslation 162634
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _0GetMatrixTranslation;
            });
        _1GetMatrixTranslation = GetMatrixTranslation(x0);
        _2OctreeNearPoints = OctreeNearPoints(PointOctree(_0Map), _1GetMatrixTranslation, min distance);
        _3Count = Count(_2OctreeNearPoints);
        _4LessThanOrEqual = LessThanOrEqual(_3Count, _8One);
        _4LessThanOrEqual;
        });
    _10Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 162617
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 162616
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 162615
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 162621
            Int32 _1Add;// 5:PlusOne->0:Add 162620
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 162618
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _11Map = Map(_9Filter, _10Pass-through: function1);
    _12Flatten = Flatten(_11Map);
    _13MeshIndices = MeshIndices(mesh);
    _14SetMapChannel = SetMapChannel(mesh, flux channel, _12Flatten, _13MeshIndices);
    _14SetMapChannel;
    }