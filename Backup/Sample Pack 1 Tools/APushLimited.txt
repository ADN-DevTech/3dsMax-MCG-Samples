(InstanceState state, INode node, TriMesh mesh, Matrix modifierTransform, Boolean caching, Single amount) => 
  {
    Boolean _0IsValidNode;// 15:IsValidNode 186772
    _0IsValidNode = IsValidNode(node);
    if (_0IsValidNode)
      {
        IArray[Vector3] _1MeshVertices;// 3:MeshVertices 186778
        IArray[Vector3] _2VertexNormals;// 4:VertexNormals 186780
        Int32 _3Two;// 12:CacheValueWhileTrueWithUpdate->2:Two 186805
        Cache[Tuple[RayTraceScene, Int32]] _4CreateCache;// 12:CacheValueWhileTrueWithUpdate->0:CreateCache 186801
        Int32 _5Zero;// 3:ExtractCurrentValueFromCache->3:Zero 186800
        Tuple[RayTraceScene, Int32] _6CachedValue;// 3:ExtractCurrentValueFromCache->1:CachedValue 186799
        RayTraceScene _7PairItem1;// 7:RayTraceCachedScene->4:PairItem1 186794
        IArray[Vector3] _8ParallelCombine;// 5:ParallelCombine 186777
        TriMesh _9SetMeshVertices;// 6:SetMeshVertices 186774
        _1MeshVertices = MeshVertices(mesh);
        _2VertexNormals = VertexNormals(mesh);
        _3Two = Two();
        _4CreateCache = CreateCache(() => 
          {
            Boolean _0False;// 7:RayTraceCachedScene->3:False 186808
            TriMesh _1MeshFromNode;// 7:NodeMeshInWorldSpace->2:MeshFromNode 186835
            IArray[Vector3] _2MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 186833
            Matrix _3ObjectTransformBeforeWSM;// 7:NodeMeshInWorldSpace->0:ObjectTransformBeforeWSM 186836
            Func[Vector3, Vector3] _4Pass-through: function1;// 0:Pass-through: function1 186830
            IArray[Vector3] _5Map;// 2:DeformMeshPoints->1:Map 186832
            TriMesh _6SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 186831
            IArray[Vector3] _7MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 186823
            Matrix _8InvertMatrix;// 2:MeshInLocalSpace->1:InvertMatrix 186825
            Func[Vector3, Vector3] _9Pass-through: function1;// 0:Pass-through: function1 186820
            IArray[Vector3] _10Map;// 2:DeformMeshPoints->1:Map 186822
            TriMesh _11SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 186821
            Tuple[RayTraceScene, Int32] _12Pass-through: any;// 0:Pass-through: any 186795
            _0False = False();
            _1MeshFromNode = MeshFromNode(node);
            _2MeshVertices = MeshVertices(_1MeshFromNode);
            _3ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(node);
            _4Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 3:TransformMesh->0:Transform 186834
                _0Transform = Transform(x0, _3ObjectTransformBeforeWSM);
                _0Transform;
                };
            _5Map = Map(_2MeshVertices, _4Pass-through: function1);
            _6SetMeshVertices = SetMeshVertices(_1MeshFromNode, _5Map);
            _7MeshVertices = MeshVertices(_6SetMeshVertices);
            _8InvertMatrix = InvertMatrix(modifierTransform);
            _9Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 3:TransformMesh->0:Transform 186824
                _0Transform = Transform(x0, _8InvertMatrix);
                _0Transform;
                };
            _10Map = Map(_7MeshVertices, _9Pass-through: function1);
            _11SetMeshVertices = SetMeshVertices(_6SetMeshVertices, _10Map);
            _12Pass-through: any = RayTraceAddGeometry(RayTraceScene(_0False), _11SetMeshVertices);
            _12Pass-through: any;
            }, (Tuple[RayTraceScene, Int32] x0) => 
          {
            if (caching)
              {
                x0;
                }else
              {
                Func[Tuple[RayTraceScene, Int32], Tuple[RayTraceScene, Int32]] _0Pass-through: function1;// 0:Pass-through: function1 186797
                Tuple[RayTraceScene, Int32] _1Apply1;// 12:CacheValueWhileTrueWithUpdate->9:Apply1 186804
                _0Pass-through: function1 = (Tuple[RayTraceScene, Int32] x0) => 
                  {
                    RayTraceScene _0PairItem1;// 7:RayTraceCachedScene->9:PairItem1 186810
                    Int32 _1PairItem2;// 7:RayTraceCachedScene->0:PairItem2 186812
                    TriMesh _2MeshFromNode;// 7:NodeMeshInWorldSpace->2:MeshFromNode 186835
                    IArray[Vector3] _3MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 186833
                    Matrix _4ObjectTransformBeforeWSM;// 7:NodeMeshInWorldSpace->0:ObjectTransformBeforeWSM 186836
                    Func[Vector3, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 186830
                    IArray[Vector3] _6Map;// 2:DeformMeshPoints->1:Map 186832
                    TriMesh _7SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 186831
                    IArray[Vector3] _8MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 186823
                    Matrix _9InvertMatrix;// 2:MeshInLocalSpace->1:InvertMatrix 186825
                    Func[Vector3, Vector3] _10Pass-through: function1;// 0:Pass-through: function1 186820
                    IArray[Vector3] _11Map;// 2:DeformMeshPoints->1:Map 186822
                    TriMesh _12SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 186821
                    _0PairItem1 = PairItem1(x0);
                    _1PairItem2 = PairItem2(x0);
                    _2MeshFromNode = MeshFromNode(node);
                    _3MeshVertices = MeshVertices(_2MeshFromNode);
                    _4ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(node);
                    _5Pass-through: function1 = (Vector3 x0) => 
                      {
                        Vector3 _0Transform;// 3:TransformMesh->0:Transform 186834
                        _0Transform = Transform(x0, _4ObjectTransformBeforeWSM);
                        _0Transform;
                        };
                    _6Map = Map(_3MeshVertices, _5Pass-through: function1);
                    _7SetMeshVertices = SetMeshVertices(_2MeshFromNode, _6Map);
                    _8MeshVertices = MeshVertices(_7SetMeshVertices);
                    _9InvertMatrix = InvertMatrix(modifierTransform);
                    _10Pass-through: function1 = (Vector3 x0) => 
                      {
                        Vector3 _0Transform;// 3:TransformMesh->0:Transform 186824
                        _0Transform = Transform(x0, _9InvertMatrix);
                        _0Transform;
                        };
                    _11Map = Map(_8MeshVertices, _10Pass-through: function1);
                    _12SetMeshVertices = SetMeshVertices(_7SetMeshVertices, _11Map);
                    RayTraceUpdateGeometry(_0PairItem1, _1PairItem2, _12SetMeshVertices);
                    };
                _1Apply1 = Apply1(_0Pass-through: function1, x0);
                _1Apply1;
                };
            }, _3Two).SetId(state, 0);
        _5Zero = Zero();
        _6CachedValue = CachedValue(_4CreateCache, _5Zero);
        _7PairItem1 = PairItem1(_6CachedValue);
        _8ParallelCombine = ParallelCombine(_1MeshVertices, _2VertexNormals, (Vector3 x0, Vector3 x1) => 
          {
            Ray _0Ray;// 2:PushVertexLimited->2:Ray 186789
            Boolean _1RayTraceHit;// 2:PushVertexLimited->1:RayTraceHit 186787
            Vector3 _4MultiplyByScalar;// 2:PushVertexLimited->3:MultiplyByScalar 186785
            _0Ray = Ray(x1, x0);
            _1RayTraceHit = RayTraceHit(RayTraceFaceIntersection(_7PairItem1, _0Ray));
            _4MultiplyByScalar = MultiplyByScalar(x0, if (_1RayTraceHit)
              {
                Single _2RayTraceDistance;// 2:PushVertexLimited->11:RayTraceDistance 186791
                Single _3LesserFloat;// 2:PushVertexLimited->10:LesserFloat 186790
                _2RayTraceDistance = RayTraceDistance(RayTraceFaceIntersection(_7PairItem1, _0Ray));
                _3LesserFloat = LesserFloat(amount, _2RayTraceDistance);
                _3LesserFloat;
                }else
              {
                amount;
                });
            _4MultiplyByScalar;
            });
        _9SetMeshVertices = SetMeshVertices(mesh, _8ParallelCombine);
        _9SetMeshVertices;
        }else
      {
        mesh;
        };
    }