(InstanceState state, TriMesh mesh, Int32 iterations) => 
  {
    TriMesh _0Repeat;// 10:RepeatWithoutIndex->7:Repeat 187279
    _0Repeat = Repeat(mesh, iterations, (TriMesh x0, Int32 x1) => 
      {
        Func[TriMesh, TriMesh] _0Pass-through: function1;// 0:Pass-through: function1 187278
        TriMesh _1Apply1;// 10:RepeatWithoutIndex->1:Apply1 187281
        TriMesh _2IgnoreSecond;// 10:RepeatWithoutIndex->9:IgnoreSecond 187280
        _0Pass-through: function1 = (TriMesh x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 1:LerpMeshVertices->4:MeshVertices 187292
            IArray[Vector3] _1MeshVertices;// 0:MeshAverageAdjacentVertices->4:MeshVertices 187297
            IArray[Int32] _2Indices;// 0:MeshAverageAdjacentVertices->2:Indices 187296
            IArray[Vector3] _3Map;// 0:MeshAverageAdjacentVertices->5:Map 187295
            String _4Constant;// 0:HasPerVertexChannel->0:Constant 187383
            Int32 _5Zero;// 2:HasSoftSelection->3:Zero 187385
            String _6ToString;// 0:HasPerVertexChannel->7:ToString 187384
            String _7ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 187382
            Boolean _8IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 187381
            IArray[Single] _14Pass-through: array;// 0:Pass-through: array 187286
            IArray[Vector3] _15Combine3;// 1:LerpMeshVertices->3:Combine3 187291
            TriMesh _16SetMeshVertices;// 1:LerpMeshVertices->2:SetMeshVertices 187290
            _0MeshVertices = MeshVertices(x0);
            _1MeshVertices = MeshVertices(x0);
            _2Indices = Indices(_1MeshVertices);
            _3Map = Map(_2Indices, (Int32 x0) => 
              {
                IArray[Int32] _0VertexFaceLookup;// 1:AdjacentVertexIndices2->2:VertexFaceLookup 187353
                Func[Int32, IArray[Int32]] _1Pass-through: function1;// 0:Pass-through: function1 187350
                IArray[IArray[Int32]] _2Map;// 3:FlatMap->4:Map 187352
                IArray[Int32] _3Flatten;// 3:FlatMap->3:Flatten 187351
                IArray[Int32] _4Indices;// 7:RemoveMatching->5:Indices 187346
                IArray[Int32] _5Filter;// 7:RemoveMatching->21:Filter 187345
                IArray[Int32] _6Map;// 4:SelectByIndex->2:Map 187343
                IArray[Int32] _7Sort;// 6:RemoveDuplicates->7:Sort 187324
                IArray[Int32] _8Indices;// 6:RemoveDuplicates->0:Indices 187323
                IArray[Int32] _9Filter;// 6:RemoveDuplicates->3:Filter 187322
                IArray[Int32] _10Map;// 5:SelectByIndex->2:Map 187320
                IArray[Vector3] _11MeshVertices;// 18:SelectVertices->3:MeshVertices 187314
                IArray[Vector3] _12Map;// 2:SelectByIndex->2:Map 187312
                Vector3 _13DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 187304
                Vector3 _14Aggregate;// 2:Sum->0:Aggregate 187303
                Int32 _15Count;// 13:AverageVector->3:Count 187307
                Single _16IntAsFloat;// 13:AverageVector->1:IntAsFloat 187306
                Vector3 _17DivideByScalar;// 13:AverageVector->5:DivideByScalar 187301
                _0VertexFaceLookup = VertexFaceLookup(x0, x0);
                _1Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Constant;// 1:Three->0:Constant 187368
                    Int32 _1Multiply;// 2:MultiplyByThree->2:Multiply 187367
                    IArray[Int32] _2Unit;// 0:Array3->2:Unit 187365
                    Int32 _3One;// 3:PlusOne->1:One 187371
                    Int32 _4Add;// 3:PlusOne->0:Add 187370
                    IArray[Int32] _5Append;// 0:Array3->3:Append 187364
                    Int32 _6One;// 4:PlusOne->1:One 187374
                    Int32 _7Add;// 4:PlusOne->0:Add 187373
                    IArray[Int32] _8Append;// 0:Array3->6:Append 187363
                    IArray[Int32] _9MeshIndices;// 4:FaceToVertexIndices->7:MeshIndices 187375
                    IArray[Int32] _10Map;// 8:SelectByIndex->2:Map 187358
                    _0Constant = 3;
                    _1Multiply = Multiply(x0, _0Constant);
                    _2Unit = Unit(_1Multiply);
                    _3One = One();
                    _4Add = Add(_1Multiply, _3One);
                    _5Append = Append(_2Unit, _4Add);
                    _6One = One();
                    _7Add = Add(_4Add, _6One);
                    _8Append = Append(_5Append, _7Add);
                    _9MeshIndices = MeshIndices(x0);
                    _10Map = Map(_8Append, (Int32 x0) => 
                      {
                        Int32 _0At;// 8:SelectByIndex->3:At 187359
                        _0At = At(_9MeshIndices, x0);
                        _0At;
                        });
                    _10Map;
                    };
                _2Map = Map(_0VertexFaceLookup, _1Pass-through: function1);
                _3Flatten = Flatten(_2Map);
                _4Indices = Indices(_3Flatten);
                _5Filter = Filter(_4Indices, (Int32 x0) => 
                  {
                    Int32 _0At;// 7:RemoveMatching->18:At 187348
                    Boolean _1NotEqual;// 7:RemoveMatching->17:NotEqual 187347
                    _0At = At(_3Flatten, x0);
                    _1NotEqual = NotEqual(_0At, x0);
                    _1NotEqual;
                    });
                _6Map = Map(_5Filter, (Int32 x0) => 
                  {
                    Int32 _0At;// 4:SelectByIndex->3:At 187344
                    _0At = At(_3Flatten, x0);
                    _0At;
                    });
                _7Sort = Sort(_6Map);
                _8Indices = Indices(_7Sort);
                _9Filter = Filter(_8Indices, (Int32 x0) => 
                  {
                    Int32 _0Zero;// 2:GreaterThanZero->1:Zero 187331
                    Boolean _1GreaterThan;// 2:GreaterThanZero->3:GreaterThan 187330
                    Boolean _8Not;// 6:RemoveDuplicates->4:Not 187325
                    _0Zero = Zero();
                    _1GreaterThan = GreaterThan(x0, _0Zero);
                    _8Not = Not(if (_1GreaterThan)
                      {
                        Int32 _2At;// 2:SameAsPreviousElement->6:At 187333
                        Int32 _3One;// 5:MinusOne->2:One 187337
                        Int32 _4Subtract;// 5:MinusOne->1:Subtract 187336
                        Int32 _5At;// 2:SameAsPreviousElement->7:At 187334
                        Boolean _6Equal;// 2:SameAsPreviousElement->3:Equal 187332
                        _2At = At(_7Sort, x0);
                        _3One = One();
                        _4Subtract = Subtract(x0, _3One);
                        _5At = At(_7Sort, _4Subtract);
                        _6Equal = Equal(_2At, _5At);
                        _6Equal;
                        }else
                      {
                        Boolean _7False;// 2:SameAsPreviousElement->8:False 187338
                        _7False = False();
                        _7False;
                        });
                    _8Not;
                    });
                _10Map = Map(_9Filter, (Int32 x0) => 
                  {
                    Int32 _0At;// 5:SelectByIndex->3:At 187321
                    _0At = At(_7Sort, x0);
                    _0At;
                    });
                _11MeshVertices = MeshVertices(x0);
                _12Map = Map(_10Map, (Int32 x0) => 
                  {
                    Vector3 _0At;// 2:SelectByIndex->3:At 187313
                    _0At = At(_11MeshVertices, x0);
                    _0At;
                    });
                _13DefaultValueOfElement = DefaultValueOfElement(_12Map);
                _14Aggregate = Aggregate(_12Map, _13DefaultValueOfElement, (Vector3 x0, Vector3 x1) => 
                  {
                    Vector3 _0Add;// 2:Sum->2:Add 187305
                    _0Add = Add(x0, x1);
                    _0Add;
                    });
                _15Count = Count(_12Map);
                _16IntAsFloat = IntAsFloat(_15Count);
                _17DivideByScalar = DivideByScalar(_14Aggregate, _16IntAsFloat);
                _17DivideByScalar;
                });
            _4Constant = per-vertex data channel ;
            _5Zero = Zero();
            _6ToString = ToString(_5Zero);
            _7ConcatenateStrings = ConcatenateStrings(_4Constant, _6ToString);
            _8IsChannelAvailable = IsChannelAvailable(x0, _7ConcatenateStrings);
            _14Pass-through: array = if (_8IsChannelAvailable)
              {
                Int32 _9Zero;// 1:SoftSelection->2:Zero 187388
                IArray[Single] _10PerVertexData;// 1:SoftSelection->3:PerVertexData 187387
                _9Zero = Zero();
                _10PerVertexData = PerVertexData(x0, _9Zero);
                _10PerVertexData;
                }else
              {
                IArray[Vector3] _11MeshVertices;// 9:SoftSelectionOrZeros->4:MeshVertices 187393
                Single _12FloatZero;// 9:SoftSelectionOrZeros->5:FloatZero 187394
                IArray[Single] _13Map;// 6:MapIgnore->3:Map 187391
                _11MeshVertices = MeshVertices(x0);
                _12FloatZero = FloatZero();
                _13Map = Map(_11MeshVertices, (Vector3 x0) => 
                  {
                    Single _0IgnoreSecond;// 6:MapIgnore->5:IgnoreSecond 187392
                    _0IgnoreSecond = IgnoreSecond(_12FloatZero, x0);
                    _0IgnoreSecond;
                    });
                _13Map;
                };
            _15Combine3 = Combine3(_0MeshVertices, _3Map, _14Pass-through: array, (Vector3 x0, Vector3 x1, Single x2) => 
              {
                Vector3 _0Lerp;// 1:LerpMeshVertices->17:Lerp 187293
                _0Lerp = Lerp(x0, x1, x2);
                _0Lerp;
                });
            _16SetMeshVertices = SetMeshVertices(x0, _15Combine3);
            _16SetMeshVertices;
            };
        _1Apply1 = Apply1(_0Pass-through: function1, x0);
        _2IgnoreSecond = IgnoreSecond(_1Apply1, x1);
        _2IgnoreSecond;
        });
    _0Repeat;
    }