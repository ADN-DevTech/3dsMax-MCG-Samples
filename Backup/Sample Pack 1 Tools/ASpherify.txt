(InstanceState state, TriMesh mesh, Boolean ignore X, Boolean ignore Y, Boolean ignore Z, INode helper, Matrix modifierTransform, BoundingBox boundingBox, Single radius, Single spherify) => 
  {
    IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 187443
    IArray[Boolean] _1Unit;// 40:Array3->2:Unit 187497
    IArray[Boolean] _2Append;// 40:Array3->3:Append 187496
    IArray[Boolean] _3Append;// 40:Array3->6:Append 187495
    Boolean _4IsValidNode;// 61:NodePositionOrBoxCenter->40:IsValidNode 187507
    Vector3 _11Pass-through: Vector3;// 60:Pass-through: Vector3 187502
    Func[Vector3, Vector3] _12Pass-through: function1;// 0:Pass-through: function1 187440
    IArray[Vector3] _13Map;// 2:DeformMeshPoints->1:Map 187442
    TriMesh _14SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 187441
    _0MeshVertices = MeshVertices(mesh);
    _1Unit = Unit(ignore X);
    _2Append = Append(_1Unit, ignore Y);
    _3Append = Append(_2Append, ignore Z);
    _4IsValidNode = IsValidNode(helper);
    _11Pass-through: Vector3 = if (_4IsValidNode)
      {
        Matrix _5ObjectTransformBeforeWSM;// 1:NodeTMInLocalSpace->3:ObjectTransformBeforeWSM 187514
        Matrix _6InvertMatrix;// 1:NodeTMInLocalSpace->2:InvertMatrix 187515
        Matrix _7Multiply;// 1:NodeTMInLocalSpace->4:Multiply 187513
        Vector3 _8GetMatrixTranslation;// 3:NodePositionInLocalSpace->3:GetMatrixTranslation 187510
        _5ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(helper);
        _6InvertMatrix = InvertMatrix(modifierTransform);
        _7Multiply = Multiply(_5ObjectTransformBeforeWSM, _6InvertMatrix);
        _8GetMatrixTranslation = GetMatrixTranslation(_7Multiply);
        _8GetMatrixTranslation;
        }else
      {
        BoundingSphere _9SphereFromBox;// 6:BoundingBoxCenter->2:SphereFromBox 187518
        Vector3 _10SphereCenter;// 6:BoundingBoxCenter->3:SphereCenter 187517
        _9SphereFromBox = SphereFromBox(boundingBox);
        _10SphereCenter = SphereCenter(_9SphereFromBox);
        _10SphereCenter;
        };
    _12Pass-through: function1 = (Vector3 x0) => 
      {
        Single _0X;// 3:VectorAsArray->1:X 187479
        IArray[Single] _1Unit;// 4:Array3->2:Unit 187478
        Single _2Y;// 3:VectorAsArray->2:Y 187480
        IArray[Single] _3Append;// 4:Array3->3:Append 187477
        Single _4Z;// 3:VectorAsArray->3:Z 187481
        IArray[Single] _5Append;// 4:Array3->6:Append 187476
        Vector3 _6Subtract;// 59:Subtract 187526
        Vector3 _7Normalize;// 11:SetVectorLength->1:Normalize 187525
        BoundingSphere _8SphereFromBox;// 10:BoundingBoxRadius->1:SphereFromBox 187530
        Single _9SphereRadius;// 10:BoundingBoxRadius->2:SphereRadius 187529
        Single _10Multiply;// 47:Multiply 187527
        Vector3 _11MultiplyByScalar;// 11:SetVectorLength->3:MultiplyByScalar 187524
        Vector3 _12Add;// 3:Add 187501
        Single _13X;// 4:VectorAsArray->1:X 187489
        IArray[Single] _14Unit;// 4:Array3->2:Unit 187488
        Single _15Y;// 4:VectorAsArray->2:Y 187490
        IArray[Single] _16Append;// 4:Array3->3:Append 187487
        Single _17Z;// 4:VectorAsArray->3:Z 187491
        IArray[Single] _18Append;// 4:Array3->6:Append 187486
        IArray[Single] _19Combine3;// 6:ChooseValues->0:Combine3 187467
        Int32 _20Count;// 7:VectorFromArray->11:Count 187453
        Int32 _21Constant;// 7:VectorFromArray->0:Constant 187454
        Boolean _22GreaterThanOrEqual;// 7:VectorFromArray->12:GreaterThanOrEqual 187452
        Vector3 _32Lerp;// 62:Lerp 187445
        _0X = X(x0);
        _1Unit = Unit(_0X);
        _2Y = Y(x0);
        _3Append = Append(_1Unit, _2Y);
        _4Z = Z(x0);
        _5Append = Append(_3Append, _4Z);
        _6Subtract = Subtract(x0, _11Pass-through: Vector3);
        _7Normalize = Normalize(_6Subtract);
        _8SphereFromBox = SphereFromBox(boundingBox);
        _9SphereRadius = SphereRadius(_8SphereFromBox);
        _10Multiply = Multiply(_9SphereRadius, radius);
        _11MultiplyByScalar = MultiplyByScalar(_7Normalize, _10Multiply);
        _12Add = Add(_11Pass-through: Vector3, _11MultiplyByScalar);
        _13X = X(_12Add);
        _14Unit = Unit(_13X);
        _15Y = Y(_12Add);
        _16Append = Append(_14Unit, _15Y);
        _17Z = Z(_12Add);
        _18Append = Append(_16Append, _17Z);
        _19Combine3 = Combine3(_3Append, _5Append, _18Append, (Boolean x0, Single x1, Single x2) => 
          {
            Single _0IfThen;// 4:ChooseValue->4:IfThen 187471
            _0IfThen = IfThen(x0, () => 
              {
                x1;
                }, () => 
              {
                x2;
                });
            _0IfThen;
            });
        _20Count = Count(_19Combine3);
        _21Constant = 3;
        _22GreaterThanOrEqual = GreaterThanOrEqual(_20Count, _21Constant);
        _32Lerp = Lerp(x0, if (_22GreaterThanOrEqual)
          {
            Int32 _23Zero;// 7:VectorFromArray->2:Zero 187457
            Single _24At;// 7:VectorFromArray->1:At 187456
            Int32 _25One;// 7:VectorFromArray->9:One 187459
            Single _26At;// 7:VectorFromArray->3:At 187458
            Int32 _27Two;// 7:VectorFromArray->10:Two 187461
            Single _28At;// 7:VectorFromArray->4:At 187460
            Vector3 _29Vector3;// 7:VectorFromArray->7:Vector3 187455
            _23Zero = Zero();
            _24At = At(_19Combine3, _23Zero);
            _25One = One();
            _26At = At(_19Combine3, _25One);
            _27Two = Two();
            _28At = At(_19Combine3, _27Two);
            _29Vector3 = Vector3(_24At, _26At, _28At);
            _29Vector3;
            }else
          {
            Single _30Constant;// 6:Origin->0:Constant 187463
            Vector3 _31Vector3;// 6:Origin->1:Vector3 187462
            _30Constant = 0;
            _31Vector3 = Vector3(_30Constant, _30Constant, _30Constant);
            _31Vector3;
            }, spherify);
        _32Lerp;
        };
    _13Map = Map(_0MeshVertices, _12Pass-through: function1);
    _14SetMeshVertices = SetMeshVertices(mesh, _13Map);
    _14SetMeshVertices;
    }