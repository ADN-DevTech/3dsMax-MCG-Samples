(InstanceState state, Boolean apply spacing, TriMesh mesh, Int32 flux channel, Boolean bidirectional, INode spline, Boolean world space, Matrix modifierTransform, Single cornerA offset, Single cornerB offset, Boolean scale when spacing, Single max distance, Boolean create mesh, Single box radius) => 
  {
    Boolean _0CanGetSplineFromNode;// 13:SplineFromNodeOrExit->3:CanGetSplineFromNode 181163
    Boolean _1Not;// 13:SplineFromNodeOrExit->5:Not 181162
    INode _2ExitIf;// 13:SplineFromNodeOrExit->4:ExitIf 181161
    Spline _3SplineFromNode;// 13:SplineFromNodeOrExit->0:SplineFromNode 181160
    IArray[Int32] _4SplineSegmentIndices;// 9:SplineLinesInLocalSpace->1:SplineSegmentIndices 181158
    IArray[Vector3] _5SplineVerticesBuffer;// 9:SplineLinesInLocalSpace->2:SplineVerticesBuffer 181173
    IArray[Vector3] _8Pass-through: array;// 0:Pass-through: array 181164
    Matrix _9InvertMatrix;// 9:SplineLinesInLocalSpace->8:InvertMatrix 181175
    IArray[Vector3] _10Map;// 7:TransformPoints->3:Map 181166
    IArray[Vector3] _11Map;// 3:SelectByIndex->2:Map 181156
    Int32 _12Zero;// 4:CombineEveryTwoElements->7:Zero 181150
    Int32 _13Two;// 4:CombineEveryTwoElements->6:Two 181151
    IArray[Vector3] _14Stride;// 4:CombineEveryTwoElements->1:Stride 181149
    Int32 _15One;// 4:CombineEveryTwoElements->8:One 181153
    IArray[Vector3] _16Stride;// 4:CombineEveryTwoElements->2:Stride 181152
    Func[Vector3, Vector3, Line] _17Pass-through: function2;// 0:Pass-through: function2 181147
    IArray[Line] _18Combine;// 4:CombineEveryTwoElements->3:Combine 181148
    IArray[Line] _22Pass-through: array;// 0:Pass-through: array 181135
    Func[Line, IArray[Matrix]] _23Pass-through: function1;// 0:Pass-through: function1 181136
    IArray[IArray[Matrix]] _24Map;// 3:FlatMap->4:Map 181138
    IArray[Matrix] _25Flatten;// 3:FlatMap->3:Flatten 181137
    IArray[Int32] _26Indices;// 43:MapWithIndexes->3:Indices 181134
    Boolean _27True;// 50:True 181318
    Int32 _28Two;// 48:Two 181332
    Func[Matrix, Int32, Matrix] _29Pass-through: any;// 0:Pass-through: any 181132
    IArray[Matrix] _30Combine;// 43:MapWithIndexes->2:Combine 181133
    Func[Matrix, IArray[Vector3]] _31Pass-through: function1;// 0:Pass-through: function1 181117
    IArray[IArray[Vector3]] _32Map;// 5:FlatMap->4:Map 181119
    IArray[Vector3] _33Flatten;// 5:FlatMap->3:Flatten 181118
    IArray[Int32] _34MeshIndices;// 0:StoreMatricesInMapChannel->0:MeshIndices 181128
    TriMesh _35SetMapChannel;// 0:StoreMatricesInMapChannel->7:SetMapChannel 181115
    TriMesh _60Pass-through: TriMesh;// 0:Pass-through: TriMesh 180822
    MapChannel _88GetMapChannel;// 4:MatricesFromMapChannel->9:GetMapChannel 180998
    IArray[Vector3] _89MapChannelVertexBuffer;// 4:MatricesFromMapChannel->8:MapChannelVertexBuffer 180997
    Int32 _90Count;// 2:Slices->2:Count 180994
    Int32 _91Constant;// 4:MatricesFromMapChannel->0:Constant 180999
    Int32 _92Divide;// 2:Slices->3:Divide 180993
    IArray[Int32] _93Range;// 2:Slices->4:Range 180992
    IArray[IArray[Vector3]] _94Map;// 2:Slices->5:Map 180991
    IArray[Matrix] _95Map;// 4:MatricesFromMapChannel->5:Map 180988
    Int32 _96Zero;// 1:CombineEveryTwoElements->7:Zero 180982
    Int32 _97Two;// 1:CombineEveryTwoElements->6:Two 180983
    IArray[Matrix] _98Stride;// 1:CombineEveryTwoElements->1:Stride 180981
    Int32 _99One;// 1:CombineEveryTwoElements->8:One 180985
    IArray[Matrix] _100Stride;// 1:CombineEveryTwoElements->2:Stride 180984
    Func[Matrix, Matrix, IArray[Matrix]] _101Pass-through: function2;// 0:Pass-through: function2 180979
    IArray[IArray[Matrix]] _102Combine;// 1:CombineEveryTwoElements->3:Combine 180980
    IArray[Matrix] _103Flatten;// 25:FluxSpacing->16:Flatten 180977
    TriMesh _132IgnoreFirst;// 1:FluxMeshAsBoxes->7:IgnoreFirst 180826
    _0CanGetSplineFromNode = CanGetSplineFromNode(spline);
    _1Not = Not(_0CanGetSplineFromNode);
    _2ExitIf = ExitIf(spline, _1Not);
    _3SplineFromNode = SplineFromNode(_2ExitIf);
    _4SplineSegmentIndices = SplineSegmentIndices(_3SplineFromNode);
    _5SplineVerticesBuffer = SplineVerticesBuffer(_3SplineFromNode);
    _8Pass-through: array = if (world space)
      {
        Matrix _6ObjectTransformBeforeWSM;// 9:SplineLinesInLocalSpace->12:ObjectTransformBeforeWSM 181174
        IArray[Vector3] _7Map;// 10:TransformPoints->3:Map 181171
        _6ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(spline);
        _7Map = Map(_5SplineVerticesBuffer, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 10:TransformPoints->4:Transform 181172
            _0Transform = Transform(x0, _6ObjectTransformBeforeWSM);
            _0Transform;
            });
        _7Map;
        }else
      {
        _5SplineVerticesBuffer;
        };
    _9InvertMatrix = InvertMatrix(modifierTransform);
    _10Map = Map(_8Pass-through: array, (Vector3 x0) => 
      {
        Vector3 _0Transform;// 7:TransformPoints->4:Transform 181167
        _0Transform = Transform(x0, _9InvertMatrix);
        _0Transform;
        });
    _11Map = Map(_4SplineSegmentIndices, (Int32 x0) => 
      {
        Vector3 _0At;// 3:SelectByIndex->3:At 181157
        _0At = At(_10Map, x0);
        _0At;
        });
    _12Zero = Zero();
    _13Two = Two();
    _14Stride = Stride(_11Map, _12Zero, _13Two);
    _15One = One();
    _16Stride = Stride(_11Map, _15One, _13Two);
    _17Pass-through: function2 = (Vector3 x0, Vector3 x1) => 
      {
        Line _0Line;// 9:SplineLinesInLocalSpace->5:Line 181176
        _0Line = Line(x0, x1);
        _0Line;
        };
    _18Combine = Combine(_14Stride, _16Stride, _17Pass-through: function2);
    _22Pass-through: array = if (bidirectional)
      {
        IArray[Line] _19Reverse;// 18:Reverse 181181
        IArray[Line] _20Map;// 19:Map 181180
        IArray[Line] _21Concatenate;// 15:Concatenate 181141
        _19Reverse = Reverse(_18Combine);
        _20Map = Map(_19Reverse, (Line x0) => 
          {
            Vector3 _0LineB;// 12:LineReverse->2:LineB 181184
            Vector3 _1LineA;// 12:LineReverse->3:LineA 181185
            Line _2Line;// 12:LineReverse->1:Line 181183
            _0LineB = LineB(x0);
            _1LineA = LineA(x0);
            _2Line = Line(_0LineB, _1LineA);
            _2Line;
            });
        _21Concatenate = Concatenate(_18Combine, _20Map);
        _21Concatenate;
        }else
      {
        _18Combine;
        };
    _23Pass-through: function1 = (Line x0) => 
      {
        Vector3 _0LineB;// 12:LineVector->2:LineB 181300
        Vector3 _1LineA;// 12:LineVector->1:LineA 181301
        Vector3 _2Subtract;// 12:LineVector->3:Subtract 181299
        Single _3Length;// 8:VectorIsSmall->3:Length 181202
        Single _4Constant;// 4:VectorLengthEpsilon->0:Constant 181203
        Boolean _5LessThan;// 8:VectorIsSmall->5:LessThan 181201
        Matrix _6MatrixIdentity;// 5:LineMatrices->2:MatrixIdentity 181302
        Vector3 _106LineA;// 5:LineMatrices->4:LineA 181303
        Matrix _107SetMatrixTranslation;// 5:LineMatrices->3:SetMatrixTranslation 181191
        IArray[Matrix] _108Unit;// 7:Array2->2:Unit 181190
        Vector3 _208LineB;// 5:LineMatrices->9:LineB 181305
        Matrix _209SetMatrixTranslation;// 5:LineMatrices->8:SetMatrixTranslation 181304
        IArray[Matrix] _210Append;// 7:Array2->3:Append 181189
        _0LineB = LineB(x0);
        _1LineA = LineA(x0);
        _2Subtract = Subtract(_0LineB, _1LineA);
        _3Length = Length(_2Subtract);
        _4Constant = 1E-06;
        _5LessThan = LessThan(_3Length, _4Constant);
        _6MatrixIdentity = MatrixIdentity();
        _106LineA = LineA(x0);
        _107SetMatrixTranslation = SetMatrixTranslation(if (_5LessThan)
          {
            _6MatrixIdentity;
            }else
          {
            Vector3 _7ZAxis;// 11:MatrixLookatDefault->1:ZAxis 181295
            Vector3 _8YAxis;// 11:MatrixLookatDefault->3:YAxis 181296
            Vector3 _9IgnoreFirst;// 0:MatrixLookat->4:IgnoreFirst 181249
            Matrix _10InvertMatrix;// 0:MatrixOrientAroundAxis->16:InvertMatrix 181294
            Vector3 _11Transform;// 0:MatrixOrientAroundAxis->13:Transform 181293
            Vector3 _12Normalize;// 0:MatrixOrientAroundAxis->15:Normalize 181292
            Single _13Dot;// 5:Projection->3:Dot 181290
            Single _14LengthSquared;// 5:Projection->4:LengthSquared 181291
            Single _15Divide;// 5:Projection->5:Divide 181289
            Vector3 _16MultiplyByScalar;// 5:Projection->2:MultiplyByScalar 181288
            Vector3 _17Subtract;// 6:ProjectionOntoPlaneSpecifiedByNormal->3:Subtract 181285
            Vector3 _18XAxis;// 11:MatrixLookatDefault->2:XAxis 181297
            Vector3 _19Cross;// 12:VectorAngleSigned->5:Cross 181264
            Single _20Dot;// 12:VectorAngleSigned->4:Dot 181263
            Single _21FloatZero;// 7:GtEqZ->1:FloatZero 181262
            Boolean _22GreaterThanOrEqual;// 7:GtEqZ->2:GreaterThanOrEqual 181261
            Single _23Length;// 8:VectorIsSmall->3:Length 181272
            Single _24Constant;// 4:VectorLengthEpsilon->0:Constant 181273
            Boolean _25LessThan;// 8:VectorIsSmall->5:LessThan 181271
            Single _26Length;// 9:VectorIsSmall->3:Length 181276
            Single _27Constant;// 4:VectorLengthEpsilon->0:Constant 181277
            Boolean _28LessThan;// 9:VectorIsSmall->5:LessThan 181275
            Boolean _29OrElse;// 3:AngleOfVectorsFix->10:OrElse 181269
            Matrix _46MatrixFromAxisAngle;// 0:MatrixOrientAroundAxis->10:MatrixFromAxisAngle 181255
            Matrix _47Multiply;// 0:MatrixOrientAroundAxis->9:Multiply 181254
            Matrix _48InvertMatrix;// 6:MatrixOrientAroundAxis->16:InvertMatrix 181248
            Vector3 _49Transform;// 6:MatrixOrientAroundAxis->13:Transform 181247
            Vector3 _50Normalize;// 6:MatrixOrientAroundAxis->15:Normalize 181246
            Single _51Dot;// 5:Projection->3:Dot 181244
            Single _52LengthSquared;// 5:Projection->4:LengthSquared 181245
            Single _53Divide;// 5:Projection->5:Divide 181243
            Vector3 _54MultiplyByScalar;// 5:Projection->2:MultiplyByScalar 181242
            Vector3 _55Subtract;// 6:ProjectionOntoPlaneSpecifiedByNormal->3:Subtract 181239
            Vector3 _56Cross;// 12:VectorAngleSigned->5:Cross 181218
            Single _57Dot;// 12:VectorAngleSigned->4:Dot 181217
            Single _58FloatZero;// 7:GtEqZ->1:FloatZero 181216
            Boolean _59GreaterThanOrEqual;// 7:GtEqZ->2:GreaterThanOrEqual 181215
            Single _60Length;// 8:VectorIsSmall->3:Length 181226
            Single _61Constant;// 4:VectorLengthEpsilon->0:Constant 181227
            Boolean _62LessThan;// 8:VectorIsSmall->5:LessThan 181225
            Single _63Length;// 9:VectorIsSmall->3:Length 181230
            Single _64Constant;// 4:VectorLengthEpsilon->0:Constant 181231
            Boolean _65LessThan;// 9:VectorIsSmall->5:LessThan 181229
            Boolean _66OrElse;// 3:AngleOfVectorsFix->10:OrElse 181223
            Matrix _104MatrixFromAxisAngle;// 6:MatrixOrientAroundAxis->10:MatrixFromAxisAngle 181209
            Matrix _105Multiply;// 6:MatrixOrientAroundAxis->9:Multiply 181208
            _7ZAxis = ZAxis();
            _8YAxis = YAxis();
            _9IgnoreFirst = IgnoreFirst(_7ZAxis, _8YAxis);
            _10InvertMatrix = InvertMatrix(_6MatrixIdentity);
            _11Transform = Transform(_2Subtract, _10InvertMatrix);
            _12Normalize = Normalize(_11Transform);
            _13Dot = Dot(_12Normalize, _7ZAxis);
            _14LengthSquared = LengthSquared(_7ZAxis);
            _15Divide = Divide(_13Dot, _14LengthSquared);
            _16MultiplyByScalar = MultiplyByScalar(_7ZAxis, _15Divide);
            _17Subtract = Subtract(_12Normalize, _16MultiplyByScalar);
            _18XAxis = XAxis();
            _19Cross = Cross(_17Subtract, _18XAxis);
            _20Dot = Dot(_7ZAxis, _19Cross);
            _21FloatZero = FloatZero();
            _22GreaterThanOrEqual = GreaterThanOrEqual(_20Dot, _21FloatZero);
            _23Length = Length(_17Subtract);
            _24Constant = 1E-06;
            _25LessThan = LessThan(_23Length, _24Constant);
            _26Length = Length(_18XAxis);
            _27Constant = 1E-06;
            _28LessThan = LessThan(_26Length, _27Constant);
            _29OrElse = OrElse(_25LessThan, _28LessThan);
            _46MatrixFromAxisAngle = MatrixFromAxisAngle(_7ZAxis, if (_22GreaterThanOrEqual)
              {
                Single _40NegativeFloat;// 12:VectorAngleSigned->6:NegativeFloat 181265
                _40NegativeFloat = NegativeFloat(if (_29OrElse)
                  {
                    Single _35FloatZero;// 3:AngleOfVectorsFix->5:FloatZero 181278
                    _35FloatZero = FloatZero();
                    _35FloatZero;
                    }else
                  {
                    Vector3 _36Cross;// 3:AngleOfVectorsFix->11:Cross 181281
                    Single _37Length;// 3:AngleOfVectorsFix->3:Length 181280
                    Single _38Dot;// 3:AngleOfVectorsFix->12:Dot 181282
                    Single _39Atan2;// 3:AngleOfVectorsFix->2:Atan2 181279
                    _36Cross = Cross(_17Subtract, _18XAxis);
                    _37Length = Length(_36Cross);
                    _38Dot = Dot(_17Subtract, _18XAxis);
                    _39Atan2 = Atan2(_37Length, _38Dot);
                    _39Atan2;
                    });
                _40NegativeFloat;
                }else
              {
                if (_29OrElse)
                  {
                    Single _41FloatZero;// 3:AngleOfVectorsFix->5:FloatZero 181278
                    _41FloatZero = FloatZero();
                    _41FloatZero;
                    }else
                  {
                    Vector3 _42Cross;// 3:AngleOfVectorsFix->11:Cross 181281
                    Single _43Length;// 3:AngleOfVectorsFix->3:Length 181280
                    Single _44Dot;// 3:AngleOfVectorsFix->12:Dot 181282
                    Single _45Atan2;// 3:AngleOfVectorsFix->2:Atan2 181279
                    _42Cross = Cross(_17Subtract, _18XAxis);
                    _43Length = Length(_42Cross);
                    _44Dot = Dot(_17Subtract, _18XAxis);
                    _45Atan2 = Atan2(_43Length, _44Dot);
                    _45Atan2;
                    };
                });
            _47Multiply = Multiply(_46MatrixFromAxisAngle, _6MatrixIdentity);
            _48InvertMatrix = InvertMatrix(_47Multiply);
            _49Transform = Transform(_2Subtract, _48InvertMatrix);
            _50Normalize = Normalize(_49Transform);
            _51Dot = Dot(_50Normalize, _9IgnoreFirst);
            _52LengthSquared = LengthSquared(_9IgnoreFirst);
            _53Divide = Divide(_51Dot, _52LengthSquared);
            _54MultiplyByScalar = MultiplyByScalar(_9IgnoreFirst, _53Divide);
            _55Subtract = Subtract(_50Normalize, _54MultiplyByScalar);
            _56Cross = Cross(_55Subtract, _18XAxis);
            _57Dot = Dot(_9IgnoreFirst, _56Cross);
            _58FloatZero = FloatZero();
            _59GreaterThanOrEqual = GreaterThanOrEqual(_57Dot, _58FloatZero);
            _60Length = Length(_55Subtract);
            _61Constant = 1E-06;
            _62LessThan = LessThan(_60Length, _61Constant);
            _63Length = Length(_18XAxis);
            _64Constant = 1E-06;
            _65LessThan = LessThan(_63Length, _64Constant);
            _66OrElse = OrElse(_62LessThan, _65LessThan);
            _104MatrixFromAxisAngle = MatrixFromAxisAngle(_9IgnoreFirst, if (_59GreaterThanOrEqual)
              {
                Single _98NegativeFloat;// 12:VectorAngleSigned->6:NegativeFloat 181219
                _98NegativeFloat = NegativeFloat(if (_66OrElse)
                  {
                    Single _93FloatZero;// 3:AngleOfVectorsFix->5:FloatZero 181232
                    _93FloatZero = FloatZero();
                    _93FloatZero;
                    }else
                  {
                    Vector3 _94Cross;// 3:AngleOfVectorsFix->11:Cross 181235
                    Single _95Length;// 3:AngleOfVectorsFix->3:Length 181234
                    Single _96Dot;// 3:AngleOfVectorsFix->12:Dot 181236
                    Single _97Atan2;// 3:AngleOfVectorsFix->2:Atan2 181233
                    _94Cross = Cross(_55Subtract, _18XAxis);
                    _95Length = Length(_94Cross);
                    _96Dot = Dot(_55Subtract, _18XAxis);
                    _97Atan2 = Atan2(_95Length, _96Dot);
                    _97Atan2;
                    });
                _98NegativeFloat;
                }else
              {
                if (_66OrElse)
                  {
                    Single _99FloatZero;// 3:AngleOfVectorsFix->5:FloatZero 181232
                    _99FloatZero = FloatZero();
                    _99FloatZero;
                    }else
                  {
                    Vector3 _100Cross;// 3:AngleOfVectorsFix->11:Cross 181235
                    Single _101Length;// 3:AngleOfVectorsFix->3:Length 181234
                    Single _102Dot;// 3:AngleOfVectorsFix->12:Dot 181236
                    Single _103Atan2;// 3:AngleOfVectorsFix->2:Atan2 181233
                    _100Cross = Cross(_55Subtract, _18XAxis);
                    _101Length = Length(_100Cross);
                    _102Dot = Dot(_55Subtract, _18XAxis);
                    _103Atan2 = Atan2(_101Length, _102Dot);
                    _103Atan2;
                    };
                });
            _105Multiply = Multiply(_104MatrixFromAxisAngle, _47Multiply);
            _105Multiply;
            }, _106LineA);
        _108Unit = Unit(_107SetMatrixTranslation);
        _208LineB = LineB(x0);
        _209SetMatrixTranslation = SetMatrixTranslation(if (_5LessThan)
          {
            _6MatrixIdentity;
            }else
          {
            Vector3 _109ZAxis;// 11:MatrixLookatDefault->1:ZAxis 181295
            Vector3 _110YAxis;// 11:MatrixLookatDefault->3:YAxis 181296
            Vector3 _111IgnoreFirst;// 0:MatrixLookat->4:IgnoreFirst 181249
            Matrix _112InvertMatrix;// 0:MatrixOrientAroundAxis->16:InvertMatrix 181294
            Vector3 _113Transform;// 0:MatrixOrientAroundAxis->13:Transform 181293
            Vector3 _114Normalize;// 0:MatrixOrientAroundAxis->15:Normalize 181292
            Single _115Dot;// 5:Projection->3:Dot 181290
            Single _116LengthSquared;// 5:Projection->4:LengthSquared 181291
            Single _117Divide;// 5:Projection->5:Divide 181289
            Vector3 _118MultiplyByScalar;// 5:Projection->2:MultiplyByScalar 181288
            Vector3 _119Subtract;// 6:ProjectionOntoPlaneSpecifiedByNormal->3:Subtract 181285
            Vector3 _120XAxis;// 11:MatrixLookatDefault->2:XAxis 181297
            Vector3 _121Cross;// 12:VectorAngleSigned->5:Cross 181264
            Single _122Dot;// 12:VectorAngleSigned->4:Dot 181263
            Single _123FloatZero;// 7:GtEqZ->1:FloatZero 181262
            Boolean _124GreaterThanOrEqual;// 7:GtEqZ->2:GreaterThanOrEqual 181261
            Single _125Length;// 8:VectorIsSmall->3:Length 181272
            Single _126Constant;// 4:VectorLengthEpsilon->0:Constant 181273
            Boolean _127LessThan;// 8:VectorIsSmall->5:LessThan 181271
            Single _128Length;// 9:VectorIsSmall->3:Length 181276
            Single _129Constant;// 4:VectorLengthEpsilon->0:Constant 181277
            Boolean _130LessThan;// 9:VectorIsSmall->5:LessThan 181275
            Boolean _131OrElse;// 3:AngleOfVectorsFix->10:OrElse 181269
            Matrix _148MatrixFromAxisAngle;// 0:MatrixOrientAroundAxis->10:MatrixFromAxisAngle 181255
            Matrix _149Multiply;// 0:MatrixOrientAroundAxis->9:Multiply 181254
            Matrix _150InvertMatrix;// 6:MatrixOrientAroundAxis->16:InvertMatrix 181248
            Vector3 _151Transform;// 6:MatrixOrientAroundAxis->13:Transform 181247
            Vector3 _152Normalize;// 6:MatrixOrientAroundAxis->15:Normalize 181246
            Single _153Dot;// 5:Projection->3:Dot 181244
            Single _154LengthSquared;// 5:Projection->4:LengthSquared 181245
            Single _155Divide;// 5:Projection->5:Divide 181243
            Vector3 _156MultiplyByScalar;// 5:Projection->2:MultiplyByScalar 181242
            Vector3 _157Subtract;// 6:ProjectionOntoPlaneSpecifiedByNormal->3:Subtract 181239
            Vector3 _158Cross;// 12:VectorAngleSigned->5:Cross 181218
            Single _159Dot;// 12:VectorAngleSigned->4:Dot 181217
            Single _160FloatZero;// 7:GtEqZ->1:FloatZero 181216
            Boolean _161GreaterThanOrEqual;// 7:GtEqZ->2:GreaterThanOrEqual 181215
            Single _162Length;// 8:VectorIsSmall->3:Length 181226
            Single _163Constant;// 4:VectorLengthEpsilon->0:Constant 181227
            Boolean _164LessThan;// 8:VectorIsSmall->5:LessThan 181225
            Single _165Length;// 9:VectorIsSmall->3:Length 181230
            Single _166Constant;// 4:VectorLengthEpsilon->0:Constant 181231
            Boolean _167LessThan;// 9:VectorIsSmall->5:LessThan 181229
            Boolean _168OrElse;// 3:AngleOfVectorsFix->10:OrElse 181223
            Matrix _206MatrixFromAxisAngle;// 6:MatrixOrientAroundAxis->10:MatrixFromAxisAngle 181209
            Matrix _207Multiply;// 6:MatrixOrientAroundAxis->9:Multiply 181208
            _109ZAxis = ZAxis();
            _110YAxis = YAxis();
            _111IgnoreFirst = IgnoreFirst(_109ZAxis, _110YAxis);
            _112InvertMatrix = InvertMatrix(_6MatrixIdentity);
            _113Transform = Transform(_2Subtract, _112InvertMatrix);
            _114Normalize = Normalize(_113Transform);
            _115Dot = Dot(_114Normalize, _109ZAxis);
            _116LengthSquared = LengthSquared(_109ZAxis);
            _117Divide = Divide(_115Dot, _116LengthSquared);
            _118MultiplyByScalar = MultiplyByScalar(_109ZAxis, _117Divide);
            _119Subtract = Subtract(_114Normalize, _118MultiplyByScalar);
            _120XAxis = XAxis();
            _121Cross = Cross(_119Subtract, _120XAxis);
            _122Dot = Dot(_109ZAxis, _121Cross);
            _123FloatZero = FloatZero();
            _124GreaterThanOrEqual = GreaterThanOrEqual(_122Dot, _123FloatZero);
            _125Length = Length(_119Subtract);
            _126Constant = 1E-06;
            _127LessThan = LessThan(_125Length, _126Constant);
            _128Length = Length(_120XAxis);
            _129Constant = 1E-06;
            _130LessThan = LessThan(_128Length, _129Constant);
            _131OrElse = OrElse(_127LessThan, _130LessThan);
            _148MatrixFromAxisAngle = MatrixFromAxisAngle(_109ZAxis, if (_124GreaterThanOrEqual)
              {
                Single _142NegativeFloat;// 12:VectorAngleSigned->6:NegativeFloat 181265
                _142NegativeFloat = NegativeFloat(if (_131OrElse)
                  {
                    Single _137FloatZero;// 3:AngleOfVectorsFix->5:FloatZero 181278
                    _137FloatZero = FloatZero();
                    _137FloatZero;
                    }else
                  {
                    Vector3 _138Cross;// 3:AngleOfVectorsFix->11:Cross 181281
                    Single _139Length;// 3:AngleOfVectorsFix->3:Length 181280
                    Single _140Dot;// 3:AngleOfVectorsFix->12:Dot 181282
                    Single _141Atan2;// 3:AngleOfVectorsFix->2:Atan2 181279
                    _138Cross = Cross(_119Subtract, _120XAxis);
                    _139Length = Length(_138Cross);
                    _140Dot = Dot(_119Subtract, _120XAxis);
                    _141Atan2 = Atan2(_139Length, _140Dot);
                    _141Atan2;
                    });
                _142NegativeFloat;
                }else
              {
                if (_131OrElse)
                  {
                    Single _143FloatZero;// 3:AngleOfVectorsFix->5:FloatZero 181278
                    _143FloatZero = FloatZero();
                    _143FloatZero;
                    }else
                  {
                    Vector3 _144Cross;// 3:AngleOfVectorsFix->11:Cross 181281
                    Single _145Length;// 3:AngleOfVectorsFix->3:Length 181280
                    Single _146Dot;// 3:AngleOfVectorsFix->12:Dot 181282
                    Single _147Atan2;// 3:AngleOfVectorsFix->2:Atan2 181279
                    _144Cross = Cross(_119Subtract, _120XAxis);
                    _145Length = Length(_144Cross);
                    _146Dot = Dot(_119Subtract, _120XAxis);
                    _147Atan2 = Atan2(_145Length, _146Dot);
                    _147Atan2;
                    };
                });
            _149Multiply = Multiply(_148MatrixFromAxisAngle, _6MatrixIdentity);
            _150InvertMatrix = InvertMatrix(_149Multiply);
            _151Transform = Transform(_2Subtract, _150InvertMatrix);
            _152Normalize = Normalize(_151Transform);
            _153Dot = Dot(_152Normalize, _111IgnoreFirst);
            _154LengthSquared = LengthSquared(_111IgnoreFirst);
            _155Divide = Divide(_153Dot, _154LengthSquared);
            _156MultiplyByScalar = MultiplyByScalar(_111IgnoreFirst, _155Divide);
            _157Subtract = Subtract(_152Normalize, _156MultiplyByScalar);
            _158Cross = Cross(_157Subtract, _120XAxis);
            _159Dot = Dot(_111IgnoreFirst, _158Cross);
            _160FloatZero = FloatZero();
            _161GreaterThanOrEqual = GreaterThanOrEqual(_159Dot, _160FloatZero);
            _162Length = Length(_157Subtract);
            _163Constant = 1E-06;
            _164LessThan = LessThan(_162Length, _163Constant);
            _165Length = Length(_120XAxis);
            _166Constant = 1E-06;
            _167LessThan = LessThan(_165Length, _166Constant);
            _168OrElse = OrElse(_164LessThan, _167LessThan);
            _206MatrixFromAxisAngle = MatrixFromAxisAngle(_111IgnoreFirst, if (_161GreaterThanOrEqual)
              {
                Single _200NegativeFloat;// 12:VectorAngleSigned->6:NegativeFloat 181219
                _200NegativeFloat = NegativeFloat(if (_168OrElse)
                  {
                    Single _195FloatZero;// 3:AngleOfVectorsFix->5:FloatZero 181232
                    _195FloatZero = FloatZero();
                    _195FloatZero;
                    }else
                  {
                    Vector3 _196Cross;// 3:AngleOfVectorsFix->11:Cross 181235
                    Single _197Length;// 3:AngleOfVectorsFix->3:Length 181234
                    Single _198Dot;// 3:AngleOfVectorsFix->12:Dot 181236
                    Single _199Atan2;// 3:AngleOfVectorsFix->2:Atan2 181233
                    _196Cross = Cross(_157Subtract, _120XAxis);
                    _197Length = Length(_196Cross);
                    _198Dot = Dot(_157Subtract, _120XAxis);
                    _199Atan2 = Atan2(_197Length, _198Dot);
                    _199Atan2;
                    });
                _200NegativeFloat;
                }else
              {
                if (_168OrElse)
                  {
                    Single _201FloatZero;// 3:AngleOfVectorsFix->5:FloatZero 181232
                    _201FloatZero = FloatZero();
                    _201FloatZero;
                    }else
                  {
                    Vector3 _202Cross;// 3:AngleOfVectorsFix->11:Cross 181235
                    Single _203Length;// 3:AngleOfVectorsFix->3:Length 181234
                    Single _204Dot;// 3:AngleOfVectorsFix->12:Dot 181236
                    Single _205Atan2;// 3:AngleOfVectorsFix->2:Atan2 181233
                    _202Cross = Cross(_157Subtract, _120XAxis);
                    _203Length = Length(_202Cross);
                    _204Dot = Dot(_157Subtract, _120XAxis);
                    _205Atan2 = Atan2(_203Length, _204Dot);
                    _205Atan2;
                    };
                });
            _207Multiply = Multiply(_206MatrixFromAxisAngle, _149Multiply);
            _207Multiply;
            }, _208LineB);
        _210Append = Append(_108Unit, _209SetMatrixTranslation);
        _210Append;
        };
    _24Map = Map(_22Pass-through: array, _23Pass-through: function1);
    _25Flatten = Flatten(_24Map);
    _26Indices = Indices(_25Flatten);
    _27True = True();
    _28Two = Two();
    _29Pass-through: any = (Matrix x0, Int32 x1) => 
      {
        Boolean _0IgnoreFirst;// 54:IgnoreFirst 181316
        Vector3 _1XAxis;// 51:AlongXAxis->0:XAxis 181321
        Int32 _2Modulo;// 4:ModuloEquals->3:Modulo 181329
        Int32 _3Zero;// 45:ModuloEqualsZero->3:Zero 181330
        Boolean _4Equal;// 4:ModuloEquals->4:Equal 181328
        Single _5Pass-through: Single;// 0:Pass-through: Single 181319
        Vector3 _6MultiplyByScalar;// 51:AlongXAxis->1:MultiplyByScalar 181320
        Matrix _7TranslationMatrix;// 49:MatrixTranslate->10:TranslationMatrix 181315
        _0IgnoreFirst = IgnoreFirst(x0, _27True);
        _1XAxis = XAxis();
        _2Modulo = Modulo(x1, _28Two);
        _3Zero = Zero();
        _4Equal = Equal(_2Modulo, _3Zero);
        _5Pass-through: Single = if (_4Equal)
          {
            cornerA offset;
            }else
          {
            cornerB offset;
            };
        _6MultiplyByScalar = MultiplyByScalar(_1XAxis, _5Pass-through: Single);
        _7TranslationMatrix = TranslationMatrix(_6MultiplyByScalar);
        if (_0IgnoreFirst)
          {
            Matrix _8Multiply;// 6:MatrixApplyTransform->4:Multiply 181313
            _8Multiply = Multiply(_7TranslationMatrix, x0);
            _8Multiply;
            }else
          {
            Matrix _9Multiply;// 6:MatrixApplyTransform->9:Multiply 181314
            _9Multiply = Multiply(x0, _7TranslationMatrix);
            _9Multiply;
            };
        };
    _30Combine = Combine(_25Flatten, _26Indices, _29Pass-through: any);
    _31Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 181123
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 181122
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 181121
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 181127
            Int32 _1Add;// 5:PlusOne->0:Add 181126
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 181124
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _32Map = Map(_30Combine, _31Pass-through: function1);
    _33Flatten = Flatten(_32Map);
    _34MeshIndices = MeshIndices(mesh);
    _35SetMapChannel = SetMapChannel(mesh, flux channel, _33Flatten, _34MeshIndices);
    _60Pass-through: TriMesh = if (apply spacing)
      {
        MapChannel _39GetMapChannel;// 4:MatricesFromMapChannel->9:GetMapChannel 180998
        IArray[Vector3] _40MapChannelVertexBuffer;// 4:MatricesFromMapChannel->8:MapChannelVertexBuffer 180997
        Int32 _41Count;// 2:Slices->2:Count 180994
        Int32 _42Constant;// 4:MatricesFromMapChannel->0:Constant 180999
        Int32 _43Divide;// 2:Slices->3:Divide 180993
        IArray[Int32] _44Range;// 2:Slices->4:Range 180992
        IArray[IArray[Vector3]] _45Map;// 2:Slices->5:Map 180991
        IArray[Matrix] _46Map;// 4:MatricesFromMapChannel->5:Map 180988
        Int32 _47Zero;// 1:CombineEveryTwoElements->7:Zero 180982
        Int32 _48Two;// 1:CombineEveryTwoElements->6:Two 180983
        IArray[Matrix] _49Stride;// 1:CombineEveryTwoElements->1:Stride 180981
        Int32 _50One;// 1:CombineEveryTwoElements->8:One 180985
        IArray[Matrix] _51Stride;// 1:CombineEveryTwoElements->2:Stride 180984
        Func[Matrix, Matrix, IArray[Matrix]] _52Pass-through: function2;// 0:Pass-through: function2 180979
        IArray[IArray[Matrix]] _53Combine;// 1:CombineEveryTwoElements->3:Combine 180980
        IArray[Matrix] _54Flatten;// 25:FluxSpacing->16:Flatten 180977
        Func[Matrix, IArray[Vector3]] _55Pass-through: function1;// 0:Pass-through: function1 180965
        IArray[IArray[Vector3]] _56Map;// 5:FlatMap->4:Map 180967
        IArray[Vector3] _57Flatten;// 5:FlatMap->3:Flatten 180966
        IArray[Int32] _58MeshIndices;// 11:StoreMatricesInMapChannel->0:MeshIndices 180976
        TriMesh _59SetMapChannel;// 11:StoreMatricesInMapChannel->7:SetMapChannel 180963
        _39GetMapChannel = GetMapChannel(_35SetMapChannel, flux channel);
        _40MapChannelVertexBuffer = MapChannelVertexBuffer(_39GetMapChannel);
        _41Count = Count(_40MapChannelVertexBuffer);
        _42Constant = 4;
        _43Divide = Divide(_41Count, _42Constant);
        _44Range = Range(_43Divide);
        _45Map = Map(_44Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 180996
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 180995
            _0Multiply = Multiply(_42Constant, x0);
            _1Slice = Slice(_40MapChannelVertexBuffer, _0Multiply, _42Constant);
            _1Slice;
            });
        _46Map = Map(_45Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 181008
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 181009
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 181013
            Vector3 _3At;// 6:MatrixFromRows->3:At 181012
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 181007
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 181010
            Int32 _6One;// 8:PlusOne->1:One 181017
            Int32 _7Add;// 8:PlusOne->0:Add 181016
            Vector3 _8At;// 6:MatrixFromRows->4:At 181014
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 181006
            Int32 _10Constant;// 25:Three->0:Constant 181011
            Int32 _11One;// 9:PlusOne->1:One 181021
            Int32 _12Add;// 9:PlusOne->0:Add 181020
            Vector3 _13At;// 6:MatrixFromRows->5:At 181018
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 181005
            Int32 _15One;// 10:PlusOne->1:One 181025
            Int32 _16Add;// 10:PlusOne->0:Add 181024
            Vector3 _17At;// 6:MatrixFromRows->6:At 181022
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 181001
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _47Zero = Zero();
        _48Two = Two();
        _49Stride = Stride(_46Map, _47Zero, _48Two);
        _50One = One();
        _51Stride = Stride(_46Map, _50One, _48Two);
        _52Pass-through: function2 = (Matrix x0, Matrix x1) => 
          {
            Vector3 _0GetMatrixTranslation;// 6:MatrixDistance->0:GetMatrixTranslation 181057
            Vector3 _1GetMatrixTranslation;// 6:MatrixDistance->1:GetMatrixTranslation 181058
            Single _2Distance;// 6:MatrixDistance->2:Distance 181056
            Single _3Divide;// 6:MatrixInterpolateWithSpacingAndScaling->7:Divide 181053
            Int32 _4Floor;// 6:MatrixInterpolateWithSpacingAndScaling->8:Floor 181052
            Int32 _5One;// 20:PlusOne->1:One 181051
            Int32 _6Add;// 20:PlusOne->0:Add 181050
            IArray[Single] _7RangeInclusiveFloat;// 19:SampleLerp->2:RangeInclusiveFloat 181048
            Func[Single, Matrix] _8Pass-through: function1;// 0:Pass-through: function1 181046
            IArray[Matrix] _9Map;// 19:SampleLerp->3:Map 181047
            Int32 _10Count;// 3:LastIndex->2:Count 181041
            Int32 _11One;// 3:MinusOne->2:One 181040
            Int32 _12Subtract;// 3:MinusOne->1:Subtract 181039
            IArray[Matrix] _13Take;// 1:DropLast->2:Take 181036
            Int32 _14One;// 2:SkipOne->2:One 181044
            IArray[Matrix] _15Skip;// 2:SkipOne->3:Skip 181043
            Single _16Constant;// 6:MatrixInterpolateWithSpacingAndScaling->0:Constant 181095
            Func[Matrix, Matrix, Matrix] _17Pass-through: function2;// 0:Pass-through: function2 181033
            IArray[Matrix] _18Combine;// 21:CombinePairwiseElements->3:Combine 181034
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _1GetMatrixTranslation = GetMatrixTranslation(x1);
            _2Distance = Distance(_0GetMatrixTranslation, _1GetMatrixTranslation);
            _3Divide = Divide(_2Distance, max distance);
            _4Floor = Floor(_3Divide);
            _5One = One();
            _6Add = Add(_4Floor, _5One);
            _7RangeInclusiveFloat = RangeInclusiveFloat(_6Add);
            _8Pass-through: function1 = (Single x0) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 181069
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 181070
                Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 181068
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 181072
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 181073
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 181071
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 181075
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 181076
                Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 181074
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 181067
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, x0);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, x0);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, x0);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _9Map = Map(_7RangeInclusiveFloat, _8Pass-through: function1);
            _10Count = Count(_9Map);
            _11One = One();
            _12Subtract = Subtract(_10Count, _11One);
            _13Take = Take(_9Map, _12Subtract);
            _14One = One();
            _15Skip = Skip(_9Map, _14One);
            _16Constant = 0.5;
            _17Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 181087
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 181088
                Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 181086
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 181090
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 181091
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 181089
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 181093
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 181094
                Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 181092
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 181085
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _16Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _16Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _16Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _18Combine = Combine(_13Take, _15Skip, _17Pass-through: function2);
            if (scale when spacing)
              {
                Boolean _19True;// 6:MatrixInterpolateWithSpacingAndScaling->18:True 181102
                Single _20IntAsFloat;// 6:MatrixInterpolateWithSpacingAndScaling->16:IntAsFloat 181109
                Single _21Divide;// 6:MatrixInterpolateWithSpacingAndScaling->15:Divide 181108
                Single _22FloatOne;// 6:MatrixInterpolateWithSpacingAndScaling->14:FloatOne 181110
                Vector3 _23Vector3;// 6:MatrixInterpolateWithSpacingAndScaling->12:Vector3 181107
                Single _24Constant;// 8:Origin->0:Constant 181106
                Vector3 _25Vector3;// 8:Origin->1:Vector3 181105
                Matrix _26ScalingTranslationMatrix;// 13:ScalingMatrix->4:ScalingTranslationMatrix 181104
                IArray[Matrix] _27Map;// 6:MatrixInterpolateWithSpacingAndScaling->11:Map 181031
                _19True = True();
                _20IntAsFloat = IntAsFloat(_4Floor);
                _21Divide = Divide(_3Divide, _20IntAsFloat);
                _22FloatOne = FloatOne();
                _23Vector3 = Vector3(_21Divide, _22FloatOne, _22FloatOne);
                _24Constant = 0;
                _25Vector3 = Vector3(_24Constant, _24Constant, _24Constant);
                _26ScalingTranslationMatrix = ScalingTranslationMatrix(_23Vector3, _25Vector3);
                _27Map = Map(_18Combine, (Matrix x0) => 
                  {
                    if (_19True)
                      {
                        Matrix _0Multiply;// 17:MatrixApplyTransform->4:Multiply 181100
                        _0Multiply = Multiply(_26ScalingTranslationMatrix, x0);
                        _0Multiply;
                        }else
                      {
                        Matrix _1Multiply;// 17:MatrixApplyTransform->9:Multiply 181101
                        _1Multiply = Multiply(x0, _26ScalingTranslationMatrix);
                        _1Multiply;
                        };
                    });
                _27Map;
                }else
              {
                _18Combine;
                };
            };
        _53Combine = Combine(_49Stride, _51Stride, _52Pass-through: function2);
        _54Flatten = Flatten(_53Combine);
        _55Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 180971
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 180970
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 180969
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 180975
                Int32 _1Add;// 5:PlusOne->0:Add 180974
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 180972
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _56Map = Map(_54Flatten, _55Pass-through: function1);
        _57Flatten = Flatten(_56Map);
        _58MeshIndices = MeshIndices(_35SetMapChannel);
        _59SetMapChannel = SetMapChannel(_35SetMapChannel, flux channel, _57Flatten, _58MeshIndices);
        _59SetMapChannel;
        }else
      {
        _35SetMapChannel;
        };
    _88GetMapChannel = GetMapChannel(_35SetMapChannel, flux channel);
    _89MapChannelVertexBuffer = MapChannelVertexBuffer(_88GetMapChannel);
    _90Count = Count(_89MapChannelVertexBuffer);
    _91Constant = 4;
    _92Divide = Divide(_90Count, _91Constant);
    _93Range = Range(_92Divide);
    _94Map = Map(_93Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 180996
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 180995
        _0Multiply = Multiply(_91Constant, x0);
        _1Slice = Slice(_89MapChannelVertexBuffer, _0Multiply, _91Constant);
        _1Slice;
        });
    _95Map = Map(_94Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 181008
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 181009
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 181013
        Vector3 _3At;// 6:MatrixFromRows->3:At 181012
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 181007
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 181010
        Int32 _6One;// 8:PlusOne->1:One 181017
        Int32 _7Add;// 8:PlusOne->0:Add 181016
        Vector3 _8At;// 6:MatrixFromRows->4:At 181014
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 181006
        Int32 _10Constant;// 25:Three->0:Constant 181011
        Int32 _11One;// 9:PlusOne->1:One 181021
        Int32 _12Add;// 9:PlusOne->0:Add 181020
        Vector3 _13At;// 6:MatrixFromRows->5:At 181018
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 181005
        Int32 _15One;// 10:PlusOne->1:One 181025
        Int32 _16Add;// 10:PlusOne->0:Add 181024
        Vector3 _17At;// 6:MatrixFromRows->6:At 181022
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 181001
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _96Zero = Zero();
    _97Two = Two();
    _98Stride = Stride(_95Map, _96Zero, _97Two);
    _99One = One();
    _100Stride = Stride(_95Map, _99One, _97Two);
    _101Pass-through: function2 = (Matrix x0, Matrix x1) => 
      {
        Vector3 _0GetMatrixTranslation;// 6:MatrixDistance->0:GetMatrixTranslation 181057
        Vector3 _1GetMatrixTranslation;// 6:MatrixDistance->1:GetMatrixTranslation 181058
        Single _2Distance;// 6:MatrixDistance->2:Distance 181056
        Single _3Divide;// 6:MatrixInterpolateWithSpacingAndScaling->7:Divide 181053
        Int32 _4Floor;// 6:MatrixInterpolateWithSpacingAndScaling->8:Floor 181052
        Int32 _5One;// 20:PlusOne->1:One 181051
        Int32 _6Add;// 20:PlusOne->0:Add 181050
        IArray[Single] _7RangeInclusiveFloat;// 19:SampleLerp->2:RangeInclusiveFloat 181048
        Func[Single, Matrix] _8Pass-through: function1;// 0:Pass-through: function1 181046
        IArray[Matrix] _9Map;// 19:SampleLerp->3:Map 181047
        Int32 _10Count;// 3:LastIndex->2:Count 181041
        _0GetMatrixTranslation = GetMatrixTranslation(x0);
        _1GetMatrixTranslation = GetMatrixTranslation(x1);
        _2Distance = Distance(_0GetMatrixTranslation, _1GetMatrixTranslation);
        _3Divide = Divide(_2Distance, max distance);
        _4Floor = Floor(_3Divide);
        _5One = One();
        _6Add = Add(_4Floor, _5One);
        _7RangeInclusiveFloat = RangeInclusiveFloat(_6Add);
        _8Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 181069
            Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 181070
            Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 181068
            Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 181072
            Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 181073
            Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 181071
            Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 181075
            Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 181076
            Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 181074
            Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 181067
            _0GetMatrixScaling = GetMatrixScaling(x0);
            _1GetMatrixScaling = GetMatrixScaling(x1);
            _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, x0);
            _3GetMatrixRotation = GetMatrixRotation(x0);
            _4GetMatrixRotation = GetMatrixRotation(x1);
            _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, x0);
            _6GetMatrixTranslation = GetMatrixTranslation(x0);
            _7GetMatrixTranslation = GetMatrixTranslation(x1);
            _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, x0);
            _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
            _9ScalingRotationTranslationMatrix;
            };
        _9Map = Map(_7RangeInclusiveFloat, _8Pass-through: function1);
        _10Count = Count(_9Map);
        if (scale when spacing)
          {
            Int32 _11One;// 3:MinusOne->2:One 181040
            Int32 _12Subtract;// 3:MinusOne->1:Subtract 181039
            IArray[Matrix] _13Take;// 1:DropLast->2:Take 181036
            Int32 _14One;// 2:SkipOne->2:One 181044
            IArray[Matrix] _15Skip;// 2:SkipOne->3:Skip 181043
            Single _16Constant;// 6:MatrixInterpolateWithSpacingAndScaling->0:Constant 181095
            Func[Matrix, Matrix, Matrix] _17Pass-through: function2;// 0:Pass-through: function2 181033
            IArray[Matrix] _18Combine;// 21:CombinePairwiseElements->3:Combine 181034
            Boolean _19True;// 6:MatrixInterpolateWithSpacingAndScaling->18:True 181102
            Single _20IntAsFloat;// 6:MatrixInterpolateWithSpacingAndScaling->16:IntAsFloat 181109
            Single _21Divide;// 6:MatrixInterpolateWithSpacingAndScaling->15:Divide 181108
            Single _22FloatOne;// 6:MatrixInterpolateWithSpacingAndScaling->14:FloatOne 181110
            Vector3 _23Vector3;// 6:MatrixInterpolateWithSpacingAndScaling->12:Vector3 181107
            Single _24Constant;// 8:Origin->0:Constant 181106
            Vector3 _25Vector3;// 8:Origin->1:Vector3 181105
            Matrix _26ScalingTranslationMatrix;// 13:ScalingMatrix->4:ScalingTranslationMatrix 181104
            IArray[Matrix] _27Map;// 6:MatrixInterpolateWithSpacingAndScaling->11:Map 181031
            _11One = One();
            _12Subtract = Subtract(_10Count, _11One);
            _13Take = Take(_9Map, _12Subtract);
            _14One = One();
            _15Skip = Skip(_9Map, _14One);
            _16Constant = 0.5;
            _17Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 181087
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 181088
                Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 181086
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 181090
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 181091
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 181089
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 181093
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 181094
                Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 181092
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 181085
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _16Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _16Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _16Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _18Combine = Combine(_13Take, _15Skip, _17Pass-through: function2);
            _19True = True();
            _20IntAsFloat = IntAsFloat(_4Floor);
            _21Divide = Divide(_3Divide, _20IntAsFloat);
            _22FloatOne = FloatOne();
            _23Vector3 = Vector3(_21Divide, _22FloatOne, _22FloatOne);
            _24Constant = 0;
            _25Vector3 = Vector3(_24Constant, _24Constant, _24Constant);
            _26ScalingTranslationMatrix = ScalingTranslationMatrix(_23Vector3, _25Vector3);
            _27Map = Map(_18Combine, (Matrix x0) => 
              {
                if (_19True)
                  {
                    Matrix _0Multiply;// 17:MatrixApplyTransform->4:Multiply 181100
                    _0Multiply = Multiply(_26ScalingTranslationMatrix, x0);
                    _0Multiply;
                    }else
                  {
                    Matrix _1Multiply;// 17:MatrixApplyTransform->9:Multiply 181101
                    _1Multiply = Multiply(x0, _26ScalingTranslationMatrix);
                    _1Multiply;
                    };
                });
            _27Map;
            }else
          {
            Int32 _28One;// 3:MinusOne->2:One 181040
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 181039
            IArray[Matrix] _30Take;// 1:DropLast->2:Take 181036
            Int32 _31One;// 2:SkipOne->2:One 181044
            IArray[Matrix] _32Skip;// 2:SkipOne->3:Skip 181043
            Single _33Constant;// 6:MatrixInterpolateWithSpacingAndScaling->0:Constant 181095
            Func[Matrix, Matrix, Matrix] _34Pass-through: function2;// 0:Pass-through: function2 181033
            IArray[Matrix] _35Combine;// 21:CombinePairwiseElements->3:Combine 181034
            _28One = One();
            _29Subtract = Subtract(_10Count, _28One);
            _30Take = Take(_9Map, _29Subtract);
            _31One = One();
            _32Skip = Skip(_9Map, _31One);
            _33Constant = 0.5;
            _34Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 181087
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 181088
                Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 181086
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 181090
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 181091
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 181089
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 181093
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 181094
                Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 181092
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 181085
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _33Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _33Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _33Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _35Combine = Combine(_30Take, _32Skip, _34Pass-through: function2);
            _35Combine;
            };
        };
    _102Combine = Combine(_98Stride, _100Stride, _101Pass-through: function2);
    _103Flatten = Flatten(_102Combine);
    _132IgnoreFirst = IgnoreFirst(_60Pass-through: TriMesh, if (create mesh)
      {
        Int32 _104Constant;// 41:MeshCopyCustomMapChannelVertexBuffers->0:Constant 180834
        IArray[Int32] _105Range;// 41:MeshCopyCustomMapChannelVertexBuffers->1:Range 180833
        Int32 _106Two;// 41:MeshCopyCustomMapChannelVertexBuffers->4:Two 180835
        IArray[Int32] _107Skip;// 41:MeshCopyCustomMapChannelVertexBuffers->3:Skip 180832
        IArray[Int32] _108Filter;// 41:MeshCopyCustomMapChannelVertexBuffers->13:Filter 180831
        MapChannel _109GetMapChannel;// 34:MatricesFromMapChannel->9:GetMapChannel 180893
        IArray[Vector3] _110MapChannelVertexBuffer;// 34:MatricesFromMapChannel->8:MapChannelVertexBuffer 180892
        Int32 _111Count;// 2:Slices->2:Count 180889
        Int32 _112Constant;// 34:MatricesFromMapChannel->0:Constant 180894
        Int32 _113Divide;// 2:Slices->3:Divide 180888
        IArray[Int32] _114Range;// 2:Slices->4:Range 180887
        IArray[IArray[Vector3]] _115Map;// 2:Slices->5:Map 180886
        IArray[Matrix] _116Map;// 34:MatricesFromMapChannel->5:Map 180883
        Single _117Constant;// 1:Origin->0:Constant 180951
        Vector3 _118Vector3;// 1:Origin->1:Vector3 180950
        BoundingSphere _119Sphere;// 0:BoxFromPointAndRadius->3:Sphere 180949
        BoundingBox _120BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 180948
        QuadMesh _121BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 180944
        TriMesh _122Triangulate;// 29:BoxTriMesh->3:Triangulate 180943
        IArray[Int32] _123MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 180934
        IArray[Int32] _124Indices;// 4:HideEveryThirdEdge->8:Indices 180933
        Int32 _125Constant;// 4:HideEveryThirdEdge->0:Constant 180941
        Int32 _126Constant;// 4:HideEveryThirdEdge->0:Constant 180942
        IArray[Boolean] _127Map;// 4:HideEveryThirdEdge->5:Map 180932
        TriMesh _128SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 180931
        IArray[TriMesh] _129Map;// 1:FluxMeshAsBoxes->16:Map 180880
        TriMesh _130CombineAllMeshes;// 1:FluxMeshAsBoxes->2:CombineAllMeshes 180879
        TriMesh _131Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers->6:Aggregate 180830
        _104Constant = 100;
        _105Range = Range(_104Constant);
        _106Two = Two();
        _107Skip = Skip(_105Range, _106Two);
        _108Filter = Filter(_107Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry->0:Constant 180848
            Boolean _1Equal;// 5:GetMapChannelOrGeometry->4:Equal 180847
            MapChannel _15Pass-through: any;// 0:Pass-through: any 180839
            Object _16Null;// 6:IsNullFix2->3:Null 180843
            Object _17As;// 6:IsNullFix2->23:As 180841
            Boolean _18Equal;// 6:IsNullFix2->1:Equal 180840
            Boolean _19Not;// 12:MapChannelExists->4:Not 180838
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _15Pass-through: any = if (_1Equal)
              {
                MapChannel _13TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 180849
                _13TopologyChannel = TopologyChannel(_60Pass-through: TriMesh);
                _13TopologyChannel;
                }else
              {
                MapChannel _14GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 180850
                _14GetMapChannel = GetMapChannel(_60Pass-through: TriMesh, x0);
                _14GetMapChannel;
                };
            _16Null = Null();
            _17As = As(_15Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 180842
                _0IgnoreFirst = IgnoreFirst(x0, _16Null);
                _0IgnoreFirst;
                });
            _18Equal = Equal(_17As, _16Null);
            _19Not = Not(_18Equal);
            _19Not;
            });
        _109GetMapChannel = GetMapChannel(_60Pass-through: TriMesh, flux channel);
        _110MapChannelVertexBuffer = MapChannelVertexBuffer(_109GetMapChannel);
        _111Count = Count(_110MapChannelVertexBuffer);
        _112Constant = 4;
        _113Divide = Divide(_111Count, _112Constant);
        _114Range = Range(_113Divide);
        _115Map = Map(_114Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 180891
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 180890
            _0Multiply = Multiply(_112Constant, x0);
            _1Slice = Slice(_110MapChannelVertexBuffer, _0Multiply, _112Constant);
            _1Slice;
            });
        _116Map = Map(_115Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 180903
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 180904
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 180908
            Vector3 _3At;// 6:MatrixFromRows->3:At 180907
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 180902
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 180905
            Int32 _6One;// 8:PlusOne->1:One 180912
            Int32 _7Add;// 8:PlusOne->0:Add 180911
            Vector3 _8At;// 6:MatrixFromRows->4:At 180909
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 180901
            Int32 _10Constant;// 25:Three->0:Constant 180906
            Int32 _11One;// 9:PlusOne->1:One 180916
            Int32 _12Add;// 9:PlusOne->0:Add 180915
            Vector3 _13At;// 6:MatrixFromRows->5:At 180913
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 180900
            Int32 _15One;// 10:PlusOne->1:One 180920
            Int32 _16Add;// 10:PlusOne->0:Add 180919
            Vector3 _17At;// 6:MatrixFromRows->6:At 180917
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 180896
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _117Constant = 0;
        _118Vector3 = Vector3(_117Constant, _117Constant, _117Constant);
        _119Sphere = Sphere(_118Vector3, box radius);
        _120BoxFromSphere = BoxFromSphere(_119Sphere);
        _121BoxQuadMesh = BoxQuadMesh(_120BoxFromSphere);
        _122Triangulate = Triangulate(_121BoxQuadMesh);
        _123MeshIndices = MeshIndices(_122Triangulate);
        _124Indices = Indices(_123MeshIndices);
        _125Constant = 3;
        _126Constant = 2;
        _127Map = Map(_124Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 180940
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 180939
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 180935
            _0Modulo = Modulo(x0, _125Constant);
            _1Equal = Equal(_0Modulo, _126Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _128SetVisibleEdges = SetVisibleEdges(_122Triangulate, _127Map);
        _129Map = Map(_116Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 180927
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 180924
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 180926
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 180925
            _0MeshVertices = MeshVertices(_128SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 180928
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_128SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _130CombineAllMeshes = CombineAllMeshes(_129Map);
        _131Aggregate = Aggregate(_108Filter, _130CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer->10:TryCatch 180854
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers->7:IgnoreFirst 180876
                Int32 _1Constant;// 5:GetMapChannelOrGeometry->0:Constant 180868
                Boolean _2Equal;// 5:GetMapChannelOrGeometry->4:Equal 180867
                MapChannel _16Pass-through: any;// 0:Pass-through: any 180859
                Object _17Null;// 6:IsNullFix2->3:Null 180863
                Object _18As;// 6:IsNullFix2->23:As 180861
                Boolean _19Equal;// 6:IsNullFix2->1:Equal 180860
                Boolean _20Not;// 5:MapChannelExists->4:Not 180858
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _16Pass-through: any = if (_2Equal)
                  {
                    MapChannel _14TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 180869
                    _14TopologyChannel = TopologyChannel(_60Pass-through: TriMesh);
                    _14TopologyChannel;
                    }else
                  {
                    MapChannel _15GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 180870
                    _15GetMapChannel = GetMapChannel(_60Pass-through: TriMesh, _0IgnoreFirst);
                    _15GetMapChannel;
                    };
                _17Null = Null();
                _18As = As(_16Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 180862
                    _0IgnoreFirst = IgnoreFirst(x0, _17Null);
                    _0IgnoreFirst;
                    });
                _19Equal = Equal(_18As, _17Null);
                _20Not = Not(_19Equal);
                if (_20Not)
                  {
                    MapChannel _21GetMapChannel;// 10:MapChannelCopyVertexBuffer->1:GetMapChannel 180873
                    IArray[Vector3] _22MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer->8:MapChannelVertexBuffer 180872
                    IArray[Int32] _23MeshIndices;// 10:MapChannelCopyVertexBuffer->0:MeshIndices 180874
                    TriMesh _24SetMapChannel;// 10:MapChannelCopyVertexBuffer->7:SetMapChannel 180871
                    _21GetMapChannel = GetMapChannel(_60Pass-through: TriMesh, _0IgnoreFirst);
                    _22MapChannelVertexBuffer = MapChannelVertexBuffer(_21GetMapChannel);
                    _23MeshIndices = MeshIndices(x0);
                    _24SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _22MapChannelVertexBuffer, _23MeshIndices);
                    _24SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer->11:IgnoreFirst 180875
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _131Aggregate;
        }else
      {
        _60Pass-through: TriMesh;
        });
    _132IgnoreFirst;
    }