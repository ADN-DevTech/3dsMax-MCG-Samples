(InstanceState state, TriMesh mesh, Int32 flux channel, Boolean scaling, Single spacing, Boolean create mesh, Single box size) => 
  {
    Boolean _0True;// 1:True 182247
    TriMesh _22Pass-through: TriMesh;// 0:Pass-through: TriMesh 181958
    MapChannel _44GetMapChannel;// 4:MatricesFromMapChannel->9:GetMapChannel 182134
    IArray[Vector3] _45MapChannelVertexBuffer;// 4:MatricesFromMapChannel->8:MapChannelVertexBuffer 182133
    Int32 _46Count;// 2:Slices->2:Count 182130
    Int32 _47Constant;// 4:MatricesFromMapChannel->0:Constant 182135
    Int32 _48Divide;// 2:Slices->3:Divide 182129
    IArray[Int32] _49Range;// 2:Slices->4:Range 182128
    IArray[IArray[Vector3]] _50Map;// 2:Slices->5:Map 182127
    IArray[Matrix] _51Map;// 4:MatricesFromMapChannel->5:Map 182124
    Int32 _52Zero;// 1:CombineEveryTwoElements->7:Zero 182118
    Int32 _53Two;// 1:CombineEveryTwoElements->6:Two 182119
    IArray[Matrix] _54Stride;// 1:CombineEveryTwoElements->1:Stride 182117
    Int32 _55One;// 1:CombineEveryTwoElements->8:One 182121
    IArray[Matrix] _56Stride;// 1:CombineEveryTwoElements->2:Stride 182120
    Func[Matrix, Matrix, IArray[Matrix]] _57Pass-through: function2;// 0:Pass-through: function2 182115
    IArray[IArray[Matrix]] _58Combine;// 1:CombineEveryTwoElements->3:Combine 182116
    IArray[Matrix] _59Flatten;// 10:FluxSpacing->16:Flatten 182113
    TriMesh _88IgnoreFirst;// 7:FluxMeshAsBoxes->7:IgnoreFirst 181962
    _0True = True();
    _22Pass-through: TriMesh = if (_0True)
      {
        MapChannel _1GetMapChannel;// 4:MatricesFromMapChannel->9:GetMapChannel 182134
        IArray[Vector3] _2MapChannelVertexBuffer;// 4:MatricesFromMapChannel->8:MapChannelVertexBuffer 182133
        Int32 _3Count;// 2:Slices->2:Count 182130
        Int32 _4Constant;// 4:MatricesFromMapChannel->0:Constant 182135
        Int32 _5Divide;// 2:Slices->3:Divide 182129
        IArray[Int32] _6Range;// 2:Slices->4:Range 182128
        IArray[IArray[Vector3]] _7Map;// 2:Slices->5:Map 182127
        IArray[Matrix] _8Map;// 4:MatricesFromMapChannel->5:Map 182124
        Int32 _9Zero;// 1:CombineEveryTwoElements->7:Zero 182118
        Int32 _10Two;// 1:CombineEveryTwoElements->6:Two 182119
        IArray[Matrix] _11Stride;// 1:CombineEveryTwoElements->1:Stride 182117
        Int32 _12One;// 1:CombineEveryTwoElements->8:One 182121
        IArray[Matrix] _13Stride;// 1:CombineEveryTwoElements->2:Stride 182120
        Func[Matrix, Matrix, IArray[Matrix]] _14Pass-through: function2;// 0:Pass-through: function2 182115
        IArray[IArray[Matrix]] _15Combine;// 1:CombineEveryTwoElements->3:Combine 182116
        IArray[Matrix] _16Flatten;// 10:FluxSpacing->16:Flatten 182113
        Func[Matrix, IArray[Vector3]] _17Pass-through: function1;// 0:Pass-through: function1 182101
        IArray[IArray[Vector3]] _18Map;// 5:FlatMap->4:Map 182103
        IArray[Vector3] _19Flatten;// 5:FlatMap->3:Flatten 182102
        IArray[Int32] _20MeshIndices;// 11:StoreMatricesInMapChannel->0:MeshIndices 182112
        TriMesh _21SetMapChannel;// 11:StoreMatricesInMapChannel->7:SetMapChannel 182099
        _1GetMapChannel = GetMapChannel(mesh, flux channel);
        _2MapChannelVertexBuffer = MapChannelVertexBuffer(_1GetMapChannel);
        _3Count = Count(_2MapChannelVertexBuffer);
        _4Constant = 4;
        _5Divide = Divide(_3Count, _4Constant);
        _6Range = Range(_5Divide);
        _7Map = Map(_6Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 182132
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 182131
            _0Multiply = Multiply(_4Constant, x0);
            _1Slice = Slice(_2MapChannelVertexBuffer, _0Multiply, _4Constant);
            _1Slice;
            });
        _8Map = Map(_7Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 182144
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 182145
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 182149
            Vector3 _3At;// 6:MatrixFromRows->3:At 182148
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 182143
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 182146
            Int32 _6One;// 8:PlusOne->1:One 182153
            Int32 _7Add;// 8:PlusOne->0:Add 182152
            Vector3 _8At;// 6:MatrixFromRows->4:At 182150
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 182142
            Int32 _10Constant;// 25:Three->0:Constant 182147
            Int32 _11One;// 9:PlusOne->1:One 182157
            Int32 _12Add;// 9:PlusOne->0:Add 182156
            Vector3 _13At;// 6:MatrixFromRows->5:At 182154
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 182141
            Int32 _15One;// 10:PlusOne->1:One 182161
            Int32 _16Add;// 10:PlusOne->0:Add 182160
            Vector3 _17At;// 6:MatrixFromRows->6:At 182158
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 182137
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _9Zero = Zero();
        _10Two = Two();
        _11Stride = Stride(_8Map, _9Zero, _10Two);
        _12One = One();
        _13Stride = Stride(_8Map, _12One, _10Two);
        _14Pass-through: function2 = (Matrix x0, Matrix x1) => 
          {
            Vector3 _0GetMatrixTranslation;// 6:MatrixDistance->0:GetMatrixTranslation 182193
            Vector3 _1GetMatrixTranslation;// 6:MatrixDistance->1:GetMatrixTranslation 182194
            Single _2Distance;// 6:MatrixDistance->2:Distance 182192
            Single _3Divide;// 6:MatrixInterpolateWithSpacingAndScaling->7:Divide 182189
            Int32 _4Floor;// 6:MatrixInterpolateWithSpacingAndScaling->8:Floor 182188
            Int32 _5One;// 20:PlusOne->1:One 182187
            Int32 _6Add;// 20:PlusOne->0:Add 182186
            IArray[Single] _7RangeInclusiveFloat;// 19:SampleLerp->2:RangeInclusiveFloat 182184
            Func[Single, Matrix] _8Pass-through: function1;// 0:Pass-through: function1 182182
            IArray[Matrix] _9Map;// 19:SampleLerp->3:Map 182183
            Int32 _10Count;// 3:LastIndex->2:Count 182177
            Int32 _11One;// 3:MinusOne->2:One 182176
            Int32 _12Subtract;// 3:MinusOne->1:Subtract 182175
            IArray[Matrix] _13Take;// 1:DropLast->2:Take 182172
            Int32 _14One;// 2:SkipOne->2:One 182180
            IArray[Matrix] _15Skip;// 2:SkipOne->3:Skip 182179
            Single _16Constant;// 6:MatrixInterpolateWithSpacingAndScaling->0:Constant 182231
            Func[Matrix, Matrix, Matrix] _17Pass-through: function2;// 0:Pass-through: function2 182169
            IArray[Matrix] _18Combine;// 21:CombinePairwiseElements->3:Combine 182170
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _1GetMatrixTranslation = GetMatrixTranslation(x1);
            _2Distance = Distance(_0GetMatrixTranslation, _1GetMatrixTranslation);
            _3Divide = Divide(_2Distance, spacing);
            _4Floor = Floor(_3Divide);
            _5One = One();
            _6Add = Add(_4Floor, _5One);
            _7RangeInclusiveFloat = RangeInclusiveFloat(_6Add);
            _8Pass-through: function1 = (Single x0) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 182205
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 182206
                Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 182204
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 182208
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 182209
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 182207
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 182211
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 182212
                Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 182210
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 182203
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, x0);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, x0);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, x0);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _9Map = Map(_7RangeInclusiveFloat, _8Pass-through: function1);
            _10Count = Count(_9Map);
            _11One = One();
            _12Subtract = Subtract(_10Count, _11One);
            _13Take = Take(_9Map, _12Subtract);
            _14One = One();
            _15Skip = Skip(_9Map, _14One);
            _16Constant = 0.5;
            _17Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 182223
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 182224
                Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 182222
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 182226
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 182227
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 182225
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 182229
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 182230
                Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 182228
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 182221
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _16Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _16Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _16Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _18Combine = Combine(_13Take, _15Skip, _17Pass-through: function2);
            if (scaling)
              {
                Boolean _19True;// 6:MatrixInterpolateWithSpacingAndScaling->18:True 182238
                Single _20IntAsFloat;// 6:MatrixInterpolateWithSpacingAndScaling->16:IntAsFloat 182245
                Single _21Divide;// 6:MatrixInterpolateWithSpacingAndScaling->15:Divide 182244
                Single _22FloatOne;// 6:MatrixInterpolateWithSpacingAndScaling->14:FloatOne 182246
                Vector3 _23Vector3;// 6:MatrixInterpolateWithSpacingAndScaling->12:Vector3 182243
                Single _24Constant;// 8:Origin->0:Constant 182242
                Vector3 _25Vector3;// 8:Origin->1:Vector3 182241
                Matrix _26ScalingTranslationMatrix;// 13:ScalingMatrix->4:ScalingTranslationMatrix 182240
                IArray[Matrix] _27Map;// 6:MatrixInterpolateWithSpacingAndScaling->11:Map 182167
                _19True = True();
                _20IntAsFloat = IntAsFloat(_4Floor);
                _21Divide = Divide(_3Divide, _20IntAsFloat);
                _22FloatOne = FloatOne();
                _23Vector3 = Vector3(_21Divide, _22FloatOne, _22FloatOne);
                _24Constant = 0;
                _25Vector3 = Vector3(_24Constant, _24Constant, _24Constant);
                _26ScalingTranslationMatrix = ScalingTranslationMatrix(_23Vector3, _25Vector3);
                _27Map = Map(_18Combine, (Matrix x0) => 
                  {
                    if (_19True)
                      {
                        Matrix _0Multiply;// 17:MatrixApplyTransform->4:Multiply 182236
                        _0Multiply = Multiply(_26ScalingTranslationMatrix, x0);
                        _0Multiply;
                        }else
                      {
                        Matrix _1Multiply;// 17:MatrixApplyTransform->9:Multiply 182237
                        _1Multiply = Multiply(x0, _26ScalingTranslationMatrix);
                        _1Multiply;
                        };
                    });
                _27Map;
                }else
              {
                _18Combine;
                };
            };
        _15Combine = Combine(_11Stride, _13Stride, _14Pass-through: function2);
        _16Flatten = Flatten(_15Combine);
        _17Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 182107
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 182106
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 182105
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 182111
                Int32 _1Add;// 5:PlusOne->0:Add 182110
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 182108
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _18Map = Map(_16Flatten, _17Pass-through: function1);
        _19Flatten = Flatten(_18Map);
        _20MeshIndices = MeshIndices(mesh);
        _21SetMapChannel = SetMapChannel(mesh, flux channel, _19Flatten, _20MeshIndices);
        _21SetMapChannel;
        }else
      {
        mesh;
        };
    _44GetMapChannel = GetMapChannel(mesh, flux channel);
    _45MapChannelVertexBuffer = MapChannelVertexBuffer(_44GetMapChannel);
    _46Count = Count(_45MapChannelVertexBuffer);
    _47Constant = 4;
    _48Divide = Divide(_46Count, _47Constant);
    _49Range = Range(_48Divide);
    _50Map = Map(_49Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 182132
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 182131
        _0Multiply = Multiply(_47Constant, x0);
        _1Slice = Slice(_45MapChannelVertexBuffer, _0Multiply, _47Constant);
        _1Slice;
        });
    _51Map = Map(_50Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 182144
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 182145
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 182149
        Vector3 _3At;// 6:MatrixFromRows->3:At 182148
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 182143
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 182146
        Int32 _6One;// 8:PlusOne->1:One 182153
        Int32 _7Add;// 8:PlusOne->0:Add 182152
        Vector3 _8At;// 6:MatrixFromRows->4:At 182150
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 182142
        Int32 _10Constant;// 25:Three->0:Constant 182147
        Int32 _11One;// 9:PlusOne->1:One 182157
        Int32 _12Add;// 9:PlusOne->0:Add 182156
        Vector3 _13At;// 6:MatrixFromRows->5:At 182154
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 182141
        Int32 _15One;// 10:PlusOne->1:One 182161
        Int32 _16Add;// 10:PlusOne->0:Add 182160
        Vector3 _17At;// 6:MatrixFromRows->6:At 182158
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 182137
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _52Zero = Zero();
    _53Two = Two();
    _54Stride = Stride(_51Map, _52Zero, _53Two);
    _55One = One();
    _56Stride = Stride(_51Map, _55One, _53Two);
    _57Pass-through: function2 = (Matrix x0, Matrix x1) => 
      {
        Vector3 _0GetMatrixTranslation;// 6:MatrixDistance->0:GetMatrixTranslation 182193
        Vector3 _1GetMatrixTranslation;// 6:MatrixDistance->1:GetMatrixTranslation 182194
        Single _2Distance;// 6:MatrixDistance->2:Distance 182192
        Single _3Divide;// 6:MatrixInterpolateWithSpacingAndScaling->7:Divide 182189
        Int32 _4Floor;// 6:MatrixInterpolateWithSpacingAndScaling->8:Floor 182188
        Int32 _5One;// 20:PlusOne->1:One 182187
        Int32 _6Add;// 20:PlusOne->0:Add 182186
        IArray[Single] _7RangeInclusiveFloat;// 19:SampleLerp->2:RangeInclusiveFloat 182184
        Func[Single, Matrix] _8Pass-through: function1;// 0:Pass-through: function1 182182
        IArray[Matrix] _9Map;// 19:SampleLerp->3:Map 182183
        Int32 _10Count;// 3:LastIndex->2:Count 182177
        _0GetMatrixTranslation = GetMatrixTranslation(x0);
        _1GetMatrixTranslation = GetMatrixTranslation(x1);
        _2Distance = Distance(_0GetMatrixTranslation, _1GetMatrixTranslation);
        _3Divide = Divide(_2Distance, spacing);
        _4Floor = Floor(_3Divide);
        _5One = One();
        _6Add = Add(_4Floor, _5One);
        _7RangeInclusiveFloat = RangeInclusiveFloat(_6Add);
        _8Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 182205
            Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 182206
            Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 182204
            Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 182208
            Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 182209
            Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 182207
            Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 182211
            Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 182212
            Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 182210
            Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 182203
            _0GetMatrixScaling = GetMatrixScaling(x0);
            _1GetMatrixScaling = GetMatrixScaling(x1);
            _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, x0);
            _3GetMatrixRotation = GetMatrixRotation(x0);
            _4GetMatrixRotation = GetMatrixRotation(x1);
            _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, x0);
            _6GetMatrixTranslation = GetMatrixTranslation(x0);
            _7GetMatrixTranslation = GetMatrixTranslation(x1);
            _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, x0);
            _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
            _9ScalingRotationTranslationMatrix;
            };
        _9Map = Map(_7RangeInclusiveFloat, _8Pass-through: function1);
        _10Count = Count(_9Map);
        if (scaling)
          {
            Int32 _11One;// 3:MinusOne->2:One 182176
            Int32 _12Subtract;// 3:MinusOne->1:Subtract 182175
            IArray[Matrix] _13Take;// 1:DropLast->2:Take 182172
            Int32 _14One;// 2:SkipOne->2:One 182180
            IArray[Matrix] _15Skip;// 2:SkipOne->3:Skip 182179
            Single _16Constant;// 6:MatrixInterpolateWithSpacingAndScaling->0:Constant 182231
            Func[Matrix, Matrix, Matrix] _17Pass-through: function2;// 0:Pass-through: function2 182169
            IArray[Matrix] _18Combine;// 21:CombinePairwiseElements->3:Combine 182170
            Boolean _19True;// 6:MatrixInterpolateWithSpacingAndScaling->18:True 182238
            Single _20IntAsFloat;// 6:MatrixInterpolateWithSpacingAndScaling->16:IntAsFloat 182245
            Single _21Divide;// 6:MatrixInterpolateWithSpacingAndScaling->15:Divide 182244
            Single _22FloatOne;// 6:MatrixInterpolateWithSpacingAndScaling->14:FloatOne 182246
            Vector3 _23Vector3;// 6:MatrixInterpolateWithSpacingAndScaling->12:Vector3 182243
            Single _24Constant;// 8:Origin->0:Constant 182242
            Vector3 _25Vector3;// 8:Origin->1:Vector3 182241
            Matrix _26ScalingTranslationMatrix;// 13:ScalingMatrix->4:ScalingTranslationMatrix 182240
            IArray[Matrix] _27Map;// 6:MatrixInterpolateWithSpacingAndScaling->11:Map 182167
            _11One = One();
            _12Subtract = Subtract(_10Count, _11One);
            _13Take = Take(_9Map, _12Subtract);
            _14One = One();
            _15Skip = Skip(_9Map, _14One);
            _16Constant = 0.5;
            _17Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 182223
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 182224
                Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 182222
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 182226
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 182227
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 182225
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 182229
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 182230
                Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 182228
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 182221
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _16Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _16Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _16Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _18Combine = Combine(_13Take, _15Skip, _17Pass-through: function2);
            _19True = True();
            _20IntAsFloat = IntAsFloat(_4Floor);
            _21Divide = Divide(_3Divide, _20IntAsFloat);
            _22FloatOne = FloatOne();
            _23Vector3 = Vector3(_21Divide, _22FloatOne, _22FloatOne);
            _24Constant = 0;
            _25Vector3 = Vector3(_24Constant, _24Constant, _24Constant);
            _26ScalingTranslationMatrix = ScalingTranslationMatrix(_23Vector3, _25Vector3);
            _27Map = Map(_18Combine, (Matrix x0) => 
              {
                if (_19True)
                  {
                    Matrix _0Multiply;// 17:MatrixApplyTransform->4:Multiply 182236
                    _0Multiply = Multiply(_26ScalingTranslationMatrix, x0);
                    _0Multiply;
                    }else
                  {
                    Matrix _1Multiply;// 17:MatrixApplyTransform->9:Multiply 182237
                    _1Multiply = Multiply(x0, _26ScalingTranslationMatrix);
                    _1Multiply;
                    };
                });
            _27Map;
            }else
          {
            Int32 _28One;// 3:MinusOne->2:One 182176
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 182175
            IArray[Matrix] _30Take;// 1:DropLast->2:Take 182172
            Int32 _31One;// 2:SkipOne->2:One 182180
            IArray[Matrix] _32Skip;// 2:SkipOne->3:Skip 182179
            Single _33Constant;// 6:MatrixInterpolateWithSpacingAndScaling->0:Constant 182231
            Func[Matrix, Matrix, Matrix] _34Pass-through: function2;// 0:Pass-through: function2 182169
            IArray[Matrix] _35Combine;// 21:CombinePairwiseElements->3:Combine 182170
            _28One = One();
            _29Subtract = Subtract(_10Count, _28One);
            _30Take = Take(_9Map, _29Subtract);
            _31One = One();
            _32Skip = Skip(_9Map, _31One);
            _33Constant = 0.5;
            _34Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 182223
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 182224
                Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 182222
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 182226
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 182227
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 182225
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 182229
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 182230
                Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 182228
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 182221
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _33Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _33Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _33Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _35Combine = Combine(_30Take, _32Skip, _34Pass-through: function2);
            _35Combine;
            };
        };
    _58Combine = Combine(_54Stride, _56Stride, _57Pass-through: function2);
    _59Flatten = Flatten(_58Combine);
    _88IgnoreFirst = IgnoreFirst(_22Pass-through: TriMesh, if (create mesh)
      {
        Int32 _60Constant;// 41:MeshCopyCustomMapChannelVertexBuffers->0:Constant 181970
        IArray[Int32] _61Range;// 41:MeshCopyCustomMapChannelVertexBuffers->1:Range 181969
        Int32 _62Two;// 41:MeshCopyCustomMapChannelVertexBuffers->4:Two 181971
        IArray[Int32] _63Skip;// 41:MeshCopyCustomMapChannelVertexBuffers->3:Skip 181968
        IArray[Int32] _64Filter;// 41:MeshCopyCustomMapChannelVertexBuffers->13:Filter 181967
        MapChannel _65GetMapChannel;// 34:MatricesFromMapChannel->9:GetMapChannel 182029
        IArray[Vector3] _66MapChannelVertexBuffer;// 34:MatricesFromMapChannel->8:MapChannelVertexBuffer 182028
        Int32 _67Count;// 2:Slices->2:Count 182025
        Int32 _68Constant;// 34:MatricesFromMapChannel->0:Constant 182030
        Int32 _69Divide;// 2:Slices->3:Divide 182024
        IArray[Int32] _70Range;// 2:Slices->4:Range 182023
        IArray[IArray[Vector3]] _71Map;// 2:Slices->5:Map 182022
        IArray[Matrix] _72Map;// 34:MatricesFromMapChannel->5:Map 182019
        Single _73Constant;// 1:Origin->0:Constant 182087
        Vector3 _74Vector3;// 1:Origin->1:Vector3 182086
        BoundingSphere _75Sphere;// 0:BoxFromPointAndRadius->3:Sphere 182085
        BoundingBox _76BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 182084
        QuadMesh _77BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 182080
        TriMesh _78Triangulate;// 29:BoxTriMesh->3:Triangulate 182079
        IArray[Int32] _79MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 182070
        IArray[Int32] _80Indices;// 4:HideEveryThirdEdge->8:Indices 182069
        Int32 _81Constant;// 4:HideEveryThirdEdge->0:Constant 182077
        Int32 _82Constant;// 4:HideEveryThirdEdge->0:Constant 182078
        IArray[Boolean] _83Map;// 4:HideEveryThirdEdge->5:Map 182068
        TriMesh _84SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 182067
        IArray[TriMesh] _85Map;// 7:FluxMeshAsBoxes->16:Map 182016
        TriMesh _86CombineAllMeshes;// 7:FluxMeshAsBoxes->2:CombineAllMeshes 182015
        TriMesh _87Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers->6:Aggregate 181966
        _60Constant = 100;
        _61Range = Range(_60Constant);
        _62Two = Two();
        _63Skip = Skip(_61Range, _62Two);
        _64Filter = Filter(_63Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry->0:Constant 181984
            Boolean _1Equal;// 5:GetMapChannelOrGeometry->4:Equal 181983
            MapChannel _9Pass-through: any;// 0:Pass-through: any 181975
            Object _10Null;// 6:IsNullFix2->3:Null 181979
            Object _11As;// 6:IsNullFix2->23:As 181977
            Boolean _12Equal;// 6:IsNullFix2->1:Equal 181976
            Boolean _13Not;// 12:MapChannelExists->4:Not 181974
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _9Pass-through: any = if (_1Equal)
              {
                MapChannel _7TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 181985
                _7TopologyChannel = TopologyChannel(_22Pass-through: TriMesh);
                _7TopologyChannel;
                }else
              {
                MapChannel _8GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 181986
                _8GetMapChannel = GetMapChannel(_22Pass-through: TriMesh, x0);
                _8GetMapChannel;
                };
            _10Null = Null();
            _11As = As(_9Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 181978
                _0IgnoreFirst = IgnoreFirst(x0, _10Null);
                _0IgnoreFirst;
                });
            _12Equal = Equal(_11As, _10Null);
            _13Not = Not(_12Equal);
            _13Not;
            });
        _65GetMapChannel = GetMapChannel(_22Pass-through: TriMesh, flux channel);
        _66MapChannelVertexBuffer = MapChannelVertexBuffer(_65GetMapChannel);
        _67Count = Count(_66MapChannelVertexBuffer);
        _68Constant = 4;
        _69Divide = Divide(_67Count, _68Constant);
        _70Range = Range(_69Divide);
        _71Map = Map(_70Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 182027
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 182026
            _0Multiply = Multiply(_68Constant, x0);
            _1Slice = Slice(_66MapChannelVertexBuffer, _0Multiply, _68Constant);
            _1Slice;
            });
        _72Map = Map(_71Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 182039
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 182040
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 182044
            Vector3 _3At;// 6:MatrixFromRows->3:At 182043
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 182038
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 182041
            Int32 _6One;// 8:PlusOne->1:One 182048
            Int32 _7Add;// 8:PlusOne->0:Add 182047
            Vector3 _8At;// 6:MatrixFromRows->4:At 182045
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 182037
            Int32 _10Constant;// 25:Three->0:Constant 182042
            Int32 _11One;// 9:PlusOne->1:One 182052
            Int32 _12Add;// 9:PlusOne->0:Add 182051
            Vector3 _13At;// 6:MatrixFromRows->5:At 182049
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 182036
            Int32 _15One;// 10:PlusOne->1:One 182056
            Int32 _16Add;// 10:PlusOne->0:Add 182055
            Vector3 _17At;// 6:MatrixFromRows->6:At 182053
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 182032
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _73Constant = 0;
        _74Vector3 = Vector3(_73Constant, _73Constant, _73Constant);
        _75Sphere = Sphere(_74Vector3, box size);
        _76BoxFromSphere = BoxFromSphere(_75Sphere);
        _77BoxQuadMesh = BoxQuadMesh(_76BoxFromSphere);
        _78Triangulate = Triangulate(_77BoxQuadMesh);
        _79MeshIndices = MeshIndices(_78Triangulate);
        _80Indices = Indices(_79MeshIndices);
        _81Constant = 3;
        _82Constant = 2;
        _83Map = Map(_80Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 182076
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 182075
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 182071
            _0Modulo = Modulo(x0, _81Constant);
            _1Equal = Equal(_0Modulo, _82Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _84SetVisibleEdges = SetVisibleEdges(_78Triangulate, _83Map);
        _85Map = Map(_72Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 182063
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 182060
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 182062
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 182061
            _0MeshVertices = MeshVertices(_84SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 182064
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_84SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _86CombineAllMeshes = CombineAllMeshes(_85Map);
        _87Aggregate = Aggregate(_64Filter, _86CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer->10:TryCatch 181990
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers->7:IgnoreFirst 182012
                Int32 _1Constant;// 5:GetMapChannelOrGeometry->0:Constant 182004
                Boolean _2Equal;// 5:GetMapChannelOrGeometry->4:Equal 182003
                MapChannel _10Pass-through: any;// 0:Pass-through: any 181995
                Object _11Null;// 6:IsNullFix2->3:Null 181999
                Object _12As;// 6:IsNullFix2->23:As 181997
                Boolean _13Equal;// 6:IsNullFix2->1:Equal 181996
                Boolean _14Not;// 5:MapChannelExists->4:Not 181994
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _10Pass-through: any = if (_2Equal)
                  {
                    MapChannel _8TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 182005
                    _8TopologyChannel = TopologyChannel(_22Pass-through: TriMesh);
                    _8TopologyChannel;
                    }else
                  {
                    MapChannel _9GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 182006
                    _9GetMapChannel = GetMapChannel(_22Pass-through: TriMesh, _0IgnoreFirst);
                    _9GetMapChannel;
                    };
                _11Null = Null();
                _12As = As(_10Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 181998
                    _0IgnoreFirst = IgnoreFirst(x0, _11Null);
                    _0IgnoreFirst;
                    });
                _13Equal = Equal(_12As, _11Null);
                _14Not = Not(_13Equal);
                if (_14Not)
                  {
                    MapChannel _15GetMapChannel;// 10:MapChannelCopyVertexBuffer->1:GetMapChannel 182009
                    IArray[Vector3] _16MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer->8:MapChannelVertexBuffer 182008
                    IArray[Int32] _17MeshIndices;// 10:MapChannelCopyVertexBuffer->0:MeshIndices 182010
                    TriMesh _18SetMapChannel;// 10:MapChannelCopyVertexBuffer->7:SetMapChannel 182007
                    _15GetMapChannel = GetMapChannel(_22Pass-through: TriMesh, _0IgnoreFirst);
                    _16MapChannelVertexBuffer = MapChannelVertexBuffer(_15GetMapChannel);
                    _17MeshIndices = MeshIndices(x0);
                    _18SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _16MapChannelVertexBuffer, _17MeshIndices);
                    _18SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer->11:IgnoreFirst 182011
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _87Aggregate;
        }else
      {
        _22Pass-through: TriMesh;
        });
    _88IgnoreFirst;
    }