(InstanceState state, TriMesh mesh, Int32 flux channel, Int32 randomSeed, Int32 count, Boolean invertFilter, Boolean exactOrAnyBit, Int32 materialId, Boolean show boxes, Single box radius) => 
  {
    IArray[Face3] _0MeshFaces;// 0:FluxScatterOnFaces->12:MeshFaces 181816
    IArray[Int32] _1Indices;// 0:FluxScatterOnFaces->19:Indices 181815
    Func[Random, Int32] _2Pass-through: function1;// 0:Pass-through: function1 181796
    Random _3RandomNumberGenerator;// 0:FluxScatterOnFaces->23:RandomNumberGenerator 181817
    Func[Int32] _4Bind;// 4:RandomArray->4:Bind 181800
    Int32 _5Count;// 22:RandomElements->8:Count 181813
    Int32 _6Zero;// 4:GreaterThanZero->1:Zero 181812
    Boolean _7GreaterThan;// 4:GreaterThanZero->3:GreaterThan 181811
    Int32 _9Pass-through: Int32;// 0:Pass-through: Int32 181798
    IArray[Int32] _10ArrayOfFunction;// 4:RandomArray->5:ArrayOfFunction 181799
    Int32 _11One;// 18:PlusOne->1:One 181826
    Int32 _12Add;// 18:PlusOne->0:Add 181825
    Random _13RandomNumberGenerator;// 0:FluxScatterOnFaces->26:RandomNumberGenerator 181823
    Func[Single] _14Bind;// 13:PseudoRandomFloats->2:Bind 181821
    IArray[Single] _15ArrayOfFunction;// 13:PseudoRandomFloats->3:ArrayOfFunction 181820
    Int32 _16One;// 25:PlusOne->1:One 181835
    Int32 _17Add;// 25:PlusOne->0:Add 181834
    Random _18RandomNumberGenerator;// 0:FluxScatterOnFaces->27:RandomNumberGenerator 181832
    Func[Single] _19Bind;// 17:PseudoRandomFloats->2:Bind 181830
    IArray[Single] _20ArrayOfFunction;// 17:PseudoRandomFloats->3:ArrayOfFunction 181829
    Int32 _21Two;// 0:FluxScatterOnFaces->15:Two 181904
    IArray[Matrix] _22Combine3;// 0:FluxScatterOnFaces->16:Combine3 181792
    IArray[Int32] _23Indices;// 1:FilterWithIndexesOnly->3:Indices 181791
    IArray[Int32] _24MaterialIds;// 0:FluxScatterOnFaces->2:MaterialIds 181929
    Func[Int32, Boolean] _25Pass-through: function1;// 0:Pass-through: function1 181785
    IArray[Int32] _26Filter;// 1:FilterWithIndexesOnly->4:Filter 181790
    IArray[Matrix] _27Map;// 0:SelectByIndex->2:Map 181788
    Func[Matrix, IArray[Vector3]] _28Pass-through: function1;// 0:Pass-through: function1 181764
    IArray[IArray[Vector3]] _29Map;// 5:FlatMap->4:Map 181766
    IArray[Vector3] _30Flatten;// 5:FlatMap->3:Flatten 181765
    IArray[Int32] _31MeshIndices;// 8:StoreMatricesInMapChannel->0:MeshIndices 181775
    TriMesh _32SetMapChannel;// 8:StoreMatricesInMapChannel->7:SetMapChannel 181762
    Int32 _34Zero;// 22:RandomElements->9:Zero 181814
    TriMesh _63IgnoreFirst;// 4:FluxMeshAsBoxes->7:IgnoreFirst 181633
    _0MeshFaces = MeshFaces(mesh);
    _1Indices = Indices(_0MeshFaces);
    _2Pass-through: function1 = (Random x0) => 
      {
        Int32 _0Count;// 2:RandomElement->3:Count 181805
        Int32 _1At;// 2:RandomElement->5:At 181803
        _0Count = Count(_1Indices);
        _1At = At(_1Indices, PseudoRandomInt(x0, _0Count));
        _1At;
        };
    _3RandomNumberGenerator = RandomNumberGenerator(randomSeed);
    _4Bind = Bind(_2Pass-through: function1, _3RandomNumberGenerator);
    _5Count = Count(_1Indices);
    _6Zero = Zero();
    _7GreaterThan = GreaterThan(_5Count, _6Zero);
    _9Pass-through: Int32 = if (_7GreaterThan)
      {
        count;
        }else
      {
        Int32 _8Zero;// 22:RandomElements->9:Zero 181814
        _8Zero = Zero();
        _8Zero;
        };
    _10ArrayOfFunction = ArrayOfFunction(_4Bind, _9Pass-through: Int32);
    _11One = One();
    _12Add = Add(randomSeed, _11One);
    _13RandomNumberGenerator = RandomNumberGenerator(_12Add);
    _14Bind = Bind((Random x0) => 
      {
        PseudoRandomFloat(x0);
        }, _13RandomNumberGenerator);
    _15ArrayOfFunction = ArrayOfFunction(_14Bind, count);
    _16One = One();
    _17Add = Add(_12Add, _16One);
    _18RandomNumberGenerator = RandomNumberGenerator(_17Add);
    _19Bind = Bind((Random x0) => 
      {
        PseudoRandomFloat(x0);
        }, _18RandomNumberGenerator);
    _20ArrayOfFunction = ArrayOfFunction(_19Bind, count);
    _21Two = Two();
    _22Combine3 = Combine3(_10ArrayOfFunction, _15ArrayOfFunction, _20ArrayOfFunction, (Int32 x0, Single x1, Single x2) => 
      {
        Int32 _0Zero;// 3:ChooseAxis->9:Zero 181877
        Boolean _1GreaterThanOrEqual;// 3:ChooseAxis->8:GreaterThanOrEqual 181876
        Vector3 _2XAxis;// 3:ChooseAxis->3:XAxis 181885
        IArray[Vector3] _3Unit;// 2:Array3->2:Unit 181884
        Vector3 _4YAxis;// 3:ChooseAxis->4:YAxis 181886
        IArray[Vector3] _5Append;// 2:Array3->3:Append 181883
        Vector3 _6ZAxis;// 3:ChooseAxis->5:ZAxis 181887
        IArray[Vector3] _7Append;// 2:Array3->6:Append 181882
        Vector3 _14Pass-through: Vector3;// 0:Pass-through: Vector3 181840
        Vector3 _15Normalize;// 5:RotationBetweenVectorsFix->4:Normalize 181872
        Face3 _16MeshFace;// 0:FluxScatterOnFaces->20:MeshFace 181905
        Vector3 _17FaceNormal;// 14:MeshFaceMatrix->9:FaceNormal 181903
        Single _18Length;// 4:VectorIsSmall->3:Length 181900
        Single _19Constant;// 4:VectorLengthEpsilon->0:Constant 181901
        Boolean _20LessThan;// 4:VectorIsSmall->5:LessThan 181899
        Vector3 _22Pass-through: Vector3;// 0:Pass-through: Vector3 181841
        Vector3 _23Normalize;// 5:RotationBetweenVectorsFix->5:Normalize 181873
        Single _24Dot;// 0:RotationBetweenUnitVectors->6:Dot 181848
        Single _25FloatOne;// 0:RotationBetweenUnitVectors->8:FloatOne 181849
        Single _26Add;// 0:RotationBetweenUnitVectors->7:Add 181847
        Single _27Constant;// 0:RotationBetweenUnitVectors->0:Constant 181850
        Boolean _28LessThan;// 0:RotationBetweenUnitVectors->40:LessThan 181846
        Quaternion _60QuaternionNormalize;// 0:RotationBetweenUnitVectors->3:QuaternionNormalize 181844
        Vector3 _61FaceVertexA;// 28:FacePositionFromBarycentric->1:FaceVertexA 181910
        Vector3 _62FaceVertexB;// 28:FacePositionFromBarycentric->2:FaceVertexB 181911
        Vector3 _63FaceVertexC;// 28:FacePositionFromBarycentric->4:FaceVertexC 181912
        Vector3 _64Barycentric;// 28:FacePositionFromBarycentric->3:Barycentric 181909
        Matrix _65RotationTranslationMatrix;// 14:MeshFaceMatrix->7:RotationTranslationMatrix 181839
        _0Zero = Zero();
        _1GreaterThanOrEqual = GreaterThanOrEqual(_21Two, _0Zero);
        _2XAxis = XAxis();
        _3Unit = Unit(_2XAxis);
        _4YAxis = YAxis();
        _5Append = Append(_3Unit, _4YAxis);
        _6ZAxis = ZAxis();
        _7Append = Append(_5Append, _6ZAxis);
        _14Pass-through: Vector3 = if (_1GreaterThanOrEqual)
          {
            Vector3 _8At;// 3:ChooseAxis->1:At 181878
            _8At = At(_7Append, _21Two);
            _8At;
            }else
          {
            Int32 _9One;// 10:PlusOne->1:One 181893
            Int32 _10Add;// 10:PlusOne->0:Add 181892
            Int32 _11Negative;// 3:ChooseAxis->11:Negative 181890
            Vector3 _12At;// 3:ChooseAxis->12:At 181889
            Vector3 _13Negate;// 3:ChooseAxis->13:Negate 181888
            _9One = One();
            _10Add = Add(_21Two, _9One);
            _11Negative = Negative(_10Add);
            _12At = At(_7Append, _11Negative);
            _13Negate = Negate(_12At);
            _13Negate;
            };
        _15Normalize = Normalize(_14Pass-through: Vector3);
        _16MeshFace = MeshFace(mesh, x0);
        _17FaceNormal = FaceNormal(_16MeshFace);
        _18Length = Length(_17FaceNormal);
        _19Constant = 1E-06;
        _20LessThan = LessThan(_18Length, _19Constant);
        _22Pass-through: Vector3 = if (_20LessThan)
          {
            Vector3 _21ZAxis;// 6:VectorOrZAxis->2:ZAxis 181902
            _21ZAxis = ZAxis();
            _21ZAxis;
            }else
          {
            _17FaceNormal;
            };
        _23Normalize = Normalize(_22Pass-through: Vector3);
        _24Dot = Dot(_15Normalize, _23Normalize);
        _25FloatOne = FloatOne();
        _26Add = Add(_24Dot, _25FloatOne);
        _27Constant = 1E-07;
        _28LessThan = LessThan(_26Add, _27Constant);
        _60QuaternionNormalize = QuaternionNormalize(if (_28LessThan)
          {
            Single _35X;// 0:RotationBetweenUnitVectors->12:X 181855
            Single _36Abs;// 0:RotationBetweenUnitVectors->11:Abs 181854
            Single _37Z;// 0:RotationBetweenUnitVectors->14:Z 181858
            Single _38Abs;// 0:RotationBetweenUnitVectors->13:Abs 181857
            Boolean _39GreaterThan;// 0:RotationBetweenUnitVectors->15:GreaterThan 181853
            Single _56FloatZero;// 0:RotationBetweenUnitVectors->36:FloatZero 181869
            Quaternion _57QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors->35:QuaternionFromVectorAndTheta 181851
            _35X = X(_15Normalize);
            _36Abs = Abs(_35X);
            _37Z = Z(_15Normalize);
            _38Abs = Abs(_37Z);
            _39GreaterThan = GreaterThan(_36Abs, _38Abs);
            _56FloatZero = FloatZero();
            _57QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_39GreaterThan)
              {
                Single _46Y;// 0:RotationBetweenUnitVectors->29:Y 181861
                Single _47NegativeFloat;// 0:RotationBetweenUnitVectors->30:NegativeFloat 181860
                Single _48X;// 0:RotationBetweenUnitVectors->23:X 181862
                Single _49FloatZero;// 0:RotationBetweenUnitVectors->21:FloatZero 181863
                Vector3 _50Vector3;// 0:RotationBetweenUnitVectors->19:Vector3 181859
                _46Y = Y(_15Normalize);
                _47NegativeFloat = NegativeFloat(_46Y);
                _48X = X(_15Normalize);
                _49FloatZero = FloatZero();
                _50Vector3 = Vector3(_47NegativeFloat, _48X, _49FloatZero);
                _50Vector3;
                }else
              {
                Single _51FloatZero;// 0:RotationBetweenUnitVectors->22:FloatZero 181865
                Single _52Z;// 0:RotationBetweenUnitVectors->26:Z 181867
                Single _53NegativeFloat;// 0:RotationBetweenUnitVectors->25:NegativeFloat 181866
                Single _54Y;// 0:RotationBetweenUnitVectors->24:Y 181868
                Vector3 _55Vector3;// 0:RotationBetweenUnitVectors->20:Vector3 181864
                _51FloatZero = FloatZero();
                _52Z = Z(_15Normalize);
                _53NegativeFloat = NegativeFloat(_52Z);
                _54Y = Y(_15Normalize);
                _55Vector3 = Vector3(_51FloatZero, _53NegativeFloat, _54Y);
                _55Vector3;
                }, _56FloatZero);
            _57QuaternionFromVectorAndTheta;
            }else
          {
            Vector3 _58Cross;// 0:RotationBetweenUnitVectors->2:Cross 181871
            Quaternion _59QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors->5:QuaternionFromVectorAndTheta 181870
            _58Cross = Cross(_15Normalize, _23Normalize);
            _59QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_58Cross, _26Add);
            _59QuaternionFromVectorAndTheta;
            });
        _61FaceVertexA = FaceVertexA(_16MeshFace);
        _62FaceVertexB = FaceVertexB(_16MeshFace);
        _63FaceVertexC = FaceVertexC(_16MeshFace);
        _64Barycentric = Barycentric(_61FaceVertexA, _62FaceVertexB, _63FaceVertexC, x1, x2);
        _65RotationTranslationMatrix = RotationTranslationMatrix(_60QuaternionNormalize, _64Barycentric);
        _65RotationTranslationMatrix;
        });
    _23Indices = Indices(_22Combine3);
    _24MaterialIds = MaterialIds(mesh);
    _25Pass-through: function1 = (Int32 x0) => 
      {
        Int32 _0At;// 0:FluxScatterOnFaces->34:At 181930
        Int32 _1At;// 0:FluxScatterOnFaces->7:At 181928
        Int32 _3Zero;// 22:RandomElements->9:Zero 181814
        Boolean _8Pass-through: Boolean;// 0:Pass-through: Boolean 181914
        Int32 _13And;// 4:TestAnyBitsSet->4:And 181927
        _0At = At(_10ArrayOfFunction, x0);
        _1At = At(_24MaterialIds, _0At);
        _3Zero = Zero();
        _8Pass-through: Boolean = if (exactOrAnyBit)
          {
            Boolean _4Equal;// 3:TestEqualsOrAnyBit->5:Equal 181921
            _4Equal = Equal(_1At, materialId);
            _4Equal;
            }else
          {
            Int32 _5And;// 4:TestAnyBitsSet->4:And 181927
            Int32 _6Zero;// 2:GreaterThanZero->1:Zero 181926
            Boolean _7GreaterThan;// 2:GreaterThanZero->3:GreaterThan 181925
            _5And = And(_1At, materialId);
            _6Zero = Zero();
            _7GreaterThan = GreaterThan(_5And, _6Zero);
            _7GreaterThan;
            };
        _13And = And(_1At, materialId);
        if (invertFilter)
          {
            Boolean _14Not;// 4:XOr->4:Not 181916
            _14Not = Not(_8Pass-through: Boolean);
            _14Not;
            }else
          {
            _8Pass-through: Boolean;
            };
        };
    _26Filter = Filter(_23Indices, _25Pass-through: function1);
    _27Map = Map(_26Filter, (Int32 x0) => 
      {
        Matrix _0At;// 0:SelectByIndex->3:At 181789
        _0At = At(_22Combine3, x0);
        _0At;
        });
    _28Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 181770
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 181769
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 181768
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 181774
            Int32 _1Add;// 5:PlusOne->0:Add 181773
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 181771
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _29Map = Map(_27Map, _28Pass-through: function1);
    _30Flatten = Flatten(_29Map);
    _31MeshIndices = MeshIndices(mesh);
    _32SetMapChannel = SetMapChannel(mesh, flux channel, _30Flatten, _31MeshIndices);
    _34Zero = Zero();
    _63IgnoreFirst = IgnoreFirst(_32SetMapChannel, if (show boxes)
      {
        Int32 _35Constant;// 41:MeshCopyCustomMapChannelVertexBuffers->0:Constant 181641
        IArray[Int32] _36Range;// 41:MeshCopyCustomMapChannelVertexBuffers->1:Range 181640
        Int32 _37Two;// 41:MeshCopyCustomMapChannelVertexBuffers->4:Two 181642
        IArray[Int32] _38Skip;// 41:MeshCopyCustomMapChannelVertexBuffers->3:Skip 181639
        IArray[Int32] _39Filter;// 41:MeshCopyCustomMapChannelVertexBuffers->13:Filter 181638
        MapChannel _40GetMapChannel;// 34:MatricesFromMapChannel->9:GetMapChannel 181700
        IArray[Vector3] _41MapChannelVertexBuffer;// 34:MatricesFromMapChannel->8:MapChannelVertexBuffer 181699
        Int32 _42Count;// 2:Slices->2:Count 181696
        Int32 _43Constant;// 34:MatricesFromMapChannel->0:Constant 181701
        Int32 _44Divide;// 2:Slices->3:Divide 181695
        IArray[Int32] _45Range;// 2:Slices->4:Range 181694
        IArray[IArray[Vector3]] _46Map;// 2:Slices->5:Map 181693
        IArray[Matrix] _47Map;// 34:MatricesFromMapChannel->5:Map 181690
        Single _48Constant;// 1:Origin->0:Constant 181758
        Vector3 _49Vector3;// 1:Origin->1:Vector3 181757
        BoundingSphere _50Sphere;// 0:BoxFromPointAndRadius->3:Sphere 181756
        BoundingBox _51BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 181755
        QuadMesh _52BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 181751
        TriMesh _53Triangulate;// 29:BoxTriMesh->3:Triangulate 181750
        IArray[Int32] _54MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 181741
        IArray[Int32] _55Indices;// 4:HideEveryThirdEdge->8:Indices 181740
        Int32 _56Constant;// 4:HideEveryThirdEdge->0:Constant 181748
        Int32 _57Constant;// 4:HideEveryThirdEdge->0:Constant 181749
        IArray[Boolean] _58Map;// 4:HideEveryThirdEdge->5:Map 181739
        TriMesh _59SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 181738
        IArray[TriMesh] _60Map;// 4:FluxMeshAsBoxes->16:Map 181687
        TriMesh _61CombineAllMeshes;// 4:FluxMeshAsBoxes->2:CombineAllMeshes 181686
        TriMesh _62Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers->6:Aggregate 181637
        _35Constant = 100;
        _36Range = Range(_35Constant);
        _37Two = Two();
        _38Skip = Skip(_36Range, _37Two);
        _39Filter = Filter(_38Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry->0:Constant 181655
            Boolean _1Equal;// 5:GetMapChannelOrGeometry->4:Equal 181654
            MapChannel _4Pass-through: any;// 0:Pass-through: any 181646
            Object _5Null;// 6:IsNullFix2->3:Null 181650
            Object _6As;// 6:IsNullFix2->23:As 181648
            Boolean _7Equal;// 6:IsNullFix2->1:Equal 181647
            Boolean _8Not;// 12:MapChannelExists->4:Not 181645
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _4Pass-through: any = if (_1Equal)
              {
                MapChannel _2TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 181656
                _2TopologyChannel = TopologyChannel(_32SetMapChannel);
                _2TopologyChannel;
                }else
              {
                MapChannel _3GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 181657
                _3GetMapChannel = GetMapChannel(_32SetMapChannel, x0);
                _3GetMapChannel;
                };
            _5Null = Null();
            _6As = As(_4Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 181649
                _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                _0IgnoreFirst;
                });
            _7Equal = Equal(_6As, _5Null);
            _8Not = Not(_7Equal);
            _8Not;
            });
        _40GetMapChannel = GetMapChannel(_32SetMapChannel, flux channel);
        _41MapChannelVertexBuffer = MapChannelVertexBuffer(_40GetMapChannel);
        _42Count = Count(_41MapChannelVertexBuffer);
        _43Constant = 4;
        _44Divide = Divide(_42Count, _43Constant);
        _45Range = Range(_44Divide);
        _46Map = Map(_45Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 181698
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 181697
            _0Multiply = Multiply(_43Constant, x0);
            _1Slice = Slice(_41MapChannelVertexBuffer, _0Multiply, _43Constant);
            _1Slice;
            });
        _47Map = Map(_46Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 181710
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 181711
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 181715
            Vector3 _3At;// 6:MatrixFromRows->3:At 181714
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 181709
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 181712
            Int32 _6One;// 8:PlusOne->1:One 181719
            Int32 _7Add;// 8:PlusOne->0:Add 181718
            Vector3 _8At;// 6:MatrixFromRows->4:At 181716
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 181708
            Int32 _10Constant;// 25:Three->0:Constant 181713
            Int32 _11One;// 9:PlusOne->1:One 181723
            Int32 _12Add;// 9:PlusOne->0:Add 181722
            Vector3 _13At;// 6:MatrixFromRows->5:At 181720
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 181707
            Int32 _15One;// 10:PlusOne->1:One 181727
            Int32 _16Add;// 10:PlusOne->0:Add 181726
            Vector3 _17At;// 6:MatrixFromRows->6:At 181724
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 181703
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _48Constant = 0;
        _49Vector3 = Vector3(_48Constant, _48Constant, _48Constant);
        _50Sphere = Sphere(_49Vector3, box radius);
        _51BoxFromSphere = BoxFromSphere(_50Sphere);
        _52BoxQuadMesh = BoxQuadMesh(_51BoxFromSphere);
        _53Triangulate = Triangulate(_52BoxQuadMesh);
        _54MeshIndices = MeshIndices(_53Triangulate);
        _55Indices = Indices(_54MeshIndices);
        _56Constant = 3;
        _57Constant = 2;
        _58Map = Map(_55Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 181747
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 181746
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 181742
            _0Modulo = Modulo(x0, _56Constant);
            _1Equal = Equal(_0Modulo, _57Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _59SetVisibleEdges = SetVisibleEdges(_53Triangulate, _58Map);
        _60Map = Map(_47Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 181734
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 181731
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 181733
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 181732
            _0MeshVertices = MeshVertices(_59SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 181735
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_59SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _61CombineAllMeshes = CombineAllMeshes(_60Map);
        _62Aggregate = Aggregate(_39Filter, _61CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer->10:TryCatch 181661
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers->7:IgnoreFirst 181683
                Int32 _1Constant;// 5:GetMapChannelOrGeometry->0:Constant 181675
                Boolean _2Equal;// 5:GetMapChannelOrGeometry->4:Equal 181674
                MapChannel _5Pass-through: any;// 0:Pass-through: any 181666
                Object _6Null;// 6:IsNullFix2->3:Null 181670
                Object _7As;// 6:IsNullFix2->23:As 181668
                Boolean _8Equal;// 6:IsNullFix2->1:Equal 181667
                Boolean _9Not;// 5:MapChannelExists->4:Not 181665
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _5Pass-through: any = if (_2Equal)
                  {
                    MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 181676
                    _3TopologyChannel = TopologyChannel(_32SetMapChannel);
                    _3TopologyChannel;
                    }else
                  {
                    MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 181677
                    _4GetMapChannel = GetMapChannel(_32SetMapChannel, _0IgnoreFirst);
                    _4GetMapChannel;
                    };
                _6Null = Null();
                _7As = As(_5Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 181669
                    _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                    _0IgnoreFirst;
                    });
                _8Equal = Equal(_7As, _6Null);
                _9Not = Not(_8Equal);
                if (_9Not)
                  {
                    MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer->1:GetMapChannel 181680
                    IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer->8:MapChannelVertexBuffer 181679
                    IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer->0:MeshIndices 181681
                    TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer->7:SetMapChannel 181678
                    _10GetMapChannel = GetMapChannel(_32SetMapChannel, _0IgnoreFirst);
                    _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                    _12MeshIndices = MeshIndices(x0);
                    _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                    _13SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer->11:IgnoreFirst 181682
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _62Aggregate;
        }else
      {
        _32SetMapChannel;
        });
    _63IgnoreFirst;
    }