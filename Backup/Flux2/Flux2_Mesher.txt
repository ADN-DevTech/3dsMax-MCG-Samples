(InstanceState state, TriMesh mesh, Boolean keep custom channels, Boolean include original, Boolean create nodes, Boolean use children, Boolean randomize children, INode clone target, Int32 flux channel, Int32 randomize seed) => 
  {
    IArray[TriMesh] _0IfThen;// 12:FluxTransformChildMeshes->21:IfThen 1383485
    TriMesh _2CombineAllMeshes;// 29:FluxClone->45:CombineAllMeshes 1383473
    TriMesh _10IgnoreFirst;// 29:FluxClone->9:IgnoreFirst 1383420
    _0IfThen = IfThen(create nodes, () => 
      {
        MapChannel _0GetMapChannel;// 34:MatricesFromMapChannel->9:GetMapChannel 1383563
        IArray[Vector3] _1MapChannelVertexBuffer;// 34:MatricesFromMapChannel->8:MapChannelVertexBuffer 1383562
        Int32 _2Count;// 2:Slices->2:Count 1383559
        Int32 _3Constant;// 34:MatricesFromMapChannel->0:Constant 1383564
        Int32 _4Divide;// 2:Slices->3:Divide 1383558
        IArray[Int32] _5Range;// 2:Slices->4:Range 1383557
        IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 1383556
        IArray[Matrix] _7Map;// 34:MatricesFromMapChannel->5:Map 1383553
        Int32 _8Count;// 17:FluxChildNodes->9:Count 1383536
        IArray[INode] _23Map;// 12:FluxTransformChildMeshes->10:Map 1383488
        IArray[TriMesh] _24Combine;// 12:FluxTransformChildMeshes->8:Combine 1383487
        IArray[TriMesh] _43Combine;// 12:FluxTransformChildMeshes->12:Combine 1383541
        IArray[TriMesh] _44IgnoreFirst;// 12:FluxTransformChildMeshes->3:IgnoreFirst 1383486
        _0GetMapChannel = GetMapChannel(mesh, flux channel);
        _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
        _2Count = Count(_1MapChannelVertexBuffer);
        _3Constant = 4;
        _4Divide = Divide(_2Count, _3Constant);
        _5Range = Range(_4Divide);
        _6Map = Map(_5Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 1383561
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 1383560
            _0Multiply = Multiply(_3Constant, x0);
            _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
            _1Slice;
            });
        _7Map = Map(_6Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 1383573
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 1383574
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 1383578
            Vector3 _3At;// 6:MatrixFromRows->3:At 1383577
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 1383572
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 1383575
            Int32 _6One;// 8:PlusOne->1:One 1383582
            Int32 _7Add;// 8:PlusOne->0:Add 1383581
            Vector3 _8At;// 6:MatrixFromRows->4:At 1383579
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 1383571
            Int32 _10Constant;// 25:Three->0:Constant 1383576
            Int32 _11One;// 9:PlusOne->1:One 1383586
            Int32 _12Add;// 9:PlusOne->0:Add 1383585
            Vector3 _13At;// 6:MatrixFromRows->5:At 1383583
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 1383570
            Int32 _15One;// 10:PlusOne->1:One 1383590
            Int32 _16Add;// 10:PlusOne->0:Add 1383589
            Vector3 _17At;// 6:MatrixFromRows->6:At 1383587
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 1383566
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _8Count = Count(_7Map);
        _23Map = Map(if (use children)
          {
            IArray[INode] _9ChildNodes;// 17:FluxChildNodes->17:ChildNodes 1383501
            IArray[Int32] _10Range;// 2:MapRange->2:Range 1383525
            Func[Int32, INode] _11Pass-through: function1;// 0:Pass-through: function1 1383523
            IArray[INode] _12Map;// 2:MapRange->3:Map 1383524
            _9ChildNodes = ChildNodes(clone target);
            _10Range = Range(_8Count);
            _11Pass-through: function1 = (Int32 x0) => 
              {
                Int32 _0Count;// 7:AtModulo->6:Count 1383534
                Int32 _1Modulo;// 7:AtModulo->5:Modulo 1383533
                Int32 _2Zero;// 7:LessThanZero->2:Zero 1383532
                Boolean _3LessThan;// 7:LessThanZero->1:LessThan 1383531
                INode _5At;// 7:AtModulo->3:At 1383528
                _0Count = Count(_9ChildNodes);
                _1Modulo = Modulo(x0, _0Count);
                _2Zero = Zero();
                _3LessThan = LessThan(_1Modulo, _2Zero);
                _5At = At(_9ChildNodes, if (_3LessThan)
                  {
                    Int32 _4Add;// 7:AtModulo->8:Add 1383535
                    _4Add = Add(_1Modulo, _0Count);
                    _4Add;
                    }else
                  {
                    _1Modulo;
                    });
                _5At;
                };
            _12Map = Map(_10Range, _11Pass-through: function1);
            if (randomize children)
              {
                Int32 _13Count;// 17:FluxChildNodes->5:Count 1383500
                Int32 _14Zero;// 11:GreaterThanZero->1:Zero 1383499
                Boolean _15GreaterThan;// 11:GreaterThanZero->3:GreaterThan 1383498
                _13Count = Count(_9ChildNodes);
                _14Zero = Zero();
                _15GreaterThan = GreaterThan(_13Count, _14Zero);
                if (_15GreaterThan)
                  {
                    Func[Random, Int32] _16Pass-through: function1;// 0:Pass-through: function1 1383511
                    Random _17RandomNumberGenerator;// 10:RandomizeArray->2:RandomNumberGenerator 1383518
                    Func[Int32] _18Bind;// 0:RandomArray->4:Bind 1383515
                    Int32 _19Count;// 10:RandomizeArray->4:Count 1383519
                    IArray[Int32] _20ArrayOfFunction;// 0:RandomArray->5:ArrayOfFunction 1383514
                    IArray[INode] _21Map;// 5:SelectByIndex->2:Map 1383506
                    _16Pass-through: function1 = (Random x0) => 
                      {
                        Int32 _0Count;// 1:ArrayRandomIndices->4:Count 1383517
                        _0Count = Count(_12Map);
                        PseudoRandomInt(x0, _0Count);
                        };
                    _17RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _18Bind = Bind(_16Pass-through: function1, _17RandomNumberGenerator);
                    _19Count = Count(_12Map);
                    _20ArrayOfFunction = ArrayOfFunction(_18Bind, _19Count);
                    _21Map = Map(_20ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 1383507
                        _0At = At(_12Map, x0);
                        _0At;
                        });
                    _21Map;
                    }else
                  {
                    _9ChildNodes;
                    };
                }else
              {
                _12Map;
                };
            }else
          {
            IArray[INode] _22ArrayOf;// 17:FluxChildNodes->3:ArrayOf 1383537
            _22ArrayOf = ArrayOf(clone target, _8Count);
            _22ArrayOf;
            }, (INode x0) => 
          {
            INode _0CloneAsInstance;// 12:FluxTransformChildMeshes->14:CloneAsInstance 1383538
            _0CloneAsInstance = CloneAsInstance(x0);
            _0CloneAsInstance;
            });
        _24Combine = Combine(_23Map, _7Map, (INode x0, Matrix x1) => 
          {
            INode _0SetNodeTransform;// 12:FluxTransformChildMeshes->5:SetNodeTransform 1383540
            TriMesh _1MeshFromNode;// 12:FluxTransformChildMeshes->9:MeshFromNode 1383539
            _0SetNodeTransform = SetNodeTransform(x0, x1);
            _1MeshFromNode = MeshFromNode(_0SetNodeTransform);
            _1MeshFromNode;
            });
        _43Combine = Combine(if (use children)
          {
            if (randomize children)
              {
                IArray[INode] _25ChildNodes;// 17:FluxChildNodes->17:ChildNodes 1383501
                Int32 _26Count;// 17:FluxChildNodes->5:Count 1383500
                Int32 _27Zero;// 11:GreaterThanZero->1:Zero 1383499
                Boolean _28GreaterThan;// 11:GreaterThanZero->3:GreaterThan 1383498
                _25ChildNodes = ChildNodes(clone target);
                _26Count = Count(_25ChildNodes);
                _27Zero = Zero();
                _28GreaterThan = GreaterThan(_26Count, _27Zero);
                if (_28GreaterThan)
                  {
                    Func[Random, Int32] _29Pass-through: function1;// 0:Pass-through: function1 1383511
                    Random _30RandomNumberGenerator;// 10:RandomizeArray->2:RandomNumberGenerator 1383518
                    Func[Int32] _31Bind;// 0:RandomArray->4:Bind 1383515
                    IArray[Int32] _32Range;// 2:MapRange->2:Range 1383525
                    Func[Int32, INode] _33Pass-through: function1;// 0:Pass-through: function1 1383523
                    IArray[INode] _34Map;// 2:MapRange->3:Map 1383524
                    Int32 _35Count;// 10:RandomizeArray->4:Count 1383519
                    IArray[Int32] _36ArrayOfFunction;// 0:RandomArray->5:ArrayOfFunction 1383514
                    IArray[INode] _37Map;// 5:SelectByIndex->2:Map 1383506
                    _29Pass-through: function1 = (Random x0) => 
                      {
                        IArray[Int32] _0Range;// 2:MapRange->2:Range 1383525
                        Func[Int32, INode] _1Pass-through: function1;// 0:Pass-through: function1 1383523
                        IArray[INode] _2Map;// 2:MapRange->3:Map 1383524
                        Int32 _3Count;// 1:ArrayRandomIndices->4:Count 1383517
                        _0Range = Range(_8Count);
                        _1Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Count;// 7:AtModulo->6:Count 1383534
                            Int32 _1Modulo;// 7:AtModulo->5:Modulo 1383533
                            Int32 _2Zero;// 7:LessThanZero->2:Zero 1383532
                            Boolean _3LessThan;// 7:LessThanZero->1:LessThan 1383531
                            INode _5At;// 7:AtModulo->3:At 1383528
                            _0Count = Count(_25ChildNodes);
                            _1Modulo = Modulo(x0, _0Count);
                            _2Zero = Zero();
                            _3LessThan = LessThan(_1Modulo, _2Zero);
                            _5At = At(_25ChildNodes, if (_3LessThan)
                              {
                                Int32 _4Add;// 7:AtModulo->8:Add 1383535
                                _4Add = Add(_1Modulo, _0Count);
                                _4Add;
                                }else
                              {
                                _1Modulo;
                                });
                            _5At;
                            };
                        _2Map = Map(_0Range, _1Pass-through: function1);
                        _3Count = Count(_2Map);
                        PseudoRandomInt(x0, _3Count);
                        };
                    _30RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _31Bind = Bind(_29Pass-through: function1, _30RandomNumberGenerator);
                    _32Range = Range(_8Count);
                    _33Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Count;// 7:AtModulo->6:Count 1383534
                        Int32 _1Modulo;// 7:AtModulo->5:Modulo 1383533
                        Int32 _2Zero;// 7:LessThanZero->2:Zero 1383532
                        Boolean _3LessThan;// 7:LessThanZero->1:LessThan 1383531
                        INode _5At;// 7:AtModulo->3:At 1383528
                        _0Count = Count(_25ChildNodes);
                        _1Modulo = Modulo(x0, _0Count);
                        _2Zero = Zero();
                        _3LessThan = LessThan(_1Modulo, _2Zero);
                        _5At = At(_25ChildNodes, if (_3LessThan)
                          {
                            Int32 _4Add;// 7:AtModulo->8:Add 1383535
                            _4Add = Add(_1Modulo, _0Count);
                            _4Add;
                            }else
                          {
                            _1Modulo;
                            });
                        _5At;
                        };
                    _34Map = Map(_32Range, _33Pass-through: function1);
                    _35Count = Count(_34Map);
                    _36ArrayOfFunction = ArrayOfFunction(_31Bind, _35Count);
                    _37Map = Map(_36ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 1383507
                        _0At = At(_34Map, x0);
                        _0At;
                        });
                    _37Map;
                    }else
                  {
                    _25ChildNodes;
                    };
                }else
              {
                IArray[Int32] _38Range;// 2:MapRange->2:Range 1383525
                IArray[INode] _39ChildNodes;// 17:FluxChildNodes->17:ChildNodes 1383501
                Func[Int32, INode] _40Pass-through: function1;// 0:Pass-through: function1 1383523
                IArray[INode] _41Map;// 2:MapRange->3:Map 1383524
                _38Range = Range(_8Count);
                _39ChildNodes = ChildNodes(clone target);
                _40Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Count;// 7:AtModulo->6:Count 1383534
                    Int32 _1Modulo;// 7:AtModulo->5:Modulo 1383533
                    Int32 _2Zero;// 7:LessThanZero->2:Zero 1383532
                    Boolean _3LessThan;// 7:LessThanZero->1:LessThan 1383531
                    INode _5At;// 7:AtModulo->3:At 1383528
                    _0Count = Count(_39ChildNodes);
                    _1Modulo = Modulo(x0, _0Count);
                    _2Zero = Zero();
                    _3LessThan = LessThan(_1Modulo, _2Zero);
                    _5At = At(_39ChildNodes, if (_3LessThan)
                      {
                        Int32 _4Add;// 7:AtModulo->8:Add 1383535
                        _4Add = Add(_1Modulo, _0Count);
                        _4Add;
                        }else
                      {
                        _1Modulo;
                        });
                    _5At;
                    };
                _41Map = Map(_38Range, _40Pass-through: function1);
                _41Map;
                };
            }else
          {
            IArray[INode] _42ArrayOf;// 17:FluxChildNodes->3:ArrayOf 1383537
            _42ArrayOf = ArrayOf(clone target, _8Count);
            _42ArrayOf;
            }, _7Map, (INode x0, Matrix x1) => 
          {
            TriMesh _0MeshFromNode;// 12:FluxTransformChildMeshes->0:MeshFromNode 1383550
            IArray[Vector3] _1MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 1383548
            Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 1383545
            IArray[Vector3] _3Map;// 2:DeformMeshPoints->1:Map 1383547
            TriMesh _4SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 1383546
            _0MeshFromNode = MeshFromNode(x0);
            _1MeshVertices = MeshVertices(_0MeshFromNode);
            _2Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 13:TransformMesh->0:Transform 1383549
                _0Transform = Transform(x0, x1);
                _0Transform;
                };
            _3Map = Map(_1MeshVertices, _2Pass-through: function1);
            _4SetMeshVertices = SetMeshVertices(_0MeshFromNode, _3Map);
            _4SetMeshVertices;
            });
        _44IgnoreFirst = IgnoreFirst(_24Combine, _43Combine);
        _44IgnoreFirst;
        }, () => 
      {
        MapChannel _0GetMapChannel;// 34:MatricesFromMapChannel->9:GetMapChannel 1383563
        IArray[Vector3] _1MapChannelVertexBuffer;// 34:MatricesFromMapChannel->8:MapChannelVertexBuffer 1383562
        Int32 _2Count;// 2:Slices->2:Count 1383559
        Int32 _3Constant;// 34:MatricesFromMapChannel->0:Constant 1383564
        Int32 _4Divide;// 2:Slices->3:Divide 1383558
        IArray[Int32] _5Range;// 2:Slices->4:Range 1383557
        IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 1383556
        IArray[Matrix] _7Map;// 34:MatricesFromMapChannel->5:Map 1383553
        IArray[TriMesh] _28Combine;// 12:FluxTransformChildMeshes->12:Combine 1383541
        _0GetMapChannel = GetMapChannel(mesh, flux channel);
        _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
        _2Count = Count(_1MapChannelVertexBuffer);
        _3Constant = 4;
        _4Divide = Divide(_2Count, _3Constant);
        _5Range = Range(_4Divide);
        _6Map = Map(_5Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 1383561
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 1383560
            _0Multiply = Multiply(_3Constant, x0);
            _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
            _1Slice;
            });
        _7Map = Map(_6Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 1383573
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 1383574
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 1383578
            Vector3 _3At;// 6:MatrixFromRows->3:At 1383577
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 1383572
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 1383575
            Int32 _6One;// 8:PlusOne->1:One 1383582
            Int32 _7Add;// 8:PlusOne->0:Add 1383581
            Vector3 _8At;// 6:MatrixFromRows->4:At 1383579
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 1383571
            Int32 _10Constant;// 25:Three->0:Constant 1383576
            Int32 _11One;// 9:PlusOne->1:One 1383586
            Int32 _12Add;// 9:PlusOne->0:Add 1383585
            Vector3 _13At;// 6:MatrixFromRows->5:At 1383583
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 1383570
            Int32 _15One;// 10:PlusOne->1:One 1383590
            Int32 _16Add;// 10:PlusOne->0:Add 1383589
            Vector3 _17At;// 6:MatrixFromRows->6:At 1383587
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 1383566
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _28Combine = Combine(if (use children)
          {
            Int32 _8Count;// 17:FluxChildNodes->9:Count 1383536
            _8Count = Count(_7Map);
            if (randomize children)
              {
                IArray[INode] _9ChildNodes;// 17:FluxChildNodes->17:ChildNodes 1383501
                Int32 _10Count;// 17:FluxChildNodes->5:Count 1383500
                Int32 _11Zero;// 11:GreaterThanZero->1:Zero 1383499
                Boolean _12GreaterThan;// 11:GreaterThanZero->3:GreaterThan 1383498
                _9ChildNodes = ChildNodes(clone target);
                _10Count = Count(_9ChildNodes);
                _11Zero = Zero();
                _12GreaterThan = GreaterThan(_10Count, _11Zero);
                if (_12GreaterThan)
                  {
                    Func[Random, Int32] _13Pass-through: function1;// 0:Pass-through: function1 1383511
                    Random _14RandomNumberGenerator;// 10:RandomizeArray->2:RandomNumberGenerator 1383518
                    Func[Int32] _15Bind;// 0:RandomArray->4:Bind 1383515
                    IArray[Int32] _16Range;// 2:MapRange->2:Range 1383525
                    Func[Int32, INode] _17Pass-through: function1;// 0:Pass-through: function1 1383523
                    IArray[INode] _18Map;// 2:MapRange->3:Map 1383524
                    Int32 _19Count;// 10:RandomizeArray->4:Count 1383519
                    IArray[Int32] _20ArrayOfFunction;// 0:RandomArray->5:ArrayOfFunction 1383514
                    IArray[INode] _21Map;// 5:SelectByIndex->2:Map 1383506
                    _13Pass-through: function1 = (Random x0) => 
                      {
                        IArray[Int32] _0Range;// 2:MapRange->2:Range 1383525
                        Func[Int32, INode] _1Pass-through: function1;// 0:Pass-through: function1 1383523
                        IArray[INode] _2Map;// 2:MapRange->3:Map 1383524
                        Int32 _3Count;// 1:ArrayRandomIndices->4:Count 1383517
                        _0Range = Range(_8Count);
                        _1Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Count;// 7:AtModulo->6:Count 1383534
                            Int32 _1Modulo;// 7:AtModulo->5:Modulo 1383533
                            Int32 _2Zero;// 7:LessThanZero->2:Zero 1383532
                            Boolean _3LessThan;// 7:LessThanZero->1:LessThan 1383531
                            INode _5At;// 7:AtModulo->3:At 1383528
                            _0Count = Count(_9ChildNodes);
                            _1Modulo = Modulo(x0, _0Count);
                            _2Zero = Zero();
                            _3LessThan = LessThan(_1Modulo, _2Zero);
                            _5At = At(_9ChildNodes, if (_3LessThan)
                              {
                                Int32 _4Add;// 7:AtModulo->8:Add 1383535
                                _4Add = Add(_1Modulo, _0Count);
                                _4Add;
                                }else
                              {
                                _1Modulo;
                                });
                            _5At;
                            };
                        _2Map = Map(_0Range, _1Pass-through: function1);
                        _3Count = Count(_2Map);
                        PseudoRandomInt(x0, _3Count);
                        };
                    _14RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _15Bind = Bind(_13Pass-through: function1, _14RandomNumberGenerator);
                    _16Range = Range(_8Count);
                    _17Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Count;// 7:AtModulo->6:Count 1383534
                        Int32 _1Modulo;// 7:AtModulo->5:Modulo 1383533
                        Int32 _2Zero;// 7:LessThanZero->2:Zero 1383532
                        Boolean _3LessThan;// 7:LessThanZero->1:LessThan 1383531
                        INode _5At;// 7:AtModulo->3:At 1383528
                        _0Count = Count(_9ChildNodes);
                        _1Modulo = Modulo(x0, _0Count);
                        _2Zero = Zero();
                        _3LessThan = LessThan(_1Modulo, _2Zero);
                        _5At = At(_9ChildNodes, if (_3LessThan)
                          {
                            Int32 _4Add;// 7:AtModulo->8:Add 1383535
                            _4Add = Add(_1Modulo, _0Count);
                            _4Add;
                            }else
                          {
                            _1Modulo;
                            });
                        _5At;
                        };
                    _18Map = Map(_16Range, _17Pass-through: function1);
                    _19Count = Count(_18Map);
                    _20ArrayOfFunction = ArrayOfFunction(_15Bind, _19Count);
                    _21Map = Map(_20ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 1383507
                        _0At = At(_18Map, x0);
                        _0At;
                        });
                    _21Map;
                    }else
                  {
                    _9ChildNodes;
                    };
                }else
              {
                IArray[Int32] _22Range;// 2:MapRange->2:Range 1383525
                IArray[INode] _23ChildNodes;// 17:FluxChildNodes->17:ChildNodes 1383501
                Func[Int32, INode] _24Pass-through: function1;// 0:Pass-through: function1 1383523
                IArray[INode] _25Map;// 2:MapRange->3:Map 1383524
                _22Range = Range(_8Count);
                _23ChildNodes = ChildNodes(clone target);
                _24Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Count;// 7:AtModulo->6:Count 1383534
                    Int32 _1Modulo;// 7:AtModulo->5:Modulo 1383533
                    Int32 _2Zero;// 7:LessThanZero->2:Zero 1383532
                    Boolean _3LessThan;// 7:LessThanZero->1:LessThan 1383531
                    INode _5At;// 7:AtModulo->3:At 1383528
                    _0Count = Count(_23ChildNodes);
                    _1Modulo = Modulo(x0, _0Count);
                    _2Zero = Zero();
                    _3LessThan = LessThan(_1Modulo, _2Zero);
                    _5At = At(_23ChildNodes, if (_3LessThan)
                      {
                        Int32 _4Add;// 7:AtModulo->8:Add 1383535
                        _4Add = Add(_1Modulo, _0Count);
                        _4Add;
                        }else
                      {
                        _1Modulo;
                        });
                    _5At;
                    };
                _25Map = Map(_22Range, _24Pass-through: function1);
                _25Map;
                };
            }else
          {
            Int32 _26Count;// 17:FluxChildNodes->9:Count 1383536
            IArray[INode] _27ArrayOf;// 17:FluxChildNodes->3:ArrayOf 1383537
            _26Count = Count(_7Map);
            _27ArrayOf = ArrayOf(clone target, _26Count);
            _27ArrayOf;
            }, _7Map, (INode x0, Matrix x1) => 
          {
            TriMesh _0MeshFromNode;// 12:FluxTransformChildMeshes->0:MeshFromNode 1383550
            IArray[Vector3] _1MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 1383548
            Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 1383545
            IArray[Vector3] _3Map;// 2:DeformMeshPoints->1:Map 1383547
            TriMesh _4SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 1383546
            _0MeshFromNode = MeshFromNode(x0);
            _1MeshVertices = MeshVertices(_0MeshFromNode);
            _2Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 13:TransformMesh->0:Transform 1383549
                _0Transform = Transform(x0, x1);
                _0Transform;
                };
            _3Map = Map(_1MeshVertices, _2Pass-through: function1);
            _4SetMeshVertices = SetMeshVertices(_0MeshFromNode, _3Map);
            _4SetMeshVertices;
            });
        _28Combine;
        });
    _2CombineAllMeshes = CombineAllMeshes(if (include original)
      {
        IArray[TriMesh] _1Append;// 39:AppendIf->1:Append 1383478
        _1Append = Append(_0IfThen, mesh);
        _1Append;
        }else
      {
        _0IfThen;
        });
    _10IgnoreFirst = IgnoreFirst(mesh, if (keep custom channels)
      {
        Int32 _4Constant;// 41:MeshCopyCustomMapChannelVertexBuffers->0:Constant 1383428
        IArray[Int32] _5Range;// 41:MeshCopyCustomMapChannelVertexBuffers->1:Range 1383427
        Int32 _6Two;// 41:MeshCopyCustomMapChannelVertexBuffers->4:Two 1383429
        IArray[Int32] _7Skip;// 41:MeshCopyCustomMapChannelVertexBuffers->3:Skip 1383426
        IArray[Int32] _8Filter;// 41:MeshCopyCustomMapChannelVertexBuffers->13:Filter 1383425
        TriMesh _9Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers->6:Aggregate 1383424
        _4Constant = 100;
        _5Range = Range(_4Constant);
        _6Two = Two();
        _7Skip = Skip(_5Range, _6Two);
        _8Filter = Filter(_7Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry->0:Constant 1383442
            Boolean _1Equal;// 5:GetMapChannelOrGeometry->4:Equal 1383441
            MapChannel _4Pass-through: any;// 0:Pass-through: any 1383433
            Object _5Null;// 6:IsNullFix2->3:Null 1383437
            Object _6As;// 6:IsNullFix2->23:As 1383435
            Boolean _7Equal;// 6:IsNullFix2->1:Equal 1383434
            Boolean _8Not;// 12:MapChannelExists->4:Not 1383432
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _4Pass-through: any = if (_1Equal)
              {
                MapChannel _2TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 1383443
                _2TopologyChannel = TopologyChannel(mesh);
                _2TopologyChannel;
                }else
              {
                MapChannel _3GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 1383444
                _3GetMapChannel = GetMapChannel(mesh, x0);
                _3GetMapChannel;
                };
            _5Null = Null();
            _6As = As(_4Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 1383436
                _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                _0IgnoreFirst;
                });
            _7Equal = Equal(_6As, _5Null);
            _8Not = Not(_7Equal);
            _8Not;
            });
        _9Aggregate = Aggregate(_8Filter, _2CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer->10:TryCatch 1383448
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers->7:IgnoreFirst 1383470
                Int32 _1Constant;// 5:GetMapChannelOrGeometry->0:Constant 1383462
                Boolean _2Equal;// 5:GetMapChannelOrGeometry->4:Equal 1383461
                MapChannel _5Pass-through: any;// 0:Pass-through: any 1383453
                Object _6Null;// 6:IsNullFix2->3:Null 1383457
                Object _7As;// 6:IsNullFix2->23:As 1383455
                Boolean _8Equal;// 6:IsNullFix2->1:Equal 1383454
                Boolean _9Not;// 5:MapChannelExists->4:Not 1383452
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _5Pass-through: any = if (_2Equal)
                  {
                    MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 1383463
                    _3TopologyChannel = TopologyChannel(mesh);
                    _3TopologyChannel;
                    }else
                  {
                    MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 1383464
                    _4GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _4GetMapChannel;
                    };
                _6Null = Null();
                _7As = As(_5Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 1383456
                    _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                    _0IgnoreFirst;
                    });
                _8Equal = Equal(_7As, _6Null);
                _9Not = Not(_8Equal);
                if (_9Not)
                  {
                    MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer->1:GetMapChannel 1383467
                    IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer->8:MapChannelVertexBuffer 1383466
                    IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer->0:MeshIndices 1383468
                    TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer->7:SetMapChannel 1383465
                    _10GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                    _12MeshIndices = MeshIndices(x0);
                    _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                    _13SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer->11:IgnoreFirst 1383469
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _9Aggregate;
        }else
      {
        _2CombineAllMeshes;
        });
    _10IgnoreFirst;
    }