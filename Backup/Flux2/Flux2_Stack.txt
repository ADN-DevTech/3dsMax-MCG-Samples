(InstanceState state, TriMesh mesh, Int32 flux channel, Single maxDistanceFromTop, Single height offset, Int32 levels, Single height, Boolean create mesh, Single box radius) => 
  {
    MapChannel _0GetMapChannel;// 4:MatricesFromMapChannel->9:GetMapChannel 189510
    IArray[Vector3] _1MapChannelVertexBuffer;// 4:MatricesFromMapChannel->8:MapChannelVertexBuffer 189509
    Int32 _2Count;// 2:Slices->2:Count 189506
    Int32 _3Constant;// 4:MatricesFromMapChannel->0:Constant 189511
    Int32 _4Divide;// 2:Slices->3:Divide 189505
    IArray[Int32] _5Range;// 2:Slices->4:Range 189504
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 189503
    IArray[Matrix] _7Map;// 4:MatricesFromMapChannel->5:Map 189500
    IArray[Vector3] _8Map;// 1:MatrixPositions->1:Map 189549
    BoundingBox _9BoxFromPoints;// 2:BoxFromPoints 189547
    IArray[Matrix] _10Filter;// 0:Filter 189497
    Boolean _11True;// 26:TranslateMatrices->4:True 189495
    Vector3 _12ZAxis;// 27:AlongZAxis->3:ZAxis 189554
    Vector3 _13MultiplyByScalar;// 27:AlongZAxis->0:MultiplyByScalar 189553
    Matrix _14TranslationMatrix;// 26:TranslateMatrices->2:TranslationMatrix 189496
    IArray[Matrix] _15Map;// 26:TranslateMatrices->1:Map 189488
    Vector3 _16ZAxis;// 10:AlongZAxis->3:ZAxis 189570
    Vector3 _17MultiplyByScalar;// 10:AlongZAxis->0:MultiplyByScalar 189569
    IArray[IArray[Matrix]] _18GenerateN;// 8:GenerateN 189485
    IArray[Matrix] _19Flatten;// 15:Flatten 189484
    Func[Matrix, IArray[Vector3]] _20Pass-through: function1;// 0:Pass-through: function1 189470
    IArray[IArray[Vector3]] _21Map;// 5:FlatMap->4:Map 189472
    IArray[Vector3] _22Flatten;// 5:FlatMap->3:Flatten 189471
    IArray[Int32] _23MeshIndices;// 16:StoreMatricesInMapChannel->0:MeshIndices 189481
    TriMesh _24SetMapChannel;// 16:StoreMatricesInMapChannel->7:SetMapChannel 189468
    TriMesh _53IgnoreFirst;// 20:FluxMeshAsBoxes->7:IgnoreFirst 189339
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 189508
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 189507
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 189520
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 189521
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 189525
        Vector3 _3At;// 6:MatrixFromRows->3:At 189524
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 189519
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 189522
        Int32 _6One;// 8:PlusOne->1:One 189529
        Int32 _7Add;// 8:PlusOne->0:Add 189528
        Vector3 _8At;// 6:MatrixFromRows->4:At 189526
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 189518
        Int32 _10Constant;// 25:Three->0:Constant 189523
        Int32 _11One;// 9:PlusOne->1:One 189533
        Int32 _12Add;// 9:PlusOne->0:Add 189532
        Vector3 _13At;// 6:MatrixFromRows->5:At 189530
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 189517
        Int32 _15One;// 10:PlusOne->1:One 189537
        Int32 _16Add;// 10:PlusOne->0:Add 189536
        Vector3 _17At;// 6:MatrixFromRows->6:At 189534
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 189513
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8Map = Map(_7Map, (Matrix x0) => 
      {
        Vector3 _0GetMatrixTranslation;// 1:MatrixPositions->2:GetMatrixTranslation 189550
        _0GetMatrixTranslation = GetMatrixTranslation(x0);
        _0GetMatrixTranslation;
        });
    _9BoxFromPoints = BoxFromPoints(_8Map);
    _10Filter = Filter(_7Map, (Matrix x0) => 
      {
        Vector3 _0BoxMax;// 13:MatrixNearBoxTop->7:BoxMax 189544
        Single _1Z;// 13:MatrixNearBoxTop->8:Z 189543
        Vector3 _2GetMatrixTranslation;// 13:MatrixNearBoxTop->3:GetMatrixTranslation 189546
        Single _3Z;// 13:MatrixNearBoxTop->6:Z 189545
        Single _4Subtract;// 13:MatrixNearBoxTop->10:Subtract 189542
        Boolean _5LessThan;// 13:MatrixNearBoxTop->11:LessThan 189541
        _0BoxMax = BoxMax(_9BoxFromPoints);
        _1Z = Z(_0BoxMax);
        _2GetMatrixTranslation = GetMatrixTranslation(x0);
        _3Z = Z(_2GetMatrixTranslation);
        _4Subtract = Subtract(_1Z, _3Z);
        _5LessThan = LessThan(_4Subtract, maxDistanceFromTop);
        _5LessThan;
        });
    _11True = True();
    _12ZAxis = ZAxis();
    _13MultiplyByScalar = MultiplyByScalar(_12ZAxis, height offset);
    _14TranslationMatrix = TranslationMatrix(_13MultiplyByScalar);
    _15Map = Map(_10Filter, (Matrix x0) => 
      {
        if (_11True)
          {
            Matrix _0Multiply;// 3:MatrixApplyTransform->4:Multiply 189493
            _0Multiply = Multiply(_14TranslationMatrix, x0);
            _0Multiply;
            }else
          {
            Matrix _1Multiply;// 3:MatrixApplyTransform->9:Multiply 189494
            _1Multiply = Multiply(x0, _14TranslationMatrix);
            _1Multiply;
            };
        });
    _16ZAxis = ZAxis();
    _17MultiplyByScalar = MultiplyByScalar(_16ZAxis, height);
    _18GenerateN = GenerateN(_15Map, levels, (IArray[Matrix] x0) => 
      {
        Boolean _0True;// 11:TranslateMatrices->4:True 189566
        Matrix _1TranslationMatrix;// 11:TranslateMatrices->2:TranslationMatrix 189567
        IArray[Matrix] _2Map;// 11:TranslateMatrices->1:Map 189559
        _0True = True();
        _1TranslationMatrix = TranslationMatrix(_17MultiplyByScalar);
        _2Map = Map(x0, (Matrix x0) => 
          {
            if (_0True)
              {
                Matrix _0Multiply;// 3:MatrixApplyTransform->4:Multiply 189564
                _0Multiply = Multiply(_1TranslationMatrix, x0);
                _0Multiply;
                }else
              {
                Matrix _1Multiply;// 3:MatrixApplyTransform->9:Multiply 189565
                _1Multiply = Multiply(x0, _1TranslationMatrix);
                _1Multiply;
                };
            });
        _2Map;
        });
    _19Flatten = Flatten(_18GenerateN);
    _20Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 189476
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 189475
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 189474
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 189480
            Int32 _1Add;// 5:PlusOne->0:Add 189479
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 189477
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _21Map = Map(_19Flatten, _20Pass-through: function1);
    _22Flatten = Flatten(_21Map);
    _23MeshIndices = MeshIndices(mesh);
    _24SetMapChannel = SetMapChannel(mesh, flux channel, _22Flatten, _23MeshIndices);
    _53IgnoreFirst = IgnoreFirst(_24SetMapChannel, if (create mesh)
      {
        Int32 _25Constant;// 41:MeshCopyCustomMapChannelVertexBuffers->0:Constant 189347
        IArray[Int32] _26Range;// 41:MeshCopyCustomMapChannelVertexBuffers->1:Range 189346
        Int32 _27Two;// 41:MeshCopyCustomMapChannelVertexBuffers->4:Two 189348
        IArray[Int32] _28Skip;// 41:MeshCopyCustomMapChannelVertexBuffers->3:Skip 189345
        IArray[Int32] _29Filter;// 41:MeshCopyCustomMapChannelVertexBuffers->13:Filter 189344
        MapChannel _30GetMapChannel;// 34:MatricesFromMapChannel->9:GetMapChannel 189406
        IArray[Vector3] _31MapChannelVertexBuffer;// 34:MatricesFromMapChannel->8:MapChannelVertexBuffer 189405
        Int32 _32Count;// 2:Slices->2:Count 189402
        Int32 _33Constant;// 34:MatricesFromMapChannel->0:Constant 189407
        Int32 _34Divide;// 2:Slices->3:Divide 189401
        IArray[Int32] _35Range;// 2:Slices->4:Range 189400
        IArray[IArray[Vector3]] _36Map;// 2:Slices->5:Map 189399
        IArray[Matrix] _37Map;// 34:MatricesFromMapChannel->5:Map 189396
        Single _38Constant;// 1:Origin->0:Constant 189464
        Vector3 _39Vector3;// 1:Origin->1:Vector3 189463
        BoundingSphere _40Sphere;// 0:BoxFromPointAndRadius->3:Sphere 189462
        BoundingBox _41BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 189461
        QuadMesh _42BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 189457
        TriMesh _43Triangulate;// 29:BoxTriMesh->3:Triangulate 189456
        IArray[Int32] _44MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 189447
        IArray[Int32] _45Indices;// 4:HideEveryThirdEdge->8:Indices 189446
        Int32 _46Constant;// 4:HideEveryThirdEdge->0:Constant 189454
        Int32 _47Constant;// 4:HideEveryThirdEdge->0:Constant 189455
        IArray[Boolean] _48Map;// 4:HideEveryThirdEdge->5:Map 189445
        TriMesh _49SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 189444
        IArray[TriMesh] _50Map;// 20:FluxMeshAsBoxes->16:Map 189393
        TriMesh _51CombineAllMeshes;// 20:FluxMeshAsBoxes->2:CombineAllMeshes 189392
        TriMesh _52Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers->6:Aggregate 189343
        _25Constant = 100;
        _26Range = Range(_25Constant);
        _27Two = Two();
        _28Skip = Skip(_26Range, _27Two);
        _29Filter = Filter(_28Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry->0:Constant 189361
            Boolean _1Equal;// 5:GetMapChannelOrGeometry->4:Equal 189360
            MapChannel _4Pass-through: any;// 0:Pass-through: any 189352
            Object _5Null;// 6:IsNullFix2->3:Null 189356
            Object _6As;// 6:IsNullFix2->23:As 189354
            Boolean _7Equal;// 6:IsNullFix2->1:Equal 189353
            Boolean _8Not;// 12:MapChannelExists->4:Not 189351
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _4Pass-through: any = if (_1Equal)
              {
                MapChannel _2TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 189362
                _2TopologyChannel = TopologyChannel(_24SetMapChannel);
                _2TopologyChannel;
                }else
              {
                MapChannel _3GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 189363
                _3GetMapChannel = GetMapChannel(_24SetMapChannel, x0);
                _3GetMapChannel;
                };
            _5Null = Null();
            _6As = As(_4Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 189355
                _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                _0IgnoreFirst;
                });
            _7Equal = Equal(_6As, _5Null);
            _8Not = Not(_7Equal);
            _8Not;
            });
        _30GetMapChannel = GetMapChannel(_24SetMapChannel, flux channel);
        _31MapChannelVertexBuffer = MapChannelVertexBuffer(_30GetMapChannel);
        _32Count = Count(_31MapChannelVertexBuffer);
        _33Constant = 4;
        _34Divide = Divide(_32Count, _33Constant);
        _35Range = Range(_34Divide);
        _36Map = Map(_35Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 189404
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 189403
            _0Multiply = Multiply(_33Constant, x0);
            _1Slice = Slice(_31MapChannelVertexBuffer, _0Multiply, _33Constant);
            _1Slice;
            });
        _37Map = Map(_36Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 189416
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 189417
            Int32 _2Zero;// 6:MatrixFromRows->7:Zero 189421
            Vector3 _3At;// 6:MatrixFromRows->3:At 189420
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 189415
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 189418
            Int32 _6One;// 8:PlusOne->1:One 189425
            Int32 _7Add;// 8:PlusOne->0:Add 189424
            Vector3 _8At;// 6:MatrixFromRows->4:At 189422
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 189414
            Int32 _10Constant;// 25:Three->0:Constant 189419
            Int32 _11One;// 9:PlusOne->1:One 189429
            Int32 _12Add;// 9:PlusOne->0:Add 189428
            Vector3 _13At;// 6:MatrixFromRows->5:At 189426
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 189413
            Int32 _15One;// 10:PlusOne->1:One 189433
            Int32 _16Add;// 10:PlusOne->0:Add 189432
            Vector3 _17At;// 6:MatrixFromRows->6:At 189430
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 189409
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _38Constant = 0;
        _39Vector3 = Vector3(_38Constant, _38Constant, _38Constant);
        _40Sphere = Sphere(_39Vector3, box radius);
        _41BoxFromSphere = BoxFromSphere(_40Sphere);
        _42BoxQuadMesh = BoxQuadMesh(_41BoxFromSphere);
        _43Triangulate = Triangulate(_42BoxQuadMesh);
        _44MeshIndices = MeshIndices(_43Triangulate);
        _45Indices = Indices(_44MeshIndices);
        _46Constant = 3;
        _47Constant = 2;
        _48Map = Map(_45Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 189453
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 189452
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 189448
            _0Modulo = Modulo(x0, _46Constant);
            _1Equal = Equal(_0Modulo, _47Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _49SetVisibleEdges = SetVisibleEdges(_43Triangulate, _48Map);
        _50Map = Map(_37Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 189440
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 189437
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 189439
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 189438
            _0MeshVertices = MeshVertices(_49SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 189441
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_49SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _51CombineAllMeshes = CombineAllMeshes(_50Map);
        _52Aggregate = Aggregate(_29Filter, _51CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer->10:TryCatch 189367
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers->7:IgnoreFirst 189389
                Int32 _1Constant;// 5:GetMapChannelOrGeometry->0:Constant 189381
                Boolean _2Equal;// 5:GetMapChannelOrGeometry->4:Equal 189380
                MapChannel _5Pass-through: any;// 0:Pass-through: any 189372
                Object _6Null;// 6:IsNullFix2->3:Null 189376
                Object _7As;// 6:IsNullFix2->23:As 189374
                Boolean _8Equal;// 6:IsNullFix2->1:Equal 189373
                Boolean _9Not;// 5:MapChannelExists->4:Not 189371
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _5Pass-through: any = if (_2Equal)
                  {
                    MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 189382
                    _3TopologyChannel = TopologyChannel(_24SetMapChannel);
                    _3TopologyChannel;
                    }else
                  {
                    MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 189383
                    _4GetMapChannel = GetMapChannel(_24SetMapChannel, _0IgnoreFirst);
                    _4GetMapChannel;
                    };
                _6Null = Null();
                _7As = As(_5Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 189375
                    _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                    _0IgnoreFirst;
                    });
                _8Equal = Equal(_7As, _6Null);
                _9Not = Not(_8Equal);
                if (_9Not)
                  {
                    MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer->1:GetMapChannel 189386
                    IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer->8:MapChannelVertexBuffer 189385
                    IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer->0:MeshIndices 189387
                    TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer->7:SetMapChannel 189384
                    _10GetMapChannel = GetMapChannel(_24SetMapChannel, _0IgnoreFirst);
                    _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                    _12MeshIndices = MeshIndices(x0);
                    _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                    _13SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer->11:IgnoreFirst 189388
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _52Aggregate;
        }else
      {
        _24SetMapChannel;
        });
    _53IgnoreFirst;
    }