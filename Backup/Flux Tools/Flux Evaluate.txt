(InstanceState state, Boolean keep custom channels, TriMesh mesh, Boolean include original, Int32 flux channel id, INode source mesh, Single default box size) => 
  {
    MapChannel _0GetMapChannel;// 1:MatricesFromMapChannel->9:GetMapChannel 172853
    IArray[Vector3] _1MapChannelVertexBuffer;// 1:MatricesFromMapChannel->8:MapChannelVertexBuffer 172852
    Int32 _2Count;// 2:Slices->2:Count 172849
    Int32 _3Constant;// 1:MatricesFromMapChannel->0:Constant 172854
    Int32 _4Divide;// 2:Slices->3:Divide 172848
    IArray[Int32] _5Range;// 2:Slices->4:Range 172847
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 172846
    IArray[Matrix] _7Map;// 1:MatricesFromMapChannel->5:Map 172843
    Boolean _8IsValidNode;// 6:MeshFromNodeWithDefault->1:IsValidNode 172893
    IArray[TriMesh] _22Map;// 18:Map 172840
    TriMesh _24CombineAllMeshes;// 5:CombineAllMeshes 172833
    _0GetMapChannel = GetMapChannel(mesh, flux channel id);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 172851
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 172850
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 172863
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 172864
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 172868
        Vector3 _3At;// 6:MatrixFromRows->3:At 172867
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 172862
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 172865
        Int32 _6One;// 8:PlusOne->1:One 172872
        Int32 _7Add;// 8:PlusOne->0:Add 172871
        Vector3 _8At;// 6:MatrixFromRows->4:At 172869
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 172861
        Int32 _10Constant;// 25:Three->0:Constant 172866
        Int32 _11One;// 9:PlusOne->1:One 172876
        Int32 _12Add;// 9:PlusOne->0:Add 172875
        Vector3 _13At;// 6:MatrixFromRows->5:At 172873
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 172860
        Int32 _15One;// 10:PlusOne->1:One 172880
        Int32 _16Add;// 10:PlusOne->0:Add 172879
        Vector3 _17At;// 6:MatrixFromRows->6:At 172877
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 172856
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8IsValidNode = IsValidNode(source mesh);
    _22Map = Map(_7Map, (Matrix x0) => 
      {
        TriMesh _13Pass-through: TriMesh;// 0:Pass-through: TriMesh 172882
        IArray[Vector3] _14MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 172888
        Func[Vector3, Vector3] _15Pass-through: function1;// 0:Pass-through: function1 172885
        IArray[Vector3] _16Map;// 2:DeformMeshPoints->1:Map 172887
        TriMesh _17SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 172886
        _13Pass-through: TriMesh = if (_8IsValidNode)
          {
            TriMesh _0MeshFromNode;// 6:MeshFromNodeWithDefault->2:MeshFromNode 172894
            _0MeshFromNode = MeshFromNode(source mesh);
            _0MeshFromNode;
            }else
          {
            Single _1Constant;// 1:Origin->0:Constant 172918
            Vector3 _2Vector3;// 1:Origin->1:Vector3 172917
            BoundingSphere _3Sphere;// 0:BoxFromPointAndRadius->3:Sphere 172916
            BoundingBox _4BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 172915
            QuadMesh _5BoxQuadMesh;// 11:BoxTriMesh->2:BoxQuadMesh 172911
            TriMesh _6Triangulate;// 11:BoxTriMesh->3:Triangulate 172910
            IArray[Int32] _7MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 172901
            IArray[Int32] _8Indices;// 4:HideEveryThirdEdge->8:Indices 172900
            Int32 _9Constant;// 4:HideEveryThirdEdge->0:Constant 172908
            Int32 _10Constant;// 4:HideEveryThirdEdge->0:Constant 172909
            IArray[Boolean] _11Map;// 4:HideEveryThirdEdge->5:Map 172899
            TriMesh _12SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 172898
            _1Constant = 0;
            _2Vector3 = Vector3(_1Constant, _1Constant, _1Constant);
            _3Sphere = Sphere(_2Vector3, default box size);
            _4BoxFromSphere = BoxFromSphere(_3Sphere);
            _5BoxQuadMesh = BoxQuadMesh(_4BoxFromSphere);
            _6Triangulate = Triangulate(_5BoxQuadMesh);
            _7MeshIndices = MeshIndices(_6Triangulate);
            _8Indices = Indices(_7MeshIndices);
            _9Constant = 3;
            _10Constant = 2;
            _11Map = Map(_8Indices, (Int32 x0) => 
              {
                Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 172907
                Boolean _1Equal;// 6:ModuloEquals->4:Equal 172906
                Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 172902
                _0Modulo = Modulo(x0, _9Constant);
                _1Equal = Equal(_0Modulo, _10Constant);
                _2Not = Not(_1Equal);
                _2Not;
                });
            _12SetVisibleEdges = SetVisibleEdges(_6Triangulate, _11Map);
            _12SetVisibleEdges;
            };
        _14MeshVertices = MeshVertices(_13Pass-through: TriMesh);
        _15Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 9:TransformMesh->0:Transform 172889
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _16Map = Map(_14MeshVertices, _15Pass-through: function1);
        _17SetMeshVertices = SetMeshVertices(_13Pass-through: TriMesh, _16Map);
        _17SetMeshVertices;
        });
    _24CombineAllMeshes = CombineAllMeshes(if (include original)
      {
        IArray[TriMesh] _23Append;// 14:AppendIf->1:Append 172838
        _23Append = Append(_22Map, mesh);
        _23Append;
        }else
      {
        _22Map;
        });
    if (keep custom channels)
      {
        Int32 _26Constant;// 21:MeshCopyCustomMapChannelVertexBuffers->0:Constant 172787
        IArray[Int32] _27Range;// 21:MeshCopyCustomMapChannelVertexBuffers->1:Range 172786
        Int32 _28Two;// 21:MeshCopyCustomMapChannelVertexBuffers->4:Two 172788
        IArray[Int32] _29Skip;// 21:MeshCopyCustomMapChannelVertexBuffers->3:Skip 172785
        IArray[Int32] _30Filter;// 21:MeshCopyCustomMapChannelVertexBuffers->13:Filter 172784
        TriMesh _31Aggregate;// 21:MeshCopyCustomMapChannelVertexBuffers->6:Aggregate 172783
        _26Constant = 100;
        _27Range = Range(_26Constant);
        _28Two = Two();
        _29Skip = Skip(_27Range, _28Two);
        _30Filter = Filter(_29Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry->0:Constant 172801
            Boolean _1Equal;// 5:GetMapChannelOrGeometry->4:Equal 172800
            MapChannel _4Pass-through: any;// 0:Pass-through: any 172792
            Object _5Null;// 6:IsNullFix2->3:Null 172796
            Object _6As;// 6:IsNullFix2->23:As 172794
            Boolean _7Equal;// 6:IsNullFix2->1:Equal 172793
            Boolean _8Not;// 12:MapChannelExists->4:Not 172791
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _4Pass-through: any = if (_1Equal)
              {
                MapChannel _2TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 172802
                _2TopologyChannel = TopologyChannel(mesh);
                _2TopologyChannel;
                }else
              {
                MapChannel _3GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 172803
                _3GetMapChannel = GetMapChannel(mesh, x0);
                _3GetMapChannel;
                };
            _5Null = Null();
            _6As = As(_4Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 172795
                _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                _0IgnoreFirst;
                });
            _7Equal = Equal(_6As, _5Null);
            _8Not = Not(_7Equal);
            _8Not;
            });
        _31Aggregate = Aggregate(_30Filter, _24CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer->10:TryCatch 172807
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 21:MeshCopyCustomMapChannelVertexBuffers->7:IgnoreFirst 172829
                Int32 _1Constant;// 5:GetMapChannelOrGeometry->0:Constant 172821
                Boolean _2Equal;// 5:GetMapChannelOrGeometry->4:Equal 172820
                MapChannel _5Pass-through: any;// 0:Pass-through: any 172812
                Object _6Null;// 6:IsNullFix2->3:Null 172816
                Object _7As;// 6:IsNullFix2->23:As 172814
                Boolean _8Equal;// 6:IsNullFix2->1:Equal 172813
                Boolean _9Not;// 5:MapChannelExists->4:Not 172811
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _5Pass-through: any = if (_2Equal)
                  {
                    MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 172822
                    _3TopologyChannel = TopologyChannel(mesh);
                    _3TopologyChannel;
                    }else
                  {
                    MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 172823
                    _4GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _4GetMapChannel;
                    };
                _6Null = Null();
                _7As = As(_5Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 172815
                    _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                    _0IgnoreFirst;
                    });
                _8Equal = Equal(_7As, _6Null);
                _9Not = Not(_8Equal);
                if (_9Not)
                  {
                    MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer->1:GetMapChannel 172826
                    IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer->8:MapChannelVertexBuffer 172825
                    IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer->0:MeshIndices 172827
                    TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer->7:SetMapChannel 172824
                    _10GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                    _12MeshIndices = MeshIndices(x0);
                    _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                    _13SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer->11:IgnoreFirst 172828
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _31Aggregate;
        }else
      {
        _24CombineAllMeshes;
        };
    }