(InstanceState state, TriMesh mesh, Int32 flux channel, Boolean closed, Boolean include original, Int32 count) => 
  {
    MapChannel _0GetMapChannel;// 5:MatricesFromMapChannel->9:GetMapChannel 174644
    IArray[Vector3] _1MapChannelVertexBuffer;// 5:MatricesFromMapChannel->8:MapChannelVertexBuffer 174643
    Int32 _2Count;// 2:Slices->2:Count 174640
    Int32 _3Constant;// 5:MatricesFromMapChannel->0:Constant 174645
    Int32 _4Divide;// 2:Slices->3:Divide 174639
    IArray[Int32] _5Range;// 2:Slices->4:Range 174638
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 174637
    IArray[Matrix] _7Map;// 5:MatricesFromMapChannel->5:Map 174634
    IArray[Matrix] _11Pass-through: array;// 0:Pass-through: array 174558
    Int32 _12Count;// 3:LastIndex->2:Count 174576
    Int32 _13One;// 3:MinusOne->2:One 174575
    Int32 _14Subtract;// 3:MinusOne->1:Subtract 174574
    IArray[Matrix] _15Take;// 1:DropLast->2:Take 174571
    Int32 _16One;// 2:SkipOne->2:One 174579
    IArray[Matrix] _17Skip;// 2:SkipOne->3:Skip 174578
    Func[Matrix, Matrix, IArray[Matrix]] _18Pass-through: function2;// 0:Pass-through: function2 174562
    IArray[IArray[Matrix]] _19Combine;// 1:CombinePairwiseElements->3:Combine 174569
    Int32 _23Zero;// 2:First->2:Zero 174631
    Matrix _24At;// 2:First->0:At 174630
    Int32 _34Count;// 3:LastIndex->2:Count 174587
    IArray[Matrix] _56Pass-through: array;// 0:Pass-through: array 174531
    Func[Matrix, IArray[Vector3]] _57Pass-through: function1;// 0:Pass-through: function1 174534
    IArray[IArray[Vector3]] _58Map;// 5:FlatMap->4:Map 174536
    IArray[Vector3] _59Flatten;// 5:FlatMap->3:Flatten 174535
    IArray[Int32] _60MeshIndices;// 3:StoreMatricesInMapChannel->0:MeshIndices 174545
    TriMesh _61SetMapChannel;// 3:StoreMatricesInMapChannel->7:SetMapChannel 174532
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 174642
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 174641
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 174654
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 174655
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 174659
        Vector3 _3At;// 6:MatrixFromRows->3:At 174658
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 174653
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 174656
        Int32 _6One;// 8:PlusOne->1:One 174663
        Int32 _7Add;// 8:PlusOne->0:Add 174662
        Vector3 _8At;// 6:MatrixFromRows->4:At 174660
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 174652
        Int32 _10Constant;// 25:Three->0:Constant 174657
        Int32 _11One;// 9:PlusOne->1:One 174667
        Int32 _12Add;// 9:PlusOne->0:Add 174666
        Vector3 _13At;// 6:MatrixFromRows->5:At 174664
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 174651
        Int32 _15One;// 10:PlusOne->1:One 174671
        Int32 _16Add;// 10:PlusOne->0:Add 174670
        Vector3 _17At;// 6:MatrixFromRows->6:At 174668
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 174647
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _11Pass-through: array = if (closed)
      {
        Int32 _8Zero;// 2:First->2:Zero 174631
        Matrix _9At;// 2:First->0:At 174630
        IArray[Matrix] _10Append;// 0:AppendIf->1:Append 174628
        _8Zero = Zero();
        _9At = At(_7Map, _8Zero);
        _10Append = Append(_7Map, _9At);
        _10Append;
        }else
      {
        _7Map;
        };
    _12Count = Count(_11Pass-through: array);
    _13One = One();
    _14Subtract = Subtract(_12Count, _13One);
    _15Take = Take(_11Pass-through: array, _14Subtract);
    _16One = One();
    _17Skip = Skip(_11Pass-through: array, _16One);
    _18Pass-through: function2 = (Matrix x0, Matrix x1) => 
      {
        Int32 _0One;// 2:PlusOne->1:One 174602
        Int32 _1Add;// 2:PlusOne->0:Add 174601
        IArray[Single] _2RangeExclusiveFloat;// 7:RangeFloatBetween->5:RangeExclusiveFloat 174599
        Int32 _3One;// 6:SkipOne->2:One 174598
        IArray[Single] _4Skip;// 6:SkipOne->3:Skip 174597
        Func[Single, Matrix] _5Pass-through: function1;// 0:Pass-through: function1 174593
        IArray[Matrix] _6Map;// 2:SampleLerpBetween->3:Map 174594
        _0One = One();
        _1Add = Add(count, _0One);
        _2RangeExclusiveFloat = RangeExclusiveFloat(_1Add);
        _3One = One();
        _4Skip = Skip(_2RangeExclusiveFloat, _3One);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 174613
            Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 174614
            Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 174612
            Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 174616
            Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 174617
            Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 174615
            Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 174619
            Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 174620
            Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 174618
            Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 174611
            _0GetMatrixScaling = GetMatrixScaling(x0);
            _1GetMatrixScaling = GetMatrixScaling(x1);
            _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, x0);
            _3GetMatrixRotation = GetMatrixRotation(x0);
            _4GetMatrixRotation = GetMatrixRotation(x1);
            _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, x0);
            _6GetMatrixTranslation = GetMatrixTranslation(x0);
            _7GetMatrixTranslation = GetMatrixTranslation(x1);
            _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, x0);
            _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
            _9ScalingRotationTranslationMatrix;
            };
        _6Map = Map(_4Skip, _5Pass-through: function1);
        _6Map;
        };
    _19Combine = Combine(_15Take, _17Skip, _18Pass-through: function2);
    _23Zero = Zero();
    _24At = At(_7Map, _23Zero);
    _34Count = Count(_11Pass-through: array);
    _56Pass-through: array = if (closed)
      {
        IArray[Matrix] _43Pass-through: array;// 0:Pass-through: array 174550
        Int32 _44Count;// 3:LastIndex->2:Count 174556
        Int32 _45One;// 3:MinusOne->2:One 174555
        Int32 _46Subtract;// 3:MinusOne->1:Subtract 174554
        IArray[Matrix] _47Take;// 14:DropLast->2:Take 174551
        _43Pass-through: array = if (include original)
          {
            IArray[IArray[Matrix]] _36Combine;// 10:ArrayInterpolate->4:Combine 174566
            IArray[Matrix] _37Flatten;// 10:ArrayInterpolate->7:Flatten 174565
            Int32 _38One;// 3:MinusOne->2:One 174586
            Int32 _39Subtract;// 3:MinusOne->1:Subtract 174585
            Matrix _40At;// 5:Last->0:At 174582
            IArray[Matrix] _41Append;// 10:ArrayInterpolate->9:Append 174564
            _36Combine = Combine(_19Combine, _11Pass-through: array, (IArray[Matrix] x0, Matrix x1) => 
              {
                IArray[Matrix] _0Prepend;// 10:ArrayInterpolate->6:Prepend 174580
                _0Prepend = Prepend(x0, x1);
                _0Prepend;
                });
            _37Flatten = Flatten(_36Combine);
            _38One = One();
            _39Subtract = Subtract(_34Count, _38One);
            _40At = At(_11Pass-through: array, _39Subtract);
            _41Append = Append(_37Flatten, _40At);
            _41Append;
            }else
          {
            IArray[Matrix] _42Flatten;// 10:ArrayInterpolate->11:Flatten 174588
            _42Flatten = Flatten(_19Combine);
            _42Flatten;
            };
        _44Count = Count(_43Pass-through: array);
        _45One = One();
        _46Subtract = Subtract(_44Count, _45One);
        _47Take = Take(_43Pass-through: array, _46Subtract);
        _47Take;
        }else
      {
        if (include original)
          {
            IArray[IArray[Matrix]] _49Combine;// 10:ArrayInterpolate->4:Combine 174566
            IArray[Matrix] _50Flatten;// 10:ArrayInterpolate->7:Flatten 174565
            Int32 _51One;// 3:MinusOne->2:One 174586
            Int32 _52Subtract;// 3:MinusOne->1:Subtract 174585
            Matrix _53At;// 5:Last->0:At 174582
            IArray[Matrix] _54Append;// 10:ArrayInterpolate->9:Append 174564
            _49Combine = Combine(_19Combine, _11Pass-through: array, (IArray[Matrix] x0, Matrix x1) => 
              {
                IArray[Matrix] _0Prepend;// 10:ArrayInterpolate->6:Prepend 174580
                _0Prepend = Prepend(x0, x1);
                _0Prepend;
                });
            _50Flatten = Flatten(_49Combine);
            _51One = One();
            _52Subtract = Subtract(_34Count, _51One);
            _53At = At(_11Pass-through: array, _52Subtract);
            _54Append = Append(_50Flatten, _53At);
            _54Append;
            }else
          {
            IArray[Matrix] _55Flatten;// 10:ArrayInterpolate->11:Flatten 174588
            _55Flatten = Flatten(_19Combine);
            _55Flatten;
            };
        };
    _57Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 174540
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 174539
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 174538
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 174544
            Int32 _1Add;// 5:PlusOne->0:Add 174543
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 174541
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _58Map = Map(_56Pass-through: array, _57Pass-through: function1);
    _59Flatten = Flatten(_58Map);
    _60MeshIndices = MeshIndices(mesh);
    _61SetMapChannel = SetMapChannel(mesh, flux channel, _59Flatten, _60MeshIndices);
    _61SetMapChannel;
    }