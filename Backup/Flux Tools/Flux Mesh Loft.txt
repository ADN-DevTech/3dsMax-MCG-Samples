(InstanceState state, Boolean keep original, TriMesh mesh, Int32 flux channel, INode shape, Boolean closePath, Boolean closeShape) => 
  {
    MapChannel _0GetMapChannel;// 4:MatricesFromMapChannel->9:GetMapChannel 175219
    IArray[Vector3] _1MapChannelVertexBuffer;// 4:MatricesFromMapChannel->8:MapChannelVertexBuffer 175218
    Int32 _2Count;// 2:Slices->2:Count 175215
    Int32 _3Constant;// 4:MatricesFromMapChannel->0:Constant 175220
    Int32 _4Divide;// 2:Slices->3:Divide 175214
    IArray[Int32] _5Range;// 2:Slices->4:Range 175213
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 175212
    IArray[Matrix] _7Map;// 4:MatricesFromMapChannel->5:Map 175209
    Boolean _8IsValidNode;// 14:MeshFromNodeOrExit->1:IsValidNode 175253
    Boolean _9CanGetMeshFromNode;// 14:MeshFromNodeOrExit->2:CanGetMeshFromNode 175254
    Boolean _10AndAlso;// 14:MeshFromNodeOrExit->3:AndAlso 175252
    IArray[Vector3] _15MeshVertices;// 2:MeshVertices 175249
    IArray[Vector3] _16Map;// 5:XYPointsToYZ->0:Map 175200
    Func[Matrix, IArray[Vector3]] _17Pass-through: function1;// 0:Pass-through: function1 175192
    IArray[IArray[Vector3]] _18Map;// 8:FlatMap->4:Map 175194
    IArray[Vector3] _19Flatten;// 8:FlatMap->3:Flatten 175193
    Int32 _20Count;// 3:LoftMatrices->4:Count 175206
    QuadMesh _21QuadMeshStrip;// 3:LoftMatrices->6:QuadMeshStrip 175190
    TriMesh _22Triangulate;// 6:ToTriMesh->2:Triangulate 175185
    IArray[Int32] _23MeshIndices;// 3:HideEveryThirdEdge->2:MeshIndices 175176
    IArray[Int32] _24Indices;// 3:HideEveryThirdEdge->8:Indices 175175
    Int32 _25Constant;// 3:HideEveryThirdEdge->0:Constant 175183
    Int32 _26Constant;// 3:HideEveryThirdEdge->0:Constant 175184
    IArray[Boolean] _27Map;// 3:HideEveryThirdEdge->5:Map 175174
    TriMesh _28SetVisibleEdges;// 3:HideEveryThirdEdge->9:SetVisibleEdges 175173
    TriMesh _30Pass-through: TriMesh;// 0:Pass-through: TriMesh 175151
    MapChannel _31GetMapChannel;// 10:MatricesFromMapChannel->9:GetMapChannel 175274
    IArray[Vector3] _32MapChannelVertexBuffer;// 10:MatricesFromMapChannel->8:MapChannelVertexBuffer 175273
    Int32 _33Count;// 2:Slices->2:Count 175270
    Int32 _34Constant;// 10:MatricesFromMapChannel->0:Constant 175275
    Int32 _35Divide;// 2:Slices->3:Divide 175269
    IArray[Int32] _36Range;// 2:Slices->4:Range 175268
    IArray[IArray[Vector3]] _37Map;// 2:Slices->5:Map 175267
    IArray[Matrix] _38Map;// 10:MatricesFromMapChannel->5:Map 175264
    Func[Matrix, IArray[Vector3]] _39Pass-through: function1;// 0:Pass-through: function1 175156
    IArray[IArray[Vector3]] _40Map;// 5:FlatMap->4:Map 175158
    IArray[Vector3] _41Flatten;// 5:FlatMap->3:Flatten 175157
    IArray[Int32] _42MeshIndices;// 9:StoreMatricesInMapChannel->0:MeshIndices 175167
    TriMesh _43SetMapChannel;// 9:StoreMatricesInMapChannel->7:SetMapChannel 175154
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 175217
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 175216
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 175229
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 175230
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 175234
        Vector3 _3At;// 6:MatrixFromRows->3:At 175233
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 175228
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 175231
        Int32 _6One;// 8:PlusOne->1:One 175238
        Int32 _7Add;// 8:PlusOne->0:Add 175237
        Vector3 _8At;// 6:MatrixFromRows->4:At 175235
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 175227
        Int32 _10Constant;// 25:Three->0:Constant 175232
        Int32 _11One;// 9:PlusOne->1:One 175242
        Int32 _12Add;// 9:PlusOne->0:Add 175241
        Vector3 _13At;// 6:MatrixFromRows->5:At 175239
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 175226
        Int32 _15One;// 10:PlusOne->1:One 175246
        Int32 _16Add;// 10:PlusOne->0:Add 175245
        Vector3 _17At;// 6:MatrixFromRows->6:At 175243
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 175222
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8IsValidNode = IsValidNode(shape);
    _9CanGetMeshFromNode = CanGetMeshFromNode(shape);
    _10AndAlso = AndAlso(_8IsValidNode, _9CanGetMeshFromNode);
    _15MeshVertices = MeshVertices(if (_10AndAlso)
      {
        TriMesh _11MeshFromNode;// 14:MeshFromNodeOrExit->4:MeshFromNode 175255
        _11MeshFromNode = MeshFromNode(shape);
        _11MeshFromNode;
        }else
      {
        TriMesh _12EmptyMesh;// 14:MeshFromNodeOrExit->8:EmptyMesh 175257
        Boolean _13True;// 14:MeshFromNodeOrExit->7:True 175258
        TriMesh _14ExitIf;// 14:MeshFromNodeOrExit->6:ExitIf 175256
        _12EmptyMesh = EmptyMesh();
        _13True = True();
        _14ExitIf = ExitIf(_12EmptyMesh, _13True);
        _14ExitIf;
        });
    _16Map = Map(_15MeshVertices, (Vector3 x0) => 
      {
        Single _0Z;// 5:XYPointsToYZ->7:Z 175202
        Single _1X;// 5:XYPointsToYZ->3:X 175204
        Single _2Y;// 5:XYPointsToYZ->4:Y 175205
        Vector3 _3Vector3;// 5:XYPointsToYZ->5:Vector3 175201
        _0Z = Z(x0);
        _1X = X(x0);
        _2Y = Y(x0);
        _3Vector3 = Vector3(_0Z, _1X, _2Y);
        _3Vector3;
        });
    _17Pass-through: function1 = (Matrix x0) => 
      {
        IArray[Vector3] _0Map;// 7:TransformPoints->3:Map 175197
        _0Map = Map(_16Map, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 7:TransformPoints->4:Transform 175198
            _0Transform = Transform(x0, x0);
            _0Transform;
            });
        _0Map;
        };
    _18Map = Map(_7Map, _17Pass-through: function1);
    _19Flatten = Flatten(_18Map);
    _20Count = Count(_7Map);
    _21QuadMeshStrip = QuadMeshStrip(_19Flatten, _20Count, closePath, closeShape);
    _22Triangulate = Triangulate(_21QuadMeshStrip);
    _23MeshIndices = MeshIndices(_22Triangulate);
    _24Indices = Indices(_23MeshIndices);
    _25Constant = 3;
    _26Constant = 2;
    _27Map = Map(_24Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 175182
        Boolean _1Equal;// 6:ModuloEquals->4:Equal 175181
        Boolean _2Not;// 3:HideEveryThirdEdge->7:Not 175177
        _0Modulo = Modulo(x0, _25Constant);
        _1Equal = Equal(_0Modulo, _26Constant);
        _2Not = Not(_1Equal);
        _2Not;
        });
    _28SetVisibleEdges = SetVisibleEdges(_22Triangulate, _27Map);
    _30Pass-through: TriMesh = if (keep original)
      {
        TriMesh _29CombineMeshes;// 15:CombineMeshes 175170
        _29CombineMeshes = CombineMeshes(_28SetVisibleEdges, mesh);
        _29CombineMeshes;
        }else
      {
        _28SetVisibleEdges;
        };
    _31GetMapChannel = GetMapChannel(mesh, flux channel);
    _32MapChannelVertexBuffer = MapChannelVertexBuffer(_31GetMapChannel);
    _33Count = Count(_32MapChannelVertexBuffer);
    _34Constant = 4;
    _35Divide = Divide(_33Count, _34Constant);
    _36Range = Range(_35Divide);
    _37Map = Map(_36Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 175272
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 175271
        _0Multiply = Multiply(_34Constant, x0);
        _1Slice = Slice(_32MapChannelVertexBuffer, _0Multiply, _34Constant);
        _1Slice;
        });
    _38Map = Map(_37Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 175284
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 175285
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 175289
        Vector3 _3At;// 6:MatrixFromRows->3:At 175288
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 175283
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 175286
        Int32 _6One;// 8:PlusOne->1:One 175293
        Int32 _7Add;// 8:PlusOne->0:Add 175292
        Vector3 _8At;// 6:MatrixFromRows->4:At 175290
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 175282
        Int32 _10Constant;// 25:Three->0:Constant 175287
        Int32 _11One;// 9:PlusOne->1:One 175297
        Int32 _12Add;// 9:PlusOne->0:Add 175296
        Vector3 _13At;// 6:MatrixFromRows->5:At 175294
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 175281
        Int32 _15One;// 10:PlusOne->1:One 175301
        Int32 _16Add;// 10:PlusOne->0:Add 175300
        Vector3 _17At;// 6:MatrixFromRows->6:At 175298
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 175277
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _39Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 175162
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 175161
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 175160
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 175166
            Int32 _1Add;// 5:PlusOne->0:Add 175165
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 175163
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _40Map = Map(_38Map, _39Pass-through: function1);
    _41Flatten = Flatten(_40Map);
    _42MeshIndices = MeshIndices(_30Pass-through: TriMesh);
    _43SetMapChannel = SetMapChannel(_30Pass-through: TriMesh, flux channel, _41Flatten, _42MeshIndices);
    _43SetMapChannel;
    }