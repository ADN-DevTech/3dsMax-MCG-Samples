(InstanceState state, Int32 flux channel, TriMesh mesh, Single arc start, Single arc length, Single radius, Boolean combine effect, Single strength) => 
  {
    MapChannel _0GetMapChannel;// 2:MatricesFromMapChannel->9:GetMapChannel 172504
    IArray[Vector3] _1MapChannelVertexBuffer;// 2:MatricesFromMapChannel->8:MapChannelVertexBuffer 172503
    Int32 _2Count;// 2:Slices->2:Count 172500
    Int32 _3Constant;// 2:MatricesFromMapChannel->0:Constant 172505
    Int32 _4Divide;// 2:Slices->3:Divide 172499
    IArray[Int32] _5Range;// 2:Slices->4:Range 172498
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 172497
    IArray[Matrix] _7Map;// 2:MatricesFromMapChannel->5:Map 172494
    MapChannel _8GetMapChannel;// 18:MatricesFromMapChannel->9:GetMapChannel 172561
    IArray[Vector3] _9MapChannelVertexBuffer;// 18:MatricesFromMapChannel->8:MapChannelVertexBuffer 172560
    Int32 _10Count;// 2:Slices->2:Count 172557
    Int32 _11Constant;// 18:MatricesFromMapChannel->0:Constant 172562
    Int32 _12Divide;// 2:Slices->3:Divide 172556
    IArray[Int32] _13Range;// 2:Slices->4:Range 172555
    IArray[IArray[Vector3]] _14Map;// 2:Slices->5:Map 172554
    IArray[Matrix] _15Map;// 18:MatricesFromMapChannel->5:Map 172551
    Int32 _16Count;// 19:Count 172548
    IArray[Single] _17RangeInclusiveFloat;// 20:SampleInRange->2:RangeInclusiveFloat 172541
    Single _18Constant;// 3:DegreesToRatio->0:Constant 172591
    Single _19Divide;// 3:DegreesToRatio->1:Divide 172590
    Single _20Constant;// 4:DegreesToRatio->0:Constant 172596
    Single _21Divide;// 4:DegreesToRatio->1:Divide 172595
    Single _22Add;// 24:Add 172593
    IArray[Single] _23Map;// 20:SampleInRange->7:Map 172540
    Func[Single, Vector3] _24Pass-through: function1;// 0:Pass-through: function1 172538
    IArray[Vector3] _25Map;// 20:SampleInRange->5:Map 172539
    IArray[Matrix] _26Combine;// 13:FluxSetPoints->5:Combine 172491
    TriMesh _76Pass-through: TriMesh;// 0:Pass-through: TriMesh 172267
    TriMesh _126Pass-through: TriMesh;// 0:Pass-through: TriMesh 172390
    Int32 _127One;// 8:PlusOne->1:One 172388
    Int32 _128Add;// 8:PlusOne->0:Add 172387
    MapChannel _129GetMapChannel;// 12:MatricesFromMapChannel->9:GetMapChannel 172402
    IArray[Vector3] _130MapChannelVertexBuffer;// 12:MatricesFromMapChannel->8:MapChannelVertexBuffer 172401
    Int32 _131Count;// 2:Slices->2:Count 172398
    Int32 _132Constant;// 12:MatricesFromMapChannel->0:Constant 172403
    Int32 _133Divide;// 2:Slices->3:Divide 172397
    IArray[Int32] _134Range;// 2:Slices->4:Range 172396
    IArray[IArray[Vector3]] _135Map;// 2:Slices->5:Map 172395
    IArray[Matrix] _136Map;// 12:MatricesFromMapChannel->5:Map 172392
    TriMesh _184Pass-through: TriMesh;// 0:Pass-through: TriMesh 172430
    MapChannel _185GetMapChannel;// 11:MatricesFromMapChannel->9:GetMapChannel 172442
    IArray[Vector3] _186MapChannelVertexBuffer;// 11:MatricesFromMapChannel->8:MapChannelVertexBuffer 172441
    Int32 _187Count;// 2:Slices->2:Count 172438
    Int32 _188Constant;// 11:MatricesFromMapChannel->0:Constant 172443
    Int32 _189Divide;// 2:Slices->3:Divide 172437
    IArray[Int32] _190Range;// 2:Slices->4:Range 172436
    IArray[IArray[Vector3]] _191Map;// 2:Slices->5:Map 172435
    IArray[Matrix] _192Map;// 11:MatricesFromMapChannel->5:Map 172432
    Single _193Constant;// 17:DivideBy100->0:Constant 172490
    Single _194Divide;// 17:DivideBy100->2:Divide 172489
    IArray[Matrix] _195Combine;// 4:FluxStoreMatrices->10:Combine 172389
    Func[Matrix, IArray[Vector3]] _196Pass-through: function1;// 0:Pass-through: function1 172272
    IArray[IArray[Vector3]] _197Map;// 5:FlatMap->4:Map 172274
    IArray[Vector3] _198Flatten;// 5:FlatMap->3:Flatten 172273
    IArray[Int32] _199MeshIndices;// 13:StoreMatricesInMapChannel->0:MeshIndices 172283
    TriMesh _200SetMapChannel;// 13:StoreMatricesInMapChannel->7:SetMapChannel 172270
    TriMesh _201IgnoreFirst;// 4:FluxStoreMatrices->9:IgnoreFirst 172266
    TriMesh _202IgnoreFirst;// 4:FluxStoreMatrices->2:IgnoreFirst 172265
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 172502
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 172501
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 172514
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 172515
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 172519
        Vector3 _3At;// 6:MatrixFromRows->3:At 172518
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 172513
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 172516
        Int32 _6One;// 8:PlusOne->1:One 172523
        Int32 _7Add;// 8:PlusOne->0:Add 172522
        Vector3 _8At;// 6:MatrixFromRows->4:At 172520
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 172512
        Int32 _10Constant;// 25:Three->0:Constant 172517
        Int32 _11One;// 9:PlusOne->1:One 172527
        Int32 _12Add;// 9:PlusOne->0:Add 172526
        Vector3 _13At;// 6:MatrixFromRows->5:At 172524
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 172511
        Int32 _15One;// 10:PlusOne->1:One 172531
        Int32 _16Add;// 10:PlusOne->0:Add 172530
        Vector3 _17At;// 6:MatrixFromRows->6:At 172528
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 172507
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8GetMapChannel = GetMapChannel(mesh, flux channel);
    _9MapChannelVertexBuffer = MapChannelVertexBuffer(_8GetMapChannel);
    _10Count = Count(_9MapChannelVertexBuffer);
    _11Constant = 4;
    _12Divide = Divide(_10Count, _11Constant);
    _13Range = Range(_12Divide);
    _14Map = Map(_13Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 172559
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 172558
        _0Multiply = Multiply(_11Constant, x0);
        _1Slice = Slice(_9MapChannelVertexBuffer, _0Multiply, _11Constant);
        _1Slice;
        });
    _15Map = Map(_14Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 172571
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 172572
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 172576
        Vector3 _3At;// 6:MatrixFromRows->3:At 172575
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 172570
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 172573
        Int32 _6One;// 8:PlusOne->1:One 172580
        Int32 _7Add;// 8:PlusOne->0:Add 172579
        Vector3 _8At;// 6:MatrixFromRows->4:At 172577
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 172569
        Int32 _10Constant;// 25:Three->0:Constant 172574
        Int32 _11One;// 9:PlusOne->1:One 172584
        Int32 _12Add;// 9:PlusOne->0:Add 172583
        Vector3 _13At;// 6:MatrixFromRows->5:At 172581
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 172568
        Int32 _15One;// 10:PlusOne->1:One 172588
        Int32 _16Add;// 10:PlusOne->0:Add 172587
        Vector3 _17At;// 6:MatrixFromRows->6:At 172585
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 172564
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _16Count = Count(_15Map);
    _17RangeInclusiveFloat = RangeInclusiveFloat(_16Count);
    _18Constant = 360;
    _19Divide = Divide(arc start, _18Constant);
    _20Constant = 360;
    _21Divide = Divide(arc length, _20Constant);
    _22Add = Add(_19Divide, _21Divide);
    _23Map = Map(_17RangeInclusiveFloat, (Single x0) => 
      {
        Single _0Subtract;// 10:ScaleFloat->6:Subtract 172547
        Single _1Multiply;// 10:ScaleFloat->8:Multiply 172546
        Single _2Add;// 10:ScaleFloat->9:Add 172545
        _0Subtract = Subtract(_22Add, _19Divide);
        _1Multiply = Multiply(x0, _0Subtract);
        _2Add = Add(_19Divide, _1Multiply);
        _2Add;
        });
    _24Pass-through: function1 = (Single x0) => 
      {
        Single _0Constant;// 9:OneMinus->0:Constant 172609
        Single _1Subtract;// 9:OneMinus->2:Subtract 172608
        Single _2Constant;// 9:XYPlotCircle->0:Constant 172610
        Single _3Subtract;// 9:XYPlotCircle->10:Subtract 172606
        Single _4TwoPi;// 9:XYPlotCircle->5:TwoPi 172611
        Single _5Multiply;// 9:XYPlotCircle->6:Multiply 172605
        Single _6Cos;// 9:XYPlotCircle->3:Cos 172604
        Single _7TwoPi;// 9:XYPlotCircle->2:TwoPi 172614
        Single _8Multiply;// 9:XYPlotCircle->1:Multiply 172613
        Single _9Sin;// 9:XYPlotCircle->0:Sin 172612
        Single _10Constant;// 4:Vector3FromXY->0:Constant 172603
        Vector3 _11Vector3;// 4:Vector3FromXY->0:Vector3 172602
        Vector3 _12MultiplyByScalar;// 0:MultiplyByScalar 172598
        _0Constant = 1;
        _1Subtract = Subtract(_0Constant, x0);
        _2Constant = 0.25;
        _3Subtract = Subtract(_1Subtract, _2Constant);
        _4TwoPi = TwoPi();
        _5Multiply = Multiply(_3Subtract, _4TwoPi);
        _6Cos = Cos(_5Multiply);
        _7TwoPi = TwoPi();
        _8Multiply = Multiply(_3Subtract, _7TwoPi);
        _9Sin = Sin(_8Multiply);
        _10Constant = 0;
        _11Vector3 = Vector3(_6Cos, _9Sin, _10Constant);
        _12MultiplyByScalar = MultiplyByScalar(_11Vector3, radius);
        _12MultiplyByScalar;
        };
    _25Map = Map(_23Map, _24Pass-through: function1);
    _26Combine = Combine(_7Map, _25Map, (Matrix x0, Vector3 x1) => 
      {
        Matrix _0SetMatrixTranslation;// 13:FluxSetPoints->6:SetMatrixTranslation 172532
        _0SetMatrixTranslation = SetMatrixTranslation(x0, x1);
        _0SetMatrixTranslation;
        });
    _76Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _27Pass-through: function1;// 0:Pass-through: function1 172290
        IArray[IArray[Vector3]] _28Map;// 5:FlatMap->4:Map 172292
        IArray[Vector3] _29Flatten;// 5:FlatMap->3:Flatten 172291
        IArray[Int32] _30MeshIndices;// 6:StoreMatricesInMapChannel->0:MeshIndices 172301
        TriMesh _31SetMapChannel;// 6:StoreMatricesInMapChannel->7:SetMapChannel 172288
        _27Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 172296
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 172295
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 172294
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 172300
                Int32 _1Add;// 5:PlusOne->0:Add 172299
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 172297
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _28Map = Map(_26Combine, _27Pass-through: function1);
        _29Flatten = Flatten(_28Map);
        _30MeshIndices = MeshIndices(mesh);
        _31SetMapChannel = SetMapChannel(mesh, flux channel, _29Flatten, _30MeshIndices);
        _31SetMapChannel;
        }else
      {
        Int32 _32Constant;// 5:GetMapChannelOrGeometry->0:Constant 172340
        Boolean _33Equal;// 5:GetMapChannelOrGeometry->4:Equal 172339
        MapChannel _36Pass-through: any;// 0:Pass-through: any 172331
        Object _37Null;// 6:IsNullFix2->3:Null 172335
        Object _38As;// 6:IsNullFix2->23:As 172333
        Boolean _39Equal;// 6:IsNullFix2->1:Equal 172332
        Boolean _40Not;// 4:MapChannelExists->4:Not 172330
        Int32 _41One;// 8:PlusOne->1:One 172388
        Int32 _42Add;// 8:PlusOne->0:Add 172387
        TriMesh _70Pass-through: TriMesh;// 0:Pass-through: TriMesh 172306
        Func[Matrix, IArray[Vector3]] _71Pass-through: function1;// 0:Pass-through: function1 172311
        IArray[IArray[Vector3]] _72Map;// 5:FlatMap->4:Map 172313
        IArray[Vector3] _73Flatten;// 5:FlatMap->3:Flatten 172312
        IArray[Int32] _74MeshIndices;// 13:StoreMatricesInMapChannel->0:MeshIndices 172322
        TriMesh _75SetMapChannel;// 13:StoreMatricesInMapChannel->7:SetMapChannel 172309
        _32Constant = -3;
        _33Equal = Equal(flux channel, _32Constant);
        _36Pass-through: any = if (_33Equal)
          {
            MapChannel _34TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 172341
            _34TopologyChannel = TopologyChannel(mesh);
            _34TopologyChannel;
            }else
          {
            MapChannel _35GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 172342
            _35GetMapChannel = GetMapChannel(mesh, flux channel);
            _35GetMapChannel;
            };
        _37Null = Null();
        _38As = As(_36Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 172334
            _0IgnoreFirst = IgnoreFirst(x0, _37Null);
            _0IgnoreFirst;
            });
        _39Equal = Equal(_38As, _37Null);
        _40Not = Not(_39Equal);
        _41One = One();
        _42Add = Add(flux channel, _41One);
        _70Pass-through: TriMesh = if (_40Not)
          {
            Int32 _43Constant;// 7:SetMapChannelOrGeometry->0:Constant 172352
            Boolean _44Equal;// 7:SetMapChannelOrGeometry->6:Equal 172351
            Int32 _45Constant;// 0:GetMapChannelOrGeometry->0:Constant 172362
            Boolean _46Equal;// 0:GetMapChannelOrGeometry->4:Equal 172361
            MapChannel _49Pass-through: MapChannel;// 0:Pass-through: MapChannel 172344
            IArray[Vector3] _50MapChannelVertexBuffer;// 8:AssignMapChannel->3:MapChannelVertexBuffer 172356
            IArray[Int32] _53MapChannelIndexBuffer;// 8:AssignMapChannel->4:MapChannelIndexBuffer 172357
            _43Constant = -3;
            _44Equal = Equal(_43Constant, _42Add);
            _45Constant = -3;
            _46Equal = Equal(flux channel, _45Constant);
            _49Pass-through: MapChannel = if (_46Equal)
              {
                MapChannel _47TopologyChannel;// 0:GetMapChannelOrGeometry->6:TopologyChannel 172363
                _47TopologyChannel = TopologyChannel(mesh);
                _47TopologyChannel;
                }else
              {
                MapChannel _48GetMapChannel;// 0:GetMapChannelOrGeometry->3:GetMapChannel 172364
                _48GetMapChannel = GetMapChannel(mesh, flux channel);
                _48GetMapChannel;
                };
            _50MapChannelVertexBuffer = MapChannelVertexBuffer(_49Pass-through: MapChannel);
            _53MapChannelIndexBuffer = MapChannelIndexBuffer(_49Pass-through: MapChannel);
            if (_44Equal)
              {
                MeshData _54MeshData;// 7:SetMapChannelOrGeometry->9:MeshData 172354
                TriMesh _55CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 172353
                _54MeshData = MeshData(mesh);
                _55CreateMeshWithMeshData = CreateMeshWithMeshData(_50MapChannelVertexBuffer, _53MapChannelIndexBuffer, _54MeshData);
                _55CreateMeshWithMeshData;
                }else
              {
                TriMesh _56SetMapChannel;// 7:SetMapChannelOrGeometry->0:SetMapChannel 172355
                _56SetMapChannel = SetMapChannel(mesh, _42Add, _50MapChannelVertexBuffer, _53MapChannelIndexBuffer);
                _56SetMapChannel;
                };
            }else
          {
            Int32 _57Constant;// 10:SetMapChannelOrGeometry->0:Constant 172373
            Boolean _58Equal;// 10:SetMapChannelOrGeometry->6:Equal 172372
            Single _59Constant;// 5:Origin->0:Constant 172379
            Vector3 _60Vector3;// 5:Origin->1:Vector3 172378
            IArray[Vector3] _61Unit;// 2:MapChannelClear->4:Unit 172377
            Int32 _62Zero;// 2:MapChannelClear->9:Zero 172381
            Int32 _63FaceCount;// 2:MapChannelClear->6:FaceCount 172385
            Int32 _64Constant;// 1:Three->0:Constant 172384
            Int32 _65Multiply;// 7:MultiplyByThree->2:Multiply 172383
            IArray[Int32] _66ArrayOf;// 2:MapChannelClear->8:ArrayOf 172380
            _57Constant = -3;
            _58Equal = Equal(_57Constant, _42Add);
            _59Constant = 0;
            _60Vector3 = Vector3(_59Constant, _59Constant, _59Constant);
            _61Unit = Unit(_60Vector3);
            _62Zero = Zero();
            _63FaceCount = FaceCount(mesh);
            _64Constant = 3;
            _65Multiply = Multiply(_63FaceCount, _64Constant);
            _66ArrayOf = ArrayOf(_62Zero, _65Multiply);
            if (_58Equal)
              {
                MeshData _67MeshData;// 10:SetMapChannelOrGeometry->9:MeshData 172375
                TriMesh _68CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 172374
                _67MeshData = MeshData(mesh);
                _68CreateMeshWithMeshData = CreateMeshWithMeshData(_61Unit, _66ArrayOf, _67MeshData);
                _68CreateMeshWithMeshData;
                }else
              {
                TriMesh _69SetMapChannel;// 10:SetMapChannelOrGeometry->0:SetMapChannel 172376
                _69SetMapChannel = SetMapChannel(mesh, _42Add, _61Unit, _66ArrayOf);
                _69SetMapChannel;
                };
            };
        _71Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 172317
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 172316
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 172315
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 172321
                Int32 _1Add;// 5:PlusOne->0:Add 172320
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 172318
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _72Map = Map(_26Combine, _71Pass-through: function1);
        _73Flatten = Flatten(_72Map);
        _74MeshIndices = MeshIndices(_70Pass-through: TriMesh);
        _75SetMapChannel = SetMapChannel(_70Pass-through: TriMesh, flux channel, _73Flatten, _74MeshIndices);
        _75SetMapChannel;
        };
    _126Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _77Pass-through: function1;// 0:Pass-through: function1 172290
        IArray[IArray[Vector3]] _78Map;// 5:FlatMap->4:Map 172292
        IArray[Vector3] _79Flatten;// 5:FlatMap->3:Flatten 172291
        IArray[Int32] _80MeshIndices;// 6:StoreMatricesInMapChannel->0:MeshIndices 172301
        TriMesh _81SetMapChannel;// 6:StoreMatricesInMapChannel->7:SetMapChannel 172288
        _77Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 172296
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 172295
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 172294
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 172300
                Int32 _1Add;// 5:PlusOne->0:Add 172299
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 172297
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _78Map = Map(_26Combine, _77Pass-through: function1);
        _79Flatten = Flatten(_78Map);
        _80MeshIndices = MeshIndices(mesh);
        _81SetMapChannel = SetMapChannel(mesh, flux channel, _79Flatten, _80MeshIndices);
        _81SetMapChannel;
        }else
      {
        Int32 _82Constant;// 5:GetMapChannelOrGeometry->0:Constant 172340
        Boolean _83Equal;// 5:GetMapChannelOrGeometry->4:Equal 172339
        MapChannel _86Pass-through: any;// 0:Pass-through: any 172331
        Object _87Null;// 6:IsNullFix2->3:Null 172335
        Object _88As;// 6:IsNullFix2->23:As 172333
        Boolean _89Equal;// 6:IsNullFix2->1:Equal 172332
        Boolean _90Not;// 4:MapChannelExists->4:Not 172330
        Int32 _91One;// 8:PlusOne->1:One 172388
        Int32 _92Add;// 8:PlusOne->0:Add 172387
        TriMesh _120Pass-through: TriMesh;// 0:Pass-through: TriMesh 172306
        Func[Matrix, IArray[Vector3]] _121Pass-through: function1;// 0:Pass-through: function1 172311
        IArray[IArray[Vector3]] _122Map;// 5:FlatMap->4:Map 172313
        IArray[Vector3] _123Flatten;// 5:FlatMap->3:Flatten 172312
        IArray[Int32] _124MeshIndices;// 13:StoreMatricesInMapChannel->0:MeshIndices 172322
        TriMesh _125SetMapChannel;// 13:StoreMatricesInMapChannel->7:SetMapChannel 172309
        _82Constant = -3;
        _83Equal = Equal(flux channel, _82Constant);
        _86Pass-through: any = if (_83Equal)
          {
            MapChannel _84TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 172341
            _84TopologyChannel = TopologyChannel(mesh);
            _84TopologyChannel;
            }else
          {
            MapChannel _85GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 172342
            _85GetMapChannel = GetMapChannel(mesh, flux channel);
            _85GetMapChannel;
            };
        _87Null = Null();
        _88As = As(_86Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 172334
            _0IgnoreFirst = IgnoreFirst(x0, _87Null);
            _0IgnoreFirst;
            });
        _89Equal = Equal(_88As, _87Null);
        _90Not = Not(_89Equal);
        _91One = One();
        _92Add = Add(flux channel, _91One);
        _120Pass-through: TriMesh = if (_90Not)
          {
            Int32 _93Constant;// 7:SetMapChannelOrGeometry->0:Constant 172352
            Boolean _94Equal;// 7:SetMapChannelOrGeometry->6:Equal 172351
            Int32 _95Constant;// 0:GetMapChannelOrGeometry->0:Constant 172362
            Boolean _96Equal;// 0:GetMapChannelOrGeometry->4:Equal 172361
            MapChannel _99Pass-through: MapChannel;// 0:Pass-through: MapChannel 172344
            IArray[Vector3] _100MapChannelVertexBuffer;// 8:AssignMapChannel->3:MapChannelVertexBuffer 172356
            IArray[Int32] _103MapChannelIndexBuffer;// 8:AssignMapChannel->4:MapChannelIndexBuffer 172357
            _93Constant = -3;
            _94Equal = Equal(_93Constant, _92Add);
            _95Constant = -3;
            _96Equal = Equal(flux channel, _95Constant);
            _99Pass-through: MapChannel = if (_96Equal)
              {
                MapChannel _97TopologyChannel;// 0:GetMapChannelOrGeometry->6:TopologyChannel 172363
                _97TopologyChannel = TopologyChannel(mesh);
                _97TopologyChannel;
                }else
              {
                MapChannel _98GetMapChannel;// 0:GetMapChannelOrGeometry->3:GetMapChannel 172364
                _98GetMapChannel = GetMapChannel(mesh, flux channel);
                _98GetMapChannel;
                };
            _100MapChannelVertexBuffer = MapChannelVertexBuffer(_99Pass-through: MapChannel);
            _103MapChannelIndexBuffer = MapChannelIndexBuffer(_99Pass-through: MapChannel);
            if (_94Equal)
              {
                MeshData _104MeshData;// 7:SetMapChannelOrGeometry->9:MeshData 172354
                TriMesh _105CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 172353
                _104MeshData = MeshData(mesh);
                _105CreateMeshWithMeshData = CreateMeshWithMeshData(_100MapChannelVertexBuffer, _103MapChannelIndexBuffer, _104MeshData);
                _105CreateMeshWithMeshData;
                }else
              {
                TriMesh _106SetMapChannel;// 7:SetMapChannelOrGeometry->0:SetMapChannel 172355
                _106SetMapChannel = SetMapChannel(mesh, _92Add, _100MapChannelVertexBuffer, _103MapChannelIndexBuffer);
                _106SetMapChannel;
                };
            }else
          {
            Int32 _107Constant;// 10:SetMapChannelOrGeometry->0:Constant 172373
            Boolean _108Equal;// 10:SetMapChannelOrGeometry->6:Equal 172372
            Single _109Constant;// 5:Origin->0:Constant 172379
            Vector3 _110Vector3;// 5:Origin->1:Vector3 172378
            IArray[Vector3] _111Unit;// 2:MapChannelClear->4:Unit 172377
            Int32 _112Zero;// 2:MapChannelClear->9:Zero 172381
            Int32 _113FaceCount;// 2:MapChannelClear->6:FaceCount 172385
            Int32 _114Constant;// 1:Three->0:Constant 172384
            Int32 _115Multiply;// 7:MultiplyByThree->2:Multiply 172383
            IArray[Int32] _116ArrayOf;// 2:MapChannelClear->8:ArrayOf 172380
            _107Constant = -3;
            _108Equal = Equal(_107Constant, _92Add);
            _109Constant = 0;
            _110Vector3 = Vector3(_109Constant, _109Constant, _109Constant);
            _111Unit = Unit(_110Vector3);
            _112Zero = Zero();
            _113FaceCount = FaceCount(mesh);
            _114Constant = 3;
            _115Multiply = Multiply(_113FaceCount, _114Constant);
            _116ArrayOf = ArrayOf(_112Zero, _115Multiply);
            if (_108Equal)
              {
                MeshData _117MeshData;// 10:SetMapChannelOrGeometry->9:MeshData 172375
                TriMesh _118CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 172374
                _117MeshData = MeshData(mesh);
                _118CreateMeshWithMeshData = CreateMeshWithMeshData(_111Unit, _116ArrayOf, _117MeshData);
                _118CreateMeshWithMeshData;
                }else
              {
                TriMesh _119SetMapChannel;// 10:SetMapChannelOrGeometry->0:SetMapChannel 172376
                _119SetMapChannel = SetMapChannel(mesh, _92Add, _111Unit, _116ArrayOf);
                _119SetMapChannel;
                };
            };
        _121Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 172317
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 172316
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 172315
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 172321
                Int32 _1Add;// 5:PlusOne->0:Add 172320
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 172318
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _122Map = Map(_26Combine, _121Pass-through: function1);
        _123Flatten = Flatten(_122Map);
        _124MeshIndices = MeshIndices(_120Pass-through: TriMesh);
        _125SetMapChannel = SetMapChannel(_120Pass-through: TriMesh, flux channel, _123Flatten, _124MeshIndices);
        _125SetMapChannel;
        };
    _127One = One();
    _128Add = Add(flux channel, _127One);
    _129GetMapChannel = GetMapChannel(_126Pass-through: TriMesh, _128Add);
    _130MapChannelVertexBuffer = MapChannelVertexBuffer(_129GetMapChannel);
    _131Count = Count(_130MapChannelVertexBuffer);
    _132Constant = 4;
    _133Divide = Divide(_131Count, _132Constant);
    _134Range = Range(_133Divide);
    _135Map = Map(_134Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 172400
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 172399
        _0Multiply = Multiply(_132Constant, x0);
        _1Slice = Slice(_130MapChannelVertexBuffer, _0Multiply, _132Constant);
        _1Slice;
        });
    _136Map = Map(_135Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 172412
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 172413
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 172417
        Vector3 _3At;// 6:MatrixFromRows->3:At 172416
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 172411
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 172414
        Int32 _6One;// 8:PlusOne->1:One 172421
        Int32 _7Add;// 8:PlusOne->0:Add 172420
        Vector3 _8At;// 6:MatrixFromRows->4:At 172418
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 172410
        Int32 _10Constant;// 25:Three->0:Constant 172415
        Int32 _11One;// 9:PlusOne->1:One 172425
        Int32 _12Add;// 9:PlusOne->0:Add 172424
        Vector3 _13At;// 6:MatrixFromRows->5:At 172422
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 172409
        Int32 _15One;// 10:PlusOne->1:One 172429
        Int32 _16Add;// 10:PlusOne->0:Add 172428
        Vector3 _17At;// 6:MatrixFromRows->6:At 172426
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 172405
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _184Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _137Pass-through: function1;// 0:Pass-through: function1 172290
        IArray[IArray[Vector3]] _138Map;// 5:FlatMap->4:Map 172292
        IArray[Vector3] _139Flatten;// 5:FlatMap->3:Flatten 172291
        IArray[Int32] _140MeshIndices;// 6:StoreMatricesInMapChannel->0:MeshIndices 172301
        TriMesh _141SetMapChannel;// 6:StoreMatricesInMapChannel->7:SetMapChannel 172288
        _137Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 172296
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 172295
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 172294
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 172300
                Int32 _1Add;// 5:PlusOne->0:Add 172299
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 172297
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _138Map = Map(_26Combine, _137Pass-through: function1);
        _139Flatten = Flatten(_138Map);
        _140MeshIndices = MeshIndices(mesh);
        _141SetMapChannel = SetMapChannel(mesh, flux channel, _139Flatten, _140MeshIndices);
        _141SetMapChannel;
        }else
      {
        Int32 _142Constant;// 5:GetMapChannelOrGeometry->0:Constant 172340
        Boolean _143Equal;// 5:GetMapChannelOrGeometry->4:Equal 172339
        MapChannel _146Pass-through: any;// 0:Pass-through: any 172331
        Object _147Null;// 6:IsNullFix2->3:Null 172335
        Object _148As;// 6:IsNullFix2->23:As 172333
        Boolean _149Equal;// 6:IsNullFix2->1:Equal 172332
        Boolean _150Not;// 4:MapChannelExists->4:Not 172330
        TriMesh _178Pass-through: TriMesh;// 0:Pass-through: TriMesh 172306
        Func[Matrix, IArray[Vector3]] _179Pass-through: function1;// 0:Pass-through: function1 172311
        IArray[IArray[Vector3]] _180Map;// 5:FlatMap->4:Map 172313
        IArray[Vector3] _181Flatten;// 5:FlatMap->3:Flatten 172312
        IArray[Int32] _182MeshIndices;// 13:StoreMatricesInMapChannel->0:MeshIndices 172322
        TriMesh _183SetMapChannel;// 13:StoreMatricesInMapChannel->7:SetMapChannel 172309
        _142Constant = -3;
        _143Equal = Equal(flux channel, _142Constant);
        _146Pass-through: any = if (_143Equal)
          {
            MapChannel _144TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 172341
            _144TopologyChannel = TopologyChannel(mesh);
            _144TopologyChannel;
            }else
          {
            MapChannel _145GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 172342
            _145GetMapChannel = GetMapChannel(mesh, flux channel);
            _145GetMapChannel;
            };
        _147Null = Null();
        _148As = As(_146Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 172334
            _0IgnoreFirst = IgnoreFirst(x0, _147Null);
            _0IgnoreFirst;
            });
        _149Equal = Equal(_148As, _147Null);
        _150Not = Not(_149Equal);
        _178Pass-through: TriMesh = if (_150Not)
          {
            Int32 _151Constant;// 7:SetMapChannelOrGeometry->0:Constant 172352
            Boolean _152Equal;// 7:SetMapChannelOrGeometry->6:Equal 172351
            Int32 _153Constant;// 0:GetMapChannelOrGeometry->0:Constant 172362
            Boolean _154Equal;// 0:GetMapChannelOrGeometry->4:Equal 172361
            MapChannel _157Pass-through: MapChannel;// 0:Pass-through: MapChannel 172344
            IArray[Vector3] _158MapChannelVertexBuffer;// 8:AssignMapChannel->3:MapChannelVertexBuffer 172356
            IArray[Int32] _161MapChannelIndexBuffer;// 8:AssignMapChannel->4:MapChannelIndexBuffer 172357
            _151Constant = -3;
            _152Equal = Equal(_151Constant, _128Add);
            _153Constant = -3;
            _154Equal = Equal(flux channel, _153Constant);
            _157Pass-through: MapChannel = if (_154Equal)
              {
                MapChannel _155TopologyChannel;// 0:GetMapChannelOrGeometry->6:TopologyChannel 172363
                _155TopologyChannel = TopologyChannel(mesh);
                _155TopologyChannel;
                }else
              {
                MapChannel _156GetMapChannel;// 0:GetMapChannelOrGeometry->3:GetMapChannel 172364
                _156GetMapChannel = GetMapChannel(mesh, flux channel);
                _156GetMapChannel;
                };
            _158MapChannelVertexBuffer = MapChannelVertexBuffer(_157Pass-through: MapChannel);
            _161MapChannelIndexBuffer = MapChannelIndexBuffer(_157Pass-through: MapChannel);
            if (_152Equal)
              {
                MeshData _162MeshData;// 7:SetMapChannelOrGeometry->9:MeshData 172354
                TriMesh _163CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 172353
                _162MeshData = MeshData(mesh);
                _163CreateMeshWithMeshData = CreateMeshWithMeshData(_158MapChannelVertexBuffer, _161MapChannelIndexBuffer, _162MeshData);
                _163CreateMeshWithMeshData;
                }else
              {
                TriMesh _164SetMapChannel;// 7:SetMapChannelOrGeometry->0:SetMapChannel 172355
                _164SetMapChannel = SetMapChannel(mesh, _128Add, _158MapChannelVertexBuffer, _161MapChannelIndexBuffer);
                _164SetMapChannel;
                };
            }else
          {
            Int32 _165Constant;// 10:SetMapChannelOrGeometry->0:Constant 172373
            Boolean _166Equal;// 10:SetMapChannelOrGeometry->6:Equal 172372
            Single _167Constant;// 5:Origin->0:Constant 172379
            Vector3 _168Vector3;// 5:Origin->1:Vector3 172378
            IArray[Vector3] _169Unit;// 2:MapChannelClear->4:Unit 172377
            Int32 _170Zero;// 2:MapChannelClear->9:Zero 172381
            Int32 _171FaceCount;// 2:MapChannelClear->6:FaceCount 172385
            Int32 _172Constant;// 1:Three->0:Constant 172384
            Int32 _173Multiply;// 7:MultiplyByThree->2:Multiply 172383
            IArray[Int32] _174ArrayOf;// 2:MapChannelClear->8:ArrayOf 172380
            _165Constant = -3;
            _166Equal = Equal(_165Constant, _128Add);
            _167Constant = 0;
            _168Vector3 = Vector3(_167Constant, _167Constant, _167Constant);
            _169Unit = Unit(_168Vector3);
            _170Zero = Zero();
            _171FaceCount = FaceCount(mesh);
            _172Constant = 3;
            _173Multiply = Multiply(_171FaceCount, _172Constant);
            _174ArrayOf = ArrayOf(_170Zero, _173Multiply);
            if (_166Equal)
              {
                MeshData _175MeshData;// 10:SetMapChannelOrGeometry->9:MeshData 172375
                TriMesh _176CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 172374
                _175MeshData = MeshData(mesh);
                _176CreateMeshWithMeshData = CreateMeshWithMeshData(_169Unit, _174ArrayOf, _175MeshData);
                _176CreateMeshWithMeshData;
                }else
              {
                TriMesh _177SetMapChannel;// 10:SetMapChannelOrGeometry->0:SetMapChannel 172376
                _177SetMapChannel = SetMapChannel(mesh, _128Add, _169Unit, _174ArrayOf);
                _177SetMapChannel;
                };
            };
        _179Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 172317
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 172316
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 172315
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 172321
                Int32 _1Add;// 5:PlusOne->0:Add 172320
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 172318
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _180Map = Map(_26Combine, _179Pass-through: function1);
        _181Flatten = Flatten(_180Map);
        _182MeshIndices = MeshIndices(_178Pass-through: TriMesh);
        _183SetMapChannel = SetMapChannel(_178Pass-through: TriMesh, flux channel, _181Flatten, _182MeshIndices);
        _183SetMapChannel;
        };
    _185GetMapChannel = GetMapChannel(_184Pass-through: TriMesh, flux channel);
    _186MapChannelVertexBuffer = MapChannelVertexBuffer(_185GetMapChannel);
    _187Count = Count(_186MapChannelVertexBuffer);
    _188Constant = 4;
    _189Divide = Divide(_187Count, _188Constant);
    _190Range = Range(_189Divide);
    _191Map = Map(_190Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 172440
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 172439
        _0Multiply = Multiply(_188Constant, x0);
        _1Slice = Slice(_186MapChannelVertexBuffer, _0Multiply, _188Constant);
        _1Slice;
        });
    _192Map = Map(_191Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 172452
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 172453
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 172457
        Vector3 _3At;// 6:MatrixFromRows->3:At 172456
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 172451
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 172454
        Int32 _6One;// 8:PlusOne->1:One 172461
        Int32 _7Add;// 8:PlusOne->0:Add 172460
        Vector3 _8At;// 6:MatrixFromRows->4:At 172458
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 172450
        Int32 _10Constant;// 25:Three->0:Constant 172455
        Int32 _11One;// 9:PlusOne->1:One 172465
        Int32 _12Add;// 9:PlusOne->0:Add 172464
        Vector3 _13At;// 6:MatrixFromRows->5:At 172462
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 172449
        Int32 _15One;// 10:PlusOne->1:One 172469
        Int32 _16Add;// 10:PlusOne->0:Add 172468
        Vector3 _17At;// 6:MatrixFromRows->6:At 172466
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 172445
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _193Constant = 100;
    _194Divide = Divide(strength, _193Constant);
    _195Combine = Combine(_136Map, _192Map, (Matrix x0, Matrix x1) => 
      {
        Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 172480
        Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 172481
        Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 172479
        Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 172483
        Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 172484
        Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 172482
        Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 172486
        Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 172487
        Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 172485
        Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 172478
        _0GetMatrixScaling = GetMatrixScaling(x0);
        _1GetMatrixScaling = GetMatrixScaling(x1);
        _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _194Divide);
        _3GetMatrixRotation = GetMatrixRotation(x0);
        _4GetMatrixRotation = GetMatrixRotation(x1);
        _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _194Divide);
        _6GetMatrixTranslation = GetMatrixTranslation(x0);
        _7GetMatrixTranslation = GetMatrixTranslation(x1);
        _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _194Divide);
        _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
        _9ScalingRotationTranslationMatrix;
        });
    _196Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 172278
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 172277
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 172276
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 172282
            Int32 _1Add;// 5:PlusOne->0:Add 172281
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 172279
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _197Map = Map(_195Combine, _196Pass-through: function1);
    _198Flatten = Flatten(_197Map);
    _199MeshIndices = MeshIndices(_76Pass-through: TriMesh);
    _200SetMapChannel = SetMapChannel(_76Pass-through: TriMesh, flux channel, _198Flatten, _199MeshIndices);
    _201IgnoreFirst = IgnoreFirst(_26Combine, _200SetMapChannel);
    _202IgnoreFirst = IgnoreFirst(flux channel, _201IgnoreFirst);
    _202IgnoreFirst;
    }