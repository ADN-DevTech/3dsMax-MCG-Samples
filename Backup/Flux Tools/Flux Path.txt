(InstanceState state, Int32 Flux channel, TriMesh mesh, Boolean world, Single start percent, Single length percent, INode shape, Boolean clamp, Matrix modifierTransform, Boolean combine effect, Single strength) => 
  {
    MapChannel _0GetMapChannel;// 2:MatricesFromMapChannel->9:GetMapChannel 177410
    IArray[Vector3] _1MapChannelVertexBuffer;// 2:MatricesFromMapChannel->8:MapChannelVertexBuffer 177409
    Int32 _2Count;// 2:Slices->2:Count 177406
    Int32 _3Constant;// 2:MatricesFromMapChannel->0:Constant 177411
    Int32 _4Divide;// 2:Slices->3:Divide 177405
    IArray[Int32] _5Range;// 2:Slices->4:Range 177404
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 177403
    IArray[Matrix] _7Map;// 2:MatricesFromMapChannel->5:Map 177400
    MapChannel _8GetMapChannel;// 8:MatricesFromMapChannel->9:GetMapChannel 177505
    IArray[Vector3] _9MapChannelVertexBuffer;// 8:MatricesFromMapChannel->8:MapChannelVertexBuffer 177504
    Int32 _10Count;// 2:Slices->2:Count 177501
    Int32 _11Constant;// 8:MatricesFromMapChannel->0:Constant 177506
    Int32 _12Divide;// 2:Slices->3:Divide 177500
    IArray[Int32] _13Range;// 2:Slices->4:Range 177499
    IArray[IArray[Vector3]] _14Map;// 2:Slices->5:Map 177498
    IArray[Matrix] _15Map;// 8:MatricesFromMapChannel->5:Map 177495
    Int32 _16Count;// 18:MatrixCountFromMapChannel->11:Count 177492
    IArray[Single] _17RangeInclusiveFloat;// 4:SampleInRange->2:RangeInclusiveFloat 177465
    Single _18Constant;// 8:DivideBy100->0:Constant 177474
    Single _19Divide;// 8:DivideBy100->2:Divide 177473
    Single _20Add;// 10:SamplePercentageRangeWithClamp->12:Add 177478
    Single _21Constant;// 15:DivideBy100->0:Constant 177477
    Single _22Divide;// 15:DivideBy100->2:Divide 177476
    IArray[Single] _23Map;// 4:SampleInRange->7:Map 177464
    ShapeObject _24ShapeFromNode;// 0:ShapeFromNodeWithValidation->2:ShapeFromNode 177538
    Boolean _25CanGetShapeFromNode;// 0:ShapeFromNodeWithValidation->3:CanGetShapeFromNode 177540
    Boolean _26Not;// 0:ShapeFromNodeWithValidation->11:Not 177539
    ShapeObject _27ExitIf;// 0:ShapeFromNodeWithValidation->4:ExitIf 177537
    Func[Single, Vector3] _28Pass-through: function1;// 0:Pass-through: function1 177457
    Func[Single, Vector3] _29Pass-through: function1;// 0:Pass-through: function1 177462
    IArray[Vector3] _30Map;// 4:SampleInRange->5:Map 177463
    IArray[Vector3] _35Pass-through: array;// 0:Pass-through: array 177163
    IArray[Matrix] _36Combine;// 12:FluxSetPoints->5:Combine 177397
    TriMesh _90Pass-through: TriMesh;// 0:Pass-through: TriMesh 177173
    TriMesh _144Pass-through: TriMesh;// 0:Pass-through: TriMesh 177296
    Int32 _145One;// 8:PlusOne->1:One 177294
    Int32 _146Add;// 8:PlusOne->0:Add 177293
    MapChannel _147GetMapChannel;// 12:MatricesFromMapChannel->9:GetMapChannel 177308
    IArray[Vector3] _148MapChannelVertexBuffer;// 12:MatricesFromMapChannel->8:MapChannelVertexBuffer 177307
    Int32 _149Count;// 2:Slices->2:Count 177304
    Int32 _150Constant;// 12:MatricesFromMapChannel->0:Constant 177309
    Int32 _151Divide;// 2:Slices->3:Divide 177303
    IArray[Int32] _152Range;// 2:Slices->4:Range 177302
    IArray[IArray[Vector3]] _153Map;// 2:Slices->5:Map 177301
    IArray[Matrix] _154Map;// 12:MatricesFromMapChannel->5:Map 177298
    TriMesh _206Pass-through: TriMesh;// 0:Pass-through: TriMesh 177336
    MapChannel _207GetMapChannel;// 11:MatricesFromMapChannel->9:GetMapChannel 177348
    IArray[Vector3] _208MapChannelVertexBuffer;// 11:MatricesFromMapChannel->8:MapChannelVertexBuffer 177347
    Int32 _209Count;// 2:Slices->2:Count 177344
    Int32 _210Constant;// 11:MatricesFromMapChannel->0:Constant 177349
    Int32 _211Divide;// 2:Slices->3:Divide 177343
    IArray[Int32] _212Range;// 2:Slices->4:Range 177342
    IArray[IArray[Vector3]] _213Map;// 2:Slices->5:Map 177341
    IArray[Matrix] _214Map;// 11:MatricesFromMapChannel->5:Map 177338
    Single _215Constant;// 17:DivideBy100->0:Constant 177396
    Single _216Divide;// 17:DivideBy100->2:Divide 177395
    IArray[Matrix] _217Combine;// 4:FluxStoreMatrices->10:Combine 177295
    Func[Matrix, IArray[Vector3]] _218Pass-through: function1;// 0:Pass-through: function1 177178
    IArray[IArray[Vector3]] _219Map;// 5:FlatMap->4:Map 177180
    IArray[Vector3] _220Flatten;// 5:FlatMap->3:Flatten 177179
    IArray[Int32] _221MeshIndices;// 13:StoreMatricesInMapChannel->0:MeshIndices 177189
    TriMesh _222SetMapChannel;// 13:StoreMatricesInMapChannel->7:SetMapChannel 177176
    TriMesh _223IgnoreFirst;// 4:FluxStoreMatrices->9:IgnoreFirst 177172
    TriMesh _224IgnoreFirst;// 4:FluxStoreMatrices->2:IgnoreFirst 177171
    _0GetMapChannel = GetMapChannel(mesh, Flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 177408
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 177407
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 177420
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 177421
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 177425
        Vector3 _3At;// 6:MatrixFromRows->3:At 177424
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 177419
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 177422
        Int32 _6One;// 8:PlusOne->1:One 177429
        Int32 _7Add;// 8:PlusOne->0:Add 177428
        Vector3 _8At;// 6:MatrixFromRows->4:At 177426
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 177418
        Int32 _10Constant;// 25:Three->0:Constant 177423
        Int32 _11One;// 9:PlusOne->1:One 177433
        Int32 _12Add;// 9:PlusOne->0:Add 177432
        Vector3 _13At;// 6:MatrixFromRows->5:At 177430
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 177417
        Int32 _15One;// 10:PlusOne->1:One 177437
        Int32 _16Add;// 10:PlusOne->0:Add 177436
        Vector3 _17At;// 6:MatrixFromRows->6:At 177434
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 177413
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8GetMapChannel = GetMapChannel(mesh, Flux channel);
    _9MapChannelVertexBuffer = MapChannelVertexBuffer(_8GetMapChannel);
    _10Count = Count(_9MapChannelVertexBuffer);
    _11Constant = 4;
    _12Divide = Divide(_10Count, _11Constant);
    _13Range = Range(_12Divide);
    _14Map = Map(_13Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 177503
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 177502
        _0Multiply = Multiply(_11Constant, x0);
        _1Slice = Slice(_9MapChannelVertexBuffer, _0Multiply, _11Constant);
        _1Slice;
        });
    _15Map = Map(_14Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 177515
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 177516
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 177520
        Vector3 _3At;// 6:MatrixFromRows->3:At 177519
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 177514
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 177517
        Int32 _6One;// 8:PlusOne->1:One 177524
        Int32 _7Add;// 8:PlusOne->0:Add 177523
        Vector3 _8At;// 6:MatrixFromRows->4:At 177521
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 177513
        Int32 _10Constant;// 25:Three->0:Constant 177518
        Int32 _11One;// 9:PlusOne->1:One 177528
        Int32 _12Add;// 9:PlusOne->0:Add 177527
        Vector3 _13At;// 6:MatrixFromRows->5:At 177525
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 177512
        Int32 _15One;// 10:PlusOne->1:One 177532
        Int32 _16Add;// 10:PlusOne->0:Add 177531
        Vector3 _17At;// 6:MatrixFromRows->6:At 177529
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 177508
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _16Count = Count(_15Map);
    _17RangeInclusiveFloat = RangeInclusiveFloat(_16Count);
    _18Constant = 100;
    _19Divide = Divide(start percent, _18Constant);
    _20Add = Add(start percent, length percent);
    _21Constant = 100;
    _22Divide = Divide(_20Add, _21Constant);
    _23Map = Map(_17RangeInclusiveFloat, (Single x0) => 
      {
        Single _0Subtract;// 10:ScaleFloat->6:Subtract 177471
        Single _1Multiply;// 10:ScaleFloat->8:Multiply 177470
        Single _2Add;// 10:ScaleFloat->9:Add 177469
        _0Subtract = Subtract(_22Divide, _19Divide);
        _1Multiply = Multiply(x0, _0Subtract);
        _2Add = Add(_19Divide, _1Multiply);
        _2Add;
        });
    _24ShapeFromNode = ShapeFromNode(shape);
    _25CanGetShapeFromNode = CanGetShapeFromNode(shape);
    _26Not = Not(_25CanGetShapeFromNode);
    _27ExitIf = ExitIf(_24ShapeFromNode, _26Not);
    _28Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0LerpOnCurve;// 1:LerpOnCurve 177535
        _0LerpOnCurve = LerpOnCurve(_27ExitIf, x0);
        _0LerpOnCurve;
        };
    _29Pass-through: function1 = (Single x0) => 
      {
        Vector3 _6Apply1;// 10:SamplePercentageRangeWithClamp->7:Apply1 177479
        _6Apply1 = Apply1(_28Pass-through: function1, if (clamp)
          {
            Single _0Constant;// 10:ClampFloatToOne->0:Constant 177483
            Single _1Constant;// 10:ClampFloatToOne->0:Constant 177485
            Single _2GreaterFloat;// 10:ClampFloatToOne->1:GreaterFloat 177484
            Single _3LesserFloat;// 10:ClampFloatToOne->2:LesserFloat 177482
            _0Constant = 1;
            _1Constant = 0;
            _2GreaterFloat = GreaterFloat(_1Constant, x0);
            _3LesserFloat = LesserFloat(_0Constant, _2GreaterFloat);
            _3LesserFloat;
            }else
          {
            Single _4FloatOne;// 13:FloatModuloOne->2:FloatOne 177489
            Single _5Modulo;// 13:FloatModuloOne->1:Modulo 177488
            _4FloatOne = FloatOne();
            _5Modulo = Modulo(x0, _4FloatOne);
            _5Modulo;
            });
        _6Apply1;
        };
    _30Map = Map(_23Map, _29Pass-through: function1);
    _35Pass-through: array = if (world)
      {
        Matrix _31ObjectTransformBeforeWSM;// 11:ObjectTransformBeforeWSM 177543
        Matrix _32InvertMatrix;// 3:TransformPointsBetweenLocalSpaces->21:InvertMatrix 177452
        Func[Vector3, Vector3] _33Pass-through: function1;// 0:Pass-through: function1 177447
        IArray[Vector3] _34Map;// 3:MapConditional->4:Map 177449
        _31ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(shape);
        _32InvertMatrix = InvertMatrix(modifierTransform);
        _33Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 3:TransformPointsBetweenLocalSpaces->5:Transform 177451
            Vector3 _1Transform;// 3:TransformPointsBetweenLocalSpaces->11:Transform 177450
            _0Transform = Transform(x0, _31ObjectTransformBeforeWSM);
            _1Transform = Transform(_0Transform, _32InvertMatrix);
            _1Transform;
            };
        _34Map = Map(_30Map, _33Pass-through: function1);
        _34Map;
        }else
      {
        _30Map;
        };
    _36Combine = Combine(_7Map, _35Pass-through: array, (Matrix x0, Vector3 x1) => 
      {
        Matrix _0SetMatrixTranslation;// 12:FluxSetPoints->6:SetMatrixTranslation 177438
        _0SetMatrixTranslation = SetMatrixTranslation(x0, x1);
        _0SetMatrixTranslation;
        });
    _90Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _41Pass-through: function1;// 0:Pass-through: function1 177196
        IArray[IArray[Vector3]] _42Map;// 5:FlatMap->4:Map 177198
        IArray[Vector3] _43Flatten;// 5:FlatMap->3:Flatten 177197
        IArray[Int32] _44MeshIndices;// 6:StoreMatricesInMapChannel->0:MeshIndices 177207
        TriMesh _45SetMapChannel;// 6:StoreMatricesInMapChannel->7:SetMapChannel 177194
        _41Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 177202
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 177201
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 177200
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 177206
                Int32 _1Add;// 5:PlusOne->0:Add 177205
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 177203
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _42Map = Map(_36Combine, _41Pass-through: function1);
        _43Flatten = Flatten(_42Map);
        _44MeshIndices = MeshIndices(mesh);
        _45SetMapChannel = SetMapChannel(mesh, Flux channel, _43Flatten, _44MeshIndices);
        _45SetMapChannel;
        }else
      {
        Int32 _46Constant;// 5:GetMapChannelOrGeometry->0:Constant 177246
        Boolean _47Equal;// 5:GetMapChannelOrGeometry->4:Equal 177245
        MapChannel _50Pass-through: any;// 0:Pass-through: any 177237
        Object _51Null;// 6:IsNullFix2->3:Null 177241
        Object _52As;// 6:IsNullFix2->23:As 177239
        Boolean _53Equal;// 6:IsNullFix2->1:Equal 177238
        Boolean _54Not;// 4:MapChannelExists->4:Not 177236
        Int32 _55One;// 8:PlusOne->1:One 177294
        Int32 _56Add;// 8:PlusOne->0:Add 177293
        TriMesh _84Pass-through: TriMesh;// 0:Pass-through: TriMesh 177212
        Func[Matrix, IArray[Vector3]] _85Pass-through: function1;// 0:Pass-through: function1 177217
        IArray[IArray[Vector3]] _86Map;// 5:FlatMap->4:Map 177219
        IArray[Vector3] _87Flatten;// 5:FlatMap->3:Flatten 177218
        IArray[Int32] _88MeshIndices;// 13:StoreMatricesInMapChannel->0:MeshIndices 177228
        TriMesh _89SetMapChannel;// 13:StoreMatricesInMapChannel->7:SetMapChannel 177215
        _46Constant = -3;
        _47Equal = Equal(Flux channel, _46Constant);
        _50Pass-through: any = if (_47Equal)
          {
            MapChannel _48TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 177247
            _48TopologyChannel = TopologyChannel(mesh);
            _48TopologyChannel;
            }else
          {
            MapChannel _49GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 177248
            _49GetMapChannel = GetMapChannel(mesh, Flux channel);
            _49GetMapChannel;
            };
        _51Null = Null();
        _52As = As(_50Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 177240
            _0IgnoreFirst = IgnoreFirst(x0, _51Null);
            _0IgnoreFirst;
            });
        _53Equal = Equal(_52As, _51Null);
        _54Not = Not(_53Equal);
        _55One = One();
        _56Add = Add(Flux channel, _55One);
        _84Pass-through: TriMesh = if (_54Not)
          {
            Int32 _57Constant;// 7:SetMapChannelOrGeometry->0:Constant 177258
            Boolean _58Equal;// 7:SetMapChannelOrGeometry->6:Equal 177257
            Int32 _59Constant;// 0:GetMapChannelOrGeometry->0:Constant 177268
            Boolean _60Equal;// 0:GetMapChannelOrGeometry->4:Equal 177267
            MapChannel _63Pass-through: MapChannel;// 0:Pass-through: MapChannel 177250
            IArray[Vector3] _64MapChannelVertexBuffer;// 8:AssignMapChannel->3:MapChannelVertexBuffer 177262
            IArray[Int32] _67MapChannelIndexBuffer;// 8:AssignMapChannel->4:MapChannelIndexBuffer 177263
            _57Constant = -3;
            _58Equal = Equal(_57Constant, _56Add);
            _59Constant = -3;
            _60Equal = Equal(Flux channel, _59Constant);
            _63Pass-through: MapChannel = if (_60Equal)
              {
                MapChannel _61TopologyChannel;// 0:GetMapChannelOrGeometry->6:TopologyChannel 177269
                _61TopologyChannel = TopologyChannel(mesh);
                _61TopologyChannel;
                }else
              {
                MapChannel _62GetMapChannel;// 0:GetMapChannelOrGeometry->3:GetMapChannel 177270
                _62GetMapChannel = GetMapChannel(mesh, Flux channel);
                _62GetMapChannel;
                };
            _64MapChannelVertexBuffer = MapChannelVertexBuffer(_63Pass-through: MapChannel);
            _67MapChannelIndexBuffer = MapChannelIndexBuffer(_63Pass-through: MapChannel);
            if (_58Equal)
              {
                MeshData _68MeshData;// 7:SetMapChannelOrGeometry->9:MeshData 177260
                TriMesh _69CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 177259
                _68MeshData = MeshData(mesh);
                _69CreateMeshWithMeshData = CreateMeshWithMeshData(_64MapChannelVertexBuffer, _67MapChannelIndexBuffer, _68MeshData);
                _69CreateMeshWithMeshData;
                }else
              {
                TriMesh _70SetMapChannel;// 7:SetMapChannelOrGeometry->0:SetMapChannel 177261
                _70SetMapChannel = SetMapChannel(mesh, _56Add, _64MapChannelVertexBuffer, _67MapChannelIndexBuffer);
                _70SetMapChannel;
                };
            }else
          {
            Int32 _71Constant;// 10:SetMapChannelOrGeometry->0:Constant 177279
            Boolean _72Equal;// 10:SetMapChannelOrGeometry->6:Equal 177278
            Single _73Constant;// 5:Origin->0:Constant 177285
            Vector3 _74Vector3;// 5:Origin->1:Vector3 177284
            IArray[Vector3] _75Unit;// 2:MapChannelClear->4:Unit 177283
            Int32 _76Zero;// 2:MapChannelClear->9:Zero 177287
            Int32 _77FaceCount;// 2:MapChannelClear->6:FaceCount 177291
            Int32 _78Constant;// 1:Three->0:Constant 177290
            Int32 _79Multiply;// 7:MultiplyByThree->2:Multiply 177289
            IArray[Int32] _80ArrayOf;// 2:MapChannelClear->8:ArrayOf 177286
            _71Constant = -3;
            _72Equal = Equal(_71Constant, _56Add);
            _73Constant = 0;
            _74Vector3 = Vector3(_73Constant, _73Constant, _73Constant);
            _75Unit = Unit(_74Vector3);
            _76Zero = Zero();
            _77FaceCount = FaceCount(mesh);
            _78Constant = 3;
            _79Multiply = Multiply(_77FaceCount, _78Constant);
            _80ArrayOf = ArrayOf(_76Zero, _79Multiply);
            if (_72Equal)
              {
                MeshData _81MeshData;// 10:SetMapChannelOrGeometry->9:MeshData 177281
                TriMesh _82CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 177280
                _81MeshData = MeshData(mesh);
                _82CreateMeshWithMeshData = CreateMeshWithMeshData(_75Unit, _80ArrayOf, _81MeshData);
                _82CreateMeshWithMeshData;
                }else
              {
                TriMesh _83SetMapChannel;// 10:SetMapChannelOrGeometry->0:SetMapChannel 177282
                _83SetMapChannel = SetMapChannel(mesh, _56Add, _75Unit, _80ArrayOf);
                _83SetMapChannel;
                };
            };
        _85Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 177223
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 177222
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 177221
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 177227
                Int32 _1Add;// 5:PlusOne->0:Add 177226
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 177224
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _86Map = Map(_36Combine, _85Pass-through: function1);
        _87Flatten = Flatten(_86Map);
        _88MeshIndices = MeshIndices(_84Pass-through: TriMesh);
        _89SetMapChannel = SetMapChannel(_84Pass-through: TriMesh, Flux channel, _87Flatten, _88MeshIndices);
        _89SetMapChannel;
        };
    _144Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _95Pass-through: function1;// 0:Pass-through: function1 177196
        IArray[IArray[Vector3]] _96Map;// 5:FlatMap->4:Map 177198
        IArray[Vector3] _97Flatten;// 5:FlatMap->3:Flatten 177197
        IArray[Int32] _98MeshIndices;// 6:StoreMatricesInMapChannel->0:MeshIndices 177207
        TriMesh _99SetMapChannel;// 6:StoreMatricesInMapChannel->7:SetMapChannel 177194
        _95Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 177202
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 177201
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 177200
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 177206
                Int32 _1Add;// 5:PlusOne->0:Add 177205
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 177203
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _96Map = Map(_36Combine, _95Pass-through: function1);
        _97Flatten = Flatten(_96Map);
        _98MeshIndices = MeshIndices(mesh);
        _99SetMapChannel = SetMapChannel(mesh, Flux channel, _97Flatten, _98MeshIndices);
        _99SetMapChannel;
        }else
      {
        Int32 _100Constant;// 5:GetMapChannelOrGeometry->0:Constant 177246
        Boolean _101Equal;// 5:GetMapChannelOrGeometry->4:Equal 177245
        MapChannel _104Pass-through: any;// 0:Pass-through: any 177237
        Object _105Null;// 6:IsNullFix2->3:Null 177241
        Object _106As;// 6:IsNullFix2->23:As 177239
        Boolean _107Equal;// 6:IsNullFix2->1:Equal 177238
        Boolean _108Not;// 4:MapChannelExists->4:Not 177236
        Int32 _109One;// 8:PlusOne->1:One 177294
        Int32 _110Add;// 8:PlusOne->0:Add 177293
        TriMesh _138Pass-through: TriMesh;// 0:Pass-through: TriMesh 177212
        Func[Matrix, IArray[Vector3]] _139Pass-through: function1;// 0:Pass-through: function1 177217
        IArray[IArray[Vector3]] _140Map;// 5:FlatMap->4:Map 177219
        IArray[Vector3] _141Flatten;// 5:FlatMap->3:Flatten 177218
        IArray[Int32] _142MeshIndices;// 13:StoreMatricesInMapChannel->0:MeshIndices 177228
        TriMesh _143SetMapChannel;// 13:StoreMatricesInMapChannel->7:SetMapChannel 177215
        _100Constant = -3;
        _101Equal = Equal(Flux channel, _100Constant);
        _104Pass-through: any = if (_101Equal)
          {
            MapChannel _102TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 177247
            _102TopologyChannel = TopologyChannel(mesh);
            _102TopologyChannel;
            }else
          {
            MapChannel _103GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 177248
            _103GetMapChannel = GetMapChannel(mesh, Flux channel);
            _103GetMapChannel;
            };
        _105Null = Null();
        _106As = As(_104Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 177240
            _0IgnoreFirst = IgnoreFirst(x0, _105Null);
            _0IgnoreFirst;
            });
        _107Equal = Equal(_106As, _105Null);
        _108Not = Not(_107Equal);
        _109One = One();
        _110Add = Add(Flux channel, _109One);
        _138Pass-through: TriMesh = if (_108Not)
          {
            Int32 _111Constant;// 7:SetMapChannelOrGeometry->0:Constant 177258
            Boolean _112Equal;// 7:SetMapChannelOrGeometry->6:Equal 177257
            Int32 _113Constant;// 0:GetMapChannelOrGeometry->0:Constant 177268
            Boolean _114Equal;// 0:GetMapChannelOrGeometry->4:Equal 177267
            MapChannel _117Pass-through: MapChannel;// 0:Pass-through: MapChannel 177250
            IArray[Vector3] _118MapChannelVertexBuffer;// 8:AssignMapChannel->3:MapChannelVertexBuffer 177262
            IArray[Int32] _121MapChannelIndexBuffer;// 8:AssignMapChannel->4:MapChannelIndexBuffer 177263
            _111Constant = -3;
            _112Equal = Equal(_111Constant, _110Add);
            _113Constant = -3;
            _114Equal = Equal(Flux channel, _113Constant);
            _117Pass-through: MapChannel = if (_114Equal)
              {
                MapChannel _115TopologyChannel;// 0:GetMapChannelOrGeometry->6:TopologyChannel 177269
                _115TopologyChannel = TopologyChannel(mesh);
                _115TopologyChannel;
                }else
              {
                MapChannel _116GetMapChannel;// 0:GetMapChannelOrGeometry->3:GetMapChannel 177270
                _116GetMapChannel = GetMapChannel(mesh, Flux channel);
                _116GetMapChannel;
                };
            _118MapChannelVertexBuffer = MapChannelVertexBuffer(_117Pass-through: MapChannel);
            _121MapChannelIndexBuffer = MapChannelIndexBuffer(_117Pass-through: MapChannel);
            if (_112Equal)
              {
                MeshData _122MeshData;// 7:SetMapChannelOrGeometry->9:MeshData 177260
                TriMesh _123CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 177259
                _122MeshData = MeshData(mesh);
                _123CreateMeshWithMeshData = CreateMeshWithMeshData(_118MapChannelVertexBuffer, _121MapChannelIndexBuffer, _122MeshData);
                _123CreateMeshWithMeshData;
                }else
              {
                TriMesh _124SetMapChannel;// 7:SetMapChannelOrGeometry->0:SetMapChannel 177261
                _124SetMapChannel = SetMapChannel(mesh, _110Add, _118MapChannelVertexBuffer, _121MapChannelIndexBuffer);
                _124SetMapChannel;
                };
            }else
          {
            Int32 _125Constant;// 10:SetMapChannelOrGeometry->0:Constant 177279
            Boolean _126Equal;// 10:SetMapChannelOrGeometry->6:Equal 177278
            Single _127Constant;// 5:Origin->0:Constant 177285
            Vector3 _128Vector3;// 5:Origin->1:Vector3 177284
            IArray[Vector3] _129Unit;// 2:MapChannelClear->4:Unit 177283
            Int32 _130Zero;// 2:MapChannelClear->9:Zero 177287
            Int32 _131FaceCount;// 2:MapChannelClear->6:FaceCount 177291
            Int32 _132Constant;// 1:Three->0:Constant 177290
            Int32 _133Multiply;// 7:MultiplyByThree->2:Multiply 177289
            IArray[Int32] _134ArrayOf;// 2:MapChannelClear->8:ArrayOf 177286
            _125Constant = -3;
            _126Equal = Equal(_125Constant, _110Add);
            _127Constant = 0;
            _128Vector3 = Vector3(_127Constant, _127Constant, _127Constant);
            _129Unit = Unit(_128Vector3);
            _130Zero = Zero();
            _131FaceCount = FaceCount(mesh);
            _132Constant = 3;
            _133Multiply = Multiply(_131FaceCount, _132Constant);
            _134ArrayOf = ArrayOf(_130Zero, _133Multiply);
            if (_126Equal)
              {
                MeshData _135MeshData;// 10:SetMapChannelOrGeometry->9:MeshData 177281
                TriMesh _136CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 177280
                _135MeshData = MeshData(mesh);
                _136CreateMeshWithMeshData = CreateMeshWithMeshData(_129Unit, _134ArrayOf, _135MeshData);
                _136CreateMeshWithMeshData;
                }else
              {
                TriMesh _137SetMapChannel;// 10:SetMapChannelOrGeometry->0:SetMapChannel 177282
                _137SetMapChannel = SetMapChannel(mesh, _110Add, _129Unit, _134ArrayOf);
                _137SetMapChannel;
                };
            };
        _139Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 177223
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 177222
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 177221
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 177227
                Int32 _1Add;// 5:PlusOne->0:Add 177226
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 177224
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _140Map = Map(_36Combine, _139Pass-through: function1);
        _141Flatten = Flatten(_140Map);
        _142MeshIndices = MeshIndices(_138Pass-through: TriMesh);
        _143SetMapChannel = SetMapChannel(_138Pass-through: TriMesh, Flux channel, _141Flatten, _142MeshIndices);
        _143SetMapChannel;
        };
    _145One = One();
    _146Add = Add(Flux channel, _145One);
    _147GetMapChannel = GetMapChannel(_144Pass-through: TriMesh, _146Add);
    _148MapChannelVertexBuffer = MapChannelVertexBuffer(_147GetMapChannel);
    _149Count = Count(_148MapChannelVertexBuffer);
    _150Constant = 4;
    _151Divide = Divide(_149Count, _150Constant);
    _152Range = Range(_151Divide);
    _153Map = Map(_152Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 177306
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 177305
        _0Multiply = Multiply(_150Constant, x0);
        _1Slice = Slice(_148MapChannelVertexBuffer, _0Multiply, _150Constant);
        _1Slice;
        });
    _154Map = Map(_153Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 177318
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 177319
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 177323
        Vector3 _3At;// 6:MatrixFromRows->3:At 177322
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 177317
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 177320
        Int32 _6One;// 8:PlusOne->1:One 177327
        Int32 _7Add;// 8:PlusOne->0:Add 177326
        Vector3 _8At;// 6:MatrixFromRows->4:At 177324
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 177316
        Int32 _10Constant;// 25:Three->0:Constant 177321
        Int32 _11One;// 9:PlusOne->1:One 177331
        Int32 _12Add;// 9:PlusOne->0:Add 177330
        Vector3 _13At;// 6:MatrixFromRows->5:At 177328
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 177315
        Int32 _15One;// 10:PlusOne->1:One 177335
        Int32 _16Add;// 10:PlusOne->0:Add 177334
        Vector3 _17At;// 6:MatrixFromRows->6:At 177332
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 177311
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _206Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _159Pass-through: function1;// 0:Pass-through: function1 177196
        IArray[IArray[Vector3]] _160Map;// 5:FlatMap->4:Map 177198
        IArray[Vector3] _161Flatten;// 5:FlatMap->3:Flatten 177197
        IArray[Int32] _162MeshIndices;// 6:StoreMatricesInMapChannel->0:MeshIndices 177207
        TriMesh _163SetMapChannel;// 6:StoreMatricesInMapChannel->7:SetMapChannel 177194
        _159Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 177202
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 177201
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 177200
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 177206
                Int32 _1Add;// 5:PlusOne->0:Add 177205
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 177203
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _160Map = Map(_36Combine, _159Pass-through: function1);
        _161Flatten = Flatten(_160Map);
        _162MeshIndices = MeshIndices(mesh);
        _163SetMapChannel = SetMapChannel(mesh, Flux channel, _161Flatten, _162MeshIndices);
        _163SetMapChannel;
        }else
      {
        Int32 _164Constant;// 5:GetMapChannelOrGeometry->0:Constant 177246
        Boolean _165Equal;// 5:GetMapChannelOrGeometry->4:Equal 177245
        MapChannel _168Pass-through: any;// 0:Pass-through: any 177237
        Object _169Null;// 6:IsNullFix2->3:Null 177241
        Object _170As;// 6:IsNullFix2->23:As 177239
        Boolean _171Equal;// 6:IsNullFix2->1:Equal 177238
        Boolean _172Not;// 4:MapChannelExists->4:Not 177236
        TriMesh _200Pass-through: TriMesh;// 0:Pass-through: TriMesh 177212
        Func[Matrix, IArray[Vector3]] _201Pass-through: function1;// 0:Pass-through: function1 177217
        IArray[IArray[Vector3]] _202Map;// 5:FlatMap->4:Map 177219
        IArray[Vector3] _203Flatten;// 5:FlatMap->3:Flatten 177218
        IArray[Int32] _204MeshIndices;// 13:StoreMatricesInMapChannel->0:MeshIndices 177228
        TriMesh _205SetMapChannel;// 13:StoreMatricesInMapChannel->7:SetMapChannel 177215
        _164Constant = -3;
        _165Equal = Equal(Flux channel, _164Constant);
        _168Pass-through: any = if (_165Equal)
          {
            MapChannel _166TopologyChannel;// 5:GetMapChannelOrGeometry->6:TopologyChannel 177247
            _166TopologyChannel = TopologyChannel(mesh);
            _166TopologyChannel;
            }else
          {
            MapChannel _167GetMapChannel;// 5:GetMapChannelOrGeometry->3:GetMapChannel 177248
            _167GetMapChannel = GetMapChannel(mesh, Flux channel);
            _167GetMapChannel;
            };
        _169Null = Null();
        _170As = As(_168Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2->5:IgnoreFirst 177240
            _0IgnoreFirst = IgnoreFirst(x0, _169Null);
            _0IgnoreFirst;
            });
        _171Equal = Equal(_170As, _169Null);
        _172Not = Not(_171Equal);
        _200Pass-through: TriMesh = if (_172Not)
          {
            Int32 _173Constant;// 7:SetMapChannelOrGeometry->0:Constant 177258
            Boolean _174Equal;// 7:SetMapChannelOrGeometry->6:Equal 177257
            Int32 _175Constant;// 0:GetMapChannelOrGeometry->0:Constant 177268
            Boolean _176Equal;// 0:GetMapChannelOrGeometry->4:Equal 177267
            MapChannel _179Pass-through: MapChannel;// 0:Pass-through: MapChannel 177250
            IArray[Vector3] _180MapChannelVertexBuffer;// 8:AssignMapChannel->3:MapChannelVertexBuffer 177262
            IArray[Int32] _183MapChannelIndexBuffer;// 8:AssignMapChannel->4:MapChannelIndexBuffer 177263
            _173Constant = -3;
            _174Equal = Equal(_173Constant, _146Add);
            _175Constant = -3;
            _176Equal = Equal(Flux channel, _175Constant);
            _179Pass-through: MapChannel = if (_176Equal)
              {
                MapChannel _177TopologyChannel;// 0:GetMapChannelOrGeometry->6:TopologyChannel 177269
                _177TopologyChannel = TopologyChannel(mesh);
                _177TopologyChannel;
                }else
              {
                MapChannel _178GetMapChannel;// 0:GetMapChannelOrGeometry->3:GetMapChannel 177270
                _178GetMapChannel = GetMapChannel(mesh, Flux channel);
                _178GetMapChannel;
                };
            _180MapChannelVertexBuffer = MapChannelVertexBuffer(_179Pass-through: MapChannel);
            _183MapChannelIndexBuffer = MapChannelIndexBuffer(_179Pass-through: MapChannel);
            if (_174Equal)
              {
                MeshData _184MeshData;// 7:SetMapChannelOrGeometry->9:MeshData 177260
                TriMesh _185CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 177259
                _184MeshData = MeshData(mesh);
                _185CreateMeshWithMeshData = CreateMeshWithMeshData(_180MapChannelVertexBuffer, _183MapChannelIndexBuffer, _184MeshData);
                _185CreateMeshWithMeshData;
                }else
              {
                TriMesh _186SetMapChannel;// 7:SetMapChannelOrGeometry->0:SetMapChannel 177261
                _186SetMapChannel = SetMapChannel(mesh, _146Add, _180MapChannelVertexBuffer, _183MapChannelIndexBuffer);
                _186SetMapChannel;
                };
            }else
          {
            Int32 _187Constant;// 10:SetMapChannelOrGeometry->0:Constant 177279
            Boolean _188Equal;// 10:SetMapChannelOrGeometry->6:Equal 177278
            Single _189Constant;// 5:Origin->0:Constant 177285
            Vector3 _190Vector3;// 5:Origin->1:Vector3 177284
            IArray[Vector3] _191Unit;// 2:MapChannelClear->4:Unit 177283
            Int32 _192Zero;// 2:MapChannelClear->9:Zero 177287
            Int32 _193FaceCount;// 2:MapChannelClear->6:FaceCount 177291
            Int32 _194Constant;// 1:Three->0:Constant 177290
            Int32 _195Multiply;// 7:MultiplyByThree->2:Multiply 177289
            IArray[Int32] _196ArrayOf;// 2:MapChannelClear->8:ArrayOf 177286
            _187Constant = -3;
            _188Equal = Equal(_187Constant, _146Add);
            _189Constant = 0;
            _190Vector3 = Vector3(_189Constant, _189Constant, _189Constant);
            _191Unit = Unit(_190Vector3);
            _192Zero = Zero();
            _193FaceCount = FaceCount(mesh);
            _194Constant = 3;
            _195Multiply = Multiply(_193FaceCount, _194Constant);
            _196ArrayOf = ArrayOf(_192Zero, _195Multiply);
            if (_188Equal)
              {
                MeshData _197MeshData;// 10:SetMapChannelOrGeometry->9:MeshData 177281
                TriMesh _198CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry->8:CreateMeshWithMeshData 177280
                _197MeshData = MeshData(mesh);
                _198CreateMeshWithMeshData = CreateMeshWithMeshData(_191Unit, _196ArrayOf, _197MeshData);
                _198CreateMeshWithMeshData;
                }else
              {
                TriMesh _199SetMapChannel;// 10:SetMapChannelOrGeometry->0:SetMapChannel 177282
                _199SetMapChannel = SetMapChannel(mesh, _146Add, _191Unit, _196ArrayOf);
                _199SetMapChannel;
                };
            };
        _201Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows->0:Constant 177223
            IArray[Int32] _1Range;// 3:MatrixRows->1:Range 177222
            IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 177221
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 177227
                Int32 _1Add;// 5:PlusOne->0:Add 177226
                Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 177224
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _202Map = Map(_36Combine, _201Pass-through: function1);
        _203Flatten = Flatten(_202Map);
        _204MeshIndices = MeshIndices(_200Pass-through: TriMesh);
        _205SetMapChannel = SetMapChannel(_200Pass-through: TriMesh, Flux channel, _203Flatten, _204MeshIndices);
        _205SetMapChannel;
        };
    _207GetMapChannel = GetMapChannel(_206Pass-through: TriMesh, Flux channel);
    _208MapChannelVertexBuffer = MapChannelVertexBuffer(_207GetMapChannel);
    _209Count = Count(_208MapChannelVertexBuffer);
    _210Constant = 4;
    _211Divide = Divide(_209Count, _210Constant);
    _212Range = Range(_211Divide);
    _213Map = Map(_212Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 177346
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 177345
        _0Multiply = Multiply(_210Constant, x0);
        _1Slice = Slice(_208MapChannelVertexBuffer, _0Multiply, _210Constant);
        _1Slice;
        });
    _214Map = Map(_213Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 177358
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 177359
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 177363
        Vector3 _3At;// 6:MatrixFromRows->3:At 177362
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 177357
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 177360
        Int32 _6One;// 8:PlusOne->1:One 177367
        Int32 _7Add;// 8:PlusOne->0:Add 177366
        Vector3 _8At;// 6:MatrixFromRows->4:At 177364
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 177356
        Int32 _10Constant;// 25:Three->0:Constant 177361
        Int32 _11One;// 9:PlusOne->1:One 177371
        Int32 _12Add;// 9:PlusOne->0:Add 177370
        Vector3 _13At;// 6:MatrixFromRows->5:At 177368
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 177355
        Int32 _15One;// 10:PlusOne->1:One 177375
        Int32 _16Add;// 10:PlusOne->0:Add 177374
        Vector3 _17At;// 6:MatrixFromRows->6:At 177372
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 177351
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _215Constant = 100;
    _216Divide = Divide(strength, _215Constant);
    _217Combine = Combine(_154Map, _214Map, (Matrix x0, Matrix x1) => 
      {
        Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp->6:GetMatrixScaling 177386
        Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp->7:GetMatrixScaling 177387
        Vector3 _2Lerp;// 12:MatrixComponentsLerp->11:Lerp 177385
        Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp->4:GetMatrixRotation 177389
        Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp->5:GetMatrixRotation 177390
        Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp->9:QuaternionLerp 177388
        Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp->2:GetMatrixTranslation 177392
        Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp->3:GetMatrixTranslation 177393
        Vector3 _8Lerp;// 12:MatrixComponentsLerp->10:Lerp 177391
        Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp->14:ScalingRotationTranslationMatrix 177384
        _0GetMatrixScaling = GetMatrixScaling(x0);
        _1GetMatrixScaling = GetMatrixScaling(x1);
        _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _216Divide);
        _3GetMatrixRotation = GetMatrixRotation(x0);
        _4GetMatrixRotation = GetMatrixRotation(x1);
        _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _216Divide);
        _6GetMatrixTranslation = GetMatrixTranslation(x0);
        _7GetMatrixTranslation = GetMatrixTranslation(x1);
        _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _216Divide);
        _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
        _9ScalingRotationTranslationMatrix;
        });
    _218Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 177184
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 177183
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 177182
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 177188
            Int32 _1Add;// 5:PlusOne->0:Add 177187
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 177185
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _219Map = Map(_217Combine, _218Pass-through: function1);
    _220Flatten = Flatten(_219Map);
    _221MeshIndices = MeshIndices(_90Pass-through: TriMesh);
    _222SetMapChannel = SetMapChannel(_90Pass-through: TriMesh, Flux channel, _220Flatten, _221MeshIndices);
    _223IgnoreFirst = IgnoreFirst(_36Combine, _222SetMapChannel);
    _224IgnoreFirst = IgnoreFirst(Flux channel, _223IgnoreFirst);
    _224IgnoreFirst;
    }