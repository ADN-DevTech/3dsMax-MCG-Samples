(InstanceState state, TriMesh mesh, Int32 flux channel, Boolean invert, Boolean horizontal, Single max angle) => 
  {
    MapChannel _0GetMapChannel;// 0:MatricesFromMapChannel->9:GetMapChannel 172982
    IArray[Vector3] _1MapChannelVertexBuffer;// 0:MatricesFromMapChannel->8:MapChannelVertexBuffer 172981
    Int32 _2Count;// 2:Slices->2:Count 172978
    Int32 _3Constant;// 0:MatricesFromMapChannel->0:Constant 172983
    Int32 _4Divide;// 2:Slices->3:Divide 172977
    IArray[Int32] _5Range;// 2:Slices->4:Range 172976
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 172975
    IArray[Matrix] _7Map;// 0:MatricesFromMapChannel->5:Map 172972
    Boolean _8Not;// 7:Not 173065
    Single _9ToRadians;// 10:ToRadians 173070
    IArray[Matrix] _10Filter;// 3:Filter 172969
    Func[Matrix, IArray[Vector3]] _11Pass-through: function1;// 0:Pass-through: function1 172955
    IArray[IArray[Vector3]] _12Map;// 5:FlatMap->4:Map 172957
    IArray[Vector3] _13Flatten;// 5:FlatMap->3:Flatten 172956
    IArray[Int32] _14MeshIndices;// 6:StoreMatricesInMapChannel->0:MeshIndices 172966
    TriMesh _15SetMapChannel;// 6:StoreMatricesInMapChannel->7:SetMapChannel 172953
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 172980
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 172979
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 172992
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 172993
        Int32 _2Zero;// 6:MatrixFromRows->7:Zero 172997
        Vector3 _3At;// 6:MatrixFromRows->3:At 172996
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 172991
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 172994
        Int32 _6One;// 8:PlusOne->1:One 173001
        Int32 _7Add;// 8:PlusOne->0:Add 173000
        Vector3 _8At;// 6:MatrixFromRows->4:At 172998
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 172990
        Int32 _10Constant;// 25:Three->0:Constant 172995
        Int32 _11One;// 9:PlusOne->1:One 173005
        Int32 _12Add;// 9:PlusOne->0:Add 173004
        Vector3 _13At;// 6:MatrixFromRows->5:At 173002
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 172989
        Int32 _15One;// 10:PlusOne->1:One 173009
        Int32 _16Add;// 10:PlusOne->0:Add 173008
        Vector3 _17At;// 6:MatrixFromRows->6:At 173006
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows->2:SetMatrixTranslation 172985
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8Not = Not(horizontal);
    _9ToRadians = ToRadians(max angle);
    _10Filter = Filter(_7Map, (Matrix x0) => 
      {
        Int32 _0Constant;// 11:MatrixZAxis->0:Constant 173069
        Vector3 _1MatrixRow;// 11:MatrixZAxis->1:MatrixRow 173068
        Boolean _26LessThan;// 8:LessThan 173015
        Single _51Constant;// 2:Origin->0:Constant 173046
        Vector3 _52Vector3;// 2:Origin->1:Vector3 173045
        Vector3 _53ZAxis;// 2:HorizontalPlane->0:ZAxis 173047
        Ray _54Ray;// 2:RayFromOrigin->1:Ray 173044
        Plane _55Plane;// 1:PlaneAtOrigin->3:Plane 173042
        Vector3 _56PlaneNormal;// 1:VectorPlaneAngle->1:PlaneNormal 173040
        Single _57AngleOfVectors;// 0:VectorAngleFromAxis->1:AngleOfVectors 173039
        Single _58Abs;// 4:AngleDistanceFromPi->3:Abs 173037
        Single _59Pi;// 4:AngleDistanceFromPi->2:Pi 173038
        Single _60Modulo;// 1:FloatModuloDistance->1:Modulo 173035
        Single _61Abs;// 1:FloatModuloDistance->3:Abs 173034
        Single _62FloatDistance;// 1:FloatModuloDistance->2:FloatDistance 173036
        Boolean _63LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 173033
        Vector3 _64ZAxis;// 4:VectorAngleFromZAxis->2:ZAxis 173064
        Single _65AngleOfVectors;// 6:VectorAngleFromAxis->1:AngleOfVectors 173063
        Single _66Abs;// 4:AngleDistanceFromPi->3:Abs 173061
        Single _67Pi;// 4:AngleDistanceFromPi->2:Pi 173062
        Single _68Modulo;// 1:FloatModuloDistance->1:Modulo 173059
        Single _69Abs;// 1:FloatModuloDistance->3:Abs 173058
        Single _70FloatDistance;// 1:FloatModuloDistance->2:FloatDistance 173060
        Boolean _71LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 173057
        _0Constant = 3;
        _1MatrixRow = MatrixRow(_0Constant, x0);
        _26LessThan = LessThan(if (_8Not)
            {
              Single _2HalfPi;// 10:ComplementaryAngle->2:HalfPi 173024
              Single _3Constant;// 2:Origin->0:Constant 173046
              Vector3 _4Vector3;// 2:Origin->1:Vector3 173045
              Vector3 _5ZAxis;// 2:HorizontalPlane->0:ZAxis 173047
              Ray _6Ray;// 2:RayFromOrigin->1:Ray 173044
              Plane _7Plane;// 1:PlaneAtOrigin->3:Plane 173042
              Vector3 _8PlaneNormal;// 1:VectorPlaneAngle->1:PlaneNormal 173040
              Single _9AngleOfVectors;// 0:VectorAngleFromAxis->1:AngleOfVectors 173039
              Single _10Abs;// 4:AngleDistanceFromPi->3:Abs 173037
              Single _11Pi;// 4:AngleDistanceFromPi->2:Pi 173038
              Single _12Modulo;// 1:FloatModuloDistance->1:Modulo 173035
              Single _13Abs;// 1:FloatModuloDistance->3:Abs 173034
              Single _14FloatDistance;// 1:FloatModuloDistance->2:FloatDistance 173036
              Boolean _15LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 173033
              Single _16Pass-through: Single;// 0:Pass-through: Single 173022
              Single _17Subtract;// 10:ComplementaryAngle->1:Subtract 173023
              _2HalfPi = HalfPi();
              _3Constant = 0;
              _4Vector3 = Vector3(_3Constant, _3Constant, _3Constant);
              _5ZAxis = ZAxis();
              _6Ray = Ray(_4Vector3, _5ZAxis);
              _7Plane = Plane(_6Ray);
              _8PlaneNormal = PlaneNormal(_7Plane);
              _9AngleOfVectors = AngleOfVectors(_1MatrixRow, _8PlaneNormal);
              _10Abs = Abs(_9AngleOfVectors);
              _11Pi = Pi();
              _12Modulo = Modulo(_10Abs, _11Pi);
              _13Abs = Abs(_12Modulo);
              _14FloatDistance = FloatDistance(_11Pi, _12Modulo);
              _15LessThanOrEqual = LessThanOrEqual(_13Abs, _14FloatDistance);
              _16Pass-through: Single = if (_15LessThanOrEqual)
                {
                  _13Abs;
                  }else
                {
                  _14FloatDistance;
                  };
              _17Subtract = Subtract(_2HalfPi, _16Pass-through: Single);
              _17Subtract;
              }else
            {
              Vector3 _18ZAxis;// 4:VectorAngleFromZAxis->2:ZAxis 173064
              Single _19AngleOfVectors;// 6:VectorAngleFromAxis->1:AngleOfVectors 173063
              Single _20Abs;// 4:AngleDistanceFromPi->3:Abs 173061
              Single _21Pi;// 4:AngleDistanceFromPi->2:Pi 173062
              Single _22Modulo;// 1:FloatModuloDistance->1:Modulo 173059
              Single _23Abs;// 1:FloatModuloDistance->3:Abs 173058
              Single _24FloatDistance;// 1:FloatModuloDistance->2:FloatDistance 173060
              Boolean _25LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 173057
              _18ZAxis = ZAxis();
              _19AngleOfVectors = AngleOfVectors(_1MatrixRow, _18ZAxis);
              _20Abs = Abs(_19AngleOfVectors);
              _21Pi = Pi();
              _22Modulo = Modulo(_20Abs, _21Pi);
              _23Abs = Abs(_22Modulo);
              _24FloatDistance = FloatDistance(_21Pi, _22Modulo);
              _25LessThanOrEqual = LessThanOrEqual(_23Abs, _24FloatDistance);
              if (_25LessThanOrEqual)
                {
                  _23Abs;
                  }else
                {
                  _24FloatDistance;
                  };
              }, _9ToRadians);
        _51Constant = 0;
        _52Vector3 = Vector3(_51Constant, _51Constant, _51Constant);
        _53ZAxis = ZAxis();
        _54Ray = Ray(_52Vector3, _53ZAxis);
        _55Plane = Plane(_54Ray);
        _56PlaneNormal = PlaneNormal(_55Plane);
        _57AngleOfVectors = AngleOfVectors(_1MatrixRow, _56PlaneNormal);
        _58Abs = Abs(_57AngleOfVectors);
        _59Pi = Pi();
        _60Modulo = Modulo(_58Abs, _59Pi);
        _61Abs = Abs(_60Modulo);
        _62FloatDistance = FloatDistance(_59Pi, _60Modulo);
        _63LessThanOrEqual = LessThanOrEqual(_61Abs, _62FloatDistance);
        _64ZAxis = ZAxis();
        _65AngleOfVectors = AngleOfVectors(_1MatrixRow, _64ZAxis);
        _66Abs = Abs(_65AngleOfVectors);
        _67Pi = Pi();
        _68Modulo = Modulo(_66Abs, _67Pi);
        _69Abs = Abs(_68Modulo);
        _70FloatDistance = FloatDistance(_67Pi, _68Modulo);
        _71LessThanOrEqual = LessThanOrEqual(_69Abs, _70FloatDistance);
        if (invert)
          {
            Boolean _72Not;// 18:XOr->4:Not 173013
            _72Not = Not(_26LessThan);
            _72Not;
            }else
          {
            _26LessThan;
            };
        });
    _11Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 172961
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 172960
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 172959
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 172965
            Int32 _1Add;// 5:PlusOne->0:Add 172964
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 172962
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _12Map = Map(_10Filter, _11Pass-through: function1);
    _13Flatten = Flatten(_12Map);
    _14MeshIndices = MeshIndices(mesh);
    _15SetMapChannel = SetMapChannel(mesh, flux channel, _13Flatten, _14MeshIndices);
    _15SetMapChannel;
    }