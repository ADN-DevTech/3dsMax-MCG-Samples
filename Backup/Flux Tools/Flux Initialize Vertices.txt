(InstanceState state, TriMesh mesh, Int32 flux channel, INode source, Boolean position only, Int32 axis) => 
  {
    Boolean _0IsValidNode;// 14:MeshFromNodeWithDefault->1:IsValidNode 173873
    TriMesh _2Pass-through: TriMesh;// 0:Pass-through: TriMesh 173865
    IArray[Vector3] _3MeshVertices;// 5:MeshVertexNormalsAsRays->2:MeshVertices 173867
    IArray[Vector3] _4VertexNormals;// 5:MeshVertexNormalsAsRays->1:VertexNormals 173868
    IArray[Ray] _5Combine;// 5:MeshVertexNormalsAsRays->3:Combine 173866
    IArray[Matrix] _6Map;// 19:Map 173864
    Func[Matrix, IArray[Vector3]] _7Pass-through: function1;// 0:Pass-through: function1 173850
    IArray[IArray[Vector3]] _8Map;// 5:FlatMap->4:Map 173852
    IArray[Vector3] _9Flatten;// 5:FlatMap->3:Flatten 173851
    IArray[Int32] _10MeshIndices;// 0:StoreMatricesInMapChannel->0:MeshIndices 173861
    TriMesh _11SetMapChannel;// 0:StoreMatricesInMapChannel->7:SetMapChannel 173848
    _0IsValidNode = IsValidNode(source);
    _2Pass-through: TriMesh = if (_0IsValidNode)
      {
        TriMesh _1MeshFromNode;// 14:MeshFromNodeWithDefault->2:MeshFromNode 173874
        _1MeshFromNode = MeshFromNode(source);
        _1MeshFromNode;
        }else
      {
        mesh;
        };
    _3MeshVertices = MeshVertices(_2Pass-through: TriMesh);
    _4VertexNormals = VertexNormals(_2Pass-through: TriMesh);
    _5Combine = Combine(_3MeshVertices, _4VertexNormals, (Vector3 x0, Vector3 x1) => 
      {
        Ray _0Ray;// 5:MeshVertexNormalsAsRays->4:Ray 173869
        _0Ray = Ray(x0, x1);
        _0Ray;
        });
    _6Map = Map(_5Combine, (Ray x0) => 
      {
        Vector3 _61RayPosition;// 16:RayToMatrix->10:RayPosition 173946
        Matrix _62RotationTranslationMatrix;// 16:RayToMatrix->8:RotationTranslationMatrix 173879
        _61RayPosition = RayPosition(x0);
        _62RotationTranslationMatrix = RotationTranslationMatrix(if (position only)
          {
            Quaternion _0QuaternionIdentity;// 16:RayToMatrix->4:QuaternionIdentity 173881
            _0QuaternionIdentity = QuaternionIdentity();
            _0QuaternionIdentity;
            }else
          {
            Int32 _1Zero;// 6:ChooseAxis->9:Zero 173919
            Boolean _2GreaterThanOrEqual;// 6:ChooseAxis->8:GreaterThanOrEqual 173918
            Vector3 _3XAxis;// 6:ChooseAxis->3:XAxis 173927
            IArray[Vector3] _4Unit;// 2:Array3->2:Unit 173926
            Vector3 _5YAxis;// 6:ChooseAxis->4:YAxis 173928
            IArray[Vector3] _6Append;// 2:Array3->3:Append 173925
            Vector3 _7ZAxis;// 6:ChooseAxis->5:ZAxis 173929
            IArray[Vector3] _8Append;// 2:Array3->6:Append 173924
            Vector3 _15Pass-through: Vector3;// 0:Pass-through: Vector3 173882
            Vector3 _16Normalize;// 5:RotationBetweenVectorsFix->4:Normalize 173914
            Vector3 _17RayDirection;// 16:RayToMatrix->7:RayDirection 173945
            Single _18Length;// 4:VectorIsSmall->3:Length 173942
            Single _19Constant;// 4:VectorLengthEpsilon->0:Constant 173943
            Boolean _20LessThan;// 4:VectorIsSmall->5:LessThan 173941
            Vector3 _22Pass-through: Vector3;// 0:Pass-through: Vector3 173883
            Vector3 _23Normalize;// 5:RotationBetweenVectorsFix->5:Normalize 173915
            Single _24Dot;// 0:RotationBetweenUnitVectors->6:Dot 173890
            Single _25FloatOne;// 0:RotationBetweenUnitVectors->8:FloatOne 173891
            Single _26Add;// 0:RotationBetweenUnitVectors->7:Add 173889
            Single _27Constant;// 0:RotationBetweenUnitVectors->0:Constant 173892
            Boolean _28LessThan;// 0:RotationBetweenUnitVectors->40:LessThan 173888
            Quaternion _60QuaternionNormalize;// 0:RotationBetweenUnitVectors->3:QuaternionNormalize 173886
            _1Zero = Zero();
            _2GreaterThanOrEqual = GreaterThanOrEqual(axis, _1Zero);
            _3XAxis = XAxis();
            _4Unit = Unit(_3XAxis);
            _5YAxis = YAxis();
            _6Append = Append(_4Unit, _5YAxis);
            _7ZAxis = ZAxis();
            _8Append = Append(_6Append, _7ZAxis);
            _15Pass-through: Vector3 = if (_2GreaterThanOrEqual)
              {
                Vector3 _9At;// 6:ChooseAxis->1:At 173920
                _9At = At(_8Append, axis);
                _9At;
                }else
              {
                Int32 _10One;// 10:PlusOne->1:One 173935
                Int32 _11Add;// 10:PlusOne->0:Add 173934
                Int32 _12Negative;// 6:ChooseAxis->11:Negative 173932
                Vector3 _13At;// 6:ChooseAxis->12:At 173931
                Vector3 _14Negate;// 6:ChooseAxis->13:Negate 173930
                _10One = One();
                _11Add = Add(axis, _10One);
                _12Negative = Negative(_11Add);
                _13At = At(_8Append, _12Negative);
                _14Negate = Negate(_13At);
                _14Negate;
                };
            _16Normalize = Normalize(_15Pass-through: Vector3);
            _17RayDirection = RayDirection(x0);
            _18Length = Length(_17RayDirection);
            _19Constant = 1E-06;
            _20LessThan = LessThan(_18Length, _19Constant);
            _22Pass-through: Vector3 = if (_20LessThan)
              {
                Vector3 _21ZAxis;// 11:VectorOrZAxis->2:ZAxis 173944
                _21ZAxis = ZAxis();
                _21ZAxis;
                }else
              {
                _17RayDirection;
                };
            _23Normalize = Normalize(_22Pass-through: Vector3);
            _24Dot = Dot(_16Normalize, _23Normalize);
            _25FloatOne = FloatOne();
            _26Add = Add(_24Dot, _25FloatOne);
            _27Constant = 1E-07;
            _28LessThan = LessThan(_26Add, _27Constant);
            _60QuaternionNormalize = QuaternionNormalize(if (_28LessThan)
              {
                Single _35X;// 0:RotationBetweenUnitVectors->12:X 173897
                Single _36Abs;// 0:RotationBetweenUnitVectors->11:Abs 173896
                Single _37Z;// 0:RotationBetweenUnitVectors->14:Z 173900
                Single _38Abs;// 0:RotationBetweenUnitVectors->13:Abs 173899
                Boolean _39GreaterThan;// 0:RotationBetweenUnitVectors->15:GreaterThan 173895
                Single _56FloatZero;// 0:RotationBetweenUnitVectors->36:FloatZero 173911
                Quaternion _57QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors->35:QuaternionFromVectorAndTheta 173893
                _35X = X(_16Normalize);
                _36Abs = Abs(_35X);
                _37Z = Z(_16Normalize);
                _38Abs = Abs(_37Z);
                _39GreaterThan = GreaterThan(_36Abs, _38Abs);
                _56FloatZero = FloatZero();
                _57QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_39GreaterThan)
                  {
                    Single _46Y;// 0:RotationBetweenUnitVectors->29:Y 173903
                    Single _47NegativeFloat;// 0:RotationBetweenUnitVectors->30:NegativeFloat 173902
                    Single _48X;// 0:RotationBetweenUnitVectors->23:X 173904
                    Single _49FloatZero;// 0:RotationBetweenUnitVectors->21:FloatZero 173905
                    Vector3 _50Vector3;// 0:RotationBetweenUnitVectors->19:Vector3 173901
                    _46Y = Y(_16Normalize);
                    _47NegativeFloat = NegativeFloat(_46Y);
                    _48X = X(_16Normalize);
                    _49FloatZero = FloatZero();
                    _50Vector3 = Vector3(_47NegativeFloat, _48X, _49FloatZero);
                    _50Vector3;
                    }else
                  {
                    Single _51FloatZero;// 0:RotationBetweenUnitVectors->22:FloatZero 173907
                    Single _52Z;// 0:RotationBetweenUnitVectors->26:Z 173909
                    Single _53NegativeFloat;// 0:RotationBetweenUnitVectors->25:NegativeFloat 173908
                    Single _54Y;// 0:RotationBetweenUnitVectors->24:Y 173910
                    Vector3 _55Vector3;// 0:RotationBetweenUnitVectors->20:Vector3 173906
                    _51FloatZero = FloatZero();
                    _52Z = Z(_16Normalize);
                    _53NegativeFloat = NegativeFloat(_52Z);
                    _54Y = Y(_16Normalize);
                    _55Vector3 = Vector3(_51FloatZero, _53NegativeFloat, _54Y);
                    _55Vector3;
                    }, _56FloatZero);
                _57QuaternionFromVectorAndTheta;
                }else
              {
                Vector3 _58Cross;// 0:RotationBetweenUnitVectors->2:Cross 173913
                Quaternion _59QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors->5:QuaternionFromVectorAndTheta 173912
                _58Cross = Cross(_16Normalize, _23Normalize);
                _59QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_58Cross, _26Add);
                _59QuaternionFromVectorAndTheta;
                });
            _60QuaternionNormalize;
            }, _61RayPosition);
        _62RotationTranslationMatrix;
        });
    _7Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows->0:Constant 173856
        IArray[Int32] _1Range;// 3:MatrixRows->1:Range 173855
        IArray[Vector3] _2Map;// 3:MatrixRows->3:Map 173854
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 173860
            Int32 _1Add;// 5:PlusOne->0:Add 173859
            Vector3 _2MatrixRow;// 3:MatrixRows->4:MatrixRow 173857
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _8Map = Map(_6Map, _7Pass-through: function1);
    _9Flatten = Flatten(_8Map);
    _10MeshIndices = MeshIndices(mesh);
    _11SetMapChannel = SetMapChannel(mesh, flux channel, _9Flatten, _10MeshIndices);
    _11SetMapChannel;
    }