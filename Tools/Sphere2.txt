(InstanceState state, Int32 segments, Single radius) => 
  {
    IArray[Single] _0RangeInclusiveFloat;// 1:SphereQuadMeshAsCompound-ext->6:RangeInclusiveFloat 72757
    IArray[Single] _1RangeExclusiveFloat;// 1:SphereQuadMeshAsCompound-ext->1:RangeExclusiveFloat 72758
    Func[Single, Single, Vector3] _2Pass-through: function2;// 0:Pass-through: function2 72739
    Func[Single, Single, Vector3] _3Pass-through: function2;// 0:Pass-through: function2 72745
    Func[Single, IArray[Vector3]] _4Pass-through: function1;// 0:Pass-through: function1 72747
    IArray[IArray[Vector3]] _5Map;// 4:FlatMap->4:Map 72749
    IArray[Vector3] _6Flatten;// 4:FlatMap->3:Flatten 72748
    Int32 _7Count;// 0:QuadMeshFromUVs-ext->7:Count 72756
    Boolean _8True;// 1:SphereQuadMeshAsCompound-ext->3:True 72774
    QuadMesh _9QuadMeshStrip;// 0:QuadMeshFromUVs-ext->5:QuadMeshStrip 72742
    TriMesh _10Triangulate;// 2:ToTriMesh->2:Triangulate 72735
    IArray[Int32] _11MeshIndices;// 3:HideEveryThirdEdge->2:MeshIndices 72726
    IArray[Int32] _12Indices;// 3:HideEveryThirdEdge->8:Indices 72725
    Int32 _13Constant;// 3:HideEveryThirdEdge->0:Constant 72733
    Int32 _14Constant;// 3:HideEveryThirdEdge->0:Constant 72734
    IArray[Boolean] _15Map;// 3:HideEveryThirdEdge->5:Map 72724
    TriMesh _16SetVisibleEdges;// 3:HideEveryThirdEdge->9:SetVisibleEdges 72723
    IArray[Vector3] _17MeshVertices;// 1:DeformMeshPoints->0:MeshVertices 72719
    Vector3 _18Vector3;// 5:ScalarToVector-ext->1:Vector3 72777
    Func[Vector3, Vector3] _19Pass-through: function1;// 0:Pass-through: function1 72716
    IArray[Vector3] _20Map;// 1:DeformMeshPoints->1:Map 72718
    TriMesh _21SetMeshVertices;// 1:DeformMeshPoints->4:SetMeshVertices 72717
    _0RangeInclusiveFloat = RangeInclusiveFloat(segments);
    _1RangeExclusiveFloat = RangeExclusiveFloat(segments);
    _2Pass-through: function2 = (Single x0, Single x1) => 
      {
        Single _0TwoPi;// 4:SpherePointFromUV-ext->7:TwoPi 72765
        Single _1Multiply;// 4:SpherePointFromUV-ext->6:Multiply 72764
        Single _2Cos;// 4:SpherePointFromUV-ext->14:Cos 72763
        Single _3Pi;// 4:SpherePointFromUV-ext->9:Pi 72769
        Single _4Multiply;// 4:SpherePointFromUV-ext->8:Multiply 72768
        Single _5HalfPi;// 4:SpherePointFromUV-ext->3:HalfPi 72770
        Single _6Subtract;// 4:SpherePointFromUV-ext->10:Subtract 72767
        Single _7Cos;// 4:SpherePointFromUV-ext->13:Cos 72766
        Single _8Multiply;// 4:SpherePointFromUV-ext->18:Multiply 72762
        Single _9Sin;// 4:SpherePointFromUV-ext->15:Sin 72772
        Single _10Multiply;// 4:SpherePointFromUV-ext->19:Multiply 72771
        Single _11Sin;// 4:SpherePointFromUV-ext->20:Sin 72773
        Vector3 _12Vector3;// 4:SpherePointFromUV-ext->12:Vector3 72761
        _0TwoPi = TwoPi();
        _1Multiply = Multiply(x0, _0TwoPi);
        _2Cos = Cos(_1Multiply);
        _3Pi = Pi();
        _4Multiply = Multiply(x1, _3Pi);
        _5HalfPi = HalfPi();
        _6Subtract = Subtract(_4Multiply, _5HalfPi);
        _7Cos = Cos(_6Subtract);
        _8Multiply = Multiply(_2Cos, _7Cos);
        _9Sin = Sin(_1Multiply);
        _10Multiply = Multiply(_9Sin, _7Cos);
        _11Sin = Sin(_6Subtract);
        _12Vector3 = Vector3(_8Multiply, _10Multiply, _11Sin);
        _12Vector3;
        };
    _3Pass-through: function2 = (Single x0, Single x1) => 
      {
        Single _0IgnoreFirst;// 0:QuadMeshFromUVs-ext->10:IgnoreFirst 72753
        Vector3 _1Apply2;// 0:QuadMeshFromUVs-ext->9:Apply2 72752
        _0IgnoreFirst = IgnoreFirst(x0, x1);
        _1Apply2 = Apply2(_2Pass-through: function2, _0IgnoreFirst, x0);
        _1Apply2;
        };
    _4Pass-through: function1 = (Single x0) => 
      {
        Func[Single, Vector3] _0Bind1of2;// 6:CartesianProduct->5:Bind1of2 72751
        IArray[Vector3] _1Map;// 6:CartesianProduct->1:Map 72750
        _0Bind1of2 = Bind1of2(_3Pass-through: function2, x0);
        _1Map = Map(_1RangeExclusiveFloat, _0Bind1of2);
        _1Map;
        };
    _5Map = Map(_0RangeInclusiveFloat, _4Pass-through: function1);
    _6Flatten = Flatten(_5Map);
    _7Count = Count(_1RangeExclusiveFloat);
    _8True = True();
    _9QuadMeshStrip = QuadMeshStrip(_6Flatten, _7Count, _8True, _8True);
    _10Triangulate = Triangulate(_9QuadMeshStrip);
    _11MeshIndices = MeshIndices(_10Triangulate);
    _12Indices = Indices(_11MeshIndices);
    _13Constant = 3;
    _14Constant = 2;
    _15Map = Map(_12Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 72732
        Boolean _1Equal;// 6:ModuloEquals->4:Equal 72731
        Boolean _2Not;// 3:HideEveryThirdEdge->7:Not 72727
        _0Modulo = Modulo(x0, _13Constant);
        _1Equal = Equal(_0Modulo, _14Constant);
        _2Not = Not(_1Equal);
        _2Not;
        });
    _16SetVisibleEdges = SetVisibleEdges(_10Triangulate, _15Map);
    _17MeshVertices = MeshVertices(_16SetVisibleEdges);
    _18Vector3 = Vector3(radius, radius, radius);
    _19Pass-through: function1 = (Vector3 x0) => 
      {
        Vector3 _0Multiply;// 4:MeshScale-ext->2:Multiply 72720
        _0Multiply = Multiply(x0, _18Vector3);
        _0Multiply;
        };
    _20Map = Map(_17MeshVertices, _19Pass-through: function1);
    _21SetMeshVertices = SetMeshVertices(_16SetVisibleEdges, _20Map);
    _21SetMeshVertices;
    }