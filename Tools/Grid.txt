(InstanceState state, BoundingBox boundingBox, Int32 nx, Int32 ny, Int32 nz, TriMesh mesh) => 
  {
    Int32 _0One;// 10:PlusOne->1:One 101931
    Int32 _1Add;// 10:PlusOne->0:Add 101930
    IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 101927
    Vector3 _3BoxMin;// 0:SubdivideBoxAlongDiagonal->2:BoxMin 101932
    Vector3 _4BoxMax;// 0:SubdivideBoxAlongDiagonal->3:BoxMax 101933
    Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 101925
    IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 101926
    Int32 _7Count;// 3:LastIndex->2:Count 101920
    Int32 _8One;// 3:MinusOne->2:One 101919
    Int32 _9Subtract;// 3:MinusOne->1:Subtract 101918
    IArray[Vector3] _10Take;// 6:DropLast->2:Take 101915
    Int32 _11One;// 5:SkipOne->2:One 101936
    IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 101935
    IArray[BoundingBox] _13Combine;// 0:SubdivideBoxAlongDiagonal->7:Combine 101913
    IArray[BoundingBox] _14Map;// 4:SubdivideBoxAlongX->1:Map 101910
    Func[BoundingBox, IArray[BoundingBox]] _15Pass-through: function1;// 0:Pass-through: function1 101905
    IArray[IArray[BoundingBox]] _16Map;// 7:FlatMap->4:Map 101907
    IArray[BoundingBox] _17Flatten;// 7:FlatMap->3:Flatten 101906
    Func[BoundingBox, IArray[BoundingBox]] _18Pass-through: function1;// 0:Pass-through: function1 101901
    IArray[IArray[BoundingBox]] _19Map;// 8:FlatMap->4:Map 101903
    IArray[BoundingBox] _20Flatten;// 8:FlatMap->3:Flatten 101902
    Single _21Constant;// 13:OnesVector-ext->0:Constant 102046
    Vector3 _22Vector3;// 13:OnesVector-ext->2:Vector3 102045
    Single _23IntAsFloat;// 12:VectorFromInts-ext->3:IntAsFloat 102051
    Single _24IntAsFloat;// 12:VectorFromInts-ext->4:IntAsFloat 102052
    Single _25IntAsFloat;// 12:VectorFromInts-ext->5:IntAsFloat 102053
    Vector3 _26Vector3;// 12:VectorFromInts-ext->6:Vector3 102050
    Vector3 _27Divide;// 2:BoxSubdivideAsMatrices-ext->14:Divide 102044
    IArray[Matrix] _28Map;// 2:BoxSubdivideAsMatrices-ext->4:Map 101895
    IArray[Matrix] _29IgnoreFirst;// 2:BoxSubdivideAsMatrices-ext->10:IgnoreFirst 101894
    IArray[TriMesh] _30Map;// 6:CloneMeshAtTransforms-ext->3:Map 101881
    TriMesh _31CombineAllMeshes;// 7:CombineAllMeshes 101878
    _0One = One();
    _1Add = Add(nx, _0One);
    _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
    _3BoxMin = BoxMin(boundingBox);
    _4BoxMax = BoxMax(boundingBox);
    _5Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 101928
        _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
        _0Lerp;
        };
    _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
    _7Count = Count(_6Map);
    _8One = One();
    _9Subtract = Subtract(_7Count, _8One);
    _10Take = Take(_6Map, _9Subtract);
    _11One = One();
    _12Skip = Skip(_6Map, _11One);
    _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
      {
        BoundingBox _0Box;// 0:SubdivideBoxAlongDiagonal->8:Box 101937
        _0Box = Box(x0, x1);
        _0Box;
        });
    _14Map = Map(_13Combine, (BoundingBox x0) => 
      {
        Vector3 _0BoxMin;// 2:MatchBoxX->7:BoxMin 101943
        Single _1X;// 2:MatchBoxX->4:X 101942
        Vector3 _2BoxMin;// 2:MatchBoxX->5:BoxMin 101945
        Single _3Y;// 2:MatchBoxX->8:Y 101944
        Single _4Z;// 2:MatchBoxX->0:Z 101946
        Vector3 _5Vector3;// 2:MatchBoxX->10:Vector3 101941
        Vector3 _6BoxMax;// 2:MatchBoxX->9:BoxMax 101949
        Single _7X;// 2:MatchBoxX->13:X 101948
        Vector3 _8BoxMax;// 2:MatchBoxX->15:BoxMax 101951
        Single _9Y;// 2:MatchBoxX->11:Y 101950
        Single _10Z;// 2:MatchBoxX->12:Z 101952
        Vector3 _11Vector3;// 2:MatchBoxX->6:Vector3 101947
        BoundingBox _12Box;// 2:MatchBoxX->14:Box 101940
        _0BoxMin = BoxMin(x0);
        _1X = X(_0BoxMin);
        _2BoxMin = BoxMin(boundingBox);
        _3Y = Y(_2BoxMin);
        _4Z = Z(_2BoxMin);
        _5Vector3 = Vector3(_1X, _3Y, _4Z);
        _6BoxMax = BoxMax(x0);
        _7X = X(_6BoxMax);
        _8BoxMax = BoxMax(boundingBox);
        _9Y = Y(_8BoxMax);
        _10Z = Z(_8BoxMax);
        _11Vector3 = Vector3(_7X, _9Y, _10Z);
        _12Box = Box(_5Vector3, _11Vector3);
        _12Box;
        });
    _15Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 101976
        Int32 _1Add;// 10:PlusOne->0:Add 101975
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 101972
        Vector3 _3BoxMin;// 2:SubdivideBoxAlongDiagonal->2:BoxMin 101977
        Vector3 _4BoxMax;// 2:SubdivideBoxAlongDiagonal->3:BoxMax 101978
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 101970
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 101971
        Int32 _7Count;// 3:LastIndex->2:Count 101965
        Int32 _8One;// 3:MinusOne->2:One 101964
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 101963
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 101960
        Int32 _11One;// 5:SkipOne->2:One 101981
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 101980
        IArray[BoundingBox] _13Combine;// 2:SubdivideBoxAlongDiagonal->7:Combine 101958
        IArray[BoundingBox] _14Map;// 5:SubdivideBoxAlongY->0:Map 101955
        _0One = One();
        _1Add = Add(ny, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 101973
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 2:SubdivideBoxAlongDiagonal->8:Box 101982
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxY->5:BoxMin 101988
            Single _1X;// 5:MatchBoxY->4:X 101987
            Vector3 _2BoxMin;// 5:MatchBoxY->11:BoxMin 101990
            Single _3Y;// 5:MatchBoxY->9:Y 101989
            Single _4Z;// 5:MatchBoxY->0:Z 101991
            Vector3 _5Vector3;// 5:MatchBoxY->8:Vector3 101986
            Vector3 _6BoxMax;// 5:MatchBoxY->6:BoxMax 101994
            Single _7X;// 5:MatchBoxY->14:X 101993
            Vector3 _8BoxMax;// 5:MatchBoxY->10:BoxMax 101996
            Single _9Y;// 5:MatchBoxY->13:Y 101995
            Single _10Z;// 5:MatchBoxY->12:Z 101997
            Vector3 _11Vector3;// 5:MatchBoxY->15:Vector3 101992
            BoundingBox _12Box;// 5:MatchBoxY->7:Box 101985
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2BoxMin = BoxMin(x0);
            _3Y = Y(_2BoxMin);
            _4Z = Z(_0BoxMin);
            _5Vector3 = Vector3(_1X, _3Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8BoxMax = BoxMax(x0);
            _9Y = Y(_8BoxMax);
            _10Z = Z(_6BoxMax);
            _11Vector3 = Vector3(_7X, _9Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _16Map = Map(_14Map, _15Pass-through: function1);
    _17Flatten = Flatten(_16Map);
    _18Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 102021
        Int32 _1Add;// 10:PlusOne->0:Add 102020
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 102017
        Vector3 _3BoxMin;// 3:SubdivideBoxAlongDiagonal->2:BoxMin 102022
        Vector3 _4BoxMax;// 3:SubdivideBoxAlongDiagonal->3:BoxMax 102023
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 102015
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 102016
        Int32 _7Count;// 3:LastIndex->2:Count 102010
        Int32 _8One;// 3:MinusOne->2:One 102009
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 102008
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 102005
        Int32 _11One;// 5:SkipOne->2:One 102026
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 102025
        IArray[BoundingBox] _13Combine;// 3:SubdivideBoxAlongDiagonal->7:Combine 102003
        IArray[BoundingBox] _14Map;// 6:SubdivideBoxAlongZ->0:Map 102000
        _0One = One();
        _1Add = Add(nz, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 102018
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 3:SubdivideBoxAlongDiagonal->8:Box 102027
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxZ->7:BoxMin 102033
            Single _1X;// 5:MatchBoxZ->6:X 102032
            Single _2Y;// 5:MatchBoxZ->10:Y 102034
            Vector3 _3BoxMin;// 5:MatchBoxZ->4:BoxMin 102036
            Single _4Z;// 5:MatchBoxZ->11:Z 102035
            Vector3 _5Vector3;// 5:MatchBoxZ->9:Vector3 102031
            Vector3 _6BoxMax;// 5:MatchBoxZ->8:BoxMax 102039
            Single _7X;// 5:MatchBoxZ->14:X 102038
            Single _8Y;// 5:MatchBoxZ->13:Y 102040
            Vector3 _9BoxMax;// 5:MatchBoxZ->3:BoxMax 102042
            Single _10Z;// 5:MatchBoxZ->12:Z 102041
            Vector3 _11Vector3;// 5:MatchBoxZ->15:Vector3 102037
            BoundingBox _12Box;// 5:MatchBoxZ->2:Box 102030
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2Y = Y(_0BoxMin);
            _3BoxMin = BoxMin(x0);
            _4Z = Z(_3BoxMin);
            _5Vector3 = Vector3(_1X, _2Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8Y = Y(_6BoxMax);
            _9BoxMax = BoxMax(x0);
            _10Z = Z(_9BoxMax);
            _11Vector3 = Vector3(_7X, _8Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _19Map = Map(_17Flatten, _18Pass-through: function1);
    _20Flatten = Flatten(_19Map);
    _21Constant = 1;
    _22Vector3 = Vector3(_21Constant, _21Constant, _21Constant);
    _23IntAsFloat = IntAsFloat(nx);
    _24IntAsFloat = IntAsFloat(ny);
    _25IntAsFloat = IntAsFloat(nz);
    _26Vector3 = Vector3(_23IntAsFloat, _24IntAsFloat, _25IntAsFloat);
    _27Divide = Divide(_22Vector3, _26Vector3);
    _28Map = Map(_20Flatten, (BoundingBox x0) => 
      {
        BoundingSphere _0SphereFromBox;// 7:BoundingBoxCenter->2:SphereFromBox 102056
        Vector3 _1SphereCenter;// 7:BoundingBoxCenter->3:SphereCenter 102055
        Matrix _2ScalingTranslationMatrix;// 2:BoxSubdivideAsMatrices-ext->5:ScalingTranslationMatrix 102043
        _0SphereFromBox = SphereFromBox(x0);
        _1SphereCenter = SphereCenter(_0SphereFromBox);
        _2ScalingTranslationMatrix = ScalingTranslationMatrix(_27Divide, _1SphereCenter);
        _2ScalingTranslationMatrix;
        });
    _29IgnoreFirst = IgnoreFirst(boundingBox, _28Map);
    _30Map = Map(_29IgnoreFirst, (Matrix x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 101888
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 101885
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 101887
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 101886
        _0MeshVertices = MeshVertices(mesh);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 1:TransformMesh->0:Transform 101889
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(mesh, _2Map);
        _3SetMeshVertices;
        });
    _31CombineAllMeshes = CombineAllMeshes(_30Map);
    _31CombineAllMeshes;
    }