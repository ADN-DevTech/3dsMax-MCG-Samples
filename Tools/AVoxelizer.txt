(InstanceState state, Int32 grid_y, BoundingBox boundingBox, Int32 grid_x, Int32 grid_z, TriMesh mesh, Boolean caching, Single box size) => 
  {
    Int32 _0One;// 10:PlusOne->1:One 91489
    Int32 _1Add;// 10:PlusOne->0:Add 91488
    IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 91485
    Vector3 _3BoxMin;// 0:SubdivideBoxAlongDiagonal->2:BoxMin 91490
    Vector3 _4BoxMax;// 0:SubdivideBoxAlongDiagonal->3:BoxMax 91491
    Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 91483
    IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 91484
    Int32 _7Count;// 3:LastIndex->2:Count 91478
    Int32 _8One;// 3:MinusOne->2:One 91477
    Int32 _9Subtract;// 3:MinusOne->1:Subtract 91476
    IArray[Vector3] _10Take;// 6:DropLast->2:Take 91473
    Int32 _11One;// 5:SkipOne->2:One 91494
    IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 91493
    IArray[BoundingBox] _13Combine;// 0:SubdivideBoxAlongDiagonal->7:Combine 91471
    IArray[BoundingBox] _14Map;// 4:SubdivideBoxAlongX->1:Map 91468
    Func[BoundingBox, IArray[BoundingBox]] _15Pass-through: function1;// 0:Pass-through: function1 91463
    IArray[IArray[BoundingBox]] _16Map;// 7:FlatMap->4:Map 91465
    IArray[BoundingBox] _17Flatten;// 7:FlatMap->3:Flatten 91464
    Func[BoundingBox, IArray[BoundingBox]] _18Pass-through: function1;// 0:Pass-through: function1 91459
    IArray[IArray[BoundingBox]] _19Map;// 8:FlatMap->4:Map 91461
    IArray[BoundingBox] _20Flatten;// 8:FlatMap->3:Flatten 91460
    Int32 _21Two;// 12:CacheValueWhileTrueWithUpdate-ext->2:Two 91634
    Cache[Tuple[RayTraceScene, Int32]] _22CreateCache;// 12:CacheValueWhileTrueWithUpdate-ext->0:CreateCache 91630
    Int32 _23Zero;// 3:ExtractCurrentValueFromCache->3:Zero 91629
    Tuple[RayTraceScene, Int32] _24CachedValue;// 3:ExtractCurrentValueFromCache->1:CachedValue 91628
    RayTraceScene _25PairItem1;// 0:RayTraceCachedScene-ext->4:PairItem1 91623
    IArray[BoundingBox] _26Filter;// 26:Filter 91453
    Single _27Constant;// 13:PercentToDecimal-ext->0:Constant 91677
    Single _28Divide;// 13:PercentToDecimal-ext->42:Divide 91676
    IArray[TriMesh] _29ParallelMap;// 17:ParallelMap 91452
    TriMesh _30CombineAllMeshes;// 19:CombineAllMeshes 91451
    _0One = One();
    _1Add = Add(grid_y, _0One);
    _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
    _3BoxMin = BoxMin(boundingBox);
    _4BoxMax = BoxMax(boundingBox);
    _5Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 91486
        _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
        _0Lerp;
        };
    _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
    _7Count = Count(_6Map);
    _8One = One();
    _9Subtract = Subtract(_7Count, _8One);
    _10Take = Take(_6Map, _9Subtract);
    _11One = One();
    _12Skip = Skip(_6Map, _11One);
    _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
      {
        BoundingBox _0Box;// 0:SubdivideBoxAlongDiagonal->8:Box 91495
        _0Box = Box(x0, x1);
        _0Box;
        });
    _14Map = Map(_13Combine, (BoundingBox x0) => 
      {
        Vector3 _0BoxMin;// 2:MatchBoxX->7:BoxMin 91501
        Single _1X;// 2:MatchBoxX->4:X 91500
        Vector3 _2BoxMin;// 2:MatchBoxX->5:BoxMin 91503
        Single _3Y;// 2:MatchBoxX->8:Y 91502
        Single _4Z;// 2:MatchBoxX->0:Z 91504
        Vector3 _5Vector3;// 2:MatchBoxX->10:Vector3 91499
        Vector3 _6BoxMax;// 2:MatchBoxX->9:BoxMax 91507
        Single _7X;// 2:MatchBoxX->13:X 91506
        Vector3 _8BoxMax;// 2:MatchBoxX->15:BoxMax 91509
        Single _9Y;// 2:MatchBoxX->11:Y 91508
        Single _10Z;// 2:MatchBoxX->12:Z 91510
        Vector3 _11Vector3;// 2:MatchBoxX->6:Vector3 91505
        BoundingBox _12Box;// 2:MatchBoxX->14:Box 91498
        _0BoxMin = BoxMin(x0);
        _1X = X(_0BoxMin);
        _2BoxMin = BoxMin(boundingBox);
        _3Y = Y(_2BoxMin);
        _4Z = Z(_2BoxMin);
        _5Vector3 = Vector3(_1X, _3Y, _4Z);
        _6BoxMax = BoxMax(x0);
        _7X = X(_6BoxMax);
        _8BoxMax = BoxMax(boundingBox);
        _9Y = Y(_8BoxMax);
        _10Z = Z(_8BoxMax);
        _11Vector3 = Vector3(_7X, _9Y, _10Z);
        _12Box = Box(_5Vector3, _11Vector3);
        _12Box;
        });
    _15Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 91534
        Int32 _1Add;// 10:PlusOne->0:Add 91533
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 91530
        Vector3 _3BoxMin;// 2:SubdivideBoxAlongDiagonal->2:BoxMin 91535
        Vector3 _4BoxMax;// 2:SubdivideBoxAlongDiagonal->3:BoxMax 91536
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 91528
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 91529
        Int32 _7Count;// 3:LastIndex->2:Count 91523
        Int32 _8One;// 3:MinusOne->2:One 91522
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 91521
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 91518
        Int32 _11One;// 5:SkipOne->2:One 91539
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 91538
        IArray[BoundingBox] _13Combine;// 2:SubdivideBoxAlongDiagonal->7:Combine 91516
        IArray[BoundingBox] _14Map;// 5:SubdivideBoxAlongY->0:Map 91513
        _0One = One();
        _1Add = Add(grid_x, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 91531
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 2:SubdivideBoxAlongDiagonal->8:Box 91540
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxY->5:BoxMin 91546
            Single _1X;// 5:MatchBoxY->4:X 91545
            Vector3 _2BoxMin;// 5:MatchBoxY->11:BoxMin 91548
            Single _3Y;// 5:MatchBoxY->9:Y 91547
            Single _4Z;// 5:MatchBoxY->0:Z 91549
            Vector3 _5Vector3;// 5:MatchBoxY->8:Vector3 91544
            Vector3 _6BoxMax;// 5:MatchBoxY->6:BoxMax 91552
            Single _7X;// 5:MatchBoxY->14:X 91551
            Vector3 _8BoxMax;// 5:MatchBoxY->10:BoxMax 91554
            Single _9Y;// 5:MatchBoxY->13:Y 91553
            Single _10Z;// 5:MatchBoxY->12:Z 91555
            Vector3 _11Vector3;// 5:MatchBoxY->15:Vector3 91550
            BoundingBox _12Box;// 5:MatchBoxY->7:Box 91543
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2BoxMin = BoxMin(x0);
            _3Y = Y(_2BoxMin);
            _4Z = Z(_0BoxMin);
            _5Vector3 = Vector3(_1X, _3Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8BoxMax = BoxMax(x0);
            _9Y = Y(_8BoxMax);
            _10Z = Z(_6BoxMax);
            _11Vector3 = Vector3(_7X, _9Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _16Map = Map(_14Map, _15Pass-through: function1);
    _17Flatten = Flatten(_16Map);
    _18Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 91579
        Int32 _1Add;// 10:PlusOne->0:Add 91578
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 91575
        Vector3 _3BoxMin;// 3:SubdivideBoxAlongDiagonal->2:BoxMin 91580
        Vector3 _4BoxMax;// 3:SubdivideBoxAlongDiagonal->3:BoxMax 91581
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 91573
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 91574
        Int32 _7Count;// 3:LastIndex->2:Count 91568
        Int32 _8One;// 3:MinusOne->2:One 91567
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 91566
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 91563
        Int32 _11One;// 5:SkipOne->2:One 91584
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 91583
        IArray[BoundingBox] _13Combine;// 3:SubdivideBoxAlongDiagonal->7:Combine 91561
        IArray[BoundingBox] _14Map;// 6:SubdivideBoxAlongZ->0:Map 91558
        _0One = One();
        _1Add = Add(grid_z, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 91576
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 3:SubdivideBoxAlongDiagonal->8:Box 91585
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxZ->7:BoxMin 91591
            Single _1X;// 5:MatchBoxZ->6:X 91590
            Single _2Y;// 5:MatchBoxZ->10:Y 91592
            Vector3 _3BoxMin;// 5:MatchBoxZ->4:BoxMin 91594
            Single _4Z;// 5:MatchBoxZ->11:Z 91593
            Vector3 _5Vector3;// 5:MatchBoxZ->9:Vector3 91589
            Vector3 _6BoxMax;// 5:MatchBoxZ->8:BoxMax 91597
            Single _7X;// 5:MatchBoxZ->14:X 91596
            Single _8Y;// 5:MatchBoxZ->13:Y 91598
            Vector3 _9BoxMax;// 5:MatchBoxZ->3:BoxMax 91600
            Single _10Z;// 5:MatchBoxZ->12:Z 91599
            Vector3 _11Vector3;// 5:MatchBoxZ->15:Vector3 91595
            BoundingBox _12Box;// 5:MatchBoxZ->2:Box 91588
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2Y = Y(_0BoxMin);
            _3BoxMin = BoxMin(x0);
            _4Z = Z(_3BoxMin);
            _5Vector3 = Vector3(_1X, _2Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8Y = Y(_6BoxMax);
            _9BoxMax = BoxMax(x0);
            _10Z = Z(_9BoxMax);
            _11Vector3 = Vector3(_7X, _8Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _19Map = Map(_17Flatten, _18Pass-through: function1);
    _20Flatten = Flatten(_19Map);
    _21Two = Two();
    _22CreateCache = CreateCache(() => 
      {
        Boolean _0False;// 0:RayTraceCachedScene-ext->3:False 91637
        Tuple[RayTraceScene, Int32] _1Pass-through: any;// 0:Pass-through: any 91624
        _0False = False();
        _1Pass-through: any = RayTraceAddGeometry(RayTraceScene(_0False), mesh);
        _1Pass-through: any;
        }, (Tuple[RayTraceScene, Int32] x0) => 
      {
        if (caching)
          {
            x0;
            }else
          {
            Func[Tuple[RayTraceScene, Int32], Tuple[RayTraceScene, Int32]] _0Pass-through: function1;// 0:Pass-through: function1 91626
            Tuple[RayTraceScene, Int32] _1Apply1;// 12:CacheValueWhileTrueWithUpdate-ext->9:Apply1 91633
            _0Pass-through: function1 = (Tuple[RayTraceScene, Int32] x0) => 
              {
                RayTraceScene _0PairItem1;// 0:RayTraceCachedScene-ext->9:PairItem1 91639
                Int32 _1PairItem2;// 0:RayTraceCachedScene-ext->0:PairItem2 91641
                _0PairItem1 = PairItem1(x0);
                _1PairItem2 = PairItem2(x0);
                RayTraceUpdateGeometry(_0PairItem1, _1PairItem2, mesh);
                };
            _1Apply1 = Apply1(_0Pass-through: function1, x0);
            _1Apply1;
            };
        }, _21Two).SetId(state, 0);
    _23Zero = Zero();
    _24CachedValue = CachedValue(_22CreateCache, _23Zero);
    _25PairItem1 = PairItem1(_24CachedValue);
    _26Filter = Filter(_20Flatten, (BoundingBox x0) => 
      {
        BoundingSphere _0SphereFromBox;// 15:BoundingBoxCenter->2:SphereFromBox 91617
        Vector3 _1SphereCenter;// 15:BoundingBoxCenter->3:SphereCenter 91616
        Vector3 _2ZAxis;// 2:BoxInRayTraceSceneMesh-ext->7:ZAxis 91618
        Ray _3Ray;// 2:BoxInRayTraceSceneMesh-ext->2:Ray 91614
        Int32 _4Count;// 2:BoxInRayTraceSceneMesh-ext->21:Count 91612
        Int32 _5Two;// 2:BoxInRayTraceSceneMesh-ext->6:Two 91619
        Int32 _6Modulo;// 4:ModuloEquals->3:Modulo 91611
        Int32 _7One;// 2:BoxInRayTraceSceneMesh-ext->5:One 91620
        Boolean _8Equal;// 4:ModuloEquals->4:Equal 91610
        _0SphereFromBox = SphereFromBox(x0);
        _1SphereCenter = SphereCenter(_0SphereFromBox);
        _2ZAxis = ZAxis();
        _3Ray = Ray(_1SphereCenter, _2ZAxis);
        _4Count = Count(RayTraceAllIntersectingFaces(_25PairItem1, _3Ray));
        _5Two = Two();
        _6Modulo = Modulo(_4Count, _5Two);
        _7One = One();
        _8Equal = Equal(_6Modulo, _7One);
        _8Equal;
        });
    _27Constant = 100;
    _28Divide = Divide(box size, _27Constant);
    _29ParallelMap = ParallelMap(_26Filter, (BoundingBox x0) => 
      {
        BoundingSphere _0SphereFromBox;// 9:BoundingBoxCenter->2:SphereFromBox 91666
        Vector3 _1SphereCenter;// 9:BoundingBoxCenter->3:SphereCenter 91665
        Vector3 _2BoxMax;// 1:BoundingBoxExtent->1:BoxMax 91671
        Vector3 _3BoxMin;// 1:BoundingBoxExtent->2:BoxMin 91672
        Vector3 _4Subtract;// 1:BoundingBoxExtent->3:Subtract 91670
        Vector3 _5MultiplyByScalar;// 15:BoxScaleBy-ext->2:MultiplyByScalar 91668
        Single _6Constant;// 15:BoxScaleBy-ext->0:Constant 91673
        Vector3 _7DivideByScalar;// 15:BoxScaleBy-ext->5:DivideByScalar 91667
        Vector3 _8Subtract;// 15:BoxScaleBy-ext->4:Subtract 91663
        Vector3 _9Add;// 15:BoxScaleBy-ext->10:Add 91674
        BoundingBox _10Box;// 15:BoxScaleBy-ext->3:Box 91662
        QuadMesh _11BoxQuadMesh;// 7:BoxTriMesh->2:BoxQuadMesh 91659
        TriMesh _12Triangulate;// 7:BoxTriMesh->3:Triangulate 91658
        IArray[Int32] _13MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 91649
        IArray[Int32] _14Indices;// 4:HideEveryThirdEdge->8:Indices 91648
        Int32 _15Constant;// 4:HideEveryThirdEdge->0:Constant 91656
        Int32 _16Constant;// 4:HideEveryThirdEdge->0:Constant 91657
        IArray[Boolean] _17Map;// 4:HideEveryThirdEdge->5:Map 91647
        TriMesh _18SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 91646
        _0SphereFromBox = SphereFromBox(x0);
        _1SphereCenter = SphereCenter(_0SphereFromBox);
        _2BoxMax = BoxMax(x0);
        _3BoxMin = BoxMin(x0);
        _4Subtract = Subtract(_2BoxMax, _3BoxMin);
        _5MultiplyByScalar = MultiplyByScalar(_4Subtract, _28Divide);
        _6Constant = 2;
        _7DivideByScalar = DivideByScalar(_5MultiplyByScalar, _6Constant);
        _8Subtract = Subtract(_1SphereCenter, _7DivideByScalar);
        _9Add = Add(_1SphereCenter, _7DivideByScalar);
        _10Box = Box(_8Subtract, _9Add);
        _11BoxQuadMesh = BoxQuadMesh(_10Box);
        _12Triangulate = Triangulate(_11BoxQuadMesh);
        _13MeshIndices = MeshIndices(_12Triangulate);
        _14Indices = Indices(_13MeshIndices);
        _15Constant = 3;
        _16Constant = 2;
        _17Map = Map(_14Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 91655
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 91654
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 91650
            _0Modulo = Modulo(x0, _15Constant);
            _1Equal = Equal(_0Modulo, _16Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _18SetVisibleEdges = SetVisibleEdges(_12Triangulate, _17Map);
        _18SetVisibleEdges;
        });
    _30CombineAllMeshes = CombineAllMeshes(_29ParallelMap);
    _30CombineAllMeshes;
    }