(InstanceState state, TriMesh mesh, Boolean filter by angle, Int32 flux channel, Boolean invert angle filter, Boolean horizontal or Z axis, Single max angle, Boolean filter by box, Boolean invert box filter, Int32 box component, Int32 box min or max, Single box distance, Single probability, Int32 seed, Boolean create mesh, Single box size) => 
  {
    TriMesh _16IgnoreFirst;// 28:ClonerFilterByAngle.ext->8:IgnoreFirst 49438
    MapChannel _33GetMapChannel;// 2:MatricesFromMapChannel.ext->9:GetMapChannel 49470
    IArray[Vector3] _34MapChannelVertexBuffer;// 2:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 49469
    Int32 _35Count;// 2:Slices->2:Count 49466
    Int32 _36Constant;// 2:MatricesFromMapChannel.ext->0:Constant 49471
    Int32 _37Divide;// 2:Slices->3:Divide 49465
    IArray[Int32] _38Range;// 2:Slices->4:Range 49464
    IArray[IArray[Vector3]] _39Map;// 2:Slices->5:Map 49463
    IArray[Matrix] _40Map;// 2:MatricesFromMapChannel.ext->5:Map 49460
    Boolean _41Not;// 28:ClonerFilterByAngle.ext->22:Not 49552
    Single _42ToRadians;// 28:ClonerFilterByAngle.ext->4:ToRadians 49556
    IArray[Matrix] _43Filter;// 28:ClonerFilterByAngle.ext->9:Filter 49457
    TriMesh _70IgnoreFirst;// 47:ClonerFilterByBox.ext->13:IgnoreFirst 49245
    MapChannel _71GetMapChannel;// 4:MatricesFromMapChannel.ext->9:GetMapChannel 49205
    IArray[Vector3] _72MapChannelVertexBuffer;// 4:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 49204
    Int32 _73Count;// 2:Slices->2:Count 49201
    Int32 _74Constant;// 4:MatricesFromMapChannel.ext->0:Constant 49206
    Int32 _75Divide;// 2:Slices->3:Divide 49200
    IArray[Int32] _76Range;// 2:Slices->4:Range 49199
    IArray[IArray[Vector3]] _77Map;// 2:Slices->5:Map 49198
    IArray[Matrix] _78Map;// 4:MatricesFromMapChannel.ext->5:Map 49195
    Random _79RandomNumberGenerator;// 6:ClonerFilterRandomly.ext->21:RandomNumberGenerator 49236
    Func[Matrix, Boolean] _80Bind2of2;// 23:FilterRandomly.ext->5:Bind2of2 49189
    IArray[Matrix] _81Filter;// 23:FilterRandomly.ext->6:Filter 49188
    Func[Matrix, IArray[Vector3]] _82Pass-through: function1;// 0:Pass-through: function1 49173
    IArray[IArray[Vector3]] _83Map;// 5:FlatMap->4:Map 49175
    IArray[Vector3] _84Flatten;// 5:FlatMap->3:Flatten 49174
    IArray[Int32] _85MeshIndices;// 29:StoreMatricesInMapChannel.ext->0:MeshIndices 49184
    TriMesh _86SetMapChannel;// 29:StoreMatricesInMapChannel.ext->7:SetMapChannel 49171
    MapChannel _123GetMapChannel;// 9:MatricesFromMapChannel.ext->9:GetMapChannel 49277
    IArray[Vector3] _124MapChannelVertexBuffer;// 9:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 49276
    Int32 _125Count;// 2:Slices->2:Count 49273
    Int32 _126Constant;// 9:MatricesFromMapChannel.ext->0:Constant 49278
    Int32 _127Divide;// 2:Slices->3:Divide 49272
    IArray[Int32] _128Range;// 2:Slices->4:Range 49271
    IArray[IArray[Vector3]] _129Map;// 2:Slices->5:Map 49270
    IArray[Matrix] _130Map;// 9:MatricesFromMapChannel.ext->5:Map 49267
    MapChannel _131GetMapChannel;// 0:MatricesFromMapChannel.ext->9:GetMapChannel 49583
    IArray[Vector3] _132MapChannelVertexBuffer;// 0:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 49582
    Int32 _133Count;// 2:Slices->2:Count 49579
    Int32 _134Constant;// 0:MatricesFromMapChannel.ext->0:Constant 49584
    Int32 _135Divide;// 2:Slices->3:Divide 49578
    IArray[Int32] _136Range;// 2:Slices->4:Range 49577
    IArray[IArray[Vector3]] _137Map;// 2:Slices->5:Map 49576
    IArray[Matrix] _138Map;// 0:MatricesFromMapChannel.ext->5:Map 49573
    IArray[Vector3] _139Map;// 0:ClonerGetPositions.ext->1:Map 49570
    BoundingBox _140BoxFromPoints;// 4:ClonerBoundingBox.ext->46:BoxFromPoints 49567
    Single _141Constant;// 40:DivideBy100.ext->0:Constant 49431
    Single _142Divide;// 40:DivideBy100.ext->2:Divide 49430
    IArray[Matrix] _143Filter;// 47:ClonerFilterByBox.ext->10:Filter 49264
    TriMesh _172IgnoreFirst;// 7:ClonerMeshAsBoxes.ext->7:IgnoreFirst 49038
    _16IgnoreFirst = IgnoreFirst(mesh, if (filter by angle)
      {
        MapChannel _0GetMapChannel;// 2:MatricesFromMapChannel.ext->9:GetMapChannel 49470
        IArray[Vector3] _1MapChannelVertexBuffer;// 2:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 49469
        Int32 _2Count;// 2:Slices->2:Count 49466
        Int32 _3Constant;// 2:MatricesFromMapChannel.ext->0:Constant 49471
        Int32 _4Divide;// 2:Slices->3:Divide 49465
        IArray[Int32] _5Range;// 2:Slices->4:Range 49464
        IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 49463
        IArray[Matrix] _7Map;// 2:MatricesFromMapChannel.ext->5:Map 49460
        Boolean _8Not;// 28:ClonerFilterByAngle.ext->22:Not 49552
        Single _9ToRadians;// 28:ClonerFilterByAngle.ext->4:ToRadians 49556
        IArray[Matrix] _10Filter;// 28:ClonerFilterByAngle.ext->9:Filter 49457
        Func[Matrix, IArray[Vector3]] _11Pass-through: function1;// 0:Pass-through: function1 49445
        IArray[IArray[Vector3]] _12Map;// 5:FlatMap->4:Map 49447
        IArray[Vector3] _13Flatten;// 5:FlatMap->3:Flatten 49446
        IArray[Int32] _14MeshIndices;// 12:StoreMatricesInMapChannel.ext->0:MeshIndices 49456
        TriMesh _15SetMapChannel;// 12:StoreMatricesInMapChannel.ext->7:SetMapChannel 49443
        _0GetMapChannel = GetMapChannel(mesh, flux channel);
        _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
        _2Count = Count(_1MapChannelVertexBuffer);
        _3Constant = 4;
        _4Divide = Divide(_2Count, _3Constant);
        _5Range = Range(_4Divide);
        _6Map = Map(_5Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 49468
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 49467
            _0Multiply = Multiply(_3Constant, x0);
            _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
            _1Slice;
            });
        _7Map = Map(_6Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 49480
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 49481
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 49485
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 49484
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 49479
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 49482
            Int32 _6One;// 8:PlusOne->1:One 49489
            Int32 _7Add;// 8:PlusOne->0:Add 49488
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 49486
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 49478
            Int32 _10Constant;// 25:Three->0:Constant 49483
            Int32 _11One;// 9:PlusOne->1:One 49493
            Int32 _12Add;// 9:PlusOne->0:Add 49492
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 49490
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 49477
            Int32 _15One;// 10:PlusOne->1:One 49497
            Int32 _16Add;// 10:PlusOne->0:Add 49496
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 49494
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 49473
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _8Not = Not(horizontal or Z axis);
        _9ToRadians = ToRadians(max angle);
        _10Filter = Filter(_7Map, (Matrix x0) => 
          {
            Int32 _0Constant;// 11:MatrixZAxis.ext->0:Constant 49555
            Vector3 _1MatrixRow;// 11:MatrixZAxis.ext->1:MatrixRow 49554
            Boolean _26LessThan;// 28:ClonerFilterByAngle.ext->6:LessThan 49502
            Single _51Constant;// 2:Origin->0:Constant 49533
            Vector3 _52Vector3;// 2:Origin->1:Vector3 49532
            Vector3 _53ZAxis;// 2:HorizontalPlane.ext->0:ZAxis 49534
            Ray _54Ray;// 2:RayFromOrigin.ext->1:Ray 49531
            Plane _55Plane;// 1:PlaneAtOrigin.ext->3:Plane 49529
            Vector3 _56PlaneNormal;// 1:VectorPlaneAngle.ext->1:PlaneNormal 49527
            Single _57AngleOfVectors;// 0:VectorAngleFromAxis.ext->1:AngleOfVectors 49526
            Single _58Abs;// 4:AngleDistanceFromPi.ext->3:Abs 49524
            Single _59Pi;// 4:AngleDistanceFromPi.ext->2:Pi 49525
            Single _60Modulo;// 1:FloatModuloDistance.ext->1:Modulo 49522
            Single _61Abs;// 1:FloatModuloDistance.ext->3:Abs 49521
            Single _62FloatDistance;// 1:FloatModuloDistance.ext->2:FloatDistance 49523
            Boolean _63LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 49520
            Vector3 _64ZAxis;// 4:VectorAngleFromZAxis.ext->2:ZAxis 49551
            Single _65AngleOfVectors;// 6:VectorAngleFromAxis.ext->1:AngleOfVectors 49550
            Single _66Abs;// 4:AngleDistanceFromPi.ext->3:Abs 49548
            Single _67Pi;// 4:AngleDistanceFromPi.ext->2:Pi 49549
            Single _68Modulo;// 1:FloatModuloDistance.ext->1:Modulo 49546
            Single _69Abs;// 1:FloatModuloDistance.ext->3:Abs 49545
            Single _70FloatDistance;// 1:FloatModuloDistance.ext->2:FloatDistance 49547
            Boolean _71LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 49544
            _0Constant = 3;
            _1MatrixRow = MatrixRow(_0Constant, x0);
            _26LessThan = LessThan(if (_8Not)
                {
                  Single _2HalfPi;// 10:ComplementaryAngle.ext->2:HalfPi 49511
                  Single _3Constant;// 2:Origin->0:Constant 49533
                  Vector3 _4Vector3;// 2:Origin->1:Vector3 49532
                  Vector3 _5ZAxis;// 2:HorizontalPlane.ext->0:ZAxis 49534
                  Ray _6Ray;// 2:RayFromOrigin.ext->1:Ray 49531
                  Plane _7Plane;// 1:PlaneAtOrigin.ext->3:Plane 49529
                  Vector3 _8PlaneNormal;// 1:VectorPlaneAngle.ext->1:PlaneNormal 49527
                  Single _9AngleOfVectors;// 0:VectorAngleFromAxis.ext->1:AngleOfVectors 49526
                  Single _10Abs;// 4:AngleDistanceFromPi.ext->3:Abs 49524
                  Single _11Pi;// 4:AngleDistanceFromPi.ext->2:Pi 49525
                  Single _12Modulo;// 1:FloatModuloDistance.ext->1:Modulo 49522
                  Single _13Abs;// 1:FloatModuloDistance.ext->3:Abs 49521
                  Single _14FloatDistance;// 1:FloatModuloDistance.ext->2:FloatDistance 49523
                  Boolean _15LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 49520
                  Single _16Pass-through: Single;// 0:Pass-through: Single 49509
                  Single _17Subtract;// 10:ComplementaryAngle.ext->1:Subtract 49510
                  _2HalfPi = HalfPi();
                  _3Constant = 0;
                  _4Vector3 = Vector3(_3Constant, _3Constant, _3Constant);
                  _5ZAxis = ZAxis();
                  _6Ray = Ray(_4Vector3, _5ZAxis);
                  _7Plane = Plane(_6Ray);
                  _8PlaneNormal = PlaneNormal(_7Plane);
                  _9AngleOfVectors = AngleOfVectors(_1MatrixRow, _8PlaneNormal);
                  _10Abs = Abs(_9AngleOfVectors);
                  _11Pi = Pi();
                  _12Modulo = Modulo(_10Abs, _11Pi);
                  _13Abs = Abs(_12Modulo);
                  _14FloatDistance = FloatDistance(_11Pi, _12Modulo);
                  _15LessThanOrEqual = LessThanOrEqual(_13Abs, _14FloatDistance);
                  _16Pass-through: Single = if (_15LessThanOrEqual)
                    {
                      _13Abs;
                      }else
                    {
                      _14FloatDistance;
                      };
                  _17Subtract = Subtract(_2HalfPi, _16Pass-through: Single);
                  _17Subtract;
                  }else
                {
                  Vector3 _18ZAxis;// 4:VectorAngleFromZAxis.ext->2:ZAxis 49551
                  Single _19AngleOfVectors;// 6:VectorAngleFromAxis.ext->1:AngleOfVectors 49550
                  Single _20Abs;// 4:AngleDistanceFromPi.ext->3:Abs 49548
                  Single _21Pi;// 4:AngleDistanceFromPi.ext->2:Pi 49549
                  Single _22Modulo;// 1:FloatModuloDistance.ext->1:Modulo 49546
                  Single _23Abs;// 1:FloatModuloDistance.ext->3:Abs 49545
                  Single _24FloatDistance;// 1:FloatModuloDistance.ext->2:FloatDistance 49547
                  Boolean _25LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 49544
                  _18ZAxis = ZAxis();
                  _19AngleOfVectors = AngleOfVectors(_1MatrixRow, _18ZAxis);
                  _20Abs = Abs(_19AngleOfVectors);
                  _21Pi = Pi();
                  _22Modulo = Modulo(_20Abs, _21Pi);
                  _23Abs = Abs(_22Modulo);
                  _24FloatDistance = FloatDistance(_21Pi, _22Modulo);
                  _25LessThanOrEqual = LessThanOrEqual(_23Abs, _24FloatDistance);
                  if (_25LessThanOrEqual)
                    {
                      _23Abs;
                      }else
                    {
                      _24FloatDistance;
                      };
                  }, _9ToRadians);
            _51Constant = 0;
            _52Vector3 = Vector3(_51Constant, _51Constant, _51Constant);
            _53ZAxis = ZAxis();
            _54Ray = Ray(_52Vector3, _53ZAxis);
            _55Plane = Plane(_54Ray);
            _56PlaneNormal = PlaneNormal(_55Plane);
            _57AngleOfVectors = AngleOfVectors(_1MatrixRow, _56PlaneNormal);
            _58Abs = Abs(_57AngleOfVectors);
            _59Pi = Pi();
            _60Modulo = Modulo(_58Abs, _59Pi);
            _61Abs = Abs(_60Modulo);
            _62FloatDistance = FloatDistance(_59Pi, _60Modulo);
            _63LessThanOrEqual = LessThanOrEqual(_61Abs, _62FloatDistance);
            _64ZAxis = ZAxis();
            _65AngleOfVectors = AngleOfVectors(_1MatrixRow, _64ZAxis);
            _66Abs = Abs(_65AngleOfVectors);
            _67Pi = Pi();
            _68Modulo = Modulo(_66Abs, _67Pi);
            _69Abs = Abs(_68Modulo);
            _70FloatDistance = FloatDistance(_67Pi, _68Modulo);
            _71LessThanOrEqual = LessThanOrEqual(_69Abs, _70FloatDistance);
            if (invert angle filter)
              {
                Boolean _72Not;// 27:XOr.ext->4:Not 49501
                _72Not = Not(_26LessThan);
                _72Not;
                }else
              {
                _26LessThan;
                };
            });
        _11Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 49451
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 49450
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 49449
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 49455
                Int32 _1Add;// 5:PlusOne->0:Add 49454
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 49452
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _12Map = Map(_10Filter, _11Pass-through: function1);
        _13Flatten = Flatten(_12Map);
        _14MeshIndices = MeshIndices(mesh);
        _15SetMapChannel = SetMapChannel(mesh, flux channel, _13Flatten, _14MeshIndices);
        _15SetMapChannel;
        }else
      {
        mesh;
        });
    _33GetMapChannel = GetMapChannel(mesh, flux channel);
    _34MapChannelVertexBuffer = MapChannelVertexBuffer(_33GetMapChannel);
    _35Count = Count(_34MapChannelVertexBuffer);
    _36Constant = 4;
    _37Divide = Divide(_35Count, _36Constant);
    _38Range = Range(_37Divide);
    _39Map = Map(_38Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 49468
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 49467
        _0Multiply = Multiply(_36Constant, x0);
        _1Slice = Slice(_34MapChannelVertexBuffer, _0Multiply, _36Constant);
        _1Slice;
        });
    _40Map = Map(_39Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 49480
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 49481
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 49485
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 49484
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 49479
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 49482
        Int32 _6One;// 8:PlusOne->1:One 49489
        Int32 _7Add;// 8:PlusOne->0:Add 49488
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 49486
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 49478
        Int32 _10Constant;// 25:Three->0:Constant 49483
        Int32 _11One;// 9:PlusOne->1:One 49493
        Int32 _12Add;// 9:PlusOne->0:Add 49492
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 49490
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 49477
        Int32 _15One;// 10:PlusOne->1:One 49497
        Int32 _16Add;// 10:PlusOne->0:Add 49496
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 49494
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 49473
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _41Not = Not(horizontal or Z axis);
    _42ToRadians = ToRadians(max angle);
    _43Filter = Filter(_40Map, (Matrix x0) => 
      {
        Int32 _0Constant;// 11:MatrixZAxis.ext->0:Constant 49555
        Vector3 _1MatrixRow;// 11:MatrixZAxis.ext->1:MatrixRow 49554
        Boolean _26LessThan;// 28:ClonerFilterByAngle.ext->6:LessThan 49502
        Single _51Constant;// 2:Origin->0:Constant 49533
        Vector3 _52Vector3;// 2:Origin->1:Vector3 49532
        Vector3 _53ZAxis;// 2:HorizontalPlane.ext->0:ZAxis 49534
        Ray _54Ray;// 2:RayFromOrigin.ext->1:Ray 49531
        Plane _55Plane;// 1:PlaneAtOrigin.ext->3:Plane 49529
        Vector3 _56PlaneNormal;// 1:VectorPlaneAngle.ext->1:PlaneNormal 49527
        Single _57AngleOfVectors;// 0:VectorAngleFromAxis.ext->1:AngleOfVectors 49526
        Single _58Abs;// 4:AngleDistanceFromPi.ext->3:Abs 49524
        Single _59Pi;// 4:AngleDistanceFromPi.ext->2:Pi 49525
        Single _60Modulo;// 1:FloatModuloDistance.ext->1:Modulo 49522
        Single _61Abs;// 1:FloatModuloDistance.ext->3:Abs 49521
        Single _62FloatDistance;// 1:FloatModuloDistance.ext->2:FloatDistance 49523
        Boolean _63LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 49520
        Vector3 _64ZAxis;// 4:VectorAngleFromZAxis.ext->2:ZAxis 49551
        Single _65AngleOfVectors;// 6:VectorAngleFromAxis.ext->1:AngleOfVectors 49550
        Single _66Abs;// 4:AngleDistanceFromPi.ext->3:Abs 49548
        Single _67Pi;// 4:AngleDistanceFromPi.ext->2:Pi 49549
        Single _68Modulo;// 1:FloatModuloDistance.ext->1:Modulo 49546
        Single _69Abs;// 1:FloatModuloDistance.ext->3:Abs 49545
        Single _70FloatDistance;// 1:FloatModuloDistance.ext->2:FloatDistance 49547
        Boolean _71LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 49544
        _0Constant = 3;
        _1MatrixRow = MatrixRow(_0Constant, x0);
        _26LessThan = LessThan(if (_41Not)
            {
              Single _2HalfPi;// 10:ComplementaryAngle.ext->2:HalfPi 49511
              Single _3Constant;// 2:Origin->0:Constant 49533
              Vector3 _4Vector3;// 2:Origin->1:Vector3 49532
              Vector3 _5ZAxis;// 2:HorizontalPlane.ext->0:ZAxis 49534
              Ray _6Ray;// 2:RayFromOrigin.ext->1:Ray 49531
              Plane _7Plane;// 1:PlaneAtOrigin.ext->3:Plane 49529
              Vector3 _8PlaneNormal;// 1:VectorPlaneAngle.ext->1:PlaneNormal 49527
              Single _9AngleOfVectors;// 0:VectorAngleFromAxis.ext->1:AngleOfVectors 49526
              Single _10Abs;// 4:AngleDistanceFromPi.ext->3:Abs 49524
              Single _11Pi;// 4:AngleDistanceFromPi.ext->2:Pi 49525
              Single _12Modulo;// 1:FloatModuloDistance.ext->1:Modulo 49522
              Single _13Abs;// 1:FloatModuloDistance.ext->3:Abs 49521
              Single _14FloatDistance;// 1:FloatModuloDistance.ext->2:FloatDistance 49523
              Boolean _15LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 49520
              Single _16Pass-through: Single;// 0:Pass-through: Single 49509
              Single _17Subtract;// 10:ComplementaryAngle.ext->1:Subtract 49510
              _2HalfPi = HalfPi();
              _3Constant = 0;
              _4Vector3 = Vector3(_3Constant, _3Constant, _3Constant);
              _5ZAxis = ZAxis();
              _6Ray = Ray(_4Vector3, _5ZAxis);
              _7Plane = Plane(_6Ray);
              _8PlaneNormal = PlaneNormal(_7Plane);
              _9AngleOfVectors = AngleOfVectors(_1MatrixRow, _8PlaneNormal);
              _10Abs = Abs(_9AngleOfVectors);
              _11Pi = Pi();
              _12Modulo = Modulo(_10Abs, _11Pi);
              _13Abs = Abs(_12Modulo);
              _14FloatDistance = FloatDistance(_11Pi, _12Modulo);
              _15LessThanOrEqual = LessThanOrEqual(_13Abs, _14FloatDistance);
              _16Pass-through: Single = if (_15LessThanOrEqual)
                {
                  _13Abs;
                  }else
                {
                  _14FloatDistance;
                  };
              _17Subtract = Subtract(_2HalfPi, _16Pass-through: Single);
              _17Subtract;
              }else
            {
              Vector3 _18ZAxis;// 4:VectorAngleFromZAxis.ext->2:ZAxis 49551
              Single _19AngleOfVectors;// 6:VectorAngleFromAxis.ext->1:AngleOfVectors 49550
              Single _20Abs;// 4:AngleDistanceFromPi.ext->3:Abs 49548
              Single _21Pi;// 4:AngleDistanceFromPi.ext->2:Pi 49549
              Single _22Modulo;// 1:FloatModuloDistance.ext->1:Modulo 49546
              Single _23Abs;// 1:FloatModuloDistance.ext->3:Abs 49545
              Single _24FloatDistance;// 1:FloatModuloDistance.ext->2:FloatDistance 49547
              Boolean _25LessThanOrEqual;// 6:Lesser->0:LessThanOrEqual 49544
              _18ZAxis = ZAxis();
              _19AngleOfVectors = AngleOfVectors(_1MatrixRow, _18ZAxis);
              _20Abs = Abs(_19AngleOfVectors);
              _21Pi = Pi();
              _22Modulo = Modulo(_20Abs, _21Pi);
              _23Abs = Abs(_22Modulo);
              _24FloatDistance = FloatDistance(_21Pi, _22Modulo);
              _25LessThanOrEqual = LessThanOrEqual(_23Abs, _24FloatDistance);
              if (_25LessThanOrEqual)
                {
                  _23Abs;
                  }else
                {
                  _24FloatDistance;
                  };
              }, _42ToRadians);
        _51Constant = 0;
        _52Vector3 = Vector3(_51Constant, _51Constant, _51Constant);
        _53ZAxis = ZAxis();
        _54Ray = Ray(_52Vector3, _53ZAxis);
        _55Plane = Plane(_54Ray);
        _56PlaneNormal = PlaneNormal(_55Plane);
        _57AngleOfVectors = AngleOfVectors(_1MatrixRow, _56PlaneNormal);
        _58Abs = Abs(_57AngleOfVectors);
        _59Pi = Pi();
        _60Modulo = Modulo(_58Abs, _59Pi);
        _61Abs = Abs(_60Modulo);
        _62FloatDistance = FloatDistance(_59Pi, _60Modulo);
        _63LessThanOrEqual = LessThanOrEqual(_61Abs, _62FloatDistance);
        _64ZAxis = ZAxis();
        _65AngleOfVectors = AngleOfVectors(_1MatrixRow, _64ZAxis);
        _66Abs = Abs(_65AngleOfVectors);
        _67Pi = Pi();
        _68Modulo = Modulo(_66Abs, _67Pi);
        _69Abs = Abs(_68Modulo);
        _70FloatDistance = FloatDistance(_67Pi, _68Modulo);
        _71LessThanOrEqual = LessThanOrEqual(_69Abs, _70FloatDistance);
        if (invert angle filter)
          {
            Boolean _72Not;// 27:XOr.ext->4:Not 49501
            _72Not = Not(_26LessThan);
            _72Not;
            }else
          {
            _26LessThan;
            };
        });
    _70IgnoreFirst = IgnoreFirst(_16IgnoreFirst, if (filter by box)
      {
        MapChannel _44GetMapChannel;// 9:MatricesFromMapChannel.ext->9:GetMapChannel 49277
        IArray[Vector3] _45MapChannelVertexBuffer;// 9:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 49276
        Int32 _46Count;// 2:Slices->2:Count 49273
        Int32 _47Constant;// 9:MatricesFromMapChannel.ext->0:Constant 49278
        Int32 _48Divide;// 2:Slices->3:Divide 49272
        IArray[Int32] _49Range;// 2:Slices->4:Range 49271
        IArray[IArray[Vector3]] _50Map;// 2:Slices->5:Map 49270
        IArray[Matrix] _51Map;// 9:MatricesFromMapChannel.ext->5:Map 49267
        MapChannel _52GetMapChannel;// 0:MatricesFromMapChannel.ext->9:GetMapChannel 49583
        IArray[Vector3] _53MapChannelVertexBuffer;// 0:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 49582
        Int32 _54Count;// 2:Slices->2:Count 49579
        Int32 _55Constant;// 0:MatricesFromMapChannel.ext->0:Constant 49584
        Int32 _56Divide;// 2:Slices->3:Divide 49578
        IArray[Int32] _57Range;// 2:Slices->4:Range 49577
        IArray[IArray[Vector3]] _58Map;// 2:Slices->5:Map 49576
        IArray[Matrix] _59Map;// 0:MatricesFromMapChannel.ext->5:Map 49573
        IArray[Vector3] _60Map;// 0:ClonerGetPositions.ext->1:Map 49570
        BoundingBox _61BoxFromPoints;// 4:ClonerBoundingBox.ext->46:BoxFromPoints 49567
        Single _62Constant;// 40:DivideBy100.ext->0:Constant 49431
        Single _63Divide;// 40:DivideBy100.ext->2:Divide 49430
        IArray[Matrix] _64Filter;// 47:ClonerFilterByBox.ext->10:Filter 49264
        Func[Matrix, IArray[Vector3]] _65Pass-through: function1;// 0:Pass-through: function1 49252
        IArray[IArray[Vector3]] _66Map;// 5:FlatMap->4:Map 49254
        IArray[Vector3] _67Flatten;// 5:FlatMap->3:Flatten 49253
        IArray[Int32] _68MeshIndices;// 6:StoreMatricesInMapChannel.ext->0:MeshIndices 49263
        TriMesh _69SetMapChannel;// 6:StoreMatricesInMapChannel.ext->7:SetMapChannel 49250
        _44GetMapChannel = GetMapChannel(_16IgnoreFirst, flux channel);
        _45MapChannelVertexBuffer = MapChannelVertexBuffer(_44GetMapChannel);
        _46Count = Count(_45MapChannelVertexBuffer);
        _47Constant = 4;
        _48Divide = Divide(_46Count, _47Constant);
        _49Range = Range(_48Divide);
        _50Map = Map(_49Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 49275
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 49274
            _0Multiply = Multiply(_47Constant, x0);
            _1Slice = Slice(_45MapChannelVertexBuffer, _0Multiply, _47Constant);
            _1Slice;
            });
        _51Map = Map(_50Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 49287
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 49288
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 49292
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 49291
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 49286
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 49289
            Int32 _6One;// 8:PlusOne->1:One 49296
            Int32 _7Add;// 8:PlusOne->0:Add 49295
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 49293
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 49285
            Int32 _10Constant;// 25:Three->0:Constant 49290
            Int32 _11One;// 9:PlusOne->1:One 49300
            Int32 _12Add;// 9:PlusOne->0:Add 49299
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 49297
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 49284
            Int32 _15One;// 10:PlusOne->1:One 49304
            Int32 _16Add;// 10:PlusOne->0:Add 49303
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 49301
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 49280
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _52GetMapChannel = GetMapChannel(mesh, flux channel);
        _53MapChannelVertexBuffer = MapChannelVertexBuffer(_52GetMapChannel);
        _54Count = Count(_53MapChannelVertexBuffer);
        _55Constant = 4;
        _56Divide = Divide(_54Count, _55Constant);
        _57Range = Range(_56Divide);
        _58Map = Map(_57Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 49581
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 49580
            _0Multiply = Multiply(_55Constant, x0);
            _1Slice = Slice(_53MapChannelVertexBuffer, _0Multiply, _55Constant);
            _1Slice;
            });
        _59Map = Map(_58Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 49593
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 49594
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 49598
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 49597
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 49592
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 49595
            Int32 _6One;// 8:PlusOne->1:One 49602
            Int32 _7Add;// 8:PlusOne->0:Add 49601
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 49599
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 49591
            Int32 _10Constant;// 25:Three->0:Constant 49596
            Int32 _11One;// 9:PlusOne->1:One 49606
            Int32 _12Add;// 9:PlusOne->0:Add 49605
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 49603
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 49590
            Int32 _15One;// 10:PlusOne->1:One 49610
            Int32 _16Add;// 10:PlusOne->0:Add 49609
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 49607
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 49586
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _60Map = Map(_59Map, (Matrix x0) => 
          {
            Vector3 _0GetMatrixTranslation;// 0:ClonerGetPositions.ext->2:GetMatrixTranslation 49611
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _0GetMatrixTranslation;
            });
        _61BoxFromPoints = BoxFromPoints(_60Map);
        _62Constant = 100;
        _63Divide = Divide(box distance, _62Constant);
        _64Filter = Filter(_51Map, (Matrix x0) => 
          {
            Vector3 _0GetMatrixTranslation;// 47:ClonerFilterByBox.ext->35:GetMatrixTranslation 49428
            Single _1X;// 2:VectorAsArray->1:X 49356
            IArray[Single] _2Unit;// 4:Array3->2:Unit 49355
            Single _3Y;// 2:VectorAsArray->2:Y 49357
            IArray[Single] _4Append;// 4:Array3->3:Append 49354
            Single _5Z;// 2:VectorAsArray->3:Z 49358
            IArray[Single] _6Append;// 4:Array3->6:Append 49353
            Vector3 _7BoxMin;// 2:VectorBoxMinComponentDistance.ext->3:BoxMin 49373
            Int32 _8IgnoreFirst;// 4:VectorComponentDistance.ext->4:IgnoreFirst 49359
            Single _9At;// 2:VectorComponent.ext->3:At 49348
            Single _10X;// 2:VectorAsArray->1:X 49370
            IArray[Single] _11Unit;// 4:Array3->2:Unit 49369
            Single _12Y;// 2:VectorAsArray->2:Y 49371
            IArray[Single] _13Append;// 4:Array3->3:Append 49368
            Single _14Z;// 2:VectorAsArray->3:Z 49372
            IArray[Single] _15Append;// 4:Array3->6:Append 49367
            Single _16At;// 5:VectorComponent.ext->3:At 49362
            Single _17Subtract;// 4:VectorComponentDistance.ext->6:Subtract 49345
            Single _18Abs;// 4:VectorComponentDistance.ext->7:Abs 49344
            IArray[Single] _19Unit;// 7:Array3->2:Unit 49337
            Single _20X;// 2:VectorAsArray->1:X 49392
            IArray[Single] _21Unit;// 4:Array3->2:Unit 49391
            Single _22Y;// 2:VectorAsArray->2:Y 49393
            IArray[Single] _23Append;// 4:Array3->3:Append 49390
            Single _24Z;// 2:VectorAsArray->3:Z 49394
            IArray[Single] _25Append;// 4:Array3->6:Append 49389
            Vector3 _26BoxMax;// 1:VectorBoxMaxComponentDistance.ext->6:BoxMax 49409
            Int32 _27IgnoreFirst;// 4:VectorComponentDistance.ext->4:IgnoreFirst 49395
            Single _28At;// 2:VectorComponent.ext->3:At 49384
            Single _29X;// 2:VectorAsArray->1:X 49406
            IArray[Single] _30Unit;// 4:Array3->2:Unit 49405
            Single _31Y;// 2:VectorAsArray->2:Y 49407
            IArray[Single] _32Append;// 4:Array3->3:Append 49404
            Single _33Z;// 2:VectorAsArray->3:Z 49408
            IArray[Single] _34Append;// 4:Array3->6:Append 49403
            Single _35At;// 5:VectorComponent.ext->3:At 49398
            Single _36Subtract;// 4:VectorComponentDistance.ext->6:Subtract 49381
            Single _37Abs;// 4:VectorComponentDistance.ext->7:Abs 49380
            IArray[Single] _38Append;// 7:Array3->3:Append 49336
            Single _39LesserFloat;// 0:VectorBoxComponentDistance.ext->0:LesserFloat 49410
            IArray[Single] _40Append;// 7:Array3->6:Append 49335
            Single _41At;// 0:VectorBoxComponentDistance.ext->8:At 49331
            Vector3 _42BoxMax;// 5:BoundingBoxExtent->1:BoxMax 49426
            Vector3 _43BoxMin;// 5:BoundingBoxExtent->2:BoxMin 49427
            Vector3 _44Subtract;// 5:BoundingBoxExtent->3:Subtract 49425
            Single _45X;// 2:VectorAsArray->1:X 49421
            IArray[Single] _46Unit;// 4:Array3->2:Unit 49420
            Single _47Y;// 2:VectorAsArray->2:Y 49422
            IArray[Single] _48Append;// 4:Array3->3:Append 49419
            Single _49Z;// 2:VectorAsArray->3:Z 49423
            IArray[Single] _50Append;// 4:Array3->6:Append 49418
            Single _51At;// 6:VectorComponent.ext->3:At 49413
            Single _52Abs;// 3:FloatIsSmall.ext->4:Abs 49323
            Single _53Constant;// 2:VectorLengthEpsilon.ext->0:Constant 49324
            Boolean _54LessThanOrEqual;// 3:FloatIsSmall.ext->1:LessThanOrEqual 49322
            Single _57IgnoreFirst;// 9:DivideDefault.ext->8:IgnoreFirst 49319
            Boolean _58LessThan;// 47:ClonerFilterByBox.ext->36:LessThan 49309
            Single _61FloatZero;// 7:DivideDefaultToZero.ext->6:FloatZero 49326
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _1X = X(_0GetMatrixTranslation);
            _2Unit = Unit(_1X);
            _3Y = Y(_0GetMatrixTranslation);
            _4Append = Append(_2Unit, _3Y);
            _5Z = Z(_0GetMatrixTranslation);
            _6Append = Append(_4Append, _5Z);
            _7BoxMin = BoxMin(_61BoxFromPoints);
            _8IgnoreFirst = IgnoreFirst(_7BoxMin, box component);
            _9At = At(_6Append, _8IgnoreFirst);
            _10X = X(_7BoxMin);
            _11Unit = Unit(_10X);
            _12Y = Y(_7BoxMin);
            _13Append = Append(_11Unit, _12Y);
            _14Z = Z(_7BoxMin);
            _15Append = Append(_13Append, _14Z);
            _16At = At(_15Append, box component);
            _17Subtract = Subtract(_9At, _16At);
            _18Abs = Abs(_17Subtract);
            _19Unit = Unit(_18Abs);
            _20X = X(_0GetMatrixTranslation);
            _21Unit = Unit(_20X);
            _22Y = Y(_0GetMatrixTranslation);
            _23Append = Append(_21Unit, _22Y);
            _24Z = Z(_0GetMatrixTranslation);
            _25Append = Append(_23Append, _24Z);
            _26BoxMax = BoxMax(_61BoxFromPoints);
            _27IgnoreFirst = IgnoreFirst(_26BoxMax, box component);
            _28At = At(_25Append, _27IgnoreFirst);
            _29X = X(_26BoxMax);
            _30Unit = Unit(_29X);
            _31Y = Y(_26BoxMax);
            _32Append = Append(_30Unit, _31Y);
            _33Z = Z(_26BoxMax);
            _34Append = Append(_32Append, _33Z);
            _35At = At(_34Append, box component);
            _36Subtract = Subtract(_28At, _35At);
            _37Abs = Abs(_36Subtract);
            _38Append = Append(_19Unit, _37Abs);
            _39LesserFloat = LesserFloat(_18Abs, _37Abs);
            _40Append = Append(_38Append, _39LesserFloat);
            _41At = At(_40Append, box min or max);
            _42BoxMax = BoxMax(_61BoxFromPoints);
            _43BoxMin = BoxMin(_61BoxFromPoints);
            _44Subtract = Subtract(_42BoxMax, _43BoxMin);
            _45X = X(_44Subtract);
            _46Unit = Unit(_45X);
            _47Y = Y(_44Subtract);
            _48Append = Append(_46Unit, _47Y);
            _49Z = Z(_44Subtract);
            _50Append = Append(_48Append, _49Z);
            _51At = At(_50Append, box component);
            _52Abs = Abs(_51At);
            _53Constant = 1E-06;
            _54LessThanOrEqual = LessThanOrEqual(_52Abs, _53Constant);
            _57IgnoreFirst = IgnoreFirst(_41At, if (_54LessThanOrEqual)
              {
                Single _55FloatZero;// 7:DivideDefaultToZero.ext->6:FloatZero 49326
                _55FloatZero = FloatZero();
                _55FloatZero;
                }else
              {
                Single _56Divide;// 9:DivideDefault.ext->5:Divide 49325
                _56Divide = Divide(_41At, _51At);
                _56Divide;
                });
            _58LessThan = LessThan(_57IgnoreFirst, _63Divide);
            _61FloatZero = FloatZero();
            if (invert box filter)
              {
                Boolean _62Not;// 41:XOr.ext->4:Not 49308
                _62Not = Not(_58LessThan);
                _62Not;
                }else
              {
                _58LessThan;
                };
            });
        _65Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 49258
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 49257
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 49256
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 49262
                Int32 _1Add;// 5:PlusOne->0:Add 49261
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 49259
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _66Map = Map(_64Filter, _65Pass-through: function1);
        _67Flatten = Flatten(_66Map);
        _68MeshIndices = MeshIndices(_16IgnoreFirst);
        _69SetMapChannel = SetMapChannel(_16IgnoreFirst, flux channel, _67Flatten, _68MeshIndices);
        _69SetMapChannel;
        }else
      {
        _16IgnoreFirst;
        });
    _71GetMapChannel = GetMapChannel(_70IgnoreFirst, flux channel);
    _72MapChannelVertexBuffer = MapChannelVertexBuffer(_71GetMapChannel);
    _73Count = Count(_72MapChannelVertexBuffer);
    _74Constant = 4;
    _75Divide = Divide(_73Count, _74Constant);
    _76Range = Range(_75Divide);
    _77Map = Map(_76Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 49203
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 49202
        _0Multiply = Multiply(_74Constant, x0);
        _1Slice = Slice(_72MapChannelVertexBuffer, _0Multiply, _74Constant);
        _1Slice;
        });
    _78Map = Map(_77Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 49215
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 49216
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 49220
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 49219
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 49214
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 49217
        Int32 _6One;// 8:PlusOne->1:One 49224
        Int32 _7Add;// 8:PlusOne->0:Add 49223
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 49221
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 49213
        Int32 _10Constant;// 25:Three->0:Constant 49218
        Int32 _11One;// 9:PlusOne->1:One 49228
        Int32 _12Add;// 9:PlusOne->0:Add 49227
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 49225
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 49212
        Int32 _15One;// 10:PlusOne->1:One 49232
        Int32 _16Add;// 10:PlusOne->0:Add 49231
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 49229
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 49208
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _79RandomNumberGenerator = RandomNumberGenerator(seed);
    _80Bind2of2 = Bind2of2((Matrix x0, Random x1) => 
      {
        Single _0Constant;// 19:DivideBy100.ext->0:Constant 49235
        Single _1Divide;// 19:DivideBy100.ext->2:Divide 49234
        Boolean _2LessThanOrEqual;// 23:FilterRandomly.ext->4:LessThanOrEqual 49191
        Boolean _3IgnoreFirst;// 23:FilterRandomly.ext->8:IgnoreFirst 49190
        _0Constant = 100;
        _1Divide = Divide(probability, _0Constant);
        _2LessThanOrEqual = LessThanOrEqual(PseudoRandomFloat(x1), _1Divide);
        _3IgnoreFirst = IgnoreFirst(x0, _2LessThanOrEqual);
        _3IgnoreFirst;
        }, _79RandomNumberGenerator);
    _81Filter = Filter(_78Map, _80Bind2of2);
    _82Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 49179
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 49178
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 49177
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 49183
            Int32 _1Add;// 5:PlusOne->0:Add 49182
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 49180
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _83Map = Map(_81Filter, _82Pass-through: function1);
    _84Flatten = Flatten(_83Map);
    _85MeshIndices = MeshIndices(_70IgnoreFirst);
    _86SetMapChannel = SetMapChannel(_70IgnoreFirst, flux channel, _84Flatten, _85MeshIndices);
    _123GetMapChannel = GetMapChannel(_16IgnoreFirst, flux channel);
    _124MapChannelVertexBuffer = MapChannelVertexBuffer(_123GetMapChannel);
    _125Count = Count(_124MapChannelVertexBuffer);
    _126Constant = 4;
    _127Divide = Divide(_125Count, _126Constant);
    _128Range = Range(_127Divide);
    _129Map = Map(_128Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 49275
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 49274
        _0Multiply = Multiply(_126Constant, x0);
        _1Slice = Slice(_124MapChannelVertexBuffer, _0Multiply, _126Constant);
        _1Slice;
        });
    _130Map = Map(_129Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 49287
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 49288
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 49292
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 49291
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 49286
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 49289
        Int32 _6One;// 8:PlusOne->1:One 49296
        Int32 _7Add;// 8:PlusOne->0:Add 49295
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 49293
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 49285
        Int32 _10Constant;// 25:Three->0:Constant 49290
        Int32 _11One;// 9:PlusOne->1:One 49300
        Int32 _12Add;// 9:PlusOne->0:Add 49299
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 49297
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 49284
        Int32 _15One;// 10:PlusOne->1:One 49304
        Int32 _16Add;// 10:PlusOne->0:Add 49303
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 49301
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 49280
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _131GetMapChannel = GetMapChannel(mesh, flux channel);
    _132MapChannelVertexBuffer = MapChannelVertexBuffer(_131GetMapChannel);
    _133Count = Count(_132MapChannelVertexBuffer);
    _134Constant = 4;
    _135Divide = Divide(_133Count, _134Constant);
    _136Range = Range(_135Divide);
    _137Map = Map(_136Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 49581
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 49580
        _0Multiply = Multiply(_134Constant, x0);
        _1Slice = Slice(_132MapChannelVertexBuffer, _0Multiply, _134Constant);
        _1Slice;
        });
    _138Map = Map(_137Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 49593
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 49594
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 49598
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 49597
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 49592
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 49595
        Int32 _6One;// 8:PlusOne->1:One 49602
        Int32 _7Add;// 8:PlusOne->0:Add 49601
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 49599
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 49591
        Int32 _10Constant;// 25:Three->0:Constant 49596
        Int32 _11One;// 9:PlusOne->1:One 49606
        Int32 _12Add;// 9:PlusOne->0:Add 49605
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 49603
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 49590
        Int32 _15One;// 10:PlusOne->1:One 49610
        Int32 _16Add;// 10:PlusOne->0:Add 49609
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 49607
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 49586
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _139Map = Map(_138Map, (Matrix x0) => 
      {
        Vector3 _0GetMatrixTranslation;// 0:ClonerGetPositions.ext->2:GetMatrixTranslation 49611
        _0GetMatrixTranslation = GetMatrixTranslation(x0);
        _0GetMatrixTranslation;
        });
    _140BoxFromPoints = BoxFromPoints(_139Map);
    _141Constant = 100;
    _142Divide = Divide(box distance, _141Constant);
    _143Filter = Filter(_130Map, (Matrix x0) => 
      {
        Vector3 _0GetMatrixTranslation;// 47:ClonerFilterByBox.ext->35:GetMatrixTranslation 49428
        Single _1X;// 2:VectorAsArray->1:X 49356
        IArray[Single] _2Unit;// 4:Array3->2:Unit 49355
        Single _3Y;// 2:VectorAsArray->2:Y 49357
        IArray[Single] _4Append;// 4:Array3->3:Append 49354
        Single _5Z;// 2:VectorAsArray->3:Z 49358
        IArray[Single] _6Append;// 4:Array3->6:Append 49353
        Vector3 _7BoxMin;// 2:VectorBoxMinComponentDistance.ext->3:BoxMin 49373
        Int32 _8IgnoreFirst;// 4:VectorComponentDistance.ext->4:IgnoreFirst 49359
        Single _9At;// 2:VectorComponent.ext->3:At 49348
        Single _10X;// 2:VectorAsArray->1:X 49370
        IArray[Single] _11Unit;// 4:Array3->2:Unit 49369
        Single _12Y;// 2:VectorAsArray->2:Y 49371
        IArray[Single] _13Append;// 4:Array3->3:Append 49368
        Single _14Z;// 2:VectorAsArray->3:Z 49372
        IArray[Single] _15Append;// 4:Array3->6:Append 49367
        Single _16At;// 5:VectorComponent.ext->3:At 49362
        Single _17Subtract;// 4:VectorComponentDistance.ext->6:Subtract 49345
        Single _18Abs;// 4:VectorComponentDistance.ext->7:Abs 49344
        IArray[Single] _19Unit;// 7:Array3->2:Unit 49337
        Single _20X;// 2:VectorAsArray->1:X 49392
        IArray[Single] _21Unit;// 4:Array3->2:Unit 49391
        Single _22Y;// 2:VectorAsArray->2:Y 49393
        IArray[Single] _23Append;// 4:Array3->3:Append 49390
        Single _24Z;// 2:VectorAsArray->3:Z 49394
        IArray[Single] _25Append;// 4:Array3->6:Append 49389
        Vector3 _26BoxMax;// 1:VectorBoxMaxComponentDistance.ext->6:BoxMax 49409
        Int32 _27IgnoreFirst;// 4:VectorComponentDistance.ext->4:IgnoreFirst 49395
        Single _28At;// 2:VectorComponent.ext->3:At 49384
        Single _29X;// 2:VectorAsArray->1:X 49406
        IArray[Single] _30Unit;// 4:Array3->2:Unit 49405
        Single _31Y;// 2:VectorAsArray->2:Y 49407
        IArray[Single] _32Append;// 4:Array3->3:Append 49404
        Single _33Z;// 2:VectorAsArray->3:Z 49408
        IArray[Single] _34Append;// 4:Array3->6:Append 49403
        Single _35At;// 5:VectorComponent.ext->3:At 49398
        Single _36Subtract;// 4:VectorComponentDistance.ext->6:Subtract 49381
        Single _37Abs;// 4:VectorComponentDistance.ext->7:Abs 49380
        IArray[Single] _38Append;// 7:Array3->3:Append 49336
        Single _39LesserFloat;// 0:VectorBoxComponentDistance.ext->0:LesserFloat 49410
        IArray[Single] _40Append;// 7:Array3->6:Append 49335
        Single _41At;// 0:VectorBoxComponentDistance.ext->8:At 49331
        Vector3 _42BoxMax;// 5:BoundingBoxExtent->1:BoxMax 49426
        Vector3 _43BoxMin;// 5:BoundingBoxExtent->2:BoxMin 49427
        Vector3 _44Subtract;// 5:BoundingBoxExtent->3:Subtract 49425
        Single _45X;// 2:VectorAsArray->1:X 49421
        IArray[Single] _46Unit;// 4:Array3->2:Unit 49420
        Single _47Y;// 2:VectorAsArray->2:Y 49422
        IArray[Single] _48Append;// 4:Array3->3:Append 49419
        Single _49Z;// 2:VectorAsArray->3:Z 49423
        IArray[Single] _50Append;// 4:Array3->6:Append 49418
        Single _51At;// 6:VectorComponent.ext->3:At 49413
        Single _52Abs;// 3:FloatIsSmall.ext->4:Abs 49323
        Single _53Constant;// 2:VectorLengthEpsilon.ext->0:Constant 49324
        Boolean _54LessThanOrEqual;// 3:FloatIsSmall.ext->1:LessThanOrEqual 49322
        Single _57IgnoreFirst;// 9:DivideDefault.ext->8:IgnoreFirst 49319
        Boolean _58LessThan;// 47:ClonerFilterByBox.ext->36:LessThan 49309
        Single _61FloatZero;// 7:DivideDefaultToZero.ext->6:FloatZero 49326
        _0GetMatrixTranslation = GetMatrixTranslation(x0);
        _1X = X(_0GetMatrixTranslation);
        _2Unit = Unit(_1X);
        _3Y = Y(_0GetMatrixTranslation);
        _4Append = Append(_2Unit, _3Y);
        _5Z = Z(_0GetMatrixTranslation);
        _6Append = Append(_4Append, _5Z);
        _7BoxMin = BoxMin(_140BoxFromPoints);
        _8IgnoreFirst = IgnoreFirst(_7BoxMin, box component);
        _9At = At(_6Append, _8IgnoreFirst);
        _10X = X(_7BoxMin);
        _11Unit = Unit(_10X);
        _12Y = Y(_7BoxMin);
        _13Append = Append(_11Unit, _12Y);
        _14Z = Z(_7BoxMin);
        _15Append = Append(_13Append, _14Z);
        _16At = At(_15Append, box component);
        _17Subtract = Subtract(_9At, _16At);
        _18Abs = Abs(_17Subtract);
        _19Unit = Unit(_18Abs);
        _20X = X(_0GetMatrixTranslation);
        _21Unit = Unit(_20X);
        _22Y = Y(_0GetMatrixTranslation);
        _23Append = Append(_21Unit, _22Y);
        _24Z = Z(_0GetMatrixTranslation);
        _25Append = Append(_23Append, _24Z);
        _26BoxMax = BoxMax(_140BoxFromPoints);
        _27IgnoreFirst = IgnoreFirst(_26BoxMax, box component);
        _28At = At(_25Append, _27IgnoreFirst);
        _29X = X(_26BoxMax);
        _30Unit = Unit(_29X);
        _31Y = Y(_26BoxMax);
        _32Append = Append(_30Unit, _31Y);
        _33Z = Z(_26BoxMax);
        _34Append = Append(_32Append, _33Z);
        _35At = At(_34Append, box component);
        _36Subtract = Subtract(_28At, _35At);
        _37Abs = Abs(_36Subtract);
        _38Append = Append(_19Unit, _37Abs);
        _39LesserFloat = LesserFloat(_18Abs, _37Abs);
        _40Append = Append(_38Append, _39LesserFloat);
        _41At = At(_40Append, box min or max);
        _42BoxMax = BoxMax(_140BoxFromPoints);
        _43BoxMin = BoxMin(_140BoxFromPoints);
        _44Subtract = Subtract(_42BoxMax, _43BoxMin);
        _45X = X(_44Subtract);
        _46Unit = Unit(_45X);
        _47Y = Y(_44Subtract);
        _48Append = Append(_46Unit, _47Y);
        _49Z = Z(_44Subtract);
        _50Append = Append(_48Append, _49Z);
        _51At = At(_50Append, box component);
        _52Abs = Abs(_51At);
        _53Constant = 1E-06;
        _54LessThanOrEqual = LessThanOrEqual(_52Abs, _53Constant);
        _57IgnoreFirst = IgnoreFirst(_41At, if (_54LessThanOrEqual)
          {
            Single _55FloatZero;// 7:DivideDefaultToZero.ext->6:FloatZero 49326
            _55FloatZero = FloatZero();
            _55FloatZero;
            }else
          {
            Single _56Divide;// 9:DivideDefault.ext->5:Divide 49325
            _56Divide = Divide(_41At, _51At);
            _56Divide;
            });
        _58LessThan = LessThan(_57IgnoreFirst, _142Divide);
        _61FloatZero = FloatZero();
        if (invert box filter)
          {
            Boolean _62Not;// 41:XOr.ext->4:Not 49308
            _62Not = Not(_58LessThan);
            _62Not;
            }else
          {
            _58LessThan;
            };
        });
    _172IgnoreFirst = IgnoreFirst(_86SetMapChannel, if (create mesh)
      {
        Int32 _144Constant;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->0:Constant 49046
        IArray[Int32] _145Range;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->1:Range 49045
        Int32 _146Two;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->4:Two 49047
        IArray[Int32] _147Skip;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->3:Skip 49044
        IArray[Int32] _148Filter;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->13:Filter 49043
        MapChannel _149GetMapChannel;// 34:MatricesFromMapChannel.ext->9:GetMapChannel 49105
        IArray[Vector3] _150MapChannelVertexBuffer;// 34:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 49104
        Int32 _151Count;// 2:Slices->2:Count 49101
        Int32 _152Constant;// 34:MatricesFromMapChannel.ext->0:Constant 49106
        Int32 _153Divide;// 2:Slices->3:Divide 49100
        IArray[Int32] _154Range;// 2:Slices->4:Range 49099
        IArray[IArray[Vector3]] _155Map;// 2:Slices->5:Map 49098
        IArray[Matrix] _156Map;// 34:MatricesFromMapChannel.ext->5:Map 49095
        Single _157Constant;// 1:Origin->0:Constant 49163
        Vector3 _158Vector3;// 1:Origin->1:Vector3 49162
        BoundingSphere _159Sphere;// 0:BoxFromPointAndRadius->3:Sphere 49161
        BoundingBox _160BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 49160
        QuadMesh _161BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 49156
        TriMesh _162Triangulate;// 29:BoxTriMesh->3:Triangulate 49155
        IArray[Int32] _163MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 49146
        IArray[Int32] _164Indices;// 4:HideEveryThirdEdge->8:Indices 49145
        Int32 _165Constant;// 4:HideEveryThirdEdge->0:Constant 49153
        Int32 _166Constant;// 4:HideEveryThirdEdge->0:Constant 49154
        IArray[Boolean] _167Map;// 4:HideEveryThirdEdge->5:Map 49144
        TriMesh _168SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 49143
        IArray[TriMesh] _169Map;// 7:ClonerMeshAsBoxes.ext->16:Map 49092
        TriMesh _170CombineAllMeshes;// 7:ClonerMeshAsBoxes.ext->2:CombineAllMeshes 49091
        TriMesh _171Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->6:Aggregate 49042
        _144Constant = 100;
        _145Range = Range(_144Constant);
        _146Two = Two();
        _147Skip = Skip(_145Range, _146Two);
        _148Filter = Filter(_147Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 49060
            Boolean _1Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 49059
            MapChannel _19Pass-through: any;// 0:Pass-through: any 49051
            Object _20Null;// 6:IsNullFix2.ext->3:Null 49055
            Object _21As;// 6:IsNullFix2.ext->23:As 49053
            Boolean _22Equal;// 6:IsNullFix2.ext->1:Equal 49052
            Boolean _23Not;// 12:MapChannelExists.ext->4:Not 49050
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _19Pass-through: any = if (_1Equal)
              {
                MapChannel _17TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 49061
                _17TopologyChannel = TopologyChannel(_86SetMapChannel);
                _17TopologyChannel;
                }else
              {
                MapChannel _18GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 49062
                _18GetMapChannel = GetMapChannel(_86SetMapChannel, x0);
                _18GetMapChannel;
                };
            _20Null = Null();
            _21As = As(_19Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 49054
                _0IgnoreFirst = IgnoreFirst(x0, _20Null);
                _0IgnoreFirst;
                });
            _22Equal = Equal(_21As, _20Null);
            _23Not = Not(_22Equal);
            _23Not;
            });
        _149GetMapChannel = GetMapChannel(_86SetMapChannel, flux channel);
        _150MapChannelVertexBuffer = MapChannelVertexBuffer(_149GetMapChannel);
        _151Count = Count(_150MapChannelVertexBuffer);
        _152Constant = 4;
        _153Divide = Divide(_151Count, _152Constant);
        _154Range = Range(_153Divide);
        _155Map = Map(_154Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 49103
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 49102
            _0Multiply = Multiply(_152Constant, x0);
            _1Slice = Slice(_150MapChannelVertexBuffer, _0Multiply, _152Constant);
            _1Slice;
            });
        _156Map = Map(_155Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 49115
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 49116
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 49120
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 49119
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 49114
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 49117
            Int32 _6One;// 8:PlusOne->1:One 49124
            Int32 _7Add;// 8:PlusOne->0:Add 49123
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 49121
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 49113
            Int32 _10Constant;// 25:Three->0:Constant 49118
            Int32 _11One;// 9:PlusOne->1:One 49128
            Int32 _12Add;// 9:PlusOne->0:Add 49127
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 49125
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 49112
            Int32 _15One;// 10:PlusOne->1:One 49132
            Int32 _16Add;// 10:PlusOne->0:Add 49131
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 49129
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 49108
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _157Constant = 0;
        _158Vector3 = Vector3(_157Constant, _157Constant, _157Constant);
        _159Sphere = Sphere(_158Vector3, box size);
        _160BoxFromSphere = BoxFromSphere(_159Sphere);
        _161BoxQuadMesh = BoxQuadMesh(_160BoxFromSphere);
        _162Triangulate = Triangulate(_161BoxQuadMesh);
        _163MeshIndices = MeshIndices(_162Triangulate);
        _164Indices = Indices(_163MeshIndices);
        _165Constant = 3;
        _166Constant = 2;
        _167Map = Map(_164Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 49152
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 49151
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 49147
            _0Modulo = Modulo(x0, _165Constant);
            _1Equal = Equal(_0Modulo, _166Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _168SetVisibleEdges = SetVisibleEdges(_162Triangulate, _167Map);
        _169Map = Map(_156Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 49139
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 49136
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 49138
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 49137
            _0MeshVertices = MeshVertices(_168SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 49140
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_168SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _170CombineAllMeshes = CombineAllMeshes(_169Map);
        _171Aggregate = Aggregate(_148Filter, _170CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer.ext->10:TryCatch 49066
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->7:IgnoreFirst 49088
                Int32 _1Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 49080
                Boolean _2Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 49079
                MapChannel _20Pass-through: any;// 0:Pass-through: any 49071
                Object _21Null;// 6:IsNullFix2.ext->3:Null 49075
                Object _22As;// 6:IsNullFix2.ext->23:As 49073
                Boolean _23Equal;// 6:IsNullFix2.ext->1:Equal 49072
                Boolean _24Not;// 5:MapChannelExists.ext->4:Not 49070
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _20Pass-through: any = if (_2Equal)
                  {
                    MapChannel _18TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 49081
                    _18TopologyChannel = TopologyChannel(_86SetMapChannel);
                    _18TopologyChannel;
                    }else
                  {
                    MapChannel _19GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 49082
                    _19GetMapChannel = GetMapChannel(_86SetMapChannel, _0IgnoreFirst);
                    _19GetMapChannel;
                    };
                _21Null = Null();
                _22As = As(_20Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 49074
                    _0IgnoreFirst = IgnoreFirst(x0, _21Null);
                    _0IgnoreFirst;
                    });
                _23Equal = Equal(_22As, _21Null);
                _24Not = Not(_23Equal);
                if (_24Not)
                  {
                    MapChannel _25GetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->1:GetMapChannel 49085
                    IArray[Vector3] _26MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer.ext->8:MapChannelVertexBuffer 49084
                    IArray[Int32] _27MeshIndices;// 10:MapChannelCopyVertexBuffer.ext->0:MeshIndices 49086
                    TriMesh _28SetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->7:SetMapChannel 49083
                    _25GetMapChannel = GetMapChannel(_86SetMapChannel, _0IgnoreFirst);
                    _26MapChannelVertexBuffer = MapChannelVertexBuffer(_25GetMapChannel);
                    _27MeshIndices = MeshIndices(x0);
                    _28SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _26MapChannelVertexBuffer, _27MeshIndices);
                    _28SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer.ext->11:IgnoreFirst 49087
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _171Aggregate;
        }else
      {
        _86SetMapChannel;
        });
    _172IgnoreFirst;
    }