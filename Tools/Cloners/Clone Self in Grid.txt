(InstanceState state, BoundingBox boundingBox, Single scale total, Int32 nx, Int32 ny, Int32 nz, Single scale, TriMesh mesh) => 
  {
    BoundingSphere _0SphereFromBox;// 9:BoundingBoxCenter->2:SphereFromBox 88636
    Vector3 _1SphereCenter;// 9:BoundingBoxCenter->3:SphereCenter 88635
    Vector3 _2BoxMax;// 1:BoundingBoxExtent->1:BoxMax 88641
    Vector3 _3BoxMin;// 1:BoundingBoxExtent->2:BoxMin 88642
    Vector3 _4Subtract;// 1:BoundingBoxExtent->3:Subtract 88640
    Vector3 _5MultiplyByScalar;// 19:BoxScaleBy-ext->2:MultiplyByScalar 88638
    Single _6Constant;// 19:BoxScaleBy-ext->0:Constant 88643
    Vector3 _7DivideByScalar;// 19:BoxScaleBy-ext->5:DivideByScalar 88637
    Vector3 _8Subtract;// 19:BoxScaleBy-ext->4:Subtract 88633
    Vector3 _9Add;// 19:BoxScaleBy-ext->10:Add 88644
    BoundingBox _10Box;// 19:BoxScaleBy-ext->3:Box 88632
    Int32 _11One;// 10:PlusOne->1:One 88504
    Int32 _12Add;// 10:PlusOne->0:Add 88503
    IArray[Single] _13RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 88500
    Vector3 _14BoxMin;// 0:SubdivideBoxAlongDiagonal->2:BoxMin 88505
    Vector3 _15BoxMax;// 0:SubdivideBoxAlongDiagonal->3:BoxMax 88506
    Func[Single, Vector3] _16Pass-through: function1;// 0:Pass-through: function1 88498
    IArray[Vector3] _17Map;// 5:SampleLerp->3:Map 88499
    Int32 _18Count;// 3:LastIndex->2:Count 88493
    Int32 _19One;// 3:MinusOne->2:One 88492
    Int32 _20Subtract;// 3:MinusOne->1:Subtract 88491
    IArray[Vector3] _21Take;// 6:DropLast->2:Take 88488
    Int32 _22One;// 5:SkipOne->2:One 88509
    IArray[Vector3] _23Skip;// 5:SkipOne->3:Skip 88508
    IArray[BoundingBox] _24Combine;// 0:SubdivideBoxAlongDiagonal->7:Combine 88486
    IArray[BoundingBox] _25Map;// 4:SubdivideBoxAlongX->1:Map 88483
    Func[BoundingBox, IArray[BoundingBox]] _26Pass-through: function1;// 0:Pass-through: function1 88478
    IArray[IArray[BoundingBox]] _27Map;// 7:FlatMap->4:Map 88480
    IArray[BoundingBox] _28Flatten;// 7:FlatMap->3:Flatten 88479
    Func[BoundingBox, IArray[BoundingBox]] _29Pass-through: function1;// 0:Pass-through: function1 88474
    IArray[IArray[BoundingBox]] _30Map;// 8:FlatMap->4:Map 88476
    IArray[BoundingBox] _31Flatten;// 8:FlatMap->3:Flatten 88475
    Single _32Constant;// 13:OnesVector-ext->0:Constant 88619
    Vector3 _33Vector3;// 13:OnesVector-ext->2:Vector3 88618
    Single _34IntAsFloat;// 12:VectorFromInts-ext->3:IntAsFloat 88624
    Single _35IntAsFloat;// 12:VectorFromInts-ext->4:IntAsFloat 88625
    Single _36IntAsFloat;// 12:VectorFromInts-ext->5:IntAsFloat 88626
    Vector3 _37Vector3;// 12:VectorFromInts-ext->6:Vector3 88623
    Vector3 _38Divide;// 2:BoxSubdivideAsMatrices-ext->14:Divide 88617
    IArray[Matrix] _39Map;// 2:BoxSubdivideAsMatrices-ext->4:Map 88468
    IArray[Matrix] _40IgnoreFirst;// 2:BoxSubdivideAsMatrices-ext->10:IgnoreFirst 88467
    Vector3 _41Vector3;// 15:ScalarToVector-ext->1:Vector3 88653
    Matrix _42VectorScaleMatrix;// 17:VectorScaleMatrix 88651
    IArray[Matrix] _43Map;// 9:Map 88462
    IArray[TriMesh] _44Map;// 6:CloneMeshAtTransforms-ext->3:Map 88453
    TriMesh _45CombineAllMeshes;// 7:CombineAllMeshes 88450
    _0SphereFromBox = SphereFromBox(boundingBox);
    _1SphereCenter = SphereCenter(_0SphereFromBox);
    _2BoxMax = BoxMax(boundingBox);
    _3BoxMin = BoxMin(boundingBox);
    _4Subtract = Subtract(_2BoxMax, _3BoxMin);
    _5MultiplyByScalar = MultiplyByScalar(_4Subtract, scale total);
    _6Constant = 2;
    _7DivideByScalar = DivideByScalar(_5MultiplyByScalar, _6Constant);
    _8Subtract = Subtract(_1SphereCenter, _7DivideByScalar);
    _9Add = Add(_1SphereCenter, _7DivideByScalar);
    _10Box = Box(_8Subtract, _9Add);
    _11One = One();
    _12Add = Add(nx, _11One);
    _13RangeInclusiveFloat = RangeInclusiveFloat(_12Add);
    _14BoxMin = BoxMin(_10Box);
    _15BoxMax = BoxMax(_10Box);
    _16Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 88501
        _0Lerp = Lerp(_14BoxMin, _15BoxMax, x0);
        _0Lerp;
        };
    _17Map = Map(_13RangeInclusiveFloat, _16Pass-through: function1);
    _18Count = Count(_17Map);
    _19One = One();
    _20Subtract = Subtract(_18Count, _19One);
    _21Take = Take(_17Map, _20Subtract);
    _22One = One();
    _23Skip = Skip(_17Map, _22One);
    _24Combine = Combine(_21Take, _23Skip, (Vector3 x0, Vector3 x1) => 
      {
        BoundingBox _0Box;// 0:SubdivideBoxAlongDiagonal->8:Box 88510
        _0Box = Box(x0, x1);
        _0Box;
        });
    _25Map = Map(_24Combine, (BoundingBox x0) => 
      {
        Vector3 _0BoxMin;// 2:MatchBoxX->7:BoxMin 88516
        Single _1X;// 2:MatchBoxX->4:X 88515
        Vector3 _2BoxMin;// 2:MatchBoxX->5:BoxMin 88518
        Single _3Y;// 2:MatchBoxX->8:Y 88517
        Single _4Z;// 2:MatchBoxX->0:Z 88519
        Vector3 _5Vector3;// 2:MatchBoxX->10:Vector3 88514
        Vector3 _6BoxMax;// 2:MatchBoxX->9:BoxMax 88522
        Single _7X;// 2:MatchBoxX->13:X 88521
        Vector3 _8BoxMax;// 2:MatchBoxX->15:BoxMax 88524
        Single _9Y;// 2:MatchBoxX->11:Y 88523
        Single _10Z;// 2:MatchBoxX->12:Z 88525
        Vector3 _11Vector3;// 2:MatchBoxX->6:Vector3 88520
        BoundingBox _12Box;// 2:MatchBoxX->14:Box 88513
        _0BoxMin = BoxMin(x0);
        _1X = X(_0BoxMin);
        _2BoxMin = BoxMin(_10Box);
        _3Y = Y(_2BoxMin);
        _4Z = Z(_2BoxMin);
        _5Vector3 = Vector3(_1X, _3Y, _4Z);
        _6BoxMax = BoxMax(x0);
        _7X = X(_6BoxMax);
        _8BoxMax = BoxMax(_10Box);
        _9Y = Y(_8BoxMax);
        _10Z = Z(_8BoxMax);
        _11Vector3 = Vector3(_7X, _9Y, _10Z);
        _12Box = Box(_5Vector3, _11Vector3);
        _12Box;
        });
    _26Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 88549
        Int32 _1Add;// 10:PlusOne->0:Add 88548
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 88545
        Vector3 _3BoxMin;// 2:SubdivideBoxAlongDiagonal->2:BoxMin 88550
        Vector3 _4BoxMax;// 2:SubdivideBoxAlongDiagonal->3:BoxMax 88551
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 88543
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 88544
        Int32 _7Count;// 3:LastIndex->2:Count 88538
        Int32 _8One;// 3:MinusOne->2:One 88537
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 88536
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 88533
        Int32 _11One;// 5:SkipOne->2:One 88554
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 88553
        IArray[BoundingBox] _13Combine;// 2:SubdivideBoxAlongDiagonal->7:Combine 88531
        IArray[BoundingBox] _14Map;// 5:SubdivideBoxAlongY->0:Map 88528
        _0One = One();
        _1Add = Add(ny, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 88546
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 2:SubdivideBoxAlongDiagonal->8:Box 88555
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxY->5:BoxMin 88561
            Single _1X;// 5:MatchBoxY->4:X 88560
            Vector3 _2BoxMin;// 5:MatchBoxY->11:BoxMin 88563
            Single _3Y;// 5:MatchBoxY->9:Y 88562
            Single _4Z;// 5:MatchBoxY->0:Z 88564
            Vector3 _5Vector3;// 5:MatchBoxY->8:Vector3 88559
            Vector3 _6BoxMax;// 5:MatchBoxY->6:BoxMax 88567
            Single _7X;// 5:MatchBoxY->14:X 88566
            Vector3 _8BoxMax;// 5:MatchBoxY->10:BoxMax 88569
            Single _9Y;// 5:MatchBoxY->13:Y 88568
            Single _10Z;// 5:MatchBoxY->12:Z 88570
            Vector3 _11Vector3;// 5:MatchBoxY->15:Vector3 88565
            BoundingBox _12Box;// 5:MatchBoxY->7:Box 88558
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2BoxMin = BoxMin(x0);
            _3Y = Y(_2BoxMin);
            _4Z = Z(_0BoxMin);
            _5Vector3 = Vector3(_1X, _3Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8BoxMax = BoxMax(x0);
            _9Y = Y(_8BoxMax);
            _10Z = Z(_6BoxMax);
            _11Vector3 = Vector3(_7X, _9Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _27Map = Map(_25Map, _26Pass-through: function1);
    _28Flatten = Flatten(_27Map);
    _29Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 88594
        Int32 _1Add;// 10:PlusOne->0:Add 88593
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 88590
        Vector3 _3BoxMin;// 3:SubdivideBoxAlongDiagonal->2:BoxMin 88595
        Vector3 _4BoxMax;// 3:SubdivideBoxAlongDiagonal->3:BoxMax 88596
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 88588
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 88589
        Int32 _7Count;// 3:LastIndex->2:Count 88583
        Int32 _8One;// 3:MinusOne->2:One 88582
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 88581
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 88578
        Int32 _11One;// 5:SkipOne->2:One 88599
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 88598
        IArray[BoundingBox] _13Combine;// 3:SubdivideBoxAlongDiagonal->7:Combine 88576
        IArray[BoundingBox] _14Map;// 6:SubdivideBoxAlongZ->0:Map 88573
        _0One = One();
        _1Add = Add(nz, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 88591
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 3:SubdivideBoxAlongDiagonal->8:Box 88600
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxZ->7:BoxMin 88606
            Single _1X;// 5:MatchBoxZ->6:X 88605
            Single _2Y;// 5:MatchBoxZ->10:Y 88607
            Vector3 _3BoxMin;// 5:MatchBoxZ->4:BoxMin 88609
            Single _4Z;// 5:MatchBoxZ->11:Z 88608
            Vector3 _5Vector3;// 5:MatchBoxZ->9:Vector3 88604
            Vector3 _6BoxMax;// 5:MatchBoxZ->8:BoxMax 88612
            Single _7X;// 5:MatchBoxZ->14:X 88611
            Single _8Y;// 5:MatchBoxZ->13:Y 88613
            Vector3 _9BoxMax;// 5:MatchBoxZ->3:BoxMax 88615
            Single _10Z;// 5:MatchBoxZ->12:Z 88614
            Vector3 _11Vector3;// 5:MatchBoxZ->15:Vector3 88610
            BoundingBox _12Box;// 5:MatchBoxZ->2:Box 88603
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2Y = Y(_0BoxMin);
            _3BoxMin = BoxMin(x0);
            _4Z = Z(_3BoxMin);
            _5Vector3 = Vector3(_1X, _2Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8Y = Y(_6BoxMax);
            _9BoxMax = BoxMax(x0);
            _10Z = Z(_9BoxMax);
            _11Vector3 = Vector3(_7X, _8Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _30Map = Map(_28Flatten, _29Pass-through: function1);
    _31Flatten = Flatten(_30Map);
    _32Constant = 1;
    _33Vector3 = Vector3(_32Constant, _32Constant, _32Constant);
    _34IntAsFloat = IntAsFloat(nx);
    _35IntAsFloat = IntAsFloat(ny);
    _36IntAsFloat = IntAsFloat(nz);
    _37Vector3 = Vector3(_34IntAsFloat, _35IntAsFloat, _36IntAsFloat);
    _38Divide = Divide(_33Vector3, _37Vector3);
    _39Map = Map(_31Flatten, (BoundingBox x0) => 
      {
        BoundingSphere _0SphereFromBox;// 7:BoundingBoxCenter->2:SphereFromBox 88629
        Vector3 _1SphereCenter;// 7:BoundingBoxCenter->3:SphereCenter 88628
        Matrix _2ScalingTranslationMatrix;// 2:BoxSubdivideAsMatrices-ext->5:ScalingTranslationMatrix 88616
        _0SphereFromBox = SphereFromBox(x0);
        _1SphereCenter = SphereCenter(_0SphereFromBox);
        _2ScalingTranslationMatrix = ScalingTranslationMatrix(_38Divide, _1SphereCenter);
        _2ScalingTranslationMatrix;
        });
    _40IgnoreFirst = IgnoreFirst(_10Box, _39Map);
    _41Vector3 = Vector3(scale, scale, scale);
    _42VectorScaleMatrix = VectorScaleMatrix(_41Vector3);
    _43Map = Map(_40IgnoreFirst, (Matrix x0) => 
      {
        Matrix _0Multiply;// 18:Multiply 88650
        _0Multiply = Multiply(_42VectorScaleMatrix, x0);
        _0Multiply;
        });
    _44Map = Map(_43Map, (Matrix x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 88460
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 88457
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 88459
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 88458
        _0MeshVertices = MeshVertices(mesh);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 1:TransformMesh->0:Transform 88461
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(mesh, _2Map);
        _3SetMeshVertices;
        });
    _45CombineAllMeshes = CombineAllMeshes(_44Map);
    _45CombineAllMeshes;
    }