(InstanceState state, Single total x, Single total y, Single total z, Int32 channel, Int32 grid_y, Int32 grid_x, Int32 grid_z, Single box radius, Boolean clone mesh, Boolean createNodes, Boolean useChildren, Boolean randomizeChildren, INode cloneTarget, Int32 seed) => 
  {
    Vector3 _0Vector3;// 6:Vector3 136380
    Single _1Constant;// 1:BoxFromExtent-ext->0:Constant 136379
    Vector3 _2MultiplyByScalar;// 1:BoxFromExtent-ext->1:MultiplyByScalar 136378
    Vector3 _3Negate;// 1:BoxFromExtent-ext->3:Negate 136377
    BoundingBox _4Box;// 1:BoxFromExtent-ext->4:Box 136376
    QuadMesh _5BoxQuadMesh;// 14:BoxTriMesh->2:BoxQuadMesh 136374
    TriMesh _6Triangulate;// 14:BoxTriMesh->3:Triangulate 136373
    IArray[Int32] _7MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 136364
    IArray[Int32] _8Indices;// 4:HideEveryThirdEdge->8:Indices 136363
    Int32 _9Constant;// 4:HideEveryThirdEdge->0:Constant 136371
    Int32 _10Constant;// 4:HideEveryThirdEdge->0:Constant 136372
    IArray[Boolean] _11Map;// 4:HideEveryThirdEdge->5:Map 136362
    TriMesh _12SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 136361
    Int32 _13One;// 10:PlusOne->1:One 136421
    Int32 _14Add;// 10:PlusOne->0:Add 136420
    IArray[Single] _15RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 136417
    Vector3 _16BoxMin;// 0:SubdivideBoxAlongDiagonal->2:BoxMin 136422
    Vector3 _17BoxMax;// 0:SubdivideBoxAlongDiagonal->3:BoxMax 136423
    Func[Single, Vector3] _18Pass-through: function1;// 0:Pass-through: function1 136415
    IArray[Vector3] _19Map;// 5:SampleLerp->3:Map 136416
    Int32 _20Count;// 3:LastIndex->2:Count 136410
    Int32 _21One;// 3:MinusOne->2:One 136409
    Int32 _22Subtract;// 3:MinusOne->1:Subtract 136408
    IArray[Vector3] _23Take;// 6:DropLast->2:Take 136405
    Int32 _24One;// 5:SkipOne->2:One 136426
    IArray[Vector3] _25Skip;// 5:SkipOne->3:Skip 136425
    IArray[BoundingBox] _26Combine;// 0:SubdivideBoxAlongDiagonal->7:Combine 136403
    IArray[BoundingBox] _27Map;// 4:SubdivideBoxAlongX->1:Map 136400
    Func[BoundingBox, IArray[BoundingBox]] _28Pass-through: function1;// 0:Pass-through: function1 136395
    IArray[IArray[BoundingBox]] _29Map;// 7:FlatMap->4:Map 136397
    IArray[BoundingBox] _30Flatten;// 7:FlatMap->3:Flatten 136396
    Func[BoundingBox, IArray[BoundingBox]] _31Pass-through: function1;// 0:Pass-through: function1 136391
    IArray[IArray[BoundingBox]] _32Map;// 8:FlatMap->4:Map 136393
    IArray[BoundingBox] _33Flatten;// 8:FlatMap->3:Flatten 136392
    IArray[Matrix] _34Map;// 2:Map 136385
    Func[Matrix, IArray[Vector3]] _35Pass-through: function1;// 0:Pass-through: function1 136347
    IArray[IArray[Vector3]] _36Map;// 5:FlatMap->4:Map 136349
    IArray[Vector3] _37Flatten;// 5:FlatMap->3:Flatten 136348
    IArray[Int32] _38MeshIndices;// 13:MapChannelStoreMatrices-ext->0:MeshIndices 136358
    TriMesh _39SetMapChannel;// 13:MapChannelStoreMatrices-ext->7:SetMapChannel 136345
    Int32 _40Constant;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->0:Constant 136221
    IArray[Int32] _41Range;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->1:Range 136220
    Int32 _42Two;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->4:Two 136222
    IArray[Int32] _43Skip;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->3:Skip 136219
    IArray[Int32] _44Filter;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->13:Filter 136218
    MapChannel _45GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 136280
    IArray[Vector3] _46MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 136279
    Int32 _47Count;// 2:Slices->2:Count 136276
    Int32 _48Constant;// 34:MatricesFromMapChannel-ext->0:Constant 136281
    Int32 _49Divide;// 2:Slices->3:Divide 136275
    IArray[Int32] _50Range;// 2:Slices->4:Range 136274
    IArray[IArray[Vector3]] _51Map;// 2:Slices->5:Map 136273
    IArray[Matrix] _52Map;// 34:MatricesFromMapChannel-ext->5:Map 136270
    Single _53Constant;// 1:Origin->0:Constant 136338
    Vector3 _54Vector3;// 1:Origin->1:Vector3 136337
    Single _55Constant;// 3:DivideByTwoFloat->0:Constant 136341
    Single _56Divide;// 3:DivideByTwoFloat->2:Divide 136340
    BoundingSphere _57Sphere;// 0:BoxFromPointAndRadius->3:Sphere 136336
    BoundingBox _58BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 136335
    QuadMesh _59BoxQuadMesh;// 3:CreateCubeMesh-ext->5:BoxQuadMesh 136331
    TriMesh _60Triangulate;// 7:QuadToTriMesh-ext->4:Triangulate 136319
    IArray[Int32] _61MeshIndices;// 7:QuadToTriMesh-ext->3:MeshIndices 136322
    IArray[Int32] _62Indices;// 7:QuadToTriMesh-ext->8:Indices 136321
    Int32 _63Constant;// 7:QuadToTriMesh-ext->0:Constant 136327
    Int32 _64Constant;// 7:QuadToTriMesh-ext->0:Constant 136328
    Int32 _65Constant;// 7:QuadToTriMesh-ext->0:Constant 136330
    IArray[Boolean] _66Map;// 7:QuadToTriMesh-ext->5:Map 136320
    TriMesh _67SetVisibleEdges;// 7:QuadToTriMesh-ext->9:SetVisibleEdges 136318
    IArray[TriMesh] _68Map;// 18:ClonerMeshAsBoxes-ext->16:Map 136267
    TriMesh _69CombineAllMeshes;// 18:ClonerMeshAsBoxes-ext->2:CombineAllMeshes 136266
    TriMesh _70Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->6:Aggregate 136217
    TriMesh _71IgnoreFirst;// 18:ClonerMeshAsBoxes-ext->7:IgnoreFirst 136214
    Boolean _72IgnoreFirst;// 35:IgnoreFirst 136210
    Boolean _73Not;// 33:Not 136209
    _0Vector3 = Vector3(total x, total y, total z);
    _1Constant = 0.5;
    _2MultiplyByScalar = MultiplyByScalar(_0Vector3, _1Constant);
    _3Negate = Negate(_2MultiplyByScalar);
    _4Box = Box(_3Negate, _2MultiplyByScalar);
    _5BoxQuadMesh = BoxQuadMesh(_4Box);
    _6Triangulate = Triangulate(_5BoxQuadMesh);
    _7MeshIndices = MeshIndices(_6Triangulate);
    _8Indices = Indices(_7MeshIndices);
    _9Constant = 3;
    _10Constant = 2;
    _11Map = Map(_8Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 136370
        Boolean _1Equal;// 6:ModuloEquals->4:Equal 136369
        Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 136365
        _0Modulo = Modulo(x0, _9Constant);
        _1Equal = Equal(_0Modulo, _10Constant);
        _2Not = Not(_1Equal);
        _2Not;
        });
    _12SetVisibleEdges = SetVisibleEdges(_6Triangulate, _11Map);
    _13One = One();
    _14Add = Add(grid_y, _13One);
    _15RangeInclusiveFloat = RangeInclusiveFloat(_14Add);
    _16BoxMin = BoxMin(_4Box);
    _17BoxMax = BoxMax(_4Box);
    _18Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 136418
        _0Lerp = Lerp(_16BoxMin, _17BoxMax, x0);
        _0Lerp;
        };
    _19Map = Map(_15RangeInclusiveFloat, _18Pass-through: function1);
    _20Count = Count(_19Map);
    _21One = One();
    _22Subtract = Subtract(_20Count, _21One);
    _23Take = Take(_19Map, _22Subtract);
    _24One = One();
    _25Skip = Skip(_19Map, _24One);
    _26Combine = Combine(_23Take, _25Skip, (Vector3 x0, Vector3 x1) => 
      {
        BoundingBox _0Box;// 0:SubdivideBoxAlongDiagonal->8:Box 136427
        _0Box = Box(x0, x1);
        _0Box;
        });
    _27Map = Map(_26Combine, (BoundingBox x0) => 
      {
        Vector3 _0BoxMin;// 2:MatchBoxX->7:BoxMin 136433
        Single _1X;// 2:MatchBoxX->4:X 136432
        Vector3 _2BoxMin;// 2:MatchBoxX->5:BoxMin 136435
        Single _3Y;// 2:MatchBoxX->8:Y 136434
        Single _4Z;// 2:MatchBoxX->0:Z 136436
        Vector3 _5Vector3;// 2:MatchBoxX->10:Vector3 136431
        Vector3 _6BoxMax;// 2:MatchBoxX->9:BoxMax 136439
        Single _7X;// 2:MatchBoxX->13:X 136438
        Vector3 _8BoxMax;// 2:MatchBoxX->15:BoxMax 136441
        Single _9Y;// 2:MatchBoxX->11:Y 136440
        Single _10Z;// 2:MatchBoxX->12:Z 136442
        Vector3 _11Vector3;// 2:MatchBoxX->6:Vector3 136437
        BoundingBox _12Box;// 2:MatchBoxX->14:Box 136430
        _0BoxMin = BoxMin(x0);
        _1X = X(_0BoxMin);
        _2BoxMin = BoxMin(_4Box);
        _3Y = Y(_2BoxMin);
        _4Z = Z(_2BoxMin);
        _5Vector3 = Vector3(_1X, _3Y, _4Z);
        _6BoxMax = BoxMax(x0);
        _7X = X(_6BoxMax);
        _8BoxMax = BoxMax(_4Box);
        _9Y = Y(_8BoxMax);
        _10Z = Z(_8BoxMax);
        _11Vector3 = Vector3(_7X, _9Y, _10Z);
        _12Box = Box(_5Vector3, _11Vector3);
        _12Box;
        });
    _28Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 136466
        Int32 _1Add;// 10:PlusOne->0:Add 136465
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 136462
        Vector3 _3BoxMin;// 2:SubdivideBoxAlongDiagonal->2:BoxMin 136467
        Vector3 _4BoxMax;// 2:SubdivideBoxAlongDiagonal->3:BoxMax 136468
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 136460
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 136461
        Int32 _7Count;// 3:LastIndex->2:Count 136455
        Int32 _8One;// 3:MinusOne->2:One 136454
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 136453
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 136450
        Int32 _11One;// 5:SkipOne->2:One 136471
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 136470
        IArray[BoundingBox] _13Combine;// 2:SubdivideBoxAlongDiagonal->7:Combine 136448
        IArray[BoundingBox] _14Map;// 5:SubdivideBoxAlongY->0:Map 136445
        _0One = One();
        _1Add = Add(grid_x, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 136463
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 2:SubdivideBoxAlongDiagonal->8:Box 136472
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxY->5:BoxMin 136478
            Single _1X;// 5:MatchBoxY->4:X 136477
            Vector3 _2BoxMin;// 5:MatchBoxY->11:BoxMin 136480
            Single _3Y;// 5:MatchBoxY->9:Y 136479
            Single _4Z;// 5:MatchBoxY->0:Z 136481
            Vector3 _5Vector3;// 5:MatchBoxY->8:Vector3 136476
            Vector3 _6BoxMax;// 5:MatchBoxY->6:BoxMax 136484
            Single _7X;// 5:MatchBoxY->14:X 136483
            Vector3 _8BoxMax;// 5:MatchBoxY->10:BoxMax 136486
            Single _9Y;// 5:MatchBoxY->13:Y 136485
            Single _10Z;// 5:MatchBoxY->12:Z 136487
            Vector3 _11Vector3;// 5:MatchBoxY->15:Vector3 136482
            BoundingBox _12Box;// 5:MatchBoxY->7:Box 136475
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2BoxMin = BoxMin(x0);
            _3Y = Y(_2BoxMin);
            _4Z = Z(_0BoxMin);
            _5Vector3 = Vector3(_1X, _3Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8BoxMax = BoxMax(x0);
            _9Y = Y(_8BoxMax);
            _10Z = Z(_6BoxMax);
            _11Vector3 = Vector3(_7X, _9Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _29Map = Map(_27Map, _28Pass-through: function1);
    _30Flatten = Flatten(_29Map);
    _31Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 136511
        Int32 _1Add;// 10:PlusOne->0:Add 136510
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 136507
        Vector3 _3BoxMin;// 3:SubdivideBoxAlongDiagonal->2:BoxMin 136512
        Vector3 _4BoxMax;// 3:SubdivideBoxAlongDiagonal->3:BoxMax 136513
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 136505
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 136506
        Int32 _7Count;// 3:LastIndex->2:Count 136500
        Int32 _8One;// 3:MinusOne->2:One 136499
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 136498
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 136495
        Int32 _11One;// 5:SkipOne->2:One 136516
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 136515
        IArray[BoundingBox] _13Combine;// 3:SubdivideBoxAlongDiagonal->7:Combine 136493
        IArray[BoundingBox] _14Map;// 6:SubdivideBoxAlongZ->0:Map 136490
        _0One = One();
        _1Add = Add(grid_z, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 136508
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 3:SubdivideBoxAlongDiagonal->8:Box 136517
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxZ->7:BoxMin 136523
            Single _1X;// 5:MatchBoxZ->6:X 136522
            Single _2Y;// 5:MatchBoxZ->10:Y 136524
            Vector3 _3BoxMin;// 5:MatchBoxZ->4:BoxMin 136526
            Single _4Z;// 5:MatchBoxZ->11:Z 136525
            Vector3 _5Vector3;// 5:MatchBoxZ->9:Vector3 136521
            Vector3 _6BoxMax;// 5:MatchBoxZ->8:BoxMax 136529
            Single _7X;// 5:MatchBoxZ->14:X 136528
            Single _8Y;// 5:MatchBoxZ->13:Y 136530
            Vector3 _9BoxMax;// 5:MatchBoxZ->3:BoxMax 136532
            Single _10Z;// 5:MatchBoxZ->12:Z 136531
            Vector3 _11Vector3;// 5:MatchBoxZ->15:Vector3 136527
            BoundingBox _12Box;// 5:MatchBoxZ->2:Box 136520
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2Y = Y(_0BoxMin);
            _3BoxMin = BoxMin(x0);
            _4Z = Z(_3BoxMin);
            _5Vector3 = Vector3(_1X, _2Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8Y = Y(_6BoxMax);
            _9BoxMax = BoxMax(x0);
            _10Z = Z(_9BoxMax);
            _11Vector3 = Vector3(_7X, _8Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _32Map = Map(_30Flatten, _31Pass-through: function1);
    _33Flatten = Flatten(_32Map);
    _34Map = Map(_33Flatten, (BoundingBox x0) => 
      {
        BoundingSphere _0SphereFromBox;// 7:BoundingBoxCenter->2:SphereFromBox 136539
        Vector3 _1SphereCenter;// 7:BoundingBoxCenter->3:SphereCenter 136538
        Matrix _2TranslationMatrix;// 21:TranslationMatrix 136536
        _0SphereFromBox = SphereFromBox(x0);
        _1SphereCenter = SphereCenter(_0SphereFromBox);
        _2TranslationMatrix = TranslationMatrix(_1SphereCenter);
        _2TranslationMatrix;
        });
    _35Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 136353
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 136352
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 136351
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 136357
            Int32 _1Add;// 5:PlusOne->0:Add 136356
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 136354
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _36Map = Map(_34Map, _35Pass-through: function1);
    _37Flatten = Flatten(_36Map);
    _38MeshIndices = MeshIndices(_12SetVisibleEdges);
    _39SetMapChannel = SetMapChannel(_12SetVisibleEdges, channel, _37Flatten, _38MeshIndices);
    _40Constant = 100;
    _41Range = Range(_40Constant);
    _42Two = Two();
    _43Skip = Skip(_41Range, _42Two);
    _44Filter = Filter(_43Skip, (Int32 x0) => 
      {
        Int32 _0Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 136235
        Boolean _1Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 136234
        MapChannel _4Pass-through: any;// 0:Pass-through: any 136226
        Object _5Null;// 6:IsNullFix2-ext->3:Null 136230
        Object _6As;// 6:IsNullFix2-ext->23:As 136228
        Boolean _7Equal;// 6:IsNullFix2-ext->1:Equal 136227
        Boolean _8Not;// 12:MapChannelExists-ext->4:Not 136225
        _0Constant = -3;
        _1Equal = Equal(x0, _0Constant);
        _4Pass-through: any = if (_1Equal)
          {
            MapChannel _2TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 136236
            _2TopologyChannel = TopologyChannel(_39SetMapChannel);
            _2TopologyChannel;
            }else
          {
            MapChannel _3GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 136237
            _3GetMapChannel = GetMapChannel(_39SetMapChannel, x0);
            _3GetMapChannel;
            };
        _5Null = Null();
        _6As = As(_4Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 136229
            _0IgnoreFirst = IgnoreFirst(x0, _5Null);
            _0IgnoreFirst;
            });
        _7Equal = Equal(_6As, _5Null);
        _8Not = Not(_7Equal);
        _8Not;
        });
    _45GetMapChannel = GetMapChannel(_39SetMapChannel, channel);
    _46MapChannelVertexBuffer = MapChannelVertexBuffer(_45GetMapChannel);
    _47Count = Count(_46MapChannelVertexBuffer);
    _48Constant = 4;
    _49Divide = Divide(_47Count, _48Constant);
    _50Range = Range(_49Divide);
    _51Map = Map(_50Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 136278
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 136277
        _0Multiply = Multiply(_48Constant, x0);
        _1Slice = Slice(_46MapChannelVertexBuffer, _0Multiply, _48Constant);
        _1Slice;
        });
    _52Map = Map(_51Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 136290
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 136291
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 136295
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 136294
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 136289
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 136292
        Int32 _6One;// 8:PlusOne->1:One 136299
        Int32 _7Add;// 8:PlusOne->0:Add 136298
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 136296
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 136288
        Int32 _10Constant;// 25:Three->0:Constant 136293
        Int32 _11One;// 9:PlusOne->1:One 136303
        Int32 _12Add;// 9:PlusOne->0:Add 136302
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 136300
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 136287
        Int32 _15One;// 10:PlusOne->1:One 136307
        Int32 _16Add;// 10:PlusOne->0:Add 136306
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 136304
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 136283
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _53Constant = 0;
    _54Vector3 = Vector3(_53Constant, _53Constant, _53Constant);
    _55Constant = 2;
    _56Divide = Divide(box radius, _55Constant);
    _57Sphere = Sphere(_54Vector3, _56Divide);
    _58BoxFromSphere = BoxFromSphere(_57Sphere);
    _59BoxQuadMesh = BoxQuadMesh(_58BoxFromSphere);
    _60Triangulate = Triangulate(_59BoxQuadMesh);
    _61MeshIndices = MeshIndices(_60Triangulate);
    _62Indices = Indices(_61MeshIndices);
    _63Constant = 6;
    _64Constant = 2;
    _65Constant = 3;
    _66Map = Map(_62Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 7:QuadToTriMesh-ext->14:Modulo 136326
        Boolean _1Equal;// 7:QuadToTriMesh-ext->7:Equal 136325
        Boolean _2Equal;// 7:QuadToTriMesh-ext->13:Equal 136329
        Boolean _3OrElse;// 7:QuadToTriMesh-ext->12:OrElse 136324
        Boolean _4Not;// 7:QuadToTriMesh-ext->10:Not 136323
        _0Modulo = Modulo(x0, _63Constant);
        _1Equal = Equal(_0Modulo, _64Constant);
        _2Equal = Equal(_0Modulo, _65Constant);
        _3OrElse = OrElse(_1Equal, _2Equal);
        _4Not = Not(_3OrElse);
        _4Not;
        });
    _67SetVisibleEdges = SetVisibleEdges(_60Triangulate, _66Map);
    _68Map = Map(_52Map, (Matrix x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 136314
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 136311
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 136313
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 136312
        _0MeshVertices = MeshVertices(_67SetVisibleEdges);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 36:TransformMesh->0:Transform 136315
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(_67SetVisibleEdges, _2Map);
        _3SetMeshVertices;
        });
    _69CombineAllMeshes = CombineAllMeshes(_68Map);
    _70Aggregate = Aggregate(_44Filter, _69CombineAllMeshes, (TriMesh x0, Int32 x1) => 
      {
        TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer-ext->10:TryCatch 136241
        _0TryCatch = TryCatch(() => 
          {
            Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->7:IgnoreFirst 136263
            Int32 _1Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 136255
            Boolean _2Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 136254
            MapChannel _5Pass-through: any;// 0:Pass-through: any 136246
            Object _6Null;// 6:IsNullFix2-ext->3:Null 136250
            Object _7As;// 6:IsNullFix2-ext->23:As 136248
            Boolean _8Equal;// 6:IsNullFix2-ext->1:Equal 136247
            Boolean _9Not;// 5:MapChannelExists-ext->4:Not 136245
            _0IgnoreFirst = IgnoreFirst(x0, x1);
            _1Constant = -3;
            _2Equal = Equal(_0IgnoreFirst, _1Constant);
            _5Pass-through: any = if (_2Equal)
              {
                MapChannel _3TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 136256
                _3TopologyChannel = TopologyChannel(_39SetMapChannel);
                _3TopologyChannel;
                }else
              {
                MapChannel _4GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 136257
                _4GetMapChannel = GetMapChannel(_39SetMapChannel, _0IgnoreFirst);
                _4GetMapChannel;
                };
            _6Null = Null();
            _7As = As(_5Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 136249
                _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                _0IgnoreFirst;
                });
            _8Equal = Equal(_7As, _6Null);
            _9Not = Not(_8Equal);
            if (_9Not)
              {
                MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->1:GetMapChannel 136260
                IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer-ext->8:MapChannelVertexBuffer 136259
                IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer-ext->0:MeshIndices 136261
                TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->7:SetMapChannel 136258
                _10GetMapChannel = GetMapChannel(_39SetMapChannel, _0IgnoreFirst);
                _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                _12MeshIndices = MeshIndices(x0);
                _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                _13SetMapChannel;
                }else
              {
                x0;
                };
            }, (Exception x0) => 
          {
            TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer-ext->11:IgnoreFirst 136262
            _0IgnoreFirst = IgnoreFirst(x0, x0);
            _0IgnoreFirst;
            });
        _0TryCatch;
        });
    _71IgnoreFirst = IgnoreFirst(_39SetMapChannel, _70Aggregate);
    _72IgnoreFirst = IgnoreFirst(_71IgnoreFirst, clone mesh);
    _73Not = Not(_72IgnoreFirst);
    if (_73Not)
      {
        _71IgnoreFirst;
        }else
      {
        Boolean _74False;// 34:False 136752
        IArray[TriMesh] _75IfThen;// 12:ClonerTransformChildMeshes-ext->21:IfThen 136616
        TriMesh _77CombineAllMeshes;// 23:ClonerClone-ext->45:CombineAllMeshes 136604
        TriMesh _85IgnoreFirst;// 23:ClonerClone-ext->9:IgnoreFirst 136551
        _74False = False();
        _75IfThen = IfThen(createNodes, () => 
          {
            MapChannel _0GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 136724
            IArray[Vector3] _1MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 136723
            Int32 _2Count;// 2:Slices->2:Count 136720
            Int32 _3Constant;// 34:MatricesFromMapChannel-ext->0:Constant 136725
            Int32 _4Divide;// 2:Slices->3:Divide 136719
            IArray[Int32] _5Range;// 2:Slices->4:Range 136718
            IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 136717
            IArray[Matrix] _7Map;// 34:MatricesFromMapChannel-ext->5:Map 136714
            Int32 _8Count;// 17:ClonerChildNodes-ext->9:Count 136668
            IArray[INode] _23Map;// 12:ClonerTransformChildMeshes-ext->10:Map 136620
            IArray[INode] _24Combine;// 12:ClonerTransformChildMeshes-ext->8:Combine 136619
            Single _25Constant;// 1:Origin->0:Constant 136697
            Vector3 _26Vector3;// 1:Origin->1:Vector3 136696
            Single _27FloatOne;// 12:ClonerTransformChildMeshes-ext->19:FloatOne 136701
            Single _28Constant;// 3:DivideByTwoFloat->0:Constant 136700
            Single _29Divide;// 3:DivideByTwoFloat->2:Divide 136699
            BoundingSphere _30Sphere;// 0:BoxFromPointAndRadius->3:Sphere 136695
            BoundingBox _31BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 136694
            QuadMesh _32BoxQuadMesh;// 18:CreateCubeMesh-ext->5:BoxQuadMesh 136690
            TriMesh _33Triangulate;// 7:QuadToTriMesh-ext->4:Triangulate 136678
            IArray[Int32] _34MeshIndices;// 7:QuadToTriMesh-ext->3:MeshIndices 136681
            IArray[Int32] _35Indices;// 7:QuadToTriMesh-ext->8:Indices 136680
            Int32 _36Constant;// 7:QuadToTriMesh-ext->0:Constant 136686
            Int32 _37Constant;// 7:QuadToTriMesh-ext->0:Constant 136687
            Int32 _38Constant;// 7:QuadToTriMesh-ext->0:Constant 136689
            IArray[Boolean] _39Map;// 7:QuadToTriMesh-ext->5:Map 136679
            TriMesh _40SetVisibleEdges;// 7:QuadToTriMesh-ext->9:SetVisibleEdges 136677
            INode _41CreateEditableMesh;// 12:ClonerTransformChildMeshes-ext->16:CreateEditableMesh 136674
            Func[INode, INode] _42Bind2of2;// 12:ClonerTransformChildMeshes-ext->20:Bind2of2 136672
            IArray[INode] _43Map;// 12:ClonerTransformChildMeshes-ext->22:Map 136618
            IArray[TriMesh] _62Combine;// 12:ClonerTransformChildMeshes-ext->12:Combine 136702
            IArray[TriMesh] _63IgnoreFirst;// 12:ClonerTransformChildMeshes-ext->3:IgnoreFirst 136617
            _0GetMapChannel = GetMapChannel(_71IgnoreFirst, channel);
            _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
            _2Count = Count(_1MapChannelVertexBuffer);
            _3Constant = 4;
            _4Divide = Divide(_2Count, _3Constant);
            _5Range = Range(_4Divide);
            _6Map = Map(_5Range, (Int32 x0) => 
              {
                Int32 _0Multiply;// 2:Slices->6:Multiply 136722
                IArray[Vector3] _1Slice;// 2:Slices->0:Slice 136721
                _0Multiply = Multiply(_3Constant, x0);
                _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
                _1Slice;
                });
            _7Map = Map(_6Map, (IArray[Vector3] x0) => 
              {
                Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 136734
                Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 136735
                Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 136739
                Vector3 _3At;// 6:MatrixFromRows-ext->3:At 136738
                Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 136733
                Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 136736
                Int32 _6One;// 8:PlusOne->1:One 136743
                Int32 _7Add;// 8:PlusOne->0:Add 136742
                Vector3 _8At;// 6:MatrixFromRows-ext->4:At 136740
                Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 136732
                Int32 _10Constant;// 25:Three->0:Constant 136737
                Int32 _11One;// 9:PlusOne->1:One 136747
                Int32 _12Add;// 9:PlusOne->0:Add 136746
                Vector3 _13At;// 6:MatrixFromRows-ext->5:At 136744
                Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 136731
                Int32 _15One;// 10:PlusOne->1:One 136751
                Int32 _16Add;// 10:PlusOne->0:Add 136750
                Vector3 _17At;// 6:MatrixFromRows-ext->6:At 136748
                Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 136727
                _0MatrixIdentity = MatrixIdentity();
                _1One = One();
                _2Zero = Zero();
                _3At = At(x0, _2Zero);
                _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
                _5Two = Two();
                _6One = One();
                _7Add = Add(_2Zero, _6One);
                _8At = At(x0, _7Add);
                _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
                _10Constant = 3;
                _11One = One();
                _12Add = Add(_7Add, _11One);
                _13At = At(x0, _12Add);
                _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
                _15One = One();
                _16Add = Add(_12Add, _15One);
                _17At = At(x0, _16Add);
                _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
                _18SetMatrixTranslation;
                });
            _8Count = Count(_7Map);
            _23Map = Map(if (useChildren)
              {
                IArray[INode] _9ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 136633
                IArray[Int32] _10Range;// 2:MapRange->2:Range 136657
                Func[Int32, INode] _11Pass-through: function1;// 0:Pass-through: function1 136655
                IArray[INode] _12Map;// 2:MapRange->3:Map 136656
                _9ChildNodes = ChildNodes(cloneTarget);
                _10Range = Range(_8Count);
                _11Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Count;// 7:AtModulo-ext->6:Count 136666
                    Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 136665
                    Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 136664
                    Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 136663
                    INode _5At;// 7:AtModulo-ext->3:At 136660
                    _0Count = Count(_9ChildNodes);
                    _1Modulo = Modulo(x0, _0Count);
                    _2Zero = Zero();
                    _3LessThan = LessThan(_1Modulo, _2Zero);
                    _5At = At(_9ChildNodes, if (_3LessThan)
                      {
                        Int32 _4Add;// 7:AtModulo-ext->8:Add 136667
                        _4Add = Add(_1Modulo, _0Count);
                        _4Add;
                        }else
                      {
                        _1Modulo;
                        });
                    _5At;
                    };
                _12Map = Map(_10Range, _11Pass-through: function1);
                if (randomizeChildren)
                  {
                    Int32 _13Count;// 17:ClonerChildNodes-ext->5:Count 136632
                    Int32 _14Zero;// 11:GreaterThanZero->1:Zero 136631
                    Boolean _15GreaterThan;// 11:GreaterThanZero->3:GreaterThan 136630
                    _13Count = Count(_9ChildNodes);
                    _14Zero = Zero();
                    _15GreaterThan = GreaterThan(_13Count, _14Zero);
                    if (_15GreaterThan)
                      {
                        Func[Random, Int32] _16Pass-through: function1;// 0:Pass-through: function1 136643
                        Random _17RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 136650
                        Func[Int32] _18Bind;// 0:RandomArray-ext->4:Bind 136647
                        Int32 _19Count;// 10:RandomizeArray-ext->4:Count 136651
                        IArray[Int32] _20ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 136646
                        IArray[INode] _21Map;// 5:SelectByIndex->2:Map 136638
                        _16Pass-through: function1 = (Random x0) => 
                          {
                            Int32 _0Count;// 1:ArrayRandomIndices-ext->4:Count 136649
                            _0Count = Count(_12Map);
                            PseudoRandomInt(x0, _0Count);
                            };
                        _17RandomNumberGenerator = RandomNumberGenerator(seed);
                        _18Bind = Bind(_16Pass-through: function1, _17RandomNumberGenerator);
                        _19Count = Count(_12Map);
                        _20ArrayOfFunction = ArrayOfFunction(_18Bind, _19Count);
                        _21Map = Map(_20ArrayOfFunction, (Int32 x0) => 
                          {
                            INode _0At;// 5:SelectByIndex->3:At 136639
                            _0At = At(_12Map, x0);
                            _0At;
                            });
                        _21Map;
                        }else
                      {
                        _9ChildNodes;
                        };
                    }else
                  {
                    _12Map;
                    };
                }else
              {
                IArray[INode] _22ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 136669
                _22ArrayOf = ArrayOf(cloneTarget, _8Count);
                _22ArrayOf;
                }, (INode x0) => 
              {
                INode _0CloneAsInstance;// 12:ClonerTransformChildMeshes-ext->14:CloneAsInstance 136670
                _0CloneAsInstance = CloneAsInstance(x0);
                _0CloneAsInstance;
                });
            _24Combine = Combine(_23Map, _7Map, (INode x0, Matrix x1) => 
              {
                INode _0SetNodeTransform;// 12:ClonerTransformChildMeshes-ext->5:SetNodeTransform 136671
                _0SetNodeTransform = SetNodeTransform(x0, x1);
                _0SetNodeTransform;
                });
            _25Constant = 0;
            _26Vector3 = Vector3(_25Constant, _25Constant, _25Constant);
            _27FloatOne = FloatOne();
            _28Constant = 2;
            _29Divide = Divide(_27FloatOne, _28Constant);
            _30Sphere = Sphere(_26Vector3, _29Divide);
            _31BoxFromSphere = BoxFromSphere(_30Sphere);
            _32BoxQuadMesh = BoxQuadMesh(_31BoxFromSphere);
            _33Triangulate = Triangulate(_32BoxQuadMesh);
            _34MeshIndices = MeshIndices(_33Triangulate);
            _35Indices = Indices(_34MeshIndices);
            _36Constant = 6;
            _37Constant = 2;
            _38Constant = 3;
            _39Map = Map(_35Indices, (Int32 x0) => 
              {
                Int32 _0Modulo;// 7:QuadToTriMesh-ext->14:Modulo 136685
                Boolean _1Equal;// 7:QuadToTriMesh-ext->7:Equal 136684
                Boolean _2Equal;// 7:QuadToTriMesh-ext->13:Equal 136688
                Boolean _3OrElse;// 7:QuadToTriMesh-ext->12:OrElse 136683
                Boolean _4Not;// 7:QuadToTriMesh-ext->10:Not 136682
                _0Modulo = Modulo(x0, _36Constant);
                _1Equal = Equal(_0Modulo, _37Constant);
                _2Equal = Equal(_0Modulo, _38Constant);
                _3OrElse = OrElse(_1Equal, _2Equal);
                _4Not = Not(_3OrElse);
                _4Not;
                });
            _40SetVisibleEdges = SetVisibleEdges(_33Triangulate, _39Map);
            _41CreateEditableMesh = CreateEditableMesh(_40SetVisibleEdges);
            _42Bind2of2 = Bind2of2((INode x0, INode x1) => 
              {
                INode _0SetParent;// 12:ClonerTransformChildMeshes-ext->9:SetParent 136673
                _0SetParent = SetParent(x0, x1);
                _0SetParent;
                }, _41CreateEditableMesh);
            _43Map = Map(_24Combine, _42Bind2of2);
            _62Combine = Combine(if (useChildren)
              {
                if (randomizeChildren)
                  {
                    IArray[INode] _44ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 136633
                    Int32 _45Count;// 17:ClonerChildNodes-ext->5:Count 136632
                    Int32 _46Zero;// 11:GreaterThanZero->1:Zero 136631
                    Boolean _47GreaterThan;// 11:GreaterThanZero->3:GreaterThan 136630
                    _44ChildNodes = ChildNodes(cloneTarget);
                    _45Count = Count(_44ChildNodes);
                    _46Zero = Zero();
                    _47GreaterThan = GreaterThan(_45Count, _46Zero);
                    if (_47GreaterThan)
                      {
                        Func[Random, Int32] _48Pass-through: function1;// 0:Pass-through: function1 136643
                        Random _49RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 136650
                        Func[Int32] _50Bind;// 0:RandomArray-ext->4:Bind 136647
                        IArray[Int32] _51Range;// 2:MapRange->2:Range 136657
                        Func[Int32, INode] _52Pass-through: function1;// 0:Pass-through: function1 136655
                        IArray[INode] _53Map;// 2:MapRange->3:Map 136656
                        Int32 _54Count;// 10:RandomizeArray-ext->4:Count 136651
                        IArray[Int32] _55ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 136646
                        IArray[INode] _56Map;// 5:SelectByIndex->2:Map 136638
                        _48Pass-through: function1 = (Random x0) => 
                          {
                            IArray[Int32] _0Range;// 2:MapRange->2:Range 136657
                            Func[Int32, INode] _1Pass-through: function1;// 0:Pass-through: function1 136655
                            IArray[INode] _2Map;// 2:MapRange->3:Map 136656
                            Int32 _3Count;// 1:ArrayRandomIndices-ext->4:Count 136649
                            _0Range = Range(_8Count);
                            _1Pass-through: function1 = (Int32 x0) => 
                              {
                                Int32 _0Count;// 7:AtModulo-ext->6:Count 136666
                                Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 136665
                                Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 136664
                                Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 136663
                                INode _5At;// 7:AtModulo-ext->3:At 136660
                                _0Count = Count(_44ChildNodes);
                                _1Modulo = Modulo(x0, _0Count);
                                _2Zero = Zero();
                                _3LessThan = LessThan(_1Modulo, _2Zero);
                                _5At = At(_44ChildNodes, if (_3LessThan)
                                  {
                                    Int32 _4Add;// 7:AtModulo-ext->8:Add 136667
                                    _4Add = Add(_1Modulo, _0Count);
                                    _4Add;
                                    }else
                                  {
                                    _1Modulo;
                                    });
                                _5At;
                                };
                            _2Map = Map(_0Range, _1Pass-through: function1);
                            _3Count = Count(_2Map);
                            PseudoRandomInt(x0, _3Count);
                            };
                        _49RandomNumberGenerator = RandomNumberGenerator(seed);
                        _50Bind = Bind(_48Pass-through: function1, _49RandomNumberGenerator);
                        _51Range = Range(_8Count);
                        _52Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Count;// 7:AtModulo-ext->6:Count 136666
                            Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 136665
                            Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 136664
                            Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 136663
                            INode _5At;// 7:AtModulo-ext->3:At 136660
                            _0Count = Count(_44ChildNodes);
                            _1Modulo = Modulo(x0, _0Count);
                            _2Zero = Zero();
                            _3LessThan = LessThan(_1Modulo, _2Zero);
                            _5At = At(_44ChildNodes, if (_3LessThan)
                              {
                                Int32 _4Add;// 7:AtModulo-ext->8:Add 136667
                                _4Add = Add(_1Modulo, _0Count);
                                _4Add;
                                }else
                              {
                                _1Modulo;
                                });
                            _5At;
                            };
                        _53Map = Map(_51Range, _52Pass-through: function1);
                        _54Count = Count(_53Map);
                        _55ArrayOfFunction = ArrayOfFunction(_50Bind, _54Count);
                        _56Map = Map(_55ArrayOfFunction, (Int32 x0) => 
                          {
                            INode _0At;// 5:SelectByIndex->3:At 136639
                            _0At = At(_53Map, x0);
                            _0At;
                            });
                        _56Map;
                        }else
                      {
                        _44ChildNodes;
                        };
                    }else
                  {
                    IArray[Int32] _57Range;// 2:MapRange->2:Range 136657
                    IArray[INode] _58ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 136633
                    Func[Int32, INode] _59Pass-through: function1;// 0:Pass-through: function1 136655
                    IArray[INode] _60Map;// 2:MapRange->3:Map 136656
                    _57Range = Range(_8Count);
                    _58ChildNodes = ChildNodes(cloneTarget);
                    _59Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Count;// 7:AtModulo-ext->6:Count 136666
                        Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 136665
                        Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 136664
                        Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 136663
                        INode _5At;// 7:AtModulo-ext->3:At 136660
                        _0Count = Count(_58ChildNodes);
                        _1Modulo = Modulo(x0, _0Count);
                        _2Zero = Zero();
                        _3LessThan = LessThan(_1Modulo, _2Zero);
                        _5At = At(_58ChildNodes, if (_3LessThan)
                          {
                            Int32 _4Add;// 7:AtModulo-ext->8:Add 136667
                            _4Add = Add(_1Modulo, _0Count);
                            _4Add;
                            }else
                          {
                            _1Modulo;
                            });
                        _5At;
                        };
                    _60Map = Map(_57Range, _59Pass-through: function1);
                    _60Map;
                    };
                }else
              {
                IArray[INode] _61ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 136669
                _61ArrayOf = ArrayOf(cloneTarget, _8Count);
                _61ArrayOf;
                }, _7Map, (INode x0, Matrix x1) => 
              {
                TriMesh _0MeshFromNode;// 12:ClonerTransformChildMeshes-ext->0:MeshFromNode 136711
                IArray[Vector3] _1MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 136709
                Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 136706
                IArray[Vector3] _3Map;// 2:DeformMeshPoints->1:Map 136708
                TriMesh _4SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 136707
                _0MeshFromNode = MeshFromNode(x0);
                _1MeshVertices = MeshVertices(_0MeshFromNode);
                _2Pass-through: function1 = (Vector3 x0) => 
                  {
                    Vector3 _0Transform;// 13:TransformMesh->0:Transform 136710
                    _0Transform = Transform(x0, x1);
                    _0Transform;
                    };
                _3Map = Map(_1MeshVertices, _2Pass-through: function1);
                _4SetMeshVertices = SetMeshVertices(_0MeshFromNode, _3Map);
                _4SetMeshVertices;
                });
            _63IgnoreFirst = IgnoreFirst(_43Map, _62Combine);
            _63IgnoreFirst;
            }, () => 
          {
            MapChannel _0GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 136724
            IArray[Vector3] _1MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 136723
            Int32 _2Count;// 2:Slices->2:Count 136720
            Int32 _3Constant;// 34:MatricesFromMapChannel-ext->0:Constant 136725
            Int32 _4Divide;// 2:Slices->3:Divide 136719
            IArray[Int32] _5Range;// 2:Slices->4:Range 136718
            IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 136717
            IArray[Matrix] _7Map;// 34:MatricesFromMapChannel-ext->5:Map 136714
            IArray[TriMesh] _28Combine;// 12:ClonerTransformChildMeshes-ext->12:Combine 136702
            _0GetMapChannel = GetMapChannel(_71IgnoreFirst, channel);
            _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
            _2Count = Count(_1MapChannelVertexBuffer);
            _3Constant = 4;
            _4Divide = Divide(_2Count, _3Constant);
            _5Range = Range(_4Divide);
            _6Map = Map(_5Range, (Int32 x0) => 
              {
                Int32 _0Multiply;// 2:Slices->6:Multiply 136722
                IArray[Vector3] _1Slice;// 2:Slices->0:Slice 136721
                _0Multiply = Multiply(_3Constant, x0);
                _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
                _1Slice;
                });
            _7Map = Map(_6Map, (IArray[Vector3] x0) => 
              {
                Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 136734
                Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 136735
                Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 136739
                Vector3 _3At;// 6:MatrixFromRows-ext->3:At 136738
                Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 136733
                Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 136736
                Int32 _6One;// 8:PlusOne->1:One 136743
                Int32 _7Add;// 8:PlusOne->0:Add 136742
                Vector3 _8At;// 6:MatrixFromRows-ext->4:At 136740
                Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 136732
                Int32 _10Constant;// 25:Three->0:Constant 136737
                Int32 _11One;// 9:PlusOne->1:One 136747
                Int32 _12Add;// 9:PlusOne->0:Add 136746
                Vector3 _13At;// 6:MatrixFromRows-ext->5:At 136744
                Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 136731
                Int32 _15One;// 10:PlusOne->1:One 136751
                Int32 _16Add;// 10:PlusOne->0:Add 136750
                Vector3 _17At;// 6:MatrixFromRows-ext->6:At 136748
                Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 136727
                _0MatrixIdentity = MatrixIdentity();
                _1One = One();
                _2Zero = Zero();
                _3At = At(x0, _2Zero);
                _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
                _5Two = Two();
                _6One = One();
                _7Add = Add(_2Zero, _6One);
                _8At = At(x0, _7Add);
                _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
                _10Constant = 3;
                _11One = One();
                _12Add = Add(_7Add, _11One);
                _13At = At(x0, _12Add);
                _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
                _15One = One();
                _16Add = Add(_12Add, _15One);
                _17At = At(x0, _16Add);
                _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
                _18SetMatrixTranslation;
                });
            _28Combine = Combine(if (useChildren)
              {
                Int32 _8Count;// 17:ClonerChildNodes-ext->9:Count 136668
                _8Count = Count(_7Map);
                if (randomizeChildren)
                  {
                    IArray[INode] _9ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 136633
                    Int32 _10Count;// 17:ClonerChildNodes-ext->5:Count 136632
                    Int32 _11Zero;// 11:GreaterThanZero->1:Zero 136631
                    Boolean _12GreaterThan;// 11:GreaterThanZero->3:GreaterThan 136630
                    _9ChildNodes = ChildNodes(cloneTarget);
                    _10Count = Count(_9ChildNodes);
                    _11Zero = Zero();
                    _12GreaterThan = GreaterThan(_10Count, _11Zero);
                    if (_12GreaterThan)
                      {
                        Func[Random, Int32] _13Pass-through: function1;// 0:Pass-through: function1 136643
                        Random _14RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 136650
                        Func[Int32] _15Bind;// 0:RandomArray-ext->4:Bind 136647
                        IArray[Int32] _16Range;// 2:MapRange->2:Range 136657
                        Func[Int32, INode] _17Pass-through: function1;// 0:Pass-through: function1 136655
                        IArray[INode] _18Map;// 2:MapRange->3:Map 136656
                        Int32 _19Count;// 10:RandomizeArray-ext->4:Count 136651
                        IArray[Int32] _20ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 136646
                        IArray[INode] _21Map;// 5:SelectByIndex->2:Map 136638
                        _13Pass-through: function1 = (Random x0) => 
                          {
                            IArray[Int32] _0Range;// 2:MapRange->2:Range 136657
                            Func[Int32, INode] _1Pass-through: function1;// 0:Pass-through: function1 136655
                            IArray[INode] _2Map;// 2:MapRange->3:Map 136656
                            Int32 _3Count;// 1:ArrayRandomIndices-ext->4:Count 136649
                            _0Range = Range(_8Count);
                            _1Pass-through: function1 = (Int32 x0) => 
                              {
                                Int32 _0Count;// 7:AtModulo-ext->6:Count 136666
                                Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 136665
                                Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 136664
                                Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 136663
                                INode _5At;// 7:AtModulo-ext->3:At 136660
                                _0Count = Count(_9ChildNodes);
                                _1Modulo = Modulo(x0, _0Count);
                                _2Zero = Zero();
                                _3LessThan = LessThan(_1Modulo, _2Zero);
                                _5At = At(_9ChildNodes, if (_3LessThan)
                                  {
                                    Int32 _4Add;// 7:AtModulo-ext->8:Add 136667
                                    _4Add = Add(_1Modulo, _0Count);
                                    _4Add;
                                    }else
                                  {
                                    _1Modulo;
                                    });
                                _5At;
                                };
                            _2Map = Map(_0Range, _1Pass-through: function1);
                            _3Count = Count(_2Map);
                            PseudoRandomInt(x0, _3Count);
                            };
                        _14RandomNumberGenerator = RandomNumberGenerator(seed);
                        _15Bind = Bind(_13Pass-through: function1, _14RandomNumberGenerator);
                        _16Range = Range(_8Count);
                        _17Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Count;// 7:AtModulo-ext->6:Count 136666
                            Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 136665
                            Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 136664
                            Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 136663
                            INode _5At;// 7:AtModulo-ext->3:At 136660
                            _0Count = Count(_9ChildNodes);
                            _1Modulo = Modulo(x0, _0Count);
                            _2Zero = Zero();
                            _3LessThan = LessThan(_1Modulo, _2Zero);
                            _5At = At(_9ChildNodes, if (_3LessThan)
                              {
                                Int32 _4Add;// 7:AtModulo-ext->8:Add 136667
                                _4Add = Add(_1Modulo, _0Count);
                                _4Add;
                                }else
                              {
                                _1Modulo;
                                });
                            _5At;
                            };
                        _18Map = Map(_16Range, _17Pass-through: function1);
                        _19Count = Count(_18Map);
                        _20ArrayOfFunction = ArrayOfFunction(_15Bind, _19Count);
                        _21Map = Map(_20ArrayOfFunction, (Int32 x0) => 
                          {
                            INode _0At;// 5:SelectByIndex->3:At 136639
                            _0At = At(_18Map, x0);
                            _0At;
                            });
                        _21Map;
                        }else
                      {
                        _9ChildNodes;
                        };
                    }else
                  {
                    IArray[Int32] _22Range;// 2:MapRange->2:Range 136657
                    IArray[INode] _23ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 136633
                    Func[Int32, INode] _24Pass-through: function1;// 0:Pass-through: function1 136655
                    IArray[INode] _25Map;// 2:MapRange->3:Map 136656
                    _22Range = Range(_8Count);
                    _23ChildNodes = ChildNodes(cloneTarget);
                    _24Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Count;// 7:AtModulo-ext->6:Count 136666
                        Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 136665
                        Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 136664
                        Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 136663
                        INode _5At;// 7:AtModulo-ext->3:At 136660
                        _0Count = Count(_23ChildNodes);
                        _1Modulo = Modulo(x0, _0Count);
                        _2Zero = Zero();
                        _3LessThan = LessThan(_1Modulo, _2Zero);
                        _5At = At(_23ChildNodes, if (_3LessThan)
                          {
                            Int32 _4Add;// 7:AtModulo-ext->8:Add 136667
                            _4Add = Add(_1Modulo, _0Count);
                            _4Add;
                            }else
                          {
                            _1Modulo;
                            });
                        _5At;
                        };
                    _25Map = Map(_22Range, _24Pass-through: function1);
                    _25Map;
                    };
                }else
              {
                Int32 _26Count;// 17:ClonerChildNodes-ext->9:Count 136668
                IArray[INode] _27ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 136669
                _26Count = Count(_7Map);
                _27ArrayOf = ArrayOf(cloneTarget, _26Count);
                _27ArrayOf;
                }, _7Map, (INode x0, Matrix x1) => 
              {
                TriMesh _0MeshFromNode;// 12:ClonerTransformChildMeshes-ext->0:MeshFromNode 136711
                IArray[Vector3] _1MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 136709
                Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 136706
                IArray[Vector3] _3Map;// 2:DeformMeshPoints->1:Map 136708
                TriMesh _4SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 136707
                _0MeshFromNode = MeshFromNode(x0);
                _1MeshVertices = MeshVertices(_0MeshFromNode);
                _2Pass-through: function1 = (Vector3 x0) => 
                  {
                    Vector3 _0Transform;// 13:TransformMesh->0:Transform 136710
                    _0Transform = Transform(x0, x1);
                    _0Transform;
                    };
                _3Map = Map(_1MeshVertices, _2Pass-through: function1);
                _4SetMeshVertices = SetMeshVertices(_0MeshFromNode, _3Map);
                _4SetMeshVertices;
                });
            _28Combine;
            });
        _77CombineAllMeshes = CombineAllMeshes(if (_74False)
          {
            IArray[TriMesh] _76Append;// 39:AppendIf->1:Append 136609
            _76Append = Append(_75IfThen, _71IgnoreFirst);
            _76Append;
            }else
          {
            _75IfThen;
            });
        _85IgnoreFirst = IgnoreFirst(_71IgnoreFirst, if (_74False)
          {
            Int32 _79Constant;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->0:Constant 136559
            IArray[Int32] _80Range;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->1:Range 136558
            Int32 _81Two;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->4:Two 136560
            IArray[Int32] _82Skip;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->3:Skip 136557
            IArray[Int32] _83Filter;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->13:Filter 136556
            TriMesh _84Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->6:Aggregate 136555
            _79Constant = 100;
            _80Range = Range(_79Constant);
            _81Two = Two();
            _82Skip = Skip(_80Range, _81Two);
            _83Filter = Filter(_82Skip, (Int32 x0) => 
              {
                Int32 _0Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 136573
                Boolean _1Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 136572
                MapChannel _4Pass-through: any;// 0:Pass-through: any 136564
                Object _5Null;// 6:IsNullFix2-ext->3:Null 136568
                Object _6As;// 6:IsNullFix2-ext->23:As 136566
                Boolean _7Equal;// 6:IsNullFix2-ext->1:Equal 136565
                Boolean _8Not;// 12:MapChannelExists-ext->4:Not 136563
                _0Constant = -3;
                _1Equal = Equal(x0, _0Constant);
                _4Pass-through: any = if (_1Equal)
                  {
                    MapChannel _2TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 136574
                    _2TopologyChannel = TopologyChannel(_71IgnoreFirst);
                    _2TopologyChannel;
                    }else
                  {
                    MapChannel _3GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 136575
                    _3GetMapChannel = GetMapChannel(_71IgnoreFirst, x0);
                    _3GetMapChannel;
                    };
                _5Null = Null();
                _6As = As(_4Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 136567
                    _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                    _0IgnoreFirst;
                    });
                _7Equal = Equal(_6As, _5Null);
                _8Not = Not(_7Equal);
                _8Not;
                });
            _84Aggregate = Aggregate(_83Filter, _77CombineAllMeshes, (TriMesh x0, Int32 x1) => 
              {
                TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer-ext->10:TryCatch 136579
                _0TryCatch = TryCatch(() => 
                  {
                    Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->7:IgnoreFirst 136601
                    Int32 _1Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 136593
                    Boolean _2Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 136592
                    MapChannel _5Pass-through: any;// 0:Pass-through: any 136584
                    Object _6Null;// 6:IsNullFix2-ext->3:Null 136588
                    Object _7As;// 6:IsNullFix2-ext->23:As 136586
                    Boolean _8Equal;// 6:IsNullFix2-ext->1:Equal 136585
                    Boolean _9Not;// 5:MapChannelExists-ext->4:Not 136583
                    _0IgnoreFirst = IgnoreFirst(x0, x1);
                    _1Constant = -3;
                    _2Equal = Equal(_0IgnoreFirst, _1Constant);
                    _5Pass-through: any = if (_2Equal)
                      {
                        MapChannel _3TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 136594
                        _3TopologyChannel = TopologyChannel(_71IgnoreFirst);
                        _3TopologyChannel;
                        }else
                      {
                        MapChannel _4GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 136595
                        _4GetMapChannel = GetMapChannel(_71IgnoreFirst, _0IgnoreFirst);
                        _4GetMapChannel;
                        };
                    _6Null = Null();
                    _7As = As(_5Pass-through: any, (Object x0) => 
                      {
                        Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 136587
                        _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                        _0IgnoreFirst;
                        });
                    _8Equal = Equal(_7As, _6Null);
                    _9Not = Not(_8Equal);
                    if (_9Not)
                      {
                        MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->1:GetMapChannel 136598
                        IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer-ext->8:MapChannelVertexBuffer 136597
                        IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer-ext->0:MeshIndices 136599
                        TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->7:SetMapChannel 136596
                        _10GetMapChannel = GetMapChannel(_71IgnoreFirst, _0IgnoreFirst);
                        _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                        _12MeshIndices = MeshIndices(x0);
                        _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                        _13SetMapChannel;
                        }else
                      {
                        x0;
                        };
                    }, (Exception x0) => 
                  {
                    TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer-ext->11:IgnoreFirst 136600
                    _0IgnoreFirst = IgnoreFirst(x0, x0);
                    _0IgnoreFirst;
                    });
                _0TryCatch;
                });
            _84Aggregate;
            }else
          {
            _77CombineAllMeshes;
            });
        _85IgnoreFirst;
        };
    }