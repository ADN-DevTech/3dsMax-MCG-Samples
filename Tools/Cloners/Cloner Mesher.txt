(InstanceState state, TriMesh mesh, Boolean keep custom channels, Boolean include original, Boolean create nodes, Boolean use children, Boolean randomize children, INode clone target, Int32 channel id, Int32 randomize seed) => 
  {
    IArray[TriMesh] _0IfThen;// 12:ClonerTransformChildMeshes-ext->21:IfThen 92488
    TriMesh _2CombineAllMeshes;// 29:ClonerClone-ext->45:CombineAllMeshes 92476
    TriMesh _10IgnoreFirst;// 29:ClonerClone-ext->9:IgnoreFirst 92423
    _0IfThen = IfThen(create nodes, () => 
      {
        MapChannel _0GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 92596
        IArray[Vector3] _1MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 92595
        Int32 _2Count;// 2:Slices->2:Count 92592
        Int32 _3Constant;// 34:MatricesFromMapChannel-ext->0:Constant 92597
        Int32 _4Divide;// 2:Slices->3:Divide 92591
        IArray[Int32] _5Range;// 2:Slices->4:Range 92590
        IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 92589
        IArray[Matrix] _7Map;// 34:MatricesFromMapChannel-ext->5:Map 92586
        Int32 _8Count;// 17:ClonerChildNodes-ext->9:Count 92540
        IArray[INode] _23Map;// 12:ClonerTransformChildMeshes-ext->10:Map 92492
        IArray[INode] _24Combine;// 12:ClonerTransformChildMeshes-ext->8:Combine 92491
        Single _25Constant;// 1:Origin->0:Constant 92569
        Vector3 _26Vector3;// 1:Origin->1:Vector3 92568
        Single _27FloatOne;// 12:ClonerTransformChildMeshes-ext->19:FloatOne 92573
        Single _28Constant;// 3:DivideByTwoFloat->0:Constant 92572
        Single _29Divide;// 3:DivideByTwoFloat->2:Divide 92571
        BoundingSphere _30Sphere;// 0:BoxFromPointAndRadius->3:Sphere 92567
        BoundingBox _31BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 92566
        QuadMesh _32BoxQuadMesh;// 18:CreateCubeMesh-ext->5:BoxQuadMesh 92562
        TriMesh _33Triangulate;// 7:QuadToTriMesh-ext->4:Triangulate 92550
        IArray[Int32] _34MeshIndices;// 7:QuadToTriMesh-ext->3:MeshIndices 92553
        IArray[Int32] _35Indices;// 7:QuadToTriMesh-ext->8:Indices 92552
        Int32 _36Constant;// 7:QuadToTriMesh-ext->0:Constant 92558
        Int32 _37Constant;// 7:QuadToTriMesh-ext->0:Constant 92559
        Int32 _38Constant;// 7:QuadToTriMesh-ext->0:Constant 92561
        IArray[Boolean] _39Map;// 7:QuadToTriMesh-ext->5:Map 92551
        TriMesh _40SetVisibleEdges;// 7:QuadToTriMesh-ext->9:SetVisibleEdges 92549
        INode _41CreateEditableMesh;// 12:ClonerTransformChildMeshes-ext->16:CreateEditableMesh 92546
        Func[INode, INode] _42Bind2of2;// 12:ClonerTransformChildMeshes-ext->20:Bind2of2 92544
        IArray[INode] _43Map;// 12:ClonerTransformChildMeshes-ext->22:Map 92490
        IArray[TriMesh] _62Combine;// 12:ClonerTransformChildMeshes-ext->12:Combine 92574
        IArray[TriMesh] _63IgnoreFirst;// 12:ClonerTransformChildMeshes-ext->3:IgnoreFirst 92489
        _0GetMapChannel = GetMapChannel(mesh, channel id);
        _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
        _2Count = Count(_1MapChannelVertexBuffer);
        _3Constant = 4;
        _4Divide = Divide(_2Count, _3Constant);
        _5Range = Range(_4Divide);
        _6Map = Map(_5Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 92594
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 92593
            _0Multiply = Multiply(_3Constant, x0);
            _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
            _1Slice;
            });
        _7Map = Map(_6Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 92606
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 92607
            Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 92611
            Vector3 _3At;// 6:MatrixFromRows-ext->3:At 92610
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 92605
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 92608
            Int32 _6One;// 8:PlusOne->1:One 92615
            Int32 _7Add;// 8:PlusOne->0:Add 92614
            Vector3 _8At;// 6:MatrixFromRows-ext->4:At 92612
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 92604
            Int32 _10Constant;// 25:Three->0:Constant 92609
            Int32 _11One;// 9:PlusOne->1:One 92619
            Int32 _12Add;// 9:PlusOne->0:Add 92618
            Vector3 _13At;// 6:MatrixFromRows-ext->5:At 92616
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 92603
            Int32 _15One;// 10:PlusOne->1:One 92623
            Int32 _16Add;// 10:PlusOne->0:Add 92622
            Vector3 _17At;// 6:MatrixFromRows-ext->6:At 92620
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 92599
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _8Count = Count(_7Map);
        _23Map = Map(if (use children)
          {
            IArray[INode] _9ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 92505
            IArray[Int32] _10Range;// 2:MapRange->2:Range 92529
            Func[Int32, INode] _11Pass-through: function1;// 0:Pass-through: function1 92527
            IArray[INode] _12Map;// 2:MapRange->3:Map 92528
            _9ChildNodes = ChildNodes(clone target);
            _10Range = Range(_8Count);
            _11Pass-through: function1 = (Int32 x0) => 
              {
                Int32 _0Count;// 7:AtModulo-ext->6:Count 92538
                Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 92537
                Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 92536
                Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 92535
                INode _5At;// 7:AtModulo-ext->3:At 92532
                _0Count = Count(_9ChildNodes);
                _1Modulo = Modulo(x0, _0Count);
                _2Zero = Zero();
                _3LessThan = LessThan(_1Modulo, _2Zero);
                _5At = At(_9ChildNodes, if (_3LessThan)
                  {
                    Int32 _4Add;// 7:AtModulo-ext->8:Add 92539
                    _4Add = Add(_1Modulo, _0Count);
                    _4Add;
                    }else
                  {
                    _1Modulo;
                    });
                _5At;
                };
            _12Map = Map(_10Range, _11Pass-through: function1);
            if (randomize children)
              {
                Int32 _13Count;// 17:ClonerChildNodes-ext->5:Count 92504
                Int32 _14Zero;// 11:GreaterThanZero->1:Zero 92503
                Boolean _15GreaterThan;// 11:GreaterThanZero->3:GreaterThan 92502
                _13Count = Count(_9ChildNodes);
                _14Zero = Zero();
                _15GreaterThan = GreaterThan(_13Count, _14Zero);
                if (_15GreaterThan)
                  {
                    Func[Random, Int32] _16Pass-through: function1;// 0:Pass-through: function1 92515
                    Random _17RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 92522
                    Func[Int32] _18Bind;// 0:RandomArray-ext->4:Bind 92519
                    Int32 _19Count;// 10:RandomizeArray-ext->4:Count 92523
                    IArray[Int32] _20ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 92518
                    IArray[INode] _21Map;// 5:SelectByIndex->2:Map 92510
                    _16Pass-through: function1 = (Random x0) => 
                      {
                        Int32 _0Count;// 1:ArrayRandomIndices-ext->4:Count 92521
                        _0Count = Count(_12Map);
                        PseudoRandomInt(x0, _0Count);
                        };
                    _17RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _18Bind = Bind(_16Pass-through: function1, _17RandomNumberGenerator);
                    _19Count = Count(_12Map);
                    _20ArrayOfFunction = ArrayOfFunction(_18Bind, _19Count);
                    _21Map = Map(_20ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 92511
                        _0At = At(_12Map, x0);
                        _0At;
                        });
                    _21Map;
                    }else
                  {
                    _9ChildNodes;
                    };
                }else
              {
                _12Map;
                };
            }else
          {
            IArray[INode] _22ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 92541
            _22ArrayOf = ArrayOf(clone target, _8Count);
            _22ArrayOf;
            }, (INode x0) => 
          {
            INode _0CloneAsInstance;// 12:ClonerTransformChildMeshes-ext->14:CloneAsInstance 92542
            _0CloneAsInstance = CloneAsInstance(x0);
            _0CloneAsInstance;
            });
        _24Combine = Combine(_23Map, _7Map, (INode x0, Matrix x1) => 
          {
            INode _0SetNodeTransform;// 12:ClonerTransformChildMeshes-ext->5:SetNodeTransform 92543
            _0SetNodeTransform = SetNodeTransform(x0, x1);
            _0SetNodeTransform;
            });
        _25Constant = 0;
        _26Vector3 = Vector3(_25Constant, _25Constant, _25Constant);
        _27FloatOne = FloatOne();
        _28Constant = 2;
        _29Divide = Divide(_27FloatOne, _28Constant);
        _30Sphere = Sphere(_26Vector3, _29Divide);
        _31BoxFromSphere = BoxFromSphere(_30Sphere);
        _32BoxQuadMesh = BoxQuadMesh(_31BoxFromSphere);
        _33Triangulate = Triangulate(_32BoxQuadMesh);
        _34MeshIndices = MeshIndices(_33Triangulate);
        _35Indices = Indices(_34MeshIndices);
        _36Constant = 6;
        _37Constant = 2;
        _38Constant = 3;
        _39Map = Map(_35Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 7:QuadToTriMesh-ext->14:Modulo 92557
            Boolean _1Equal;// 7:QuadToTriMesh-ext->7:Equal 92556
            Boolean _2Equal;// 7:QuadToTriMesh-ext->13:Equal 92560
            Boolean _3OrElse;// 7:QuadToTriMesh-ext->12:OrElse 92555
            Boolean _4Not;// 7:QuadToTriMesh-ext->10:Not 92554
            _0Modulo = Modulo(x0, _36Constant);
            _1Equal = Equal(_0Modulo, _37Constant);
            _2Equal = Equal(_0Modulo, _38Constant);
            _3OrElse = OrElse(_1Equal, _2Equal);
            _4Not = Not(_3OrElse);
            _4Not;
            });
        _40SetVisibleEdges = SetVisibleEdges(_33Triangulate, _39Map);
        _41CreateEditableMesh = CreateEditableMesh(_40SetVisibleEdges);
        _42Bind2of2 = Bind2of2((INode x0, INode x1) => 
          {
            INode _0SetParent;// 12:ClonerTransformChildMeshes-ext->9:SetParent 92545
            _0SetParent = SetParent(x0, x1);
            _0SetParent;
            }, _41CreateEditableMesh);
        _43Map = Map(_24Combine, _42Bind2of2);
        _62Combine = Combine(if (use children)
          {
            if (randomize children)
              {
                IArray[INode] _44ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 92505
                Int32 _45Count;// 17:ClonerChildNodes-ext->5:Count 92504
                Int32 _46Zero;// 11:GreaterThanZero->1:Zero 92503
                Boolean _47GreaterThan;// 11:GreaterThanZero->3:GreaterThan 92502
                _44ChildNodes = ChildNodes(clone target);
                _45Count = Count(_44ChildNodes);
                _46Zero = Zero();
                _47GreaterThan = GreaterThan(_45Count, _46Zero);
                if (_47GreaterThan)
                  {
                    Func[Random, Int32] _48Pass-through: function1;// 0:Pass-through: function1 92515
                    Random _49RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 92522
                    Func[Int32] _50Bind;// 0:RandomArray-ext->4:Bind 92519
                    IArray[Int32] _51Range;// 2:MapRange->2:Range 92529
                    Func[Int32, INode] _52Pass-through: function1;// 0:Pass-through: function1 92527
                    IArray[INode] _53Map;// 2:MapRange->3:Map 92528
                    Int32 _54Count;// 10:RandomizeArray-ext->4:Count 92523
                    IArray[Int32] _55ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 92518
                    IArray[INode] _56Map;// 5:SelectByIndex->2:Map 92510
                    _48Pass-through: function1 = (Random x0) => 
                      {
                        IArray[Int32] _0Range;// 2:MapRange->2:Range 92529
                        Func[Int32, INode] _1Pass-through: function1;// 0:Pass-through: function1 92527
                        IArray[INode] _2Map;// 2:MapRange->3:Map 92528
                        Int32 _3Count;// 1:ArrayRandomIndices-ext->4:Count 92521
                        _0Range = Range(_8Count);
                        _1Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Count;// 7:AtModulo-ext->6:Count 92538
                            Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 92537
                            Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 92536
                            Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 92535
                            INode _5At;// 7:AtModulo-ext->3:At 92532
                            _0Count = Count(_44ChildNodes);
                            _1Modulo = Modulo(x0, _0Count);
                            _2Zero = Zero();
                            _3LessThan = LessThan(_1Modulo, _2Zero);
                            _5At = At(_44ChildNodes, if (_3LessThan)
                              {
                                Int32 _4Add;// 7:AtModulo-ext->8:Add 92539
                                _4Add = Add(_1Modulo, _0Count);
                                _4Add;
                                }else
                              {
                                _1Modulo;
                                });
                            _5At;
                            };
                        _2Map = Map(_0Range, _1Pass-through: function1);
                        _3Count = Count(_2Map);
                        PseudoRandomInt(x0, _3Count);
                        };
                    _49RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _50Bind = Bind(_48Pass-through: function1, _49RandomNumberGenerator);
                    _51Range = Range(_8Count);
                    _52Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Count;// 7:AtModulo-ext->6:Count 92538
                        Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 92537
                        Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 92536
                        Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 92535
                        INode _5At;// 7:AtModulo-ext->3:At 92532
                        _0Count = Count(_44ChildNodes);
                        _1Modulo = Modulo(x0, _0Count);
                        _2Zero = Zero();
                        _3LessThan = LessThan(_1Modulo, _2Zero);
                        _5At = At(_44ChildNodes, if (_3LessThan)
                          {
                            Int32 _4Add;// 7:AtModulo-ext->8:Add 92539
                            _4Add = Add(_1Modulo, _0Count);
                            _4Add;
                            }else
                          {
                            _1Modulo;
                            });
                        _5At;
                        };
                    _53Map = Map(_51Range, _52Pass-through: function1);
                    _54Count = Count(_53Map);
                    _55ArrayOfFunction = ArrayOfFunction(_50Bind, _54Count);
                    _56Map = Map(_55ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 92511
                        _0At = At(_53Map, x0);
                        _0At;
                        });
                    _56Map;
                    }else
                  {
                    _44ChildNodes;
                    };
                }else
              {
                IArray[Int32] _57Range;// 2:MapRange->2:Range 92529
                IArray[INode] _58ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 92505
                Func[Int32, INode] _59Pass-through: function1;// 0:Pass-through: function1 92527
                IArray[INode] _60Map;// 2:MapRange->3:Map 92528
                _57Range = Range(_8Count);
                _58ChildNodes = ChildNodes(clone target);
                _59Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Count;// 7:AtModulo-ext->6:Count 92538
                    Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 92537
                    Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 92536
                    Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 92535
                    INode _5At;// 7:AtModulo-ext->3:At 92532
                    _0Count = Count(_58ChildNodes);
                    _1Modulo = Modulo(x0, _0Count);
                    _2Zero = Zero();
                    _3LessThan = LessThan(_1Modulo, _2Zero);
                    _5At = At(_58ChildNodes, if (_3LessThan)
                      {
                        Int32 _4Add;// 7:AtModulo-ext->8:Add 92539
                        _4Add = Add(_1Modulo, _0Count);
                        _4Add;
                        }else
                      {
                        _1Modulo;
                        });
                    _5At;
                    };
                _60Map = Map(_57Range, _59Pass-through: function1);
                _60Map;
                };
            }else
          {
            IArray[INode] _61ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 92541
            _61ArrayOf = ArrayOf(clone target, _8Count);
            _61ArrayOf;
            }, _7Map, (INode x0, Matrix x1) => 
          {
            TriMesh _0MeshFromNode;// 12:ClonerTransformChildMeshes-ext->0:MeshFromNode 92583
            IArray[Vector3] _1MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 92581
            Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 92578
            IArray[Vector3] _3Map;// 2:DeformMeshPoints->1:Map 92580
            TriMesh _4SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 92579
            _0MeshFromNode = MeshFromNode(x0);
            _1MeshVertices = MeshVertices(_0MeshFromNode);
            _2Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 13:TransformMesh->0:Transform 92582
                _0Transform = Transform(x0, x1);
                _0Transform;
                };
            _3Map = Map(_1MeshVertices, _2Pass-through: function1);
            _4SetMeshVertices = SetMeshVertices(_0MeshFromNode, _3Map);
            _4SetMeshVertices;
            });
        _63IgnoreFirst = IgnoreFirst(_43Map, _62Combine);
        _63IgnoreFirst;
        }, () => 
      {
        MapChannel _0GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 92596
        IArray[Vector3] _1MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 92595
        Int32 _2Count;// 2:Slices->2:Count 92592
        Int32 _3Constant;// 34:MatricesFromMapChannel-ext->0:Constant 92597
        Int32 _4Divide;// 2:Slices->3:Divide 92591
        IArray[Int32] _5Range;// 2:Slices->4:Range 92590
        IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 92589
        IArray[Matrix] _7Map;// 34:MatricesFromMapChannel-ext->5:Map 92586
        IArray[TriMesh] _28Combine;// 12:ClonerTransformChildMeshes-ext->12:Combine 92574
        _0GetMapChannel = GetMapChannel(mesh, channel id);
        _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
        _2Count = Count(_1MapChannelVertexBuffer);
        _3Constant = 4;
        _4Divide = Divide(_2Count, _3Constant);
        _5Range = Range(_4Divide);
        _6Map = Map(_5Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 92594
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 92593
            _0Multiply = Multiply(_3Constant, x0);
            _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
            _1Slice;
            });
        _7Map = Map(_6Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 92606
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 92607
            Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 92611
            Vector3 _3At;// 6:MatrixFromRows-ext->3:At 92610
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 92605
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 92608
            Int32 _6One;// 8:PlusOne->1:One 92615
            Int32 _7Add;// 8:PlusOne->0:Add 92614
            Vector3 _8At;// 6:MatrixFromRows-ext->4:At 92612
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 92604
            Int32 _10Constant;// 25:Three->0:Constant 92609
            Int32 _11One;// 9:PlusOne->1:One 92619
            Int32 _12Add;// 9:PlusOne->0:Add 92618
            Vector3 _13At;// 6:MatrixFromRows-ext->5:At 92616
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 92603
            Int32 _15One;// 10:PlusOne->1:One 92623
            Int32 _16Add;// 10:PlusOne->0:Add 92622
            Vector3 _17At;// 6:MatrixFromRows-ext->6:At 92620
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 92599
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _28Combine = Combine(if (use children)
          {
            Int32 _8Count;// 17:ClonerChildNodes-ext->9:Count 92540
            _8Count = Count(_7Map);
            if (randomize children)
              {
                IArray[INode] _9ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 92505
                Int32 _10Count;// 17:ClonerChildNodes-ext->5:Count 92504
                Int32 _11Zero;// 11:GreaterThanZero->1:Zero 92503
                Boolean _12GreaterThan;// 11:GreaterThanZero->3:GreaterThan 92502
                _9ChildNodes = ChildNodes(clone target);
                _10Count = Count(_9ChildNodes);
                _11Zero = Zero();
                _12GreaterThan = GreaterThan(_10Count, _11Zero);
                if (_12GreaterThan)
                  {
                    Func[Random, Int32] _13Pass-through: function1;// 0:Pass-through: function1 92515
                    Random _14RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 92522
                    Func[Int32] _15Bind;// 0:RandomArray-ext->4:Bind 92519
                    IArray[Int32] _16Range;// 2:MapRange->2:Range 92529
                    Func[Int32, INode] _17Pass-through: function1;// 0:Pass-through: function1 92527
                    IArray[INode] _18Map;// 2:MapRange->3:Map 92528
                    Int32 _19Count;// 10:RandomizeArray-ext->4:Count 92523
                    IArray[Int32] _20ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 92518
                    IArray[INode] _21Map;// 5:SelectByIndex->2:Map 92510
                    _13Pass-through: function1 = (Random x0) => 
                      {
                        IArray[Int32] _0Range;// 2:MapRange->2:Range 92529
                        Func[Int32, INode] _1Pass-through: function1;// 0:Pass-through: function1 92527
                        IArray[INode] _2Map;// 2:MapRange->3:Map 92528
                        Int32 _3Count;// 1:ArrayRandomIndices-ext->4:Count 92521
                        _0Range = Range(_8Count);
                        _1Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Count;// 7:AtModulo-ext->6:Count 92538
                            Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 92537
                            Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 92536
                            Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 92535
                            INode _5At;// 7:AtModulo-ext->3:At 92532
                            _0Count = Count(_9ChildNodes);
                            _1Modulo = Modulo(x0, _0Count);
                            _2Zero = Zero();
                            _3LessThan = LessThan(_1Modulo, _2Zero);
                            _5At = At(_9ChildNodes, if (_3LessThan)
                              {
                                Int32 _4Add;// 7:AtModulo-ext->8:Add 92539
                                _4Add = Add(_1Modulo, _0Count);
                                _4Add;
                                }else
                              {
                                _1Modulo;
                                });
                            _5At;
                            };
                        _2Map = Map(_0Range, _1Pass-through: function1);
                        _3Count = Count(_2Map);
                        PseudoRandomInt(x0, _3Count);
                        };
                    _14RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _15Bind = Bind(_13Pass-through: function1, _14RandomNumberGenerator);
                    _16Range = Range(_8Count);
                    _17Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Count;// 7:AtModulo-ext->6:Count 92538
                        Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 92537
                        Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 92536
                        Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 92535
                        INode _5At;// 7:AtModulo-ext->3:At 92532
                        _0Count = Count(_9ChildNodes);
                        _1Modulo = Modulo(x0, _0Count);
                        _2Zero = Zero();
                        _3LessThan = LessThan(_1Modulo, _2Zero);
                        _5At = At(_9ChildNodes, if (_3LessThan)
                          {
                            Int32 _4Add;// 7:AtModulo-ext->8:Add 92539
                            _4Add = Add(_1Modulo, _0Count);
                            _4Add;
                            }else
                          {
                            _1Modulo;
                            });
                        _5At;
                        };
                    _18Map = Map(_16Range, _17Pass-through: function1);
                    _19Count = Count(_18Map);
                    _20ArrayOfFunction = ArrayOfFunction(_15Bind, _19Count);
                    _21Map = Map(_20ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 92511
                        _0At = At(_18Map, x0);
                        _0At;
                        });
                    _21Map;
                    }else
                  {
                    _9ChildNodes;
                    };
                }else
              {
                IArray[Int32] _22Range;// 2:MapRange->2:Range 92529
                IArray[INode] _23ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 92505
                Func[Int32, INode] _24Pass-through: function1;// 0:Pass-through: function1 92527
                IArray[INode] _25Map;// 2:MapRange->3:Map 92528
                _22Range = Range(_8Count);
                _23ChildNodes = ChildNodes(clone target);
                _24Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Count;// 7:AtModulo-ext->6:Count 92538
                    Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 92537
                    Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 92536
                    Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 92535
                    INode _5At;// 7:AtModulo-ext->3:At 92532
                    _0Count = Count(_23ChildNodes);
                    _1Modulo = Modulo(x0, _0Count);
                    _2Zero = Zero();
                    _3LessThan = LessThan(_1Modulo, _2Zero);
                    _5At = At(_23ChildNodes, if (_3LessThan)
                      {
                        Int32 _4Add;// 7:AtModulo-ext->8:Add 92539
                        _4Add = Add(_1Modulo, _0Count);
                        _4Add;
                        }else
                      {
                        _1Modulo;
                        });
                    _5At;
                    };
                _25Map = Map(_22Range, _24Pass-through: function1);
                _25Map;
                };
            }else
          {
            Int32 _26Count;// 17:ClonerChildNodes-ext->9:Count 92540
            IArray[INode] _27ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 92541
            _26Count = Count(_7Map);
            _27ArrayOf = ArrayOf(clone target, _26Count);
            _27ArrayOf;
            }, _7Map, (INode x0, Matrix x1) => 
          {
            TriMesh _0MeshFromNode;// 12:ClonerTransformChildMeshes-ext->0:MeshFromNode 92583
            IArray[Vector3] _1MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 92581
            Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 92578
            IArray[Vector3] _3Map;// 2:DeformMeshPoints->1:Map 92580
            TriMesh _4SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 92579
            _0MeshFromNode = MeshFromNode(x0);
            _1MeshVertices = MeshVertices(_0MeshFromNode);
            _2Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 13:TransformMesh->0:Transform 92582
                _0Transform = Transform(x0, x1);
                _0Transform;
                };
            _3Map = Map(_1MeshVertices, _2Pass-through: function1);
            _4SetMeshVertices = SetMeshVertices(_0MeshFromNode, _3Map);
            _4SetMeshVertices;
            });
        _28Combine;
        });
    _2CombineAllMeshes = CombineAllMeshes(if (include original)
      {
        IArray[TriMesh] _1Append;// 39:AppendIf->1:Append 92481
        _1Append = Append(_0IfThen, mesh);
        _1Append;
        }else
      {
        _0IfThen;
        });
    _10IgnoreFirst = IgnoreFirst(mesh, if (keep custom channels)
      {
        Int32 _4Constant;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->0:Constant 92431
        IArray[Int32] _5Range;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->1:Range 92430
        Int32 _6Two;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->4:Two 92432
        IArray[Int32] _7Skip;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->3:Skip 92429
        IArray[Int32] _8Filter;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->13:Filter 92428
        TriMesh _9Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->6:Aggregate 92427
        _4Constant = 100;
        _5Range = Range(_4Constant);
        _6Two = Two();
        _7Skip = Skip(_5Range, _6Two);
        _8Filter = Filter(_7Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 92445
            Boolean _1Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 92444
            MapChannel _4Pass-through: any;// 0:Pass-through: any 92436
            Object _5Null;// 6:IsNullFix2-ext->3:Null 92440
            Object _6As;// 6:IsNullFix2-ext->23:As 92438
            Boolean _7Equal;// 6:IsNullFix2-ext->1:Equal 92437
            Boolean _8Not;// 12:MapChannelExists-ext->4:Not 92435
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _4Pass-through: any = if (_1Equal)
              {
                MapChannel _2TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 92446
                _2TopologyChannel = TopologyChannel(mesh);
                _2TopologyChannel;
                }else
              {
                MapChannel _3GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 92447
                _3GetMapChannel = GetMapChannel(mesh, x0);
                _3GetMapChannel;
                };
            _5Null = Null();
            _6As = As(_4Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 92439
                _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                _0IgnoreFirst;
                });
            _7Equal = Equal(_6As, _5Null);
            _8Not = Not(_7Equal);
            _8Not;
            });
        _9Aggregate = Aggregate(_8Filter, _2CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer-ext->10:TryCatch 92451
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->7:IgnoreFirst 92473
                Int32 _1Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 92465
                Boolean _2Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 92464
                MapChannel _5Pass-through: any;// 0:Pass-through: any 92456
                Object _6Null;// 6:IsNullFix2-ext->3:Null 92460
                Object _7As;// 6:IsNullFix2-ext->23:As 92458
                Boolean _8Equal;// 6:IsNullFix2-ext->1:Equal 92457
                Boolean _9Not;// 5:MapChannelExists-ext->4:Not 92455
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _5Pass-through: any = if (_2Equal)
                  {
                    MapChannel _3TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 92466
                    _3TopologyChannel = TopologyChannel(mesh);
                    _3TopologyChannel;
                    }else
                  {
                    MapChannel _4GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 92467
                    _4GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _4GetMapChannel;
                    };
                _6Null = Null();
                _7As = As(_5Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 92459
                    _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                    _0IgnoreFirst;
                    });
                _8Equal = Equal(_7As, _6Null);
                _9Not = Not(_8Equal);
                if (_9Not)
                  {
                    MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->1:GetMapChannel 92470
                    IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer-ext->8:MapChannelVertexBuffer 92469
                    IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer-ext->0:MeshIndices 92471
                    TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->7:SetMapChannel 92468
                    _10GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                    _12MeshIndices = MeshIndices(x0);
                    _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                    _13SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer-ext->11:IgnoreFirst 92472
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _9Aggregate;
        }else
      {
        _2CombineAllMeshes;
        });
    _10IgnoreFirst;
    }