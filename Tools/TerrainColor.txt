(InstanceState state, Int32 channel, TriMesh mesh, Single sealevel, Vector3 water color, Single snowline, Vector3 snow color, Vector3 default color) => 
  {
    Int32 _0Constant;// 0:MapChannelOrGeometrySet-ext->0:Constant 108990
    Boolean _1Equal;// 0:MapChannelOrGeometrySet-ext->6:Equal 108989
    IArray[Int32] _2MeshIndices;// 0:MapChannelFromFaceVertex-ext->3:MeshIndices 108998
    IArray[Int32] _3Indices;// 4:MapIndices-ext->4:Indices 108997
    Func[Int32, Vector3] _4Pass-through: function1;// 0:Pass-through: function1 108980
    Func[Int32, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 108983
    IArray[Vector3] _6Map;// 4:MapIndices-ext->2:Map 108996
    IArray[Int32] _7Indices;// 0:MapChannelFromFaceVertex-ext->5:Indices 108999
    _0Constant = -3;
    _1Equal = Equal(_0Constant, channel);
    _2MeshIndices = MeshIndices(mesh);
    _3Indices = Indices(_2MeshIndices);
    _4Pass-through: function1 = (Int32 x0) => 
      {
        Face3 _0MeshFace;// 1:MeshFace 109010
        Vector3 _1FaceMidpoint;// 18:FaceMidpoint 109009
        Single _2Z;// 5:Z 109008
        Boolean _3LessThanOrEqual;// 9:LessThanOrEqual 109007
        _0MeshFace = MeshFace(mesh, x0);
        _1FaceMidpoint = FaceMidpoint(_0MeshFace);
        _2Z = Z(_1FaceMidpoint);
        _3LessThanOrEqual = LessThanOrEqual(_2Z, sealevel);
        if (_3LessThanOrEqual)
          {
            water color;
            }else
          {
            Boolean _4GreaterThan;// 11:GreaterThan 109015
            _4GreaterThan = GreaterThan(_2Z, snowline);
            if (_4GreaterThan)
              {
                snow color;
                }else
              {
                default color;
                };
            };
        };
    _5Pass-through: function1 = (Int32 x0) => 
      {
        Int32 _0Constant;// 2:Three->0:Constant 109003
        Int32 _1Divide;// 6:DivideByThree->1:Divide 109002
        Vector3 _2Apply1;// 15:MapChannelFromFace-ext->5:Apply1 109000
        _0Constant = 3;
        _1Divide = Divide(x0, _0Constant);
        _2Apply1 = Apply1(_4Pass-through: function1, _1Divide);
        _2Apply1;
        };
    _6Map = Map(_3Indices, _5Pass-through: function1);
    _7Indices = Indices(_6Map);
    if (_1Equal)
      {
        MeshData _8MeshData;// 0:MapChannelOrGeometrySet-ext->9:MeshData 108992
        TriMesh _9CreateMeshWithMeshData;// 0:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 108991
        _8MeshData = MeshData(mesh);
        _9CreateMeshWithMeshData = CreateMeshWithMeshData(_6Map, _7Indices, _8MeshData);
        _9CreateMeshWithMeshData;
        }else
      {
        TriMesh _10SetMapChannel;// 0:MapChannelOrGeometrySet-ext->0:SetMapChannel 108993
        _10SetMapChannel = SetMapChannel(mesh, channel, _6Map, _7Indices);
        _10SetMapChannel;
        };
    }