(InstanceState state, TriMesh mesh, Boolean useGizmoXform, INode gizmo, Matrix modifierTransform, Int32 numIterations, Single roughness, Int32 phase, Single frequency, Single scale, Single strengthX, Single strengthY, Single strengthZ, Int32 seed) => 
  {
    IArray[Vector3] _0MeshVertices;// 0:NoiseMesh->15:MeshVertices 121382
    Int32 _1Constant;// 72:NoiseDeformerNoiseInit->0:Constant 121848
    Int32 _2One;// 126:PlusOne->1:One 121846
    Int32 _3Add;// 126:PlusOne->0:Add 121845
    IArray[Int32] _4Range;// 72:NoiseDeformerNoiseInit->93:Range 121843
    Int32 _5Constant;// 72:NoiseDeformerNoiseInit->0:Constant 121870
    IArray[Int32] _6Range;// 72:NoiseDeformerNoiseInit->105:Range 121869
    IArray[IArray[Single]] _7Map;// 72:NoiseDeformerNoiseInit->94:Map 121842
    IArray[IArray[Single]] _8Concatenate;// 72:NoiseDeformerNoiseInit->70:Concatenate 121840
    IArray[Int32] _9Indices;// 72:NoiseDeformerNoiseInit->2:Indices 121894
    Int32 _10Add;// 72:NoiseDeformerNoiseInit->21:Add 121897
    Int32 _11Two;// 72:NoiseDeformerNoiseInit->24:Two 121900
    Int32 _12Add;// 72:NoiseDeformerNoiseInit->22:Add 121896
    IArray[Int32] _13Range;// 72:NoiseDeformerNoiseInit->25:Range 121895
    Int32 _14Count;// 3:LastIndex->2:Count 121926
    Int32 _15One;// 3:MinusOne->2:One 121925
    Int32 _16Subtract;// 3:MinusOne->1:Subtract 121924
    Int32 _17At;// 35:Last->0:At 121921
    IArray[Int32] _18Map;// 72:NoiseDeformerNoiseInit->20:Map 121912
    IArray[Int32] _19Aggregate;// 72:NoiseDeformerNoiseInit->1:Aggregate 121892
    Int32 _20Two;// 72:NoiseDeformerNoiseInit->67:Two 121940
    Int32 _21Add;// 72:NoiseDeformerNoiseInit->66:Add 121938
    IArray[Int32] _22Range;// 72:NoiseDeformerNoiseInit->69:Range 121937
    IArray[Int32] _23Map;// 72:NoiseDeformerNoiseInit->82:Map 121935
    IArray[Int32] _24Map;// 79:SelectByIndex->2:Map 121945
    IArray[Tuple[Int32, Int32]] _25Combine;// 86:ZipToTuple->0:Combine 121933
    IArray[Int32] _26SetValues;// 72:NoiseDeformerNoiseInit->76:SetValues 121889
    Tuple[IArray[IArray[Single]], IArray[Int32]] _27Pair;// 72:NoiseDeformerNoiseInit->87:Pair 121839
    Func[Vector3, Vector3] _28Bind2of2;// 0:NoiseMesh->5:Bind2of2 121383
    IArray[Vector3] _29ParallelMap;// 0:NoiseMesh->11:ParallelMap 121381
    TriMesh _30SetMeshVertices;// 0:NoiseMesh->18:SetMeshVertices 121379
    _0MeshVertices = MeshVertices(mesh);
    _1Constant = 256;
    _2One = One();
    _3Add = Add(_1Constant, _2One);
    _4Range = Range(_3Add);
    _5Constant = 3;
    _6Range = Range(_5Constant);
    _7Map = Map(_4Range, (Int32 x0) => 
      {
        Func[Int32, Single] _0Bind1of2;// 72:NoiseDeformerNoiseInit->116:Bind1of2 121871
        IArray[Single] _1Map;// 72:NoiseDeformerNoiseInit->108:Map 121868
        Int32 _2Zero;// 118:ArrayToVector3->2:Zero 121863
        Single _3At;// 118:ArrayToVector3->1:At 121862
        Int32 _4One;// 118:ArrayToVector3->3:One 121865
        Single _5At;// 118:ArrayToVector3->5:At 121864
        Int32 _6Two;// 118:ArrayToVector3->4:Two 121867
        Single _7At;// 118:ArrayToVector3->6:At 121866
        Vector3 _8Vector3;// 118:ArrayToVector3->7:Vector3 121861
        Vector3 _9Normalize;// 72:NoiseDeformerNoiseInit->120:Normalize 121859
        Single _10X;// 117:Vector3ToArray->1:X 121856
        IArray[Single] _11Unit;// 4:Array3->2:Unit 121855
        Single _12Y;// 117:Vector3ToArray->2:Y 121857
        IArray[Single] _13Append;// 4:Array3->3:Append 121854
        Single _14Z;// 117:Vector3ToArray->3:Z 121858
        IArray[Single] _15Append;// 4:Array3->6:Append 121853
        _0Bind1of2 = Bind1of2((Int32 x0, Int32 x1) => 
          {
            Int32 _0Count;// 72:NoiseDeformerNoiseInit->114:Count 121884
            Int32 _1Multiply;// 72:NoiseDeformerNoiseInit->115:Multiply 121883
            Int32 _2Add;// 72:NoiseDeformerNoiseInit->113:Add 121881
            Int32 _3RandInt;// 72:NoiseDeformerNoiseInit->97:RandInt 121879
            Single _4AsFloat;// 72:NoiseDeformerNoiseInit->121:AsFloat 121878
            Single _5Abs;// 72:NoiseDeformerNoiseInit->123:Abs 121877
            Int32 _6AsInt;// 72:NoiseDeformerNoiseInit->122:AsInt 121876
            Int32 _7Add;// 72:NoiseDeformerNoiseInit->99:Add 121886
            Int32 _8Modulo;// 72:NoiseDeformerNoiseInit->98:Modulo 121875
            Int32 _9Subtract;// 72:NoiseDeformerNoiseInit->104:Subtract 121874
            Single _10AsFloat;// 72:NoiseDeformerNoiseInit->100:AsFloat 121873
            Single _11AsFloat;// 72:NoiseDeformerNoiseInit->103:AsFloat 121888
            Single _12Divide;// 72:NoiseDeformerNoiseInit->101:Divide 121872
            _0Count = Count(_4Range);
            _1Multiply = Multiply(_0Count, x1);
            _2Add = Add(x0, _1Multiply);
            _3RandInt = RandInt(seed, _2Add);
            _4AsFloat = AsFloat(_3RandInt);
            _5Abs = Abs(_4AsFloat);
            _6AsInt = AsInt(_5Abs);
            _7Add = Add(_1Constant, _1Constant);
            _8Modulo = Modulo(_6AsInt, _7Add);
            _9Subtract = Subtract(_8Modulo, _1Constant);
            _10AsFloat = AsFloat(_9Subtract);
            _11AsFloat = AsFloat(_1Constant);
            _12Divide = Divide(_10AsFloat, _11AsFloat);
            _12Divide;
            }, x0);
        _1Map = Map(_6Range, _0Bind1of2);
        _2Zero = Zero();
        _3At = At(_1Map, _2Zero);
        _4One = One();
        _5At = At(_1Map, _4One);
        _6Two = Two();
        _7At = At(_1Map, _6Two);
        _8Vector3 = Vector3(_3At, _5At, _7At);
        _9Normalize = Normalize(_8Vector3);
        _10X = X(_9Normalize);
        _11Unit = Unit(_10X);
        _12Y = Y(_9Normalize);
        _13Append = Append(_11Unit, _12Y);
        _14Z = Z(_9Normalize);
        _15Append = Append(_13Append, _14Z);
        _15Append;
        });
    _8Concatenate = Concatenate(_7Map, _7Map);
    _9Indices = Indices(_7Map);
    _10Add = Add(_1Constant, _1Constant);
    _11Two = Two();
    _12Add = Add(_10Add, _11Two);
    _13Range = Range(_12Add);
    _14Count = Count(_9Indices);
    _15One = One();
    _16Subtract = Subtract(_14Count, _15One);
    _17At = At(_9Indices, _16Subtract);
    _18Map = Map(_9Indices, (Int32 x0) => 
      {
        Int32 _0Add;// 72:NoiseDeformerNoiseInit->36:Add 121919
        Int32 _1RandInt;// 72:NoiseDeformerNoiseInit->34:RandInt 121917
        Single _2AsFloat;// 72:NoiseDeformerNoiseInit->92:AsFloat 121916
        Single _3Abs;// 72:NoiseDeformerNoiseInit->90:Abs 121915
        Int32 _4AsInt;// 72:NoiseDeformerNoiseInit->91:AsInt 121914
        Int32 _5Modulo;// 72:NoiseDeformerNoiseInit->40:Modulo 121913
        _0Add = Add(_17At, x0);
        _1RandInt = RandInt(seed, _0Add);
        _2AsFloat = AsFloat(_1RandInt);
        _3Abs = Abs(_2AsFloat);
        _4AsInt = AsInt(_3Abs);
        _5Modulo = Modulo(_4AsInt, _1Constant);
        _5Modulo;
        });
    _19Aggregate = Aggregate(_9Indices, _13Range, (IArray[Int32] x0, Int32 x1) => 
      {
        Int32 _0At;// 72:NoiseDeformerNoiseInit->52:At 121910
        Int32 _1At;// 72:NoiseDeformerNoiseInit->60:At 121909
        Tuple[Int32, Int32] _2Pair;// 72:NoiseDeformerNoiseInit->57:Pair 121907
        IArray[Tuple[Int32, Int32]] _3Unit;// 59:Array2->2:Unit 121906
        Int32 _4At;// 72:NoiseDeformerNoiseInit->30:At 121930
        Tuple[Int32, Int32] _5Pair;// 72:NoiseDeformerNoiseInit->55:Pair 121929
        IArray[Tuple[Int32, Int32]] _6Append;// 59:Array2->3:Append 121905
        IArray[Int32] _7SetValues;// 72:NoiseDeformerNoiseInit->54:SetValues 121901
        _0At = At(_18Map, x1);
        _1At = At(x0, _0At);
        _2Pair = Pair(x1, _1At);
        _3Unit = Unit(_2Pair);
        _4At = At(x0, x1);
        _5Pair = Pair(_0At, _4At);
        _6Append = Append(_3Unit, _5Pair);
        _7SetValues = SetValues(x0, _6Append);
        _7SetValues;
        });
    _20Two = Two();
    _21Add = Add(_1Constant, _20Two);
    _22Range = Range(_21Add);
    _23Map = Map(_22Range, (Int32 x0) => 
      {
        Int32 _0Add;// 72:NoiseDeformerNoiseInit->83:Add 121941
        _0Add = Add(x0, _1Constant);
        _0Add;
        });
    _24Map = Map(_22Range, (Int32 x0) => 
      {
        Int32 _0At;// 79:SelectByIndex->3:At 121946
        _0At = At(_19Aggregate, x0);
        _0At;
        });
    _25Combine = Combine(_23Map, _24Map, (Int32 x0, Int32 x1) => 
      {
        Tuple[Int32, Int32] _0Pair;// 86:ZipToTuple->4:Pair 121934
        _0Pair = Pair(x0, x1);
        _0Pair;
        });
    _26SetValues = SetValues(_19Aggregate, _25Combine);
    _27Pair = Pair(_8Concatenate, _26SetValues);
    _28Bind2of2 = Bind2of2((Vector3 x0, Tuple[IArray[IArray[Single]], IArray[Int32]] x1) => 
      {
        Matrix _8Pass-through: Matrix;// 0:Pass-through: Matrix 121371
        Matrix _9InvertMatrix;// 0:NoiseDeformer->79:InvertMatrix 121398
        Vector3 _10Transform;// 0:NoiseDeformer->78:Transform 121397
        Single _11FloatOne;// 0:NoiseDeformer->40:FloatOne 121829
        Single _12Divide;// 0:NoiseDeformer->41:Divide 121828
        Vector3 _13MultiplyByScalar;// 0:NoiseDeformer->16:MultiplyByScalar 121826
        Vector3 _14Constant;// 0:NoiseDeformer->0:Constant 121830
        Vector3 _15Add;// 0:NoiseDeformer->18:Add 121825
        Single _16Y;// 0:NoiseDeformer->6:Y 121823
        Single _17Z;// 0:NoiseDeformer->7:Z 121831
        Single _18Apply2;// 0:NoiseDeformer->4:Apply2 121402
        Single _19X;// 0:NoiseDeformer->5:X 121834
        Single _20Apply2;// 0:NoiseDeformer->2:Apply2 121833
        Single _21Apply2;// 0:NoiseDeformer->15:Apply2 121836
        Vector3 _22Vector3;// 0:NoiseDeformer->14:Vector3 121400
        Vector3 _23Vector3;// 13:Vector3 121973
        Vector3 _24Multiply;// 0:NoiseDeformer->22:Multiply 121399
        Vector3 _25Add;// 0:NoiseDeformer->25:Add 121394
        Vector3 _26Transform;// 0:NoiseDeformer->83:Transform 121393
        _8Pass-through: Matrix = if (useGizmoXform)
          {
            Boolean _0IsValidNode;// 1:GizmoTransformInLocalSpace->35:IsValidNode 121953
            _0IsValidNode = IsValidNode(gizmo);
            if (_0IsValidNode)
              {
                Boolean _1IsValidNode;// 3:ValidNodeWorldTransform->2:IsValidNode 121959
                Matrix _4InvertMatrix;// 37:MaxtoolMatrixWorldToLocalTransform->2:InvertMatrix 121963
                Matrix _5Multiply;// 32:NodeToLocalTransform->18:Multiply 121956
                _1IsValidNode = IsValidNode(gizmo);
                _4InvertMatrix = InvertMatrix(modifierTransform);
                _5Multiply = Multiply(if (_1IsValidNode)
                    {
                      Matrix _2WorldTransform;// 3:ValidNodeWorldTransform->1:WorldTransform 121960
                      _2WorldTransform = WorldTransform(gizmo);
                      _2WorldTransform;
                      }else
                    {
                      Matrix _3MatrixIdentity;// 3:ValidNodeWorldTransform->4:MatrixIdentity 121961
                      _3MatrixIdentity = MatrixIdentity();
                      _3MatrixIdentity;
                      }, _4InvertMatrix);
                _5Multiply;
                }else
              {
                Matrix _6MatrixIdentity;// 1:GizmoTransformInLocalSpace->40:MatrixIdentity 121964
                _6MatrixIdentity = MatrixIdentity();
                _6MatrixIdentity;
                };
            }else
          {
            Matrix _7MatrixIdentity;// 12:MatrixIdentity 121967
            _7MatrixIdentity = MatrixIdentity();
            _7MatrixIdentity;
            };
        _9InvertMatrix = InvertMatrix(_8Pass-through: Matrix);
        _10Transform = Transform(x0, _9InvertMatrix);
        _11FloatOne = FloatOne();
        _12Divide = Divide(_11FloatOne, scale);
        _13MultiplyByScalar = MultiplyByScalar(_10Transform, _12Divide);
        _14Constant = new Microsoft.Xna.Framework.Vector3(0.5, 0.5, 0.5);
        _15Add = Add(_13MultiplyByScalar, _14Constant);
        _16Y = Y(_15Add);
        _17Z = Z(_15Add);
        _18Apply2 = Apply2((Single x0, Single x1) => 
          {
            Single _0FloatZero;// 27:NoiseDeformerfBm1->33:FloatZero 121423
            IArray[Single] _1Unit;// 37:Array2->2:Unit 121422
            Single _2FloatZero;// 27:NoiseDeformerfBm1->38:FloatZero 121424
            IArray[Single] _3Append;// 37:Array2->3:Append 121421
            Single _4AsFloat;// 0:NoiseDeformer->13:AsFloat 121808
            Int32 _5AsInt;// 27:NoiseDeformerfBm1->21:AsInt 121425
            Single _6FloatOne;// 27:NoiseDeformerfBm1->5:FloatOne 121439
            Int32 _7AsInt;// 27:NoiseDeformerfBm1->8:AsInt 121440
            Single _8Constant;// 0:NoiseDeformer->0:Constant 121809
            IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1->7:GenerateN 121438
            Single _10FloatOne;// 0:NoiseDeformer->46:FloatOne 121811
            Single _11Subtract;// 0:NoiseDeformer->3:Subtract 121810
            Single _12NegativeFloat;// 27:NoiseDeformerfBm1->16:NegativeFloat 121447
            IArray[Single] _13Map;// 27:NoiseDeformerfBm1->14:Map 121437
            Single _14AsFloat;// 0:NoiseDeformer->43:AsFloat 121816
            Single _15Constant;// 0:NoiseDeformer->0:Constant 121819
            Single _16Multiply;// 0:NoiseDeformer->30:Multiply 121818
            Single _17Constant;// 0:NoiseDeformer->0:Constant 121821
            Single _18Constant;// 0:NoiseDeformer->0:Constant 121822
            Single _19Divide;// 0:NoiseDeformer->31:Divide 121820
            Single _20Multiply;// 0:NoiseDeformer->39:Multiply 121817
            Single _21Multiply;// 0:NoiseDeformer->38:Multiply 121815
            Vector3 _22Vector3;// 0:NoiseDeformer->0:Vector3 121812
            IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1->30:GenerateN 121796
            IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1->72:PairItem1 121800
            Single _25FloatOne;// 27:NoiseDeformerfBm1->53:FloatOne 121807
            IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1->35:GenerateN 121418
            Int32 _27Count;// 3:LastIndex->2:Count 121417
            Int32 _28One;// 3:MinusOne->2:One 121416
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 121415
            IArray[Single] _30At;// 68:Last->0:At 121412
            Int32 _31Zero;// 69:First->2:Zero 121410
            Single _32At;// 69:First->0:At 121409
            _0FloatZero = FloatZero();
            _1Unit = Unit(_0FloatZero);
            _2FloatZero = FloatZero();
            _3Append = Append(_1Unit, _2FloatZero);
            _4AsFloat = AsFloat(numIterations);
            _5AsInt = AsInt(_4AsFloat);
            _6FloatOne = FloatOne();
            _7AsInt = AsInt(_4AsFloat);
            _8Constant = 2;
            _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
              {
                Single _0Multiply;// 27:NoiseDeformerfBm1->9:Multiply 121442
                _0Multiply = Multiply(_8Constant, x0);
                _0Multiply;
                });
            _10FloatOne = FloatOne();
            _11Subtract = Subtract(_10FloatOne, roughness);
            _12NegativeFloat = NegativeFloat(_11Subtract);
            _13Map = Map(_9GenerateN, (Single x0) => 
              {
                Single _0Pow;// 27:NoiseDeformerfBm1->15:Pow 121445
                _0Pow = Pow(x0, _12NegativeFloat);
                _0Pow;
                });
            _14AsFloat = AsFloat(phase);
            _15Constant = 0.005;
            _16Multiply = Multiply(frequency, _15Constant);
            _17Constant = 1200;
            _18Constant = 4800;
            _19Divide = Divide(_17Constant, _18Constant);
            _20Multiply = Multiply(_16Multiply, _19Divide);
            _21Multiply = Multiply(_14AsFloat, _20Multiply);
            _22Vector3 = Vector3(x0, x1, _21Multiply);
            _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
              {
                Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1->22:MultiplyByScalar 121798
                _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                _0MultiplyByScalar;
                });
            _24PairItem1 = PairItem1(x1);
            _25FloatOne = FloatOne();
            _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
              {
                Int32 _0One;// 49:Second->2:One 121452
                Single _1At;// 49:Second->0:At 121451
                Int32 _2AsInt;// 27:NoiseDeformerfBm1->55:AsInt 121449
                Single _3At;// 27:NoiseDeformerfBm1->60:At 121435
                Single _4Constant;// 25:NoiseDeformerNoiseVarSetup->0:Constant 121490
                Vector3 _5At;// 27:NoiseDeformerfBm1->54:At 121794
                Single _6X;// 2:Vector3ToArray->1:X 121501
                IArray[Single] _7Unit;// 4:Array3->2:Unit 121500
                Single _8Y;// 2:Vector3ToArray->2:Y 121502
                IArray[Single] _9Append;// 4:Array3->3:Append 121499
                Single _10Z;// 2:Vector3ToArray->3:Z 121503
                IArray[Single] _11Append;// 4:Array3->6:Append 121498
                Int32 _12Zero;// 77:NoiseDeformerNoise3->3:Zero 121524
                Int32 _13Zero;// 4:ValidIndex->2:Zero 121507
                Int32 _14Count;// 4:ValidIndex->4:Count 121511
                Int32 _15One;// 5:MinusOne->2:One 121510
                Int32 _16Subtract;// 5:MinusOne->1:Subtract 121509
                Int32 _17ClampInt;// 4:ValidIndex->3:ClampInt 121506
                Single _18At;// 1:Vector3At->3:At 121493
                Single _19Add;// 25:NoiseDeformerNoiseVarSetup->5:Add 121489
                Int32 _20Floor;// 25:NoiseDeformerNoiseVarSetup->7:Floor 121488
                Int32 _21Constant;// 25:NoiseDeformerNoiseVarSetup->0:Constant 121512
                Int32 _22And;// 25:NoiseDeformerNoiseVarSetup->8:And 121487
                Int32 _23One;// 13:PlusOne->1:One 121516
                Int32 _24Add;// 13:PlusOne->0:Add 121515
                Int32 _25And;// 25:NoiseDeformerNoiseVarSetup->14:And 121513
                Tuple[Int32, Int32] _26Pair;// 25:NoiseDeformerNoiseVarSetup->3:Pair 121486
                Int32 _27Floor;// 25:NoiseDeformerNoiseVarSetup->22:Floor 121521
                Single _28AsFloat;// 25:NoiseDeformerNoiseVarSetup->17:AsFloat 121520
                Single _29Subtract;// 25:NoiseDeformerNoiseVarSetup->16:Subtract 121518
                Single _30FloatOne;// 25:NoiseDeformerNoiseVarSetup->20:FloatOne 121523
                Single _31Subtract;// 25:NoiseDeformerNoiseVarSetup->19:Subtract 121522
                Tuple[Single, Single] _32Pair;// 25:NoiseDeformerNoiseVarSetup->25:Pair 121517
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _33Pair;// 25:NoiseDeformerNoiseVarSetup->26:Pair 121485
                Tuple[Single, Single] _34PairItem2;// 77:NoiseDeformerNoise3->10:PairItem2 121482
                Single _35PairItem1;// 77:NoiseDeformerNoise3->12:PairItem1 121481
                IArray[Int32] _36PairItem2;// 27:NoiseDeformerfBm1->73:PairItem2 121801
                Tuple[Int32, Int32] _37PairItem1;// 77:NoiseDeformerNoise3->8:PairItem1 121535
                Int32 _38PairItem1;// 77:NoiseDeformerNoise3->9:PairItem1 121534
                Int32 _39At;// 77:NoiseDeformerNoise3->31:At 121533
                Single _40Constant;// 6:NoiseDeformerNoiseVarSetup->0:Constant 121545
                Single _41X;// 2:Vector3ToArray->1:X 121556
                IArray[Single] _42Unit;// 4:Array3->2:Unit 121555
                Single _43Y;// 2:Vector3ToArray->2:Y 121557
                IArray[Single] _44Append;// 4:Array3->3:Append 121554
                Single _45Z;// 2:Vector3ToArray->3:Z 121558
                IArray[Single] _46Append;// 4:Array3->6:Append 121553
                Int32 _47One;// 77:NoiseDeformerNoise3->4:One 121579
                Int32 _48Zero;// 4:ValidIndex->2:Zero 121562
                Int32 _49Count;// 4:ValidIndex->4:Count 121566
                Int32 _50One;// 5:MinusOne->2:One 121565
                Int32 _51Subtract;// 5:MinusOne->1:Subtract 121564
                Int32 _52ClampInt;// 4:ValidIndex->3:ClampInt 121561
                Single _53At;// 1:Vector3At->3:At 121548
                Single _54Add;// 6:NoiseDeformerNoiseVarSetup->5:Add 121544
                Int32 _55Floor;// 6:NoiseDeformerNoiseVarSetup->7:Floor 121543
                Int32 _56Constant;// 6:NoiseDeformerNoiseVarSetup->0:Constant 121567
                Int32 _57And;// 6:NoiseDeformerNoiseVarSetup->8:And 121542
                Int32 _58One;// 13:PlusOne->1:One 121571
                Int32 _59Add;// 13:PlusOne->0:Add 121570
                Int32 _60And;// 6:NoiseDeformerNoiseVarSetup->14:And 121568
                Tuple[Int32, Int32] _61Pair;// 6:NoiseDeformerNoiseVarSetup->3:Pair 121541
                Int32 _62Floor;// 6:NoiseDeformerNoiseVarSetup->22:Floor 121576
                Single _63AsFloat;// 6:NoiseDeformerNoiseVarSetup->17:AsFloat 121575
                Single _64Subtract;// 6:NoiseDeformerNoiseVarSetup->16:Subtract 121573
                Single _65FloatOne;// 6:NoiseDeformerNoiseVarSetup->20:FloatOne 121578
                Single _66Subtract;// 6:NoiseDeformerNoiseVarSetup->19:Subtract 121577
                Tuple[Single, Single] _67Pair;// 6:NoiseDeformerNoiseVarSetup->25:Pair 121572
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _68Pair;// 6:NoiseDeformerNoiseVarSetup->26:Pair 121540
                Tuple[Int32, Int32] _69PairItem1;// 77:NoiseDeformerNoise3->20:PairItem1 121537
                Int32 _70PairItem1;// 77:NoiseDeformerNoise3->19:PairItem1 121536
                Int32 _71Add;// 77:NoiseDeformerNoise3->33:Add 121531
                Int32 _72At;// 77:NoiseDeformerNoise3->107:At 121529
                Single _73Constant;// 7:NoiseDeformerNoiseVarSetup->0:Constant 121589
                Single _74X;// 2:Vector3ToArray->1:X 121600
                IArray[Single] _75Unit;// 4:Array3->2:Unit 121599
                Single _76Y;// 2:Vector3ToArray->2:Y 121601
                IArray[Single] _77Append;// 4:Array3->3:Append 121598
                Single _78Z;// 2:Vector3ToArray->3:Z 121602
                IArray[Single] _79Append;// 4:Array3->6:Append 121597
                Int32 _80Two;// 77:NoiseDeformerNoise3->5:Two 121623
                Int32 _81Zero;// 4:ValidIndex->2:Zero 121606
                Int32 _82Count;// 4:ValidIndex->4:Count 121610
                Int32 _83One;// 5:MinusOne->2:One 121609
                Int32 _84Subtract;// 5:MinusOne->1:Subtract 121608
                Int32 _85ClampInt;// 4:ValidIndex->3:ClampInt 121605
                Single _86At;// 1:Vector3At->3:At 121592
                Single _87Add;// 7:NoiseDeformerNoiseVarSetup->5:Add 121588
                Int32 _88Floor;// 7:NoiseDeformerNoiseVarSetup->7:Floor 121587
                Int32 _89Constant;// 7:NoiseDeformerNoiseVarSetup->0:Constant 121611
                Int32 _90And;// 7:NoiseDeformerNoiseVarSetup->8:And 121586
                Int32 _91One;// 13:PlusOne->1:One 121615
                Int32 _92Add;// 13:PlusOne->0:Add 121614
                Int32 _93And;// 7:NoiseDeformerNoiseVarSetup->14:And 121612
                Tuple[Int32, Int32] _94Pair;// 7:NoiseDeformerNoiseVarSetup->3:Pair 121585
                Int32 _95Floor;// 7:NoiseDeformerNoiseVarSetup->22:Floor 121620
                Single _96AsFloat;// 7:NoiseDeformerNoiseVarSetup->17:AsFloat 121619
                Single _97Subtract;// 7:NoiseDeformerNoiseVarSetup->16:Subtract 121617
                Single _98FloatOne;// 7:NoiseDeformerNoiseVarSetup->20:FloatOne 121622
                Single _99Subtract;// 7:NoiseDeformerNoiseVarSetup->19:Subtract 121621
                Tuple[Single, Single] _100Pair;// 7:NoiseDeformerNoiseVarSetup->25:Pair 121616
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _101Pair;// 7:NoiseDeformerNoiseVarSetup->26:Pair 121584
                Tuple[Int32, Int32] _102PairItem1;// 77:NoiseDeformerNoise3->51:PairItem1 121581
                Int32 _103PairItem1;// 77:NoiseDeformerNoise3->53:PairItem1 121580
                Int32 _104Add;// 77:NoiseDeformerNoise3->61:Add 121527
                IArray[Single] _105At;// 77:NoiseDeformerNoise3->60:At 121525
                Int32 _106Zero;// 62:NoiseDeformerAt3->5:Zero 121474
                Single _107At;// 62:NoiseDeformerAt3->4:At 121473
                Single _108Multiply;// 62:NoiseDeformerAt3->11:Multiply 121472
                Tuple[Single, Single] _109PairItem2;// 77:NoiseDeformerNoise3->23:PairItem2 121625
                Single _110PairItem1;// 77:NoiseDeformerNoise3->18:PairItem1 121624
                Int32 _111One;// 62:NoiseDeformerAt3->8:One 121477
                Single _112At;// 62:NoiseDeformerAt3->7:At 121476
                Single _113Multiply;// 62:NoiseDeformerAt3->12:Multiply 121475
                Single _114Add;// 62:NoiseDeformerAt3->6:Add 121471
                Tuple[Single, Single] _115PairItem2;// 77:NoiseDeformerNoise3->48:PairItem2 121627
                Single _116PairItem1;// 77:NoiseDeformerNoise3->52:PairItem1 121626
                Int32 _117Two;// 62:NoiseDeformerAt3->9:Two 121480
                Single _118At;// 62:NoiseDeformerAt3->10:At 121479
                Single _119Multiply;// 62:NoiseDeformerAt3->13:Multiply 121478
                Single _120Add;// 62:NoiseDeformerAt3->14:Add 121470
                Single _121PairItem2;// 77:NoiseDeformerNoise3->13:PairItem2 121643
                Int32 _122PairItem2;// 77:NoiseDeformerNoise3->11:PairItem2 121651
                Int32 _123At;// 77:NoiseDeformerNoise3->32:At 121650
                Int32 _124Add;// 77:NoiseDeformerNoise3->34:Add 121648
                Int32 _125At;// 77:NoiseDeformerNoise3->113:At 121647
                Int32 _126Add;// 77:NoiseDeformerNoise3->65:Add 121645
                IArray[Single] _127At;// 77:NoiseDeformerNoise3->64:At 121644
                Int32 _128Zero;// 66:NoiseDeformerAt3->5:Zero 121636
                Single _129At;// 66:NoiseDeformerAt3->4:At 121635
                Single _130Multiply;// 66:NoiseDeformerAt3->11:Multiply 121634
                Int32 _131One;// 66:NoiseDeformerAt3->8:One 121639
                Single _132At;// 66:NoiseDeformerAt3->7:At 121638
                Single _133Multiply;// 66:NoiseDeformerAt3->12:Multiply 121637
                Single _134Add;// 66:NoiseDeformerAt3->6:Add 121633
                Int32 _135Two;// 66:NoiseDeformerAt3->9:Two 121642
                Single _136At;// 66:NoiseDeformerAt3->10:At 121641
                Single _137Multiply;// 66:NoiseDeformerAt3->13:Multiply 121640
                Single _138Add;// 66:NoiseDeformerAt3->14:Add 121632
                Single _139Constant;// 42:NoiseDeformerSCurve->0:Constant 121655
                Single _140Constant;// 42:NoiseDeformerSCurve->0:Constant 121657
                Single _141Multiply;// 42:NoiseDeformerSCurve->41:Multiply 121656
                Single _142Subtract;// 42:NoiseDeformerSCurve->39:Subtract 121654
                Single _143Multiply;// 42:NoiseDeformerSCurve->35:Multiply 121659
                Single _144Multiply;// 42:NoiseDeformerSCurve->37:Multiply 121653
                Single _145FloatLerp;// 77:NoiseDeformerNoise3->68:FloatLerp 121465
                Int32 _146PairItem2;// 77:NoiseDeformerNoise3->22:PairItem2 121681
                Int32 _147Add;// 77:NoiseDeformerNoise3->38:Add 121680
                Int32 _148At;// 77:NoiseDeformerNoise3->114:At 121679
                Int32 _149Add;// 77:NoiseDeformerNoise3->71:Add 121677
                IArray[Single] _150At;// 77:NoiseDeformerNoise3->70:At 121676
                Int32 _151Zero;// 72:NoiseDeformerAt3->5:Zero 121669
                Single _152At;// 72:NoiseDeformerAt3->4:At 121668
                Single _153Multiply;// 72:NoiseDeformerAt3->11:Multiply 121667
                Single _154PairItem2;// 77:NoiseDeformerNoise3->21:PairItem2 121682
                Int32 _155One;// 72:NoiseDeformerAt3->8:One 121672
                Single _156At;// 72:NoiseDeformerAt3->7:At 121671
                Single _157Multiply;// 72:NoiseDeformerAt3->12:Multiply 121670
                Single _158Add;// 72:NoiseDeformerAt3->6:Add 121666
                Int32 _159Two;// 72:NoiseDeformerAt3->9:Two 121675
                Single _160At;// 72:NoiseDeformerAt3->10:At 121674
                Single _161Multiply;// 72:NoiseDeformerAt3->13:Multiply 121673
                Single _162Add;// 72:NoiseDeformerAt3->14:Add 121665
                Int32 _163Add;// 77:NoiseDeformerNoise3->39:Add 121702
                Int32 _164At;// 77:NoiseDeformerNoise3->115:At 121701
                Int32 _165Add;// 77:NoiseDeformerNoise3->74:Add 121699
                IArray[Single] _166At;// 77:NoiseDeformerNoise3->76:At 121698
                Int32 _167Zero;// 75:NoiseDeformerAt3->5:Zero 121691
                Single _168At;// 75:NoiseDeformerAt3->4:At 121690
                Single _169Multiply;// 75:NoiseDeformerAt3->11:Multiply 121689
                Int32 _170One;// 75:NoiseDeformerAt3->8:One 121694
                Single _171At;// 75:NoiseDeformerAt3->7:At 121693
                Single _172Multiply;// 75:NoiseDeformerAt3->12:Multiply 121692
                Single _173Add;// 75:NoiseDeformerAt3->6:Add 121688
                Int32 _174Two;// 75:NoiseDeformerAt3->9:Two 121697
                Single _175At;// 75:NoiseDeformerAt3->10:At 121696
                Single _176Multiply;// 75:NoiseDeformerAt3->13:Multiply 121695
                Single _177Add;// 75:NoiseDeformerAt3->14:Add 121687
                Single _178FloatLerp;// 77:NoiseDeformerNoise3->78:FloatLerp 121660
                Single _179Constant;// 56:NoiseDeformerSCurve->0:Constant 121706
                Single _180Constant;// 56:NoiseDeformerSCurve->0:Constant 121708
                Single _181Multiply;// 56:NoiseDeformerSCurve->41:Multiply 121707
                Single _182Subtract;// 56:NoiseDeformerSCurve->39:Subtract 121705
                Single _183Multiply;// 56:NoiseDeformerSCurve->35:Multiply 121710
                Single _184Multiply;// 56:NoiseDeformerSCurve->37:Multiply 121704
                Single _185FloatLerp;// 77:NoiseDeformerNoise3->80:FloatLerp 121464
                Int32 _186PairItem2;// 77:NoiseDeformerNoise3->49:PairItem2 121730
                Int32 _187Add;// 77:NoiseDeformerNoise3->84:Add 121729
                IArray[Single] _188At;// 77:NoiseDeformerNoise3->83:At 121728
                Int32 _189Zero;// 82:NoiseDeformerAt3->5:Zero 121721
                Single _190At;// 82:NoiseDeformerAt3->4:At 121720
                Single _191Multiply;// 82:NoiseDeformerAt3->11:Multiply 121719
                Int32 _192One;// 82:NoiseDeformerAt3->8:One 121724
                Single _193At;// 82:NoiseDeformerAt3->7:At 121723
                Single _194Multiply;// 82:NoiseDeformerAt3->12:Multiply 121722
                Single _195Add;// 82:NoiseDeformerAt3->6:Add 121718
                Single _196PairItem2;// 77:NoiseDeformerNoise3->50:PairItem2 121731
                Int32 _197Two;// 82:NoiseDeformerAt3->9:Two 121727
                Single _198At;// 82:NoiseDeformerAt3->10:At 121726
                Single _199Multiply;// 82:NoiseDeformerAt3->13:Multiply 121725
                Single _200Add;// 82:NoiseDeformerAt3->14:Add 121717
                Int32 _201Add;// 77:NoiseDeformerNoise3->88:Add 121748
                IArray[Single] _202At;// 77:NoiseDeformerNoise3->87:At 121747
                Int32 _203Zero;// 86:NoiseDeformerAt3->5:Zero 121740
                Single _204At;// 86:NoiseDeformerAt3->4:At 121739
                Single _205Multiply;// 86:NoiseDeformerAt3->11:Multiply 121738
                Int32 _206One;// 86:NoiseDeformerAt3->8:One 121743
                Single _207At;// 86:NoiseDeformerAt3->7:At 121742
                Single _208Multiply;// 86:NoiseDeformerAt3->12:Multiply 121741
                Single _209Add;// 86:NoiseDeformerAt3->6:Add 121737
                Int32 _210Two;// 86:NoiseDeformerAt3->9:Two 121746
                Single _211At;// 86:NoiseDeformerAt3->10:At 121745
                Single _212Multiply;// 86:NoiseDeformerAt3->13:Multiply 121744
                Single _213Add;// 86:NoiseDeformerAt3->14:Add 121736
                Single _214FloatLerp;// 77:NoiseDeformerNoise3->90:FloatLerp 121712
                Int32 _215Add;// 77:NoiseDeformerNoise3->94:Add 121766
                IArray[Single] _216At;// 77:NoiseDeformerNoise3->93:At 121765
                Int32 _217Zero;// 92:NoiseDeformerAt3->5:Zero 121758
                Single _218At;// 92:NoiseDeformerAt3->4:At 121757
                Single _219Multiply;// 92:NoiseDeformerAt3->11:Multiply 121756
                Int32 _220One;// 92:NoiseDeformerAt3->8:One 121761
                Single _221At;// 92:NoiseDeformerAt3->7:At 121760
                Single _222Multiply;// 92:NoiseDeformerAt3->12:Multiply 121759
                Single _223Add;// 92:NoiseDeformerAt3->6:Add 121755
                Int32 _224Two;// 92:NoiseDeformerAt3->9:Two 121764
                Single _225At;// 92:NoiseDeformerAt3->10:At 121763
                Single _226Multiply;// 92:NoiseDeformerAt3->13:Multiply 121762
                Single _227Add;// 92:NoiseDeformerAt3->14:Add 121754
                Int32 _228Add;// 77:NoiseDeformerNoise3->97:Add 121783
                IArray[Single] _229At;// 77:NoiseDeformerNoise3->98:At 121782
                Int32 _230Zero;// 96:NoiseDeformerAt3->5:Zero 121775
                Single _231At;// 96:NoiseDeformerAt3->4:At 121774
                Single _232Multiply;// 96:NoiseDeformerAt3->11:Multiply 121773
                Int32 _233One;// 96:NoiseDeformerAt3->8:One 121778
                Single _234At;// 96:NoiseDeformerAt3->7:At 121777
                Single _235Multiply;// 96:NoiseDeformerAt3->12:Multiply 121776
                Single _236Add;// 96:NoiseDeformerAt3->6:Add 121772
                Int32 _237Two;// 96:NoiseDeformerAt3->9:Two 121781
                Single _238At;// 96:NoiseDeformerAt3->10:At 121780
                Single _239Multiply;// 96:NoiseDeformerAt3->13:Multiply 121779
                Single _240Add;// 96:NoiseDeformerAt3->14:Add 121771
                Single _241FloatLerp;// 77:NoiseDeformerNoise3->100:FloatLerp 121749
                Single _242FloatLerp;// 77:NoiseDeformerNoise3->102:FloatLerp 121711
                Single _243Constant;// 58:NoiseDeformerSCurve->0:Constant 121787
                Single _244Constant;// 58:NoiseDeformerSCurve->0:Constant 121789
                Single _245Multiply;// 58:NoiseDeformerSCurve->41:Multiply 121788
                Single _246Subtract;// 58:NoiseDeformerSCurve->39:Subtract 121786
                Single _247Multiply;// 58:NoiseDeformerSCurve->35:Multiply 121791
                Single _248Multiply;// 58:NoiseDeformerSCurve->37:Multiply 121785
                Single _249FloatLerp;// 77:NoiseDeformerNoise3->104:FloatLerp 121463
                Single _250NaN;// 118:IsNaN->1:NaN 121461
                Int32 _251Compare;// 118:IsNaN->2:Compare 121460
                Int32 _252Zero;// 118:IsNaN->4:Zero 121462
                Boolean _253Equal;// 118:IsNaN->3:Equal 121459
                Single _255Multiply;// 27:NoiseDeformerfBm1->64:Multiply 121433
                Int32 _256Zero;// 48:First->2:Zero 121804
                Single _257At;// 48:First->0:At 121803
                Single _258Add;// 27:NoiseDeformerfBm1->59:Add 121432
                IArray[Single] _259Unit;// 43:Array2->2:Unit 121430
                Single _260Add;// 27:NoiseDeformerfBm1->52:Add 121806
                IArray[Single] _261Append;// 43:Array2->3:Append 121429
                _0One = One();
                _1At = At(x0, _0One);
                _2AsInt = AsInt(_1At);
                _3At = At(_13Map, _2AsInt);
                _4Constant = 4096;
                _5At = At(_23GenerateN, _2AsInt);
                _6X = X(_5At);
                _7Unit = Unit(_6X);
                _8Y = Y(_5At);
                _9Append = Append(_7Unit, _8Y);
                _10Z = Z(_5At);
                _11Append = Append(_9Append, _10Z);
                _12Zero = Zero();
                _13Zero = Zero();
                _14Count = Count(_11Append);
                _15One = One();
                _16Subtract = Subtract(_14Count, _15One);
                _17ClampInt = ClampInt(_12Zero, _13Zero, _16Subtract);
                _18At = At(_11Append, _17ClampInt);
                _19Add = Add(_4Constant, _18At);
                _20Floor = Floor(_19Add);
                _21Constant = 255;
                _22And = And(_20Floor, _21Constant);
                _23One = One();
                _24Add = Add(_22And, _23One);
                _25And = And(_24Add, _21Constant);
                _26Pair = Pair(_22And, _25And);
                _27Floor = Floor(_19Add);
                _28AsFloat = AsFloat(_27Floor);
                _29Subtract = Subtract(_19Add, _28AsFloat);
                _30FloatOne = FloatOne();
                _31Subtract = Subtract(_29Subtract, _30FloatOne);
                _32Pair = Pair(_29Subtract, _31Subtract);
                _33Pair = Pair(_26Pair, _32Pair);
                _34PairItem2 = PairItem2(_33Pair);
                _35PairItem1 = PairItem1(_34PairItem2);
                _36PairItem2 = PairItem2(x1);
                _37PairItem1 = PairItem1(_33Pair);
                _38PairItem1 = PairItem1(_37PairItem1);
                _39At = At(_36PairItem2, _38PairItem1);
                _40Constant = 4096;
                _41X = X(_5At);
                _42Unit = Unit(_41X);
                _43Y = Y(_5At);
                _44Append = Append(_42Unit, _43Y);
                _45Z = Z(_5At);
                _46Append = Append(_44Append, _45Z);
                _47One = One();
                _48Zero = Zero();
                _49Count = Count(_46Append);
                _50One = One();
                _51Subtract = Subtract(_49Count, _50One);
                _52ClampInt = ClampInt(_47One, _48Zero, _51Subtract);
                _53At = At(_46Append, _52ClampInt);
                _54Add = Add(_40Constant, _53At);
                _55Floor = Floor(_54Add);
                _56Constant = 255;
                _57And = And(_55Floor, _56Constant);
                _58One = One();
                _59Add = Add(_57And, _58One);
                _60And = And(_59Add, _56Constant);
                _61Pair = Pair(_57And, _60And);
                _62Floor = Floor(_54Add);
                _63AsFloat = AsFloat(_62Floor);
                _64Subtract = Subtract(_54Add, _63AsFloat);
                _65FloatOne = FloatOne();
                _66Subtract = Subtract(_64Subtract, _65FloatOne);
                _67Pair = Pair(_64Subtract, _66Subtract);
                _68Pair = Pair(_61Pair, _67Pair);
                _69PairItem1 = PairItem1(_68Pair);
                _70PairItem1 = PairItem1(_69PairItem1);
                _71Add = Add(_39At, _70PairItem1);
                _72At = At(_36PairItem2, _71Add);
                _73Constant = 4096;
                _74X = X(_5At);
                _75Unit = Unit(_74X);
                _76Y = Y(_5At);
                _77Append = Append(_75Unit, _76Y);
                _78Z = Z(_5At);
                _79Append = Append(_77Append, _78Z);
                _80Two = Two();
                _81Zero = Zero();
                _82Count = Count(_79Append);
                _83One = One();
                _84Subtract = Subtract(_82Count, _83One);
                _85ClampInt = ClampInt(_80Two, _81Zero, _84Subtract);
                _86At = At(_79Append, _85ClampInt);
                _87Add = Add(_73Constant, _86At);
                _88Floor = Floor(_87Add);
                _89Constant = 255;
                _90And = And(_88Floor, _89Constant);
                _91One = One();
                _92Add = Add(_90And, _91One);
                _93And = And(_92Add, _89Constant);
                _94Pair = Pair(_90And, _93And);
                _95Floor = Floor(_87Add);
                _96AsFloat = AsFloat(_95Floor);
                _97Subtract = Subtract(_87Add, _96AsFloat);
                _98FloatOne = FloatOne();
                _99Subtract = Subtract(_97Subtract, _98FloatOne);
                _100Pair = Pair(_97Subtract, _99Subtract);
                _101Pair = Pair(_94Pair, _100Pair);
                _102PairItem1 = PairItem1(_101Pair);
                _103PairItem1 = PairItem1(_102PairItem1);
                _104Add = Add(_72At, _103PairItem1);
                _105At = At(_24PairItem1, _104Add);
                _106Zero = Zero();
                _107At = At(_105At, _106Zero);
                _108Multiply = Multiply(_35PairItem1, _107At);
                _109PairItem2 = PairItem2(_68Pair);
                _110PairItem1 = PairItem1(_109PairItem2);
                _111One = One();
                _112At = At(_105At, _111One);
                _113Multiply = Multiply(_110PairItem1, _112At);
                _114Add = Add(_108Multiply, _113Multiply);
                _115PairItem2 = PairItem2(_101Pair);
                _116PairItem1 = PairItem1(_115PairItem2);
                _117Two = Two();
                _118At = At(_105At, _117Two);
                _119Multiply = Multiply(_116PairItem1, _118At);
                _120Add = Add(_114Add, _119Multiply);
                _121PairItem2 = PairItem2(_34PairItem2);
                _122PairItem2 = PairItem2(_37PairItem1);
                _123At = At(_36PairItem2, _122PairItem2);
                _124Add = Add(_123At, _70PairItem1);
                _125At = At(_36PairItem2, _124Add);
                _126Add = Add(_125At, _103PairItem1);
                _127At = At(_24PairItem1, _126Add);
                _128Zero = Zero();
                _129At = At(_127At, _128Zero);
                _130Multiply = Multiply(_121PairItem2, _129At);
                _131One = One();
                _132At = At(_127At, _131One);
                _133Multiply = Multiply(_110PairItem1, _132At);
                _134Add = Add(_130Multiply, _133Multiply);
                _135Two = Two();
                _136At = At(_127At, _135Two);
                _137Multiply = Multiply(_116PairItem1, _136At);
                _138Add = Add(_134Add, _137Multiply);
                _139Constant = 3;
                _140Constant = 2;
                _141Multiply = Multiply(_140Constant, _35PairItem1);
                _142Subtract = Subtract(_139Constant, _141Multiply);
                _143Multiply = Multiply(_35PairItem1, _35PairItem1);
                _144Multiply = Multiply(_142Subtract, _143Multiply);
                _145FloatLerp = FloatLerp(_120Add, _138Add, _144Multiply);
                _146PairItem2 = PairItem2(_69PairItem1);
                _147Add = Add(_39At, _146PairItem2);
                _148At = At(_36PairItem2, _147Add);
                _149Add = Add(_148At, _103PairItem1);
                _150At = At(_24PairItem1, _149Add);
                _151Zero = Zero();
                _152At = At(_150At, _151Zero);
                _153Multiply = Multiply(_35PairItem1, _152At);
                _154PairItem2 = PairItem2(_109PairItem2);
                _155One = One();
                _156At = At(_150At, _155One);
                _157Multiply = Multiply(_154PairItem2, _156At);
                _158Add = Add(_153Multiply, _157Multiply);
                _159Two = Two();
                _160At = At(_150At, _159Two);
                _161Multiply = Multiply(_116PairItem1, _160At);
                _162Add = Add(_158Add, _161Multiply);
                _163Add = Add(_123At, _146PairItem2);
                _164At = At(_36PairItem2, _163Add);
                _165Add = Add(_164At, _103PairItem1);
                _166At = At(_24PairItem1, _165Add);
                _167Zero = Zero();
                _168At = At(_166At, _167Zero);
                _169Multiply = Multiply(_121PairItem2, _168At);
                _170One = One();
                _171At = At(_166At, _170One);
                _172Multiply = Multiply(_154PairItem2, _171At);
                _173Add = Add(_169Multiply, _172Multiply);
                _174Two = Two();
                _175At = At(_166At, _174Two);
                _176Multiply = Multiply(_116PairItem1, _175At);
                _177Add = Add(_173Add, _176Multiply);
                _178FloatLerp = FloatLerp(_162Add, _177Add, _144Multiply);
                _179Constant = 3;
                _180Constant = 2;
                _181Multiply = Multiply(_180Constant, _110PairItem1);
                _182Subtract = Subtract(_179Constant, _181Multiply);
                _183Multiply = Multiply(_110PairItem1, _110PairItem1);
                _184Multiply = Multiply(_182Subtract, _183Multiply);
                _185FloatLerp = FloatLerp(_145FloatLerp, _178FloatLerp, _184Multiply);
                _186PairItem2 = PairItem2(_102PairItem1);
                _187Add = Add(_72At, _186PairItem2);
                _188At = At(_24PairItem1, _187Add);
                _189Zero = Zero();
                _190At = At(_188At, _189Zero);
                _191Multiply = Multiply(_35PairItem1, _190At);
                _192One = One();
                _193At = At(_188At, _192One);
                _194Multiply = Multiply(_110PairItem1, _193At);
                _195Add = Add(_191Multiply, _194Multiply);
                _196PairItem2 = PairItem2(_115PairItem2);
                _197Two = Two();
                _198At = At(_188At, _197Two);
                _199Multiply = Multiply(_196PairItem2, _198At);
                _200Add = Add(_195Add, _199Multiply);
                _201Add = Add(_125At, _186PairItem2);
                _202At = At(_24PairItem1, _201Add);
                _203Zero = Zero();
                _204At = At(_202At, _203Zero);
                _205Multiply = Multiply(_121PairItem2, _204At);
                _206One = One();
                _207At = At(_202At, _206One);
                _208Multiply = Multiply(_110PairItem1, _207At);
                _209Add = Add(_205Multiply, _208Multiply);
                _210Two = Two();
                _211At = At(_202At, _210Two);
                _212Multiply = Multiply(_196PairItem2, _211At);
                _213Add = Add(_209Add, _212Multiply);
                _214FloatLerp = FloatLerp(_200Add, _213Add, _144Multiply);
                _215Add = Add(_148At, _186PairItem2);
                _216At = At(_24PairItem1, _215Add);
                _217Zero = Zero();
                _218At = At(_216At, _217Zero);
                _219Multiply = Multiply(_35PairItem1, _218At);
                _220One = One();
                _221At = At(_216At, _220One);
                _222Multiply = Multiply(_154PairItem2, _221At);
                _223Add = Add(_219Multiply, _222Multiply);
                _224Two = Two();
                _225At = At(_216At, _224Two);
                _226Multiply = Multiply(_196PairItem2, _225At);
                _227Add = Add(_223Add, _226Multiply);
                _228Add = Add(_164At, _186PairItem2);
                _229At = At(_24PairItem1, _228Add);
                _230Zero = Zero();
                _231At = At(_229At, _230Zero);
                _232Multiply = Multiply(_121PairItem2, _231At);
                _233One = One();
                _234At = At(_229At, _233One);
                _235Multiply = Multiply(_154PairItem2, _234At);
                _236Add = Add(_232Multiply, _235Multiply);
                _237Two = Two();
                _238At = At(_229At, _237Two);
                _239Multiply = Multiply(_196PairItem2, _238At);
                _240Add = Add(_236Add, _239Multiply);
                _241FloatLerp = FloatLerp(_227Add, _240Add, _144Multiply);
                _242FloatLerp = FloatLerp(_214FloatLerp, _241FloatLerp, _184Multiply);
                _243Constant = 3;
                _244Constant = 2;
                _245Multiply = Multiply(_244Constant, _116PairItem1);
                _246Subtract = Subtract(_243Constant, _245Multiply);
                _247Multiply = Multiply(_116PairItem1, _116PairItem1);
                _248Multiply = Multiply(_246Subtract, _247Multiply);
                _249FloatLerp = FloatLerp(_185FloatLerp, _242FloatLerp, _248Multiply);
                _250NaN = NaN();
                _251Compare = Compare(_249FloatLerp, _250NaN);
                _252Zero = Zero();
                _253Equal = Equal(_251Compare, _252Zero);
                _255Multiply = Multiply(_3At, if (_253Equal)
                    {
                      Single _254FloatZero;// 77:NoiseDeformerNoise3->117:FloatZero 121792
                      _254FloatZero = FloatZero();
                      _254FloatZero;
                      }else
                    {
                      _249FloatLerp;
                      });
                _256Zero = Zero();
                _257At = At(x0, _256Zero);
                _258Add = Add(_255Multiply, _257At);
                _259Unit = Unit(_258Add);
                _260Add = Add(_1At, _25FloatOne);
                _261Append = Append(_259Unit, _260Add);
                _261Append;
                });
            _27Count = Count(_26GenerateN);
            _28One = One();
            _29Subtract = Subtract(_27Count, _28One);
            _30At = At(_26GenerateN, _29Subtract);
            _31Zero = Zero();
            _32At = At(_30At, _31Zero);
            _32At;
            }, _16Y, _17Z);
        _19X = X(_15Add);
        _20Apply2 = Apply2((Single x0, Single x1) => 
          {
            Single _0FloatZero;// 27:NoiseDeformerfBm1->33:FloatZero 121423
            IArray[Single] _1Unit;// 37:Array2->2:Unit 121422
            Single _2FloatZero;// 27:NoiseDeformerfBm1->38:FloatZero 121424
            IArray[Single] _3Append;// 37:Array2->3:Append 121421
            Single _4AsFloat;// 0:NoiseDeformer->13:AsFloat 121808
            Int32 _5AsInt;// 27:NoiseDeformerfBm1->21:AsInt 121425
            Single _6FloatOne;// 27:NoiseDeformerfBm1->5:FloatOne 121439
            Int32 _7AsInt;// 27:NoiseDeformerfBm1->8:AsInt 121440
            Single _8Constant;// 0:NoiseDeformer->0:Constant 121809
            IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1->7:GenerateN 121438
            Single _10FloatOne;// 0:NoiseDeformer->46:FloatOne 121811
            Single _11Subtract;// 0:NoiseDeformer->3:Subtract 121810
            Single _12NegativeFloat;// 27:NoiseDeformerfBm1->16:NegativeFloat 121447
            IArray[Single] _13Map;// 27:NoiseDeformerfBm1->14:Map 121437
            Single _14AsFloat;// 0:NoiseDeformer->43:AsFloat 121816
            Single _15Constant;// 0:NoiseDeformer->0:Constant 121819
            Single _16Multiply;// 0:NoiseDeformer->30:Multiply 121818
            Single _17Constant;// 0:NoiseDeformer->0:Constant 121821
            Single _18Constant;// 0:NoiseDeformer->0:Constant 121822
            Single _19Divide;// 0:NoiseDeformer->31:Divide 121820
            Single _20Multiply;// 0:NoiseDeformer->39:Multiply 121817
            Single _21Multiply;// 0:NoiseDeformer->38:Multiply 121815
            Vector3 _22Vector3;// 0:NoiseDeformer->0:Vector3 121812
            IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1->30:GenerateN 121796
            IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1->72:PairItem1 121800
            Single _25FloatOne;// 27:NoiseDeformerfBm1->53:FloatOne 121807
            IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1->35:GenerateN 121418
            Int32 _27Count;// 3:LastIndex->2:Count 121417
            Int32 _28One;// 3:MinusOne->2:One 121416
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 121415
            IArray[Single] _30At;// 68:Last->0:At 121412
            Int32 _31Zero;// 69:First->2:Zero 121410
            Single _32At;// 69:First->0:At 121409
            _0FloatZero = FloatZero();
            _1Unit = Unit(_0FloatZero);
            _2FloatZero = FloatZero();
            _3Append = Append(_1Unit, _2FloatZero);
            _4AsFloat = AsFloat(numIterations);
            _5AsInt = AsInt(_4AsFloat);
            _6FloatOne = FloatOne();
            _7AsInt = AsInt(_4AsFloat);
            _8Constant = 2;
            _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
              {
                Single _0Multiply;// 27:NoiseDeformerfBm1->9:Multiply 121442
                _0Multiply = Multiply(_8Constant, x0);
                _0Multiply;
                });
            _10FloatOne = FloatOne();
            _11Subtract = Subtract(_10FloatOne, roughness);
            _12NegativeFloat = NegativeFloat(_11Subtract);
            _13Map = Map(_9GenerateN, (Single x0) => 
              {
                Single _0Pow;// 27:NoiseDeformerfBm1->15:Pow 121445
                _0Pow = Pow(x0, _12NegativeFloat);
                _0Pow;
                });
            _14AsFloat = AsFloat(phase);
            _15Constant = 0.005;
            _16Multiply = Multiply(frequency, _15Constant);
            _17Constant = 1200;
            _18Constant = 4800;
            _19Divide = Divide(_17Constant, _18Constant);
            _20Multiply = Multiply(_16Multiply, _19Divide);
            _21Multiply = Multiply(_14AsFloat, _20Multiply);
            _22Vector3 = Vector3(x0, x1, _21Multiply);
            _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
              {
                Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1->22:MultiplyByScalar 121798
                _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                _0MultiplyByScalar;
                });
            _24PairItem1 = PairItem1(x1);
            _25FloatOne = FloatOne();
            _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
              {
                Int32 _0One;// 49:Second->2:One 121452
                Single _1At;// 49:Second->0:At 121451
                Int32 _2AsInt;// 27:NoiseDeformerfBm1->55:AsInt 121449
                Single _3At;// 27:NoiseDeformerfBm1->60:At 121435
                Single _4Constant;// 25:NoiseDeformerNoiseVarSetup->0:Constant 121490
                Vector3 _5At;// 27:NoiseDeformerfBm1->54:At 121794
                Single _6X;// 2:Vector3ToArray->1:X 121501
                IArray[Single] _7Unit;// 4:Array3->2:Unit 121500
                Single _8Y;// 2:Vector3ToArray->2:Y 121502
                IArray[Single] _9Append;// 4:Array3->3:Append 121499
                Single _10Z;// 2:Vector3ToArray->3:Z 121503
                IArray[Single] _11Append;// 4:Array3->6:Append 121498
                Int32 _12Zero;// 77:NoiseDeformerNoise3->3:Zero 121524
                Int32 _13Zero;// 4:ValidIndex->2:Zero 121507
                Int32 _14Count;// 4:ValidIndex->4:Count 121511
                Int32 _15One;// 5:MinusOne->2:One 121510
                Int32 _16Subtract;// 5:MinusOne->1:Subtract 121509
                Int32 _17ClampInt;// 4:ValidIndex->3:ClampInt 121506
                Single _18At;// 1:Vector3At->3:At 121493
                Single _19Add;// 25:NoiseDeformerNoiseVarSetup->5:Add 121489
                Int32 _20Floor;// 25:NoiseDeformerNoiseVarSetup->7:Floor 121488
                Int32 _21Constant;// 25:NoiseDeformerNoiseVarSetup->0:Constant 121512
                Int32 _22And;// 25:NoiseDeformerNoiseVarSetup->8:And 121487
                Int32 _23One;// 13:PlusOne->1:One 121516
                Int32 _24Add;// 13:PlusOne->0:Add 121515
                Int32 _25And;// 25:NoiseDeformerNoiseVarSetup->14:And 121513
                Tuple[Int32, Int32] _26Pair;// 25:NoiseDeformerNoiseVarSetup->3:Pair 121486
                Int32 _27Floor;// 25:NoiseDeformerNoiseVarSetup->22:Floor 121521
                Single _28AsFloat;// 25:NoiseDeformerNoiseVarSetup->17:AsFloat 121520
                Single _29Subtract;// 25:NoiseDeformerNoiseVarSetup->16:Subtract 121518
                Single _30FloatOne;// 25:NoiseDeformerNoiseVarSetup->20:FloatOne 121523
                Single _31Subtract;// 25:NoiseDeformerNoiseVarSetup->19:Subtract 121522
                Tuple[Single, Single] _32Pair;// 25:NoiseDeformerNoiseVarSetup->25:Pair 121517
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _33Pair;// 25:NoiseDeformerNoiseVarSetup->26:Pair 121485
                Tuple[Single, Single] _34PairItem2;// 77:NoiseDeformerNoise3->10:PairItem2 121482
                Single _35PairItem1;// 77:NoiseDeformerNoise3->12:PairItem1 121481
                IArray[Int32] _36PairItem2;// 27:NoiseDeformerfBm1->73:PairItem2 121801
                Tuple[Int32, Int32] _37PairItem1;// 77:NoiseDeformerNoise3->8:PairItem1 121535
                Int32 _38PairItem1;// 77:NoiseDeformerNoise3->9:PairItem1 121534
                Int32 _39At;// 77:NoiseDeformerNoise3->31:At 121533
                Single _40Constant;// 6:NoiseDeformerNoiseVarSetup->0:Constant 121545
                Single _41X;// 2:Vector3ToArray->1:X 121556
                IArray[Single] _42Unit;// 4:Array3->2:Unit 121555
                Single _43Y;// 2:Vector3ToArray->2:Y 121557
                IArray[Single] _44Append;// 4:Array3->3:Append 121554
                Single _45Z;// 2:Vector3ToArray->3:Z 121558
                IArray[Single] _46Append;// 4:Array3->6:Append 121553
                Int32 _47One;// 77:NoiseDeformerNoise3->4:One 121579
                Int32 _48Zero;// 4:ValidIndex->2:Zero 121562
                Int32 _49Count;// 4:ValidIndex->4:Count 121566
                Int32 _50One;// 5:MinusOne->2:One 121565
                Int32 _51Subtract;// 5:MinusOne->1:Subtract 121564
                Int32 _52ClampInt;// 4:ValidIndex->3:ClampInt 121561
                Single _53At;// 1:Vector3At->3:At 121548
                Single _54Add;// 6:NoiseDeformerNoiseVarSetup->5:Add 121544
                Int32 _55Floor;// 6:NoiseDeformerNoiseVarSetup->7:Floor 121543
                Int32 _56Constant;// 6:NoiseDeformerNoiseVarSetup->0:Constant 121567
                Int32 _57And;// 6:NoiseDeformerNoiseVarSetup->8:And 121542
                Int32 _58One;// 13:PlusOne->1:One 121571
                Int32 _59Add;// 13:PlusOne->0:Add 121570
                Int32 _60And;// 6:NoiseDeformerNoiseVarSetup->14:And 121568
                Tuple[Int32, Int32] _61Pair;// 6:NoiseDeformerNoiseVarSetup->3:Pair 121541
                Int32 _62Floor;// 6:NoiseDeformerNoiseVarSetup->22:Floor 121576
                Single _63AsFloat;// 6:NoiseDeformerNoiseVarSetup->17:AsFloat 121575
                Single _64Subtract;// 6:NoiseDeformerNoiseVarSetup->16:Subtract 121573
                Single _65FloatOne;// 6:NoiseDeformerNoiseVarSetup->20:FloatOne 121578
                Single _66Subtract;// 6:NoiseDeformerNoiseVarSetup->19:Subtract 121577
                Tuple[Single, Single] _67Pair;// 6:NoiseDeformerNoiseVarSetup->25:Pair 121572
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _68Pair;// 6:NoiseDeformerNoiseVarSetup->26:Pair 121540
                Tuple[Int32, Int32] _69PairItem1;// 77:NoiseDeformerNoise3->20:PairItem1 121537
                Int32 _70PairItem1;// 77:NoiseDeformerNoise3->19:PairItem1 121536
                Int32 _71Add;// 77:NoiseDeformerNoise3->33:Add 121531
                Int32 _72At;// 77:NoiseDeformerNoise3->107:At 121529
                Single _73Constant;// 7:NoiseDeformerNoiseVarSetup->0:Constant 121589
                Single _74X;// 2:Vector3ToArray->1:X 121600
                IArray[Single] _75Unit;// 4:Array3->2:Unit 121599
                Single _76Y;// 2:Vector3ToArray->2:Y 121601
                IArray[Single] _77Append;// 4:Array3->3:Append 121598
                Single _78Z;// 2:Vector3ToArray->3:Z 121602
                IArray[Single] _79Append;// 4:Array3->6:Append 121597
                Int32 _80Two;// 77:NoiseDeformerNoise3->5:Two 121623
                Int32 _81Zero;// 4:ValidIndex->2:Zero 121606
                Int32 _82Count;// 4:ValidIndex->4:Count 121610
                Int32 _83One;// 5:MinusOne->2:One 121609
                Int32 _84Subtract;// 5:MinusOne->1:Subtract 121608
                Int32 _85ClampInt;// 4:ValidIndex->3:ClampInt 121605
                Single _86At;// 1:Vector3At->3:At 121592
                Single _87Add;// 7:NoiseDeformerNoiseVarSetup->5:Add 121588
                Int32 _88Floor;// 7:NoiseDeformerNoiseVarSetup->7:Floor 121587
                Int32 _89Constant;// 7:NoiseDeformerNoiseVarSetup->0:Constant 121611
                Int32 _90And;// 7:NoiseDeformerNoiseVarSetup->8:And 121586
                Int32 _91One;// 13:PlusOne->1:One 121615
                Int32 _92Add;// 13:PlusOne->0:Add 121614
                Int32 _93And;// 7:NoiseDeformerNoiseVarSetup->14:And 121612
                Tuple[Int32, Int32] _94Pair;// 7:NoiseDeformerNoiseVarSetup->3:Pair 121585
                Int32 _95Floor;// 7:NoiseDeformerNoiseVarSetup->22:Floor 121620
                Single _96AsFloat;// 7:NoiseDeformerNoiseVarSetup->17:AsFloat 121619
                Single _97Subtract;// 7:NoiseDeformerNoiseVarSetup->16:Subtract 121617
                Single _98FloatOne;// 7:NoiseDeformerNoiseVarSetup->20:FloatOne 121622
                Single _99Subtract;// 7:NoiseDeformerNoiseVarSetup->19:Subtract 121621
                Tuple[Single, Single] _100Pair;// 7:NoiseDeformerNoiseVarSetup->25:Pair 121616
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _101Pair;// 7:NoiseDeformerNoiseVarSetup->26:Pair 121584
                Tuple[Int32, Int32] _102PairItem1;// 77:NoiseDeformerNoise3->51:PairItem1 121581
                Int32 _103PairItem1;// 77:NoiseDeformerNoise3->53:PairItem1 121580
                Int32 _104Add;// 77:NoiseDeformerNoise3->61:Add 121527
                IArray[Single] _105At;// 77:NoiseDeformerNoise3->60:At 121525
                Int32 _106Zero;// 62:NoiseDeformerAt3->5:Zero 121474
                Single _107At;// 62:NoiseDeformerAt3->4:At 121473
                Single _108Multiply;// 62:NoiseDeformerAt3->11:Multiply 121472
                Tuple[Single, Single] _109PairItem2;// 77:NoiseDeformerNoise3->23:PairItem2 121625
                Single _110PairItem1;// 77:NoiseDeformerNoise3->18:PairItem1 121624
                Int32 _111One;// 62:NoiseDeformerAt3->8:One 121477
                Single _112At;// 62:NoiseDeformerAt3->7:At 121476
                Single _113Multiply;// 62:NoiseDeformerAt3->12:Multiply 121475
                Single _114Add;// 62:NoiseDeformerAt3->6:Add 121471
                Tuple[Single, Single] _115PairItem2;// 77:NoiseDeformerNoise3->48:PairItem2 121627
                Single _116PairItem1;// 77:NoiseDeformerNoise3->52:PairItem1 121626
                Int32 _117Two;// 62:NoiseDeformerAt3->9:Two 121480
                Single _118At;// 62:NoiseDeformerAt3->10:At 121479
                Single _119Multiply;// 62:NoiseDeformerAt3->13:Multiply 121478
                Single _120Add;// 62:NoiseDeformerAt3->14:Add 121470
                Single _121PairItem2;// 77:NoiseDeformerNoise3->13:PairItem2 121643
                Int32 _122PairItem2;// 77:NoiseDeformerNoise3->11:PairItem2 121651
                Int32 _123At;// 77:NoiseDeformerNoise3->32:At 121650
                Int32 _124Add;// 77:NoiseDeformerNoise3->34:Add 121648
                Int32 _125At;// 77:NoiseDeformerNoise3->113:At 121647
                Int32 _126Add;// 77:NoiseDeformerNoise3->65:Add 121645
                IArray[Single] _127At;// 77:NoiseDeformerNoise3->64:At 121644
                Int32 _128Zero;// 66:NoiseDeformerAt3->5:Zero 121636
                Single _129At;// 66:NoiseDeformerAt3->4:At 121635
                Single _130Multiply;// 66:NoiseDeformerAt3->11:Multiply 121634
                Int32 _131One;// 66:NoiseDeformerAt3->8:One 121639
                Single _132At;// 66:NoiseDeformerAt3->7:At 121638
                Single _133Multiply;// 66:NoiseDeformerAt3->12:Multiply 121637
                Single _134Add;// 66:NoiseDeformerAt3->6:Add 121633
                Int32 _135Two;// 66:NoiseDeformerAt3->9:Two 121642
                Single _136At;// 66:NoiseDeformerAt3->10:At 121641
                Single _137Multiply;// 66:NoiseDeformerAt3->13:Multiply 121640
                Single _138Add;// 66:NoiseDeformerAt3->14:Add 121632
                Single _139Constant;// 42:NoiseDeformerSCurve->0:Constant 121655
                Single _140Constant;// 42:NoiseDeformerSCurve->0:Constant 121657
                Single _141Multiply;// 42:NoiseDeformerSCurve->41:Multiply 121656
                Single _142Subtract;// 42:NoiseDeformerSCurve->39:Subtract 121654
                Single _143Multiply;// 42:NoiseDeformerSCurve->35:Multiply 121659
                Single _144Multiply;// 42:NoiseDeformerSCurve->37:Multiply 121653
                Single _145FloatLerp;// 77:NoiseDeformerNoise3->68:FloatLerp 121465
                Int32 _146PairItem2;// 77:NoiseDeformerNoise3->22:PairItem2 121681
                Int32 _147Add;// 77:NoiseDeformerNoise3->38:Add 121680
                Int32 _148At;// 77:NoiseDeformerNoise3->114:At 121679
                Int32 _149Add;// 77:NoiseDeformerNoise3->71:Add 121677
                IArray[Single] _150At;// 77:NoiseDeformerNoise3->70:At 121676
                Int32 _151Zero;// 72:NoiseDeformerAt3->5:Zero 121669
                Single _152At;// 72:NoiseDeformerAt3->4:At 121668
                Single _153Multiply;// 72:NoiseDeformerAt3->11:Multiply 121667
                Single _154PairItem2;// 77:NoiseDeformerNoise3->21:PairItem2 121682
                Int32 _155One;// 72:NoiseDeformerAt3->8:One 121672
                Single _156At;// 72:NoiseDeformerAt3->7:At 121671
                Single _157Multiply;// 72:NoiseDeformerAt3->12:Multiply 121670
                Single _158Add;// 72:NoiseDeformerAt3->6:Add 121666
                Int32 _159Two;// 72:NoiseDeformerAt3->9:Two 121675
                Single _160At;// 72:NoiseDeformerAt3->10:At 121674
                Single _161Multiply;// 72:NoiseDeformerAt3->13:Multiply 121673
                Single _162Add;// 72:NoiseDeformerAt3->14:Add 121665
                Int32 _163Add;// 77:NoiseDeformerNoise3->39:Add 121702
                Int32 _164At;// 77:NoiseDeformerNoise3->115:At 121701
                Int32 _165Add;// 77:NoiseDeformerNoise3->74:Add 121699
                IArray[Single] _166At;// 77:NoiseDeformerNoise3->76:At 121698
                Int32 _167Zero;// 75:NoiseDeformerAt3->5:Zero 121691
                Single _168At;// 75:NoiseDeformerAt3->4:At 121690
                Single _169Multiply;// 75:NoiseDeformerAt3->11:Multiply 121689
                Int32 _170One;// 75:NoiseDeformerAt3->8:One 121694
                Single _171At;// 75:NoiseDeformerAt3->7:At 121693
                Single _172Multiply;// 75:NoiseDeformerAt3->12:Multiply 121692
                Single _173Add;// 75:NoiseDeformerAt3->6:Add 121688
                Int32 _174Two;// 75:NoiseDeformerAt3->9:Two 121697
                Single _175At;// 75:NoiseDeformerAt3->10:At 121696
                Single _176Multiply;// 75:NoiseDeformerAt3->13:Multiply 121695
                Single _177Add;// 75:NoiseDeformerAt3->14:Add 121687
                Single _178FloatLerp;// 77:NoiseDeformerNoise3->78:FloatLerp 121660
                Single _179Constant;// 56:NoiseDeformerSCurve->0:Constant 121706
                Single _180Constant;// 56:NoiseDeformerSCurve->0:Constant 121708
                Single _181Multiply;// 56:NoiseDeformerSCurve->41:Multiply 121707
                Single _182Subtract;// 56:NoiseDeformerSCurve->39:Subtract 121705
                Single _183Multiply;// 56:NoiseDeformerSCurve->35:Multiply 121710
                Single _184Multiply;// 56:NoiseDeformerSCurve->37:Multiply 121704
                Single _185FloatLerp;// 77:NoiseDeformerNoise3->80:FloatLerp 121464
                Int32 _186PairItem2;// 77:NoiseDeformerNoise3->49:PairItem2 121730
                Int32 _187Add;// 77:NoiseDeformerNoise3->84:Add 121729
                IArray[Single] _188At;// 77:NoiseDeformerNoise3->83:At 121728
                Int32 _189Zero;// 82:NoiseDeformerAt3->5:Zero 121721
                Single _190At;// 82:NoiseDeformerAt3->4:At 121720
                Single _191Multiply;// 82:NoiseDeformerAt3->11:Multiply 121719
                Int32 _192One;// 82:NoiseDeformerAt3->8:One 121724
                Single _193At;// 82:NoiseDeformerAt3->7:At 121723
                Single _194Multiply;// 82:NoiseDeformerAt3->12:Multiply 121722
                Single _195Add;// 82:NoiseDeformerAt3->6:Add 121718
                Single _196PairItem2;// 77:NoiseDeformerNoise3->50:PairItem2 121731
                Int32 _197Two;// 82:NoiseDeformerAt3->9:Two 121727
                Single _198At;// 82:NoiseDeformerAt3->10:At 121726
                Single _199Multiply;// 82:NoiseDeformerAt3->13:Multiply 121725
                Single _200Add;// 82:NoiseDeformerAt3->14:Add 121717
                Int32 _201Add;// 77:NoiseDeformerNoise3->88:Add 121748
                IArray[Single] _202At;// 77:NoiseDeformerNoise3->87:At 121747
                Int32 _203Zero;// 86:NoiseDeformerAt3->5:Zero 121740
                Single _204At;// 86:NoiseDeformerAt3->4:At 121739
                Single _205Multiply;// 86:NoiseDeformerAt3->11:Multiply 121738
                Int32 _206One;// 86:NoiseDeformerAt3->8:One 121743
                Single _207At;// 86:NoiseDeformerAt3->7:At 121742
                Single _208Multiply;// 86:NoiseDeformerAt3->12:Multiply 121741
                Single _209Add;// 86:NoiseDeformerAt3->6:Add 121737
                Int32 _210Two;// 86:NoiseDeformerAt3->9:Two 121746
                Single _211At;// 86:NoiseDeformerAt3->10:At 121745
                Single _212Multiply;// 86:NoiseDeformerAt3->13:Multiply 121744
                Single _213Add;// 86:NoiseDeformerAt3->14:Add 121736
                Single _214FloatLerp;// 77:NoiseDeformerNoise3->90:FloatLerp 121712
                Int32 _215Add;// 77:NoiseDeformerNoise3->94:Add 121766
                IArray[Single] _216At;// 77:NoiseDeformerNoise3->93:At 121765
                Int32 _217Zero;// 92:NoiseDeformerAt3->5:Zero 121758
                Single _218At;// 92:NoiseDeformerAt3->4:At 121757
                Single _219Multiply;// 92:NoiseDeformerAt3->11:Multiply 121756
                Int32 _220One;// 92:NoiseDeformerAt3->8:One 121761
                Single _221At;// 92:NoiseDeformerAt3->7:At 121760
                Single _222Multiply;// 92:NoiseDeformerAt3->12:Multiply 121759
                Single _223Add;// 92:NoiseDeformerAt3->6:Add 121755
                Int32 _224Two;// 92:NoiseDeformerAt3->9:Two 121764
                Single _225At;// 92:NoiseDeformerAt3->10:At 121763
                Single _226Multiply;// 92:NoiseDeformerAt3->13:Multiply 121762
                Single _227Add;// 92:NoiseDeformerAt3->14:Add 121754
                Int32 _228Add;// 77:NoiseDeformerNoise3->97:Add 121783
                IArray[Single] _229At;// 77:NoiseDeformerNoise3->98:At 121782
                Int32 _230Zero;// 96:NoiseDeformerAt3->5:Zero 121775
                Single _231At;// 96:NoiseDeformerAt3->4:At 121774
                Single _232Multiply;// 96:NoiseDeformerAt3->11:Multiply 121773
                Int32 _233One;// 96:NoiseDeformerAt3->8:One 121778
                Single _234At;// 96:NoiseDeformerAt3->7:At 121777
                Single _235Multiply;// 96:NoiseDeformerAt3->12:Multiply 121776
                Single _236Add;// 96:NoiseDeformerAt3->6:Add 121772
                Int32 _237Two;// 96:NoiseDeformerAt3->9:Two 121781
                Single _238At;// 96:NoiseDeformerAt3->10:At 121780
                Single _239Multiply;// 96:NoiseDeformerAt3->13:Multiply 121779
                Single _240Add;// 96:NoiseDeformerAt3->14:Add 121771
                Single _241FloatLerp;// 77:NoiseDeformerNoise3->100:FloatLerp 121749
                Single _242FloatLerp;// 77:NoiseDeformerNoise3->102:FloatLerp 121711
                Single _243Constant;// 58:NoiseDeformerSCurve->0:Constant 121787
                Single _244Constant;// 58:NoiseDeformerSCurve->0:Constant 121789
                Single _245Multiply;// 58:NoiseDeformerSCurve->41:Multiply 121788
                Single _246Subtract;// 58:NoiseDeformerSCurve->39:Subtract 121786
                Single _247Multiply;// 58:NoiseDeformerSCurve->35:Multiply 121791
                Single _248Multiply;// 58:NoiseDeformerSCurve->37:Multiply 121785
                Single _249FloatLerp;// 77:NoiseDeformerNoise3->104:FloatLerp 121463
                Single _250NaN;// 118:IsNaN->1:NaN 121461
                Int32 _251Compare;// 118:IsNaN->2:Compare 121460
                Int32 _252Zero;// 118:IsNaN->4:Zero 121462
                Boolean _253Equal;// 118:IsNaN->3:Equal 121459
                Single _255Multiply;// 27:NoiseDeformerfBm1->64:Multiply 121433
                Int32 _256Zero;// 48:First->2:Zero 121804
                Single _257At;// 48:First->0:At 121803
                Single _258Add;// 27:NoiseDeformerfBm1->59:Add 121432
                IArray[Single] _259Unit;// 43:Array2->2:Unit 121430
                Single _260Add;// 27:NoiseDeformerfBm1->52:Add 121806
                IArray[Single] _261Append;// 43:Array2->3:Append 121429
                _0One = One();
                _1At = At(x0, _0One);
                _2AsInt = AsInt(_1At);
                _3At = At(_13Map, _2AsInt);
                _4Constant = 4096;
                _5At = At(_23GenerateN, _2AsInt);
                _6X = X(_5At);
                _7Unit = Unit(_6X);
                _8Y = Y(_5At);
                _9Append = Append(_7Unit, _8Y);
                _10Z = Z(_5At);
                _11Append = Append(_9Append, _10Z);
                _12Zero = Zero();
                _13Zero = Zero();
                _14Count = Count(_11Append);
                _15One = One();
                _16Subtract = Subtract(_14Count, _15One);
                _17ClampInt = ClampInt(_12Zero, _13Zero, _16Subtract);
                _18At = At(_11Append, _17ClampInt);
                _19Add = Add(_4Constant, _18At);
                _20Floor = Floor(_19Add);
                _21Constant = 255;
                _22And = And(_20Floor, _21Constant);
                _23One = One();
                _24Add = Add(_22And, _23One);
                _25And = And(_24Add, _21Constant);
                _26Pair = Pair(_22And, _25And);
                _27Floor = Floor(_19Add);
                _28AsFloat = AsFloat(_27Floor);
                _29Subtract = Subtract(_19Add, _28AsFloat);
                _30FloatOne = FloatOne();
                _31Subtract = Subtract(_29Subtract, _30FloatOne);
                _32Pair = Pair(_29Subtract, _31Subtract);
                _33Pair = Pair(_26Pair, _32Pair);
                _34PairItem2 = PairItem2(_33Pair);
                _35PairItem1 = PairItem1(_34PairItem2);
                _36PairItem2 = PairItem2(x1);
                _37PairItem1 = PairItem1(_33Pair);
                _38PairItem1 = PairItem1(_37PairItem1);
                _39At = At(_36PairItem2, _38PairItem1);
                _40Constant = 4096;
                _41X = X(_5At);
                _42Unit = Unit(_41X);
                _43Y = Y(_5At);
                _44Append = Append(_42Unit, _43Y);
                _45Z = Z(_5At);
                _46Append = Append(_44Append, _45Z);
                _47One = One();
                _48Zero = Zero();
                _49Count = Count(_46Append);
                _50One = One();
                _51Subtract = Subtract(_49Count, _50One);
                _52ClampInt = ClampInt(_47One, _48Zero, _51Subtract);
                _53At = At(_46Append, _52ClampInt);
                _54Add = Add(_40Constant, _53At);
                _55Floor = Floor(_54Add);
                _56Constant = 255;
                _57And = And(_55Floor, _56Constant);
                _58One = One();
                _59Add = Add(_57And, _58One);
                _60And = And(_59Add, _56Constant);
                _61Pair = Pair(_57And, _60And);
                _62Floor = Floor(_54Add);
                _63AsFloat = AsFloat(_62Floor);
                _64Subtract = Subtract(_54Add, _63AsFloat);
                _65FloatOne = FloatOne();
                _66Subtract = Subtract(_64Subtract, _65FloatOne);
                _67Pair = Pair(_64Subtract, _66Subtract);
                _68Pair = Pair(_61Pair, _67Pair);
                _69PairItem1 = PairItem1(_68Pair);
                _70PairItem1 = PairItem1(_69PairItem1);
                _71Add = Add(_39At, _70PairItem1);
                _72At = At(_36PairItem2, _71Add);
                _73Constant = 4096;
                _74X = X(_5At);
                _75Unit = Unit(_74X);
                _76Y = Y(_5At);
                _77Append = Append(_75Unit, _76Y);
                _78Z = Z(_5At);
                _79Append = Append(_77Append, _78Z);
                _80Two = Two();
                _81Zero = Zero();
                _82Count = Count(_79Append);
                _83One = One();
                _84Subtract = Subtract(_82Count, _83One);
                _85ClampInt = ClampInt(_80Two, _81Zero, _84Subtract);
                _86At = At(_79Append, _85ClampInt);
                _87Add = Add(_73Constant, _86At);
                _88Floor = Floor(_87Add);
                _89Constant = 255;
                _90And = And(_88Floor, _89Constant);
                _91One = One();
                _92Add = Add(_90And, _91One);
                _93And = And(_92Add, _89Constant);
                _94Pair = Pair(_90And, _93And);
                _95Floor = Floor(_87Add);
                _96AsFloat = AsFloat(_95Floor);
                _97Subtract = Subtract(_87Add, _96AsFloat);
                _98FloatOne = FloatOne();
                _99Subtract = Subtract(_97Subtract, _98FloatOne);
                _100Pair = Pair(_97Subtract, _99Subtract);
                _101Pair = Pair(_94Pair, _100Pair);
                _102PairItem1 = PairItem1(_101Pair);
                _103PairItem1 = PairItem1(_102PairItem1);
                _104Add = Add(_72At, _103PairItem1);
                _105At = At(_24PairItem1, _104Add);
                _106Zero = Zero();
                _107At = At(_105At, _106Zero);
                _108Multiply = Multiply(_35PairItem1, _107At);
                _109PairItem2 = PairItem2(_68Pair);
                _110PairItem1 = PairItem1(_109PairItem2);
                _111One = One();
                _112At = At(_105At, _111One);
                _113Multiply = Multiply(_110PairItem1, _112At);
                _114Add = Add(_108Multiply, _113Multiply);
                _115PairItem2 = PairItem2(_101Pair);
                _116PairItem1 = PairItem1(_115PairItem2);
                _117Two = Two();
                _118At = At(_105At, _117Two);
                _119Multiply = Multiply(_116PairItem1, _118At);
                _120Add = Add(_114Add, _119Multiply);
                _121PairItem2 = PairItem2(_34PairItem2);
                _122PairItem2 = PairItem2(_37PairItem1);
                _123At = At(_36PairItem2, _122PairItem2);
                _124Add = Add(_123At, _70PairItem1);
                _125At = At(_36PairItem2, _124Add);
                _126Add = Add(_125At, _103PairItem1);
                _127At = At(_24PairItem1, _126Add);
                _128Zero = Zero();
                _129At = At(_127At, _128Zero);
                _130Multiply = Multiply(_121PairItem2, _129At);
                _131One = One();
                _132At = At(_127At, _131One);
                _133Multiply = Multiply(_110PairItem1, _132At);
                _134Add = Add(_130Multiply, _133Multiply);
                _135Two = Two();
                _136At = At(_127At, _135Two);
                _137Multiply = Multiply(_116PairItem1, _136At);
                _138Add = Add(_134Add, _137Multiply);
                _139Constant = 3;
                _140Constant = 2;
                _141Multiply = Multiply(_140Constant, _35PairItem1);
                _142Subtract = Subtract(_139Constant, _141Multiply);
                _143Multiply = Multiply(_35PairItem1, _35PairItem1);
                _144Multiply = Multiply(_142Subtract, _143Multiply);
                _145FloatLerp = FloatLerp(_120Add, _138Add, _144Multiply);
                _146PairItem2 = PairItem2(_69PairItem1);
                _147Add = Add(_39At, _146PairItem2);
                _148At = At(_36PairItem2, _147Add);
                _149Add = Add(_148At, _103PairItem1);
                _150At = At(_24PairItem1, _149Add);
                _151Zero = Zero();
                _152At = At(_150At, _151Zero);
                _153Multiply = Multiply(_35PairItem1, _152At);
                _154PairItem2 = PairItem2(_109PairItem2);
                _155One = One();
                _156At = At(_150At, _155One);
                _157Multiply = Multiply(_154PairItem2, _156At);
                _158Add = Add(_153Multiply, _157Multiply);
                _159Two = Two();
                _160At = At(_150At, _159Two);
                _161Multiply = Multiply(_116PairItem1, _160At);
                _162Add = Add(_158Add, _161Multiply);
                _163Add = Add(_123At, _146PairItem2);
                _164At = At(_36PairItem2, _163Add);
                _165Add = Add(_164At, _103PairItem1);
                _166At = At(_24PairItem1, _165Add);
                _167Zero = Zero();
                _168At = At(_166At, _167Zero);
                _169Multiply = Multiply(_121PairItem2, _168At);
                _170One = One();
                _171At = At(_166At, _170One);
                _172Multiply = Multiply(_154PairItem2, _171At);
                _173Add = Add(_169Multiply, _172Multiply);
                _174Two = Two();
                _175At = At(_166At, _174Two);
                _176Multiply = Multiply(_116PairItem1, _175At);
                _177Add = Add(_173Add, _176Multiply);
                _178FloatLerp = FloatLerp(_162Add, _177Add, _144Multiply);
                _179Constant = 3;
                _180Constant = 2;
                _181Multiply = Multiply(_180Constant, _110PairItem1);
                _182Subtract = Subtract(_179Constant, _181Multiply);
                _183Multiply = Multiply(_110PairItem1, _110PairItem1);
                _184Multiply = Multiply(_182Subtract, _183Multiply);
                _185FloatLerp = FloatLerp(_145FloatLerp, _178FloatLerp, _184Multiply);
                _186PairItem2 = PairItem2(_102PairItem1);
                _187Add = Add(_72At, _186PairItem2);
                _188At = At(_24PairItem1, _187Add);
                _189Zero = Zero();
                _190At = At(_188At, _189Zero);
                _191Multiply = Multiply(_35PairItem1, _190At);
                _192One = One();
                _193At = At(_188At, _192One);
                _194Multiply = Multiply(_110PairItem1, _193At);
                _195Add = Add(_191Multiply, _194Multiply);
                _196PairItem2 = PairItem2(_115PairItem2);
                _197Two = Two();
                _198At = At(_188At, _197Two);
                _199Multiply = Multiply(_196PairItem2, _198At);
                _200Add = Add(_195Add, _199Multiply);
                _201Add = Add(_125At, _186PairItem2);
                _202At = At(_24PairItem1, _201Add);
                _203Zero = Zero();
                _204At = At(_202At, _203Zero);
                _205Multiply = Multiply(_121PairItem2, _204At);
                _206One = One();
                _207At = At(_202At, _206One);
                _208Multiply = Multiply(_110PairItem1, _207At);
                _209Add = Add(_205Multiply, _208Multiply);
                _210Two = Two();
                _211At = At(_202At, _210Two);
                _212Multiply = Multiply(_196PairItem2, _211At);
                _213Add = Add(_209Add, _212Multiply);
                _214FloatLerp = FloatLerp(_200Add, _213Add, _144Multiply);
                _215Add = Add(_148At, _186PairItem2);
                _216At = At(_24PairItem1, _215Add);
                _217Zero = Zero();
                _218At = At(_216At, _217Zero);
                _219Multiply = Multiply(_35PairItem1, _218At);
                _220One = One();
                _221At = At(_216At, _220One);
                _222Multiply = Multiply(_154PairItem2, _221At);
                _223Add = Add(_219Multiply, _222Multiply);
                _224Two = Two();
                _225At = At(_216At, _224Two);
                _226Multiply = Multiply(_196PairItem2, _225At);
                _227Add = Add(_223Add, _226Multiply);
                _228Add = Add(_164At, _186PairItem2);
                _229At = At(_24PairItem1, _228Add);
                _230Zero = Zero();
                _231At = At(_229At, _230Zero);
                _232Multiply = Multiply(_121PairItem2, _231At);
                _233One = One();
                _234At = At(_229At, _233One);
                _235Multiply = Multiply(_154PairItem2, _234At);
                _236Add = Add(_232Multiply, _235Multiply);
                _237Two = Two();
                _238At = At(_229At, _237Two);
                _239Multiply = Multiply(_196PairItem2, _238At);
                _240Add = Add(_236Add, _239Multiply);
                _241FloatLerp = FloatLerp(_227Add, _240Add, _144Multiply);
                _242FloatLerp = FloatLerp(_214FloatLerp, _241FloatLerp, _184Multiply);
                _243Constant = 3;
                _244Constant = 2;
                _245Multiply = Multiply(_244Constant, _116PairItem1);
                _246Subtract = Subtract(_243Constant, _245Multiply);
                _247Multiply = Multiply(_116PairItem1, _116PairItem1);
                _248Multiply = Multiply(_246Subtract, _247Multiply);
                _249FloatLerp = FloatLerp(_185FloatLerp, _242FloatLerp, _248Multiply);
                _250NaN = NaN();
                _251Compare = Compare(_249FloatLerp, _250NaN);
                _252Zero = Zero();
                _253Equal = Equal(_251Compare, _252Zero);
                _255Multiply = Multiply(_3At, if (_253Equal)
                    {
                      Single _254FloatZero;// 77:NoiseDeformerNoise3->117:FloatZero 121792
                      _254FloatZero = FloatZero();
                      _254FloatZero;
                      }else
                    {
                      _249FloatLerp;
                      });
                _256Zero = Zero();
                _257At = At(x0, _256Zero);
                _258Add = Add(_255Multiply, _257At);
                _259Unit = Unit(_258Add);
                _260Add = Add(_1At, _25FloatOne);
                _261Append = Append(_259Unit, _260Add);
                _261Append;
                });
            _27Count = Count(_26GenerateN);
            _28One = One();
            _29Subtract = Subtract(_27Count, _28One);
            _30At = At(_26GenerateN, _29Subtract);
            _31Zero = Zero();
            _32At = At(_30At, _31Zero);
            _32At;
            }, _19X, _17Z);
        _21Apply2 = Apply2((Single x0, Single x1) => 
          {
            Single _0FloatZero;// 27:NoiseDeformerfBm1->33:FloatZero 121423
            IArray[Single] _1Unit;// 37:Array2->2:Unit 121422
            Single _2FloatZero;// 27:NoiseDeformerfBm1->38:FloatZero 121424
            IArray[Single] _3Append;// 37:Array2->3:Append 121421
            Single _4AsFloat;// 0:NoiseDeformer->13:AsFloat 121808
            Int32 _5AsInt;// 27:NoiseDeformerfBm1->21:AsInt 121425
            Single _6FloatOne;// 27:NoiseDeformerfBm1->5:FloatOne 121439
            Int32 _7AsInt;// 27:NoiseDeformerfBm1->8:AsInt 121440
            Single _8Constant;// 0:NoiseDeformer->0:Constant 121809
            IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1->7:GenerateN 121438
            Single _10FloatOne;// 0:NoiseDeformer->46:FloatOne 121811
            Single _11Subtract;// 0:NoiseDeformer->3:Subtract 121810
            Single _12NegativeFloat;// 27:NoiseDeformerfBm1->16:NegativeFloat 121447
            IArray[Single] _13Map;// 27:NoiseDeformerfBm1->14:Map 121437
            Single _14AsFloat;// 0:NoiseDeformer->43:AsFloat 121816
            Single _15Constant;// 0:NoiseDeformer->0:Constant 121819
            Single _16Multiply;// 0:NoiseDeformer->30:Multiply 121818
            Single _17Constant;// 0:NoiseDeformer->0:Constant 121821
            Single _18Constant;// 0:NoiseDeformer->0:Constant 121822
            Single _19Divide;// 0:NoiseDeformer->31:Divide 121820
            Single _20Multiply;// 0:NoiseDeformer->39:Multiply 121817
            Single _21Multiply;// 0:NoiseDeformer->38:Multiply 121815
            Vector3 _22Vector3;// 0:NoiseDeformer->0:Vector3 121812
            IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1->30:GenerateN 121796
            IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1->72:PairItem1 121800
            Single _25FloatOne;// 27:NoiseDeformerfBm1->53:FloatOne 121807
            IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1->35:GenerateN 121418
            Int32 _27Count;// 3:LastIndex->2:Count 121417
            Int32 _28One;// 3:MinusOne->2:One 121416
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 121415
            IArray[Single] _30At;// 68:Last->0:At 121412
            Int32 _31Zero;// 69:First->2:Zero 121410
            Single _32At;// 69:First->0:At 121409
            _0FloatZero = FloatZero();
            _1Unit = Unit(_0FloatZero);
            _2FloatZero = FloatZero();
            _3Append = Append(_1Unit, _2FloatZero);
            _4AsFloat = AsFloat(numIterations);
            _5AsInt = AsInt(_4AsFloat);
            _6FloatOne = FloatOne();
            _7AsInt = AsInt(_4AsFloat);
            _8Constant = 2;
            _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
              {
                Single _0Multiply;// 27:NoiseDeformerfBm1->9:Multiply 121442
                _0Multiply = Multiply(_8Constant, x0);
                _0Multiply;
                });
            _10FloatOne = FloatOne();
            _11Subtract = Subtract(_10FloatOne, roughness);
            _12NegativeFloat = NegativeFloat(_11Subtract);
            _13Map = Map(_9GenerateN, (Single x0) => 
              {
                Single _0Pow;// 27:NoiseDeformerfBm1->15:Pow 121445
                _0Pow = Pow(x0, _12NegativeFloat);
                _0Pow;
                });
            _14AsFloat = AsFloat(phase);
            _15Constant = 0.005;
            _16Multiply = Multiply(frequency, _15Constant);
            _17Constant = 1200;
            _18Constant = 4800;
            _19Divide = Divide(_17Constant, _18Constant);
            _20Multiply = Multiply(_16Multiply, _19Divide);
            _21Multiply = Multiply(_14AsFloat, _20Multiply);
            _22Vector3 = Vector3(x0, x1, _21Multiply);
            _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
              {
                Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1->22:MultiplyByScalar 121798
                _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                _0MultiplyByScalar;
                });
            _24PairItem1 = PairItem1(x1);
            _25FloatOne = FloatOne();
            _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
              {
                Int32 _0One;// 49:Second->2:One 121452
                Single _1At;// 49:Second->0:At 121451
                Int32 _2AsInt;// 27:NoiseDeformerfBm1->55:AsInt 121449
                Single _3At;// 27:NoiseDeformerfBm1->60:At 121435
                Single _4Constant;// 25:NoiseDeformerNoiseVarSetup->0:Constant 121490
                Vector3 _5At;// 27:NoiseDeformerfBm1->54:At 121794
                Single _6X;// 2:Vector3ToArray->1:X 121501
                IArray[Single] _7Unit;// 4:Array3->2:Unit 121500
                Single _8Y;// 2:Vector3ToArray->2:Y 121502
                IArray[Single] _9Append;// 4:Array3->3:Append 121499
                Single _10Z;// 2:Vector3ToArray->3:Z 121503
                IArray[Single] _11Append;// 4:Array3->6:Append 121498
                Int32 _12Zero;// 77:NoiseDeformerNoise3->3:Zero 121524
                Int32 _13Zero;// 4:ValidIndex->2:Zero 121507
                Int32 _14Count;// 4:ValidIndex->4:Count 121511
                Int32 _15One;// 5:MinusOne->2:One 121510
                Int32 _16Subtract;// 5:MinusOne->1:Subtract 121509
                Int32 _17ClampInt;// 4:ValidIndex->3:ClampInt 121506
                Single _18At;// 1:Vector3At->3:At 121493
                Single _19Add;// 25:NoiseDeformerNoiseVarSetup->5:Add 121489
                Int32 _20Floor;// 25:NoiseDeformerNoiseVarSetup->7:Floor 121488
                Int32 _21Constant;// 25:NoiseDeformerNoiseVarSetup->0:Constant 121512
                Int32 _22And;// 25:NoiseDeformerNoiseVarSetup->8:And 121487
                Int32 _23One;// 13:PlusOne->1:One 121516
                Int32 _24Add;// 13:PlusOne->0:Add 121515
                Int32 _25And;// 25:NoiseDeformerNoiseVarSetup->14:And 121513
                Tuple[Int32, Int32] _26Pair;// 25:NoiseDeformerNoiseVarSetup->3:Pair 121486
                Int32 _27Floor;// 25:NoiseDeformerNoiseVarSetup->22:Floor 121521
                Single _28AsFloat;// 25:NoiseDeformerNoiseVarSetup->17:AsFloat 121520
                Single _29Subtract;// 25:NoiseDeformerNoiseVarSetup->16:Subtract 121518
                Single _30FloatOne;// 25:NoiseDeformerNoiseVarSetup->20:FloatOne 121523
                Single _31Subtract;// 25:NoiseDeformerNoiseVarSetup->19:Subtract 121522
                Tuple[Single, Single] _32Pair;// 25:NoiseDeformerNoiseVarSetup->25:Pair 121517
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _33Pair;// 25:NoiseDeformerNoiseVarSetup->26:Pair 121485
                Tuple[Single, Single] _34PairItem2;// 77:NoiseDeformerNoise3->10:PairItem2 121482
                Single _35PairItem1;// 77:NoiseDeformerNoise3->12:PairItem1 121481
                IArray[Int32] _36PairItem2;// 27:NoiseDeformerfBm1->73:PairItem2 121801
                Tuple[Int32, Int32] _37PairItem1;// 77:NoiseDeformerNoise3->8:PairItem1 121535
                Int32 _38PairItem1;// 77:NoiseDeformerNoise3->9:PairItem1 121534
                Int32 _39At;// 77:NoiseDeformerNoise3->31:At 121533
                Single _40Constant;// 6:NoiseDeformerNoiseVarSetup->0:Constant 121545
                Single _41X;// 2:Vector3ToArray->1:X 121556
                IArray[Single] _42Unit;// 4:Array3->2:Unit 121555
                Single _43Y;// 2:Vector3ToArray->2:Y 121557
                IArray[Single] _44Append;// 4:Array3->3:Append 121554
                Single _45Z;// 2:Vector3ToArray->3:Z 121558
                IArray[Single] _46Append;// 4:Array3->6:Append 121553
                Int32 _47One;// 77:NoiseDeformerNoise3->4:One 121579
                Int32 _48Zero;// 4:ValidIndex->2:Zero 121562
                Int32 _49Count;// 4:ValidIndex->4:Count 121566
                Int32 _50One;// 5:MinusOne->2:One 121565
                Int32 _51Subtract;// 5:MinusOne->1:Subtract 121564
                Int32 _52ClampInt;// 4:ValidIndex->3:ClampInt 121561
                Single _53At;// 1:Vector3At->3:At 121548
                Single _54Add;// 6:NoiseDeformerNoiseVarSetup->5:Add 121544
                Int32 _55Floor;// 6:NoiseDeformerNoiseVarSetup->7:Floor 121543
                Int32 _56Constant;// 6:NoiseDeformerNoiseVarSetup->0:Constant 121567
                Int32 _57And;// 6:NoiseDeformerNoiseVarSetup->8:And 121542
                Int32 _58One;// 13:PlusOne->1:One 121571
                Int32 _59Add;// 13:PlusOne->0:Add 121570
                Int32 _60And;// 6:NoiseDeformerNoiseVarSetup->14:And 121568
                Tuple[Int32, Int32] _61Pair;// 6:NoiseDeformerNoiseVarSetup->3:Pair 121541
                Int32 _62Floor;// 6:NoiseDeformerNoiseVarSetup->22:Floor 121576
                Single _63AsFloat;// 6:NoiseDeformerNoiseVarSetup->17:AsFloat 121575
                Single _64Subtract;// 6:NoiseDeformerNoiseVarSetup->16:Subtract 121573
                Single _65FloatOne;// 6:NoiseDeformerNoiseVarSetup->20:FloatOne 121578
                Single _66Subtract;// 6:NoiseDeformerNoiseVarSetup->19:Subtract 121577
                Tuple[Single, Single] _67Pair;// 6:NoiseDeformerNoiseVarSetup->25:Pair 121572
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _68Pair;// 6:NoiseDeformerNoiseVarSetup->26:Pair 121540
                Tuple[Int32, Int32] _69PairItem1;// 77:NoiseDeformerNoise3->20:PairItem1 121537
                Int32 _70PairItem1;// 77:NoiseDeformerNoise3->19:PairItem1 121536
                Int32 _71Add;// 77:NoiseDeformerNoise3->33:Add 121531
                Int32 _72At;// 77:NoiseDeformerNoise3->107:At 121529
                Single _73Constant;// 7:NoiseDeformerNoiseVarSetup->0:Constant 121589
                Single _74X;// 2:Vector3ToArray->1:X 121600
                IArray[Single] _75Unit;// 4:Array3->2:Unit 121599
                Single _76Y;// 2:Vector3ToArray->2:Y 121601
                IArray[Single] _77Append;// 4:Array3->3:Append 121598
                Single _78Z;// 2:Vector3ToArray->3:Z 121602
                IArray[Single] _79Append;// 4:Array3->6:Append 121597
                Int32 _80Two;// 77:NoiseDeformerNoise3->5:Two 121623
                Int32 _81Zero;// 4:ValidIndex->2:Zero 121606
                Int32 _82Count;// 4:ValidIndex->4:Count 121610
                Int32 _83One;// 5:MinusOne->2:One 121609
                Int32 _84Subtract;// 5:MinusOne->1:Subtract 121608
                Int32 _85ClampInt;// 4:ValidIndex->3:ClampInt 121605
                Single _86At;// 1:Vector3At->3:At 121592
                Single _87Add;// 7:NoiseDeformerNoiseVarSetup->5:Add 121588
                Int32 _88Floor;// 7:NoiseDeformerNoiseVarSetup->7:Floor 121587
                Int32 _89Constant;// 7:NoiseDeformerNoiseVarSetup->0:Constant 121611
                Int32 _90And;// 7:NoiseDeformerNoiseVarSetup->8:And 121586
                Int32 _91One;// 13:PlusOne->1:One 121615
                Int32 _92Add;// 13:PlusOne->0:Add 121614
                Int32 _93And;// 7:NoiseDeformerNoiseVarSetup->14:And 121612
                Tuple[Int32, Int32] _94Pair;// 7:NoiseDeformerNoiseVarSetup->3:Pair 121585
                Int32 _95Floor;// 7:NoiseDeformerNoiseVarSetup->22:Floor 121620
                Single _96AsFloat;// 7:NoiseDeformerNoiseVarSetup->17:AsFloat 121619
                Single _97Subtract;// 7:NoiseDeformerNoiseVarSetup->16:Subtract 121617
                Single _98FloatOne;// 7:NoiseDeformerNoiseVarSetup->20:FloatOne 121622
                Single _99Subtract;// 7:NoiseDeformerNoiseVarSetup->19:Subtract 121621
                Tuple[Single, Single] _100Pair;// 7:NoiseDeformerNoiseVarSetup->25:Pair 121616
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _101Pair;// 7:NoiseDeformerNoiseVarSetup->26:Pair 121584
                Tuple[Int32, Int32] _102PairItem1;// 77:NoiseDeformerNoise3->51:PairItem1 121581
                Int32 _103PairItem1;// 77:NoiseDeformerNoise3->53:PairItem1 121580
                Int32 _104Add;// 77:NoiseDeformerNoise3->61:Add 121527
                IArray[Single] _105At;// 77:NoiseDeformerNoise3->60:At 121525
                Int32 _106Zero;// 62:NoiseDeformerAt3->5:Zero 121474
                Single _107At;// 62:NoiseDeformerAt3->4:At 121473
                Single _108Multiply;// 62:NoiseDeformerAt3->11:Multiply 121472
                Tuple[Single, Single] _109PairItem2;// 77:NoiseDeformerNoise3->23:PairItem2 121625
                Single _110PairItem1;// 77:NoiseDeformerNoise3->18:PairItem1 121624
                Int32 _111One;// 62:NoiseDeformerAt3->8:One 121477
                Single _112At;// 62:NoiseDeformerAt3->7:At 121476
                Single _113Multiply;// 62:NoiseDeformerAt3->12:Multiply 121475
                Single _114Add;// 62:NoiseDeformerAt3->6:Add 121471
                Tuple[Single, Single] _115PairItem2;// 77:NoiseDeformerNoise3->48:PairItem2 121627
                Single _116PairItem1;// 77:NoiseDeformerNoise3->52:PairItem1 121626
                Int32 _117Two;// 62:NoiseDeformerAt3->9:Two 121480
                Single _118At;// 62:NoiseDeformerAt3->10:At 121479
                Single _119Multiply;// 62:NoiseDeformerAt3->13:Multiply 121478
                Single _120Add;// 62:NoiseDeformerAt3->14:Add 121470
                Single _121PairItem2;// 77:NoiseDeformerNoise3->13:PairItem2 121643
                Int32 _122PairItem2;// 77:NoiseDeformerNoise3->11:PairItem2 121651
                Int32 _123At;// 77:NoiseDeformerNoise3->32:At 121650
                Int32 _124Add;// 77:NoiseDeformerNoise3->34:Add 121648
                Int32 _125At;// 77:NoiseDeformerNoise3->113:At 121647
                Int32 _126Add;// 77:NoiseDeformerNoise3->65:Add 121645
                IArray[Single] _127At;// 77:NoiseDeformerNoise3->64:At 121644
                Int32 _128Zero;// 66:NoiseDeformerAt3->5:Zero 121636
                Single _129At;// 66:NoiseDeformerAt3->4:At 121635
                Single _130Multiply;// 66:NoiseDeformerAt3->11:Multiply 121634
                Int32 _131One;// 66:NoiseDeformerAt3->8:One 121639
                Single _132At;// 66:NoiseDeformerAt3->7:At 121638
                Single _133Multiply;// 66:NoiseDeformerAt3->12:Multiply 121637
                Single _134Add;// 66:NoiseDeformerAt3->6:Add 121633
                Int32 _135Two;// 66:NoiseDeformerAt3->9:Two 121642
                Single _136At;// 66:NoiseDeformerAt3->10:At 121641
                Single _137Multiply;// 66:NoiseDeformerAt3->13:Multiply 121640
                Single _138Add;// 66:NoiseDeformerAt3->14:Add 121632
                Single _139Constant;// 42:NoiseDeformerSCurve->0:Constant 121655
                Single _140Constant;// 42:NoiseDeformerSCurve->0:Constant 121657
                Single _141Multiply;// 42:NoiseDeformerSCurve->41:Multiply 121656
                Single _142Subtract;// 42:NoiseDeformerSCurve->39:Subtract 121654
                Single _143Multiply;// 42:NoiseDeformerSCurve->35:Multiply 121659
                Single _144Multiply;// 42:NoiseDeformerSCurve->37:Multiply 121653
                Single _145FloatLerp;// 77:NoiseDeformerNoise3->68:FloatLerp 121465
                Int32 _146PairItem2;// 77:NoiseDeformerNoise3->22:PairItem2 121681
                Int32 _147Add;// 77:NoiseDeformerNoise3->38:Add 121680
                Int32 _148At;// 77:NoiseDeformerNoise3->114:At 121679
                Int32 _149Add;// 77:NoiseDeformerNoise3->71:Add 121677
                IArray[Single] _150At;// 77:NoiseDeformerNoise3->70:At 121676
                Int32 _151Zero;// 72:NoiseDeformerAt3->5:Zero 121669
                Single _152At;// 72:NoiseDeformerAt3->4:At 121668
                Single _153Multiply;// 72:NoiseDeformerAt3->11:Multiply 121667
                Single _154PairItem2;// 77:NoiseDeformerNoise3->21:PairItem2 121682
                Int32 _155One;// 72:NoiseDeformerAt3->8:One 121672
                Single _156At;// 72:NoiseDeformerAt3->7:At 121671
                Single _157Multiply;// 72:NoiseDeformerAt3->12:Multiply 121670
                Single _158Add;// 72:NoiseDeformerAt3->6:Add 121666
                Int32 _159Two;// 72:NoiseDeformerAt3->9:Two 121675
                Single _160At;// 72:NoiseDeformerAt3->10:At 121674
                Single _161Multiply;// 72:NoiseDeformerAt3->13:Multiply 121673
                Single _162Add;// 72:NoiseDeformerAt3->14:Add 121665
                Int32 _163Add;// 77:NoiseDeformerNoise3->39:Add 121702
                Int32 _164At;// 77:NoiseDeformerNoise3->115:At 121701
                Int32 _165Add;// 77:NoiseDeformerNoise3->74:Add 121699
                IArray[Single] _166At;// 77:NoiseDeformerNoise3->76:At 121698
                Int32 _167Zero;// 75:NoiseDeformerAt3->5:Zero 121691
                Single _168At;// 75:NoiseDeformerAt3->4:At 121690
                Single _169Multiply;// 75:NoiseDeformerAt3->11:Multiply 121689
                Int32 _170One;// 75:NoiseDeformerAt3->8:One 121694
                Single _171At;// 75:NoiseDeformerAt3->7:At 121693
                Single _172Multiply;// 75:NoiseDeformerAt3->12:Multiply 121692
                Single _173Add;// 75:NoiseDeformerAt3->6:Add 121688
                Int32 _174Two;// 75:NoiseDeformerAt3->9:Two 121697
                Single _175At;// 75:NoiseDeformerAt3->10:At 121696
                Single _176Multiply;// 75:NoiseDeformerAt3->13:Multiply 121695
                Single _177Add;// 75:NoiseDeformerAt3->14:Add 121687
                Single _178FloatLerp;// 77:NoiseDeformerNoise3->78:FloatLerp 121660
                Single _179Constant;// 56:NoiseDeformerSCurve->0:Constant 121706
                Single _180Constant;// 56:NoiseDeformerSCurve->0:Constant 121708
                Single _181Multiply;// 56:NoiseDeformerSCurve->41:Multiply 121707
                Single _182Subtract;// 56:NoiseDeformerSCurve->39:Subtract 121705
                Single _183Multiply;// 56:NoiseDeformerSCurve->35:Multiply 121710
                Single _184Multiply;// 56:NoiseDeformerSCurve->37:Multiply 121704
                Single _185FloatLerp;// 77:NoiseDeformerNoise3->80:FloatLerp 121464
                Int32 _186PairItem2;// 77:NoiseDeformerNoise3->49:PairItem2 121730
                Int32 _187Add;// 77:NoiseDeformerNoise3->84:Add 121729
                IArray[Single] _188At;// 77:NoiseDeformerNoise3->83:At 121728
                Int32 _189Zero;// 82:NoiseDeformerAt3->5:Zero 121721
                Single _190At;// 82:NoiseDeformerAt3->4:At 121720
                Single _191Multiply;// 82:NoiseDeformerAt3->11:Multiply 121719
                Int32 _192One;// 82:NoiseDeformerAt3->8:One 121724
                Single _193At;// 82:NoiseDeformerAt3->7:At 121723
                Single _194Multiply;// 82:NoiseDeformerAt3->12:Multiply 121722
                Single _195Add;// 82:NoiseDeformerAt3->6:Add 121718
                Single _196PairItem2;// 77:NoiseDeformerNoise3->50:PairItem2 121731
                Int32 _197Two;// 82:NoiseDeformerAt3->9:Two 121727
                Single _198At;// 82:NoiseDeformerAt3->10:At 121726
                Single _199Multiply;// 82:NoiseDeformerAt3->13:Multiply 121725
                Single _200Add;// 82:NoiseDeformerAt3->14:Add 121717
                Int32 _201Add;// 77:NoiseDeformerNoise3->88:Add 121748
                IArray[Single] _202At;// 77:NoiseDeformerNoise3->87:At 121747
                Int32 _203Zero;// 86:NoiseDeformerAt3->5:Zero 121740
                Single _204At;// 86:NoiseDeformerAt3->4:At 121739
                Single _205Multiply;// 86:NoiseDeformerAt3->11:Multiply 121738
                Int32 _206One;// 86:NoiseDeformerAt3->8:One 121743
                Single _207At;// 86:NoiseDeformerAt3->7:At 121742
                Single _208Multiply;// 86:NoiseDeformerAt3->12:Multiply 121741
                Single _209Add;// 86:NoiseDeformerAt3->6:Add 121737
                Int32 _210Two;// 86:NoiseDeformerAt3->9:Two 121746
                Single _211At;// 86:NoiseDeformerAt3->10:At 121745
                Single _212Multiply;// 86:NoiseDeformerAt3->13:Multiply 121744
                Single _213Add;// 86:NoiseDeformerAt3->14:Add 121736
                Single _214FloatLerp;// 77:NoiseDeformerNoise3->90:FloatLerp 121712
                Int32 _215Add;// 77:NoiseDeformerNoise3->94:Add 121766
                IArray[Single] _216At;// 77:NoiseDeformerNoise3->93:At 121765
                Int32 _217Zero;// 92:NoiseDeformerAt3->5:Zero 121758
                Single _218At;// 92:NoiseDeformerAt3->4:At 121757
                Single _219Multiply;// 92:NoiseDeformerAt3->11:Multiply 121756
                Int32 _220One;// 92:NoiseDeformerAt3->8:One 121761
                Single _221At;// 92:NoiseDeformerAt3->7:At 121760
                Single _222Multiply;// 92:NoiseDeformerAt3->12:Multiply 121759
                Single _223Add;// 92:NoiseDeformerAt3->6:Add 121755
                Int32 _224Two;// 92:NoiseDeformerAt3->9:Two 121764
                Single _225At;// 92:NoiseDeformerAt3->10:At 121763
                Single _226Multiply;// 92:NoiseDeformerAt3->13:Multiply 121762
                Single _227Add;// 92:NoiseDeformerAt3->14:Add 121754
                Int32 _228Add;// 77:NoiseDeformerNoise3->97:Add 121783
                IArray[Single] _229At;// 77:NoiseDeformerNoise3->98:At 121782
                Int32 _230Zero;// 96:NoiseDeformerAt3->5:Zero 121775
                Single _231At;// 96:NoiseDeformerAt3->4:At 121774
                Single _232Multiply;// 96:NoiseDeformerAt3->11:Multiply 121773
                Int32 _233One;// 96:NoiseDeformerAt3->8:One 121778
                Single _234At;// 96:NoiseDeformerAt3->7:At 121777
                Single _235Multiply;// 96:NoiseDeformerAt3->12:Multiply 121776
                Single _236Add;// 96:NoiseDeformerAt3->6:Add 121772
                Int32 _237Two;// 96:NoiseDeformerAt3->9:Two 121781
                Single _238At;// 96:NoiseDeformerAt3->10:At 121780
                Single _239Multiply;// 96:NoiseDeformerAt3->13:Multiply 121779
                Single _240Add;// 96:NoiseDeformerAt3->14:Add 121771
                Single _241FloatLerp;// 77:NoiseDeformerNoise3->100:FloatLerp 121749
                Single _242FloatLerp;// 77:NoiseDeformerNoise3->102:FloatLerp 121711
                Single _243Constant;// 58:NoiseDeformerSCurve->0:Constant 121787
                Single _244Constant;// 58:NoiseDeformerSCurve->0:Constant 121789
                Single _245Multiply;// 58:NoiseDeformerSCurve->41:Multiply 121788
                Single _246Subtract;// 58:NoiseDeformerSCurve->39:Subtract 121786
                Single _247Multiply;// 58:NoiseDeformerSCurve->35:Multiply 121791
                Single _248Multiply;// 58:NoiseDeformerSCurve->37:Multiply 121785
                Single _249FloatLerp;// 77:NoiseDeformerNoise3->104:FloatLerp 121463
                Single _250NaN;// 118:IsNaN->1:NaN 121461
                Int32 _251Compare;// 118:IsNaN->2:Compare 121460
                Int32 _252Zero;// 118:IsNaN->4:Zero 121462
                Boolean _253Equal;// 118:IsNaN->3:Equal 121459
                Single _255Multiply;// 27:NoiseDeformerfBm1->64:Multiply 121433
                Int32 _256Zero;// 48:First->2:Zero 121804
                Single _257At;// 48:First->0:At 121803
                Single _258Add;// 27:NoiseDeformerfBm1->59:Add 121432
                IArray[Single] _259Unit;// 43:Array2->2:Unit 121430
                Single _260Add;// 27:NoiseDeformerfBm1->52:Add 121806
                IArray[Single] _261Append;// 43:Array2->3:Append 121429
                _0One = One();
                _1At = At(x0, _0One);
                _2AsInt = AsInt(_1At);
                _3At = At(_13Map, _2AsInt);
                _4Constant = 4096;
                _5At = At(_23GenerateN, _2AsInt);
                _6X = X(_5At);
                _7Unit = Unit(_6X);
                _8Y = Y(_5At);
                _9Append = Append(_7Unit, _8Y);
                _10Z = Z(_5At);
                _11Append = Append(_9Append, _10Z);
                _12Zero = Zero();
                _13Zero = Zero();
                _14Count = Count(_11Append);
                _15One = One();
                _16Subtract = Subtract(_14Count, _15One);
                _17ClampInt = ClampInt(_12Zero, _13Zero, _16Subtract);
                _18At = At(_11Append, _17ClampInt);
                _19Add = Add(_4Constant, _18At);
                _20Floor = Floor(_19Add);
                _21Constant = 255;
                _22And = And(_20Floor, _21Constant);
                _23One = One();
                _24Add = Add(_22And, _23One);
                _25And = And(_24Add, _21Constant);
                _26Pair = Pair(_22And, _25And);
                _27Floor = Floor(_19Add);
                _28AsFloat = AsFloat(_27Floor);
                _29Subtract = Subtract(_19Add, _28AsFloat);
                _30FloatOne = FloatOne();
                _31Subtract = Subtract(_29Subtract, _30FloatOne);
                _32Pair = Pair(_29Subtract, _31Subtract);
                _33Pair = Pair(_26Pair, _32Pair);
                _34PairItem2 = PairItem2(_33Pair);
                _35PairItem1 = PairItem1(_34PairItem2);
                _36PairItem2 = PairItem2(x1);
                _37PairItem1 = PairItem1(_33Pair);
                _38PairItem1 = PairItem1(_37PairItem1);
                _39At = At(_36PairItem2, _38PairItem1);
                _40Constant = 4096;
                _41X = X(_5At);
                _42Unit = Unit(_41X);
                _43Y = Y(_5At);
                _44Append = Append(_42Unit, _43Y);
                _45Z = Z(_5At);
                _46Append = Append(_44Append, _45Z);
                _47One = One();
                _48Zero = Zero();
                _49Count = Count(_46Append);
                _50One = One();
                _51Subtract = Subtract(_49Count, _50One);
                _52ClampInt = ClampInt(_47One, _48Zero, _51Subtract);
                _53At = At(_46Append, _52ClampInt);
                _54Add = Add(_40Constant, _53At);
                _55Floor = Floor(_54Add);
                _56Constant = 255;
                _57And = And(_55Floor, _56Constant);
                _58One = One();
                _59Add = Add(_57And, _58One);
                _60And = And(_59Add, _56Constant);
                _61Pair = Pair(_57And, _60And);
                _62Floor = Floor(_54Add);
                _63AsFloat = AsFloat(_62Floor);
                _64Subtract = Subtract(_54Add, _63AsFloat);
                _65FloatOne = FloatOne();
                _66Subtract = Subtract(_64Subtract, _65FloatOne);
                _67Pair = Pair(_64Subtract, _66Subtract);
                _68Pair = Pair(_61Pair, _67Pair);
                _69PairItem1 = PairItem1(_68Pair);
                _70PairItem1 = PairItem1(_69PairItem1);
                _71Add = Add(_39At, _70PairItem1);
                _72At = At(_36PairItem2, _71Add);
                _73Constant = 4096;
                _74X = X(_5At);
                _75Unit = Unit(_74X);
                _76Y = Y(_5At);
                _77Append = Append(_75Unit, _76Y);
                _78Z = Z(_5At);
                _79Append = Append(_77Append, _78Z);
                _80Two = Two();
                _81Zero = Zero();
                _82Count = Count(_79Append);
                _83One = One();
                _84Subtract = Subtract(_82Count, _83One);
                _85ClampInt = ClampInt(_80Two, _81Zero, _84Subtract);
                _86At = At(_79Append, _85ClampInt);
                _87Add = Add(_73Constant, _86At);
                _88Floor = Floor(_87Add);
                _89Constant = 255;
                _90And = And(_88Floor, _89Constant);
                _91One = One();
                _92Add = Add(_90And, _91One);
                _93And = And(_92Add, _89Constant);
                _94Pair = Pair(_90And, _93And);
                _95Floor = Floor(_87Add);
                _96AsFloat = AsFloat(_95Floor);
                _97Subtract = Subtract(_87Add, _96AsFloat);
                _98FloatOne = FloatOne();
                _99Subtract = Subtract(_97Subtract, _98FloatOne);
                _100Pair = Pair(_97Subtract, _99Subtract);
                _101Pair = Pair(_94Pair, _100Pair);
                _102PairItem1 = PairItem1(_101Pair);
                _103PairItem1 = PairItem1(_102PairItem1);
                _104Add = Add(_72At, _103PairItem1);
                _105At = At(_24PairItem1, _104Add);
                _106Zero = Zero();
                _107At = At(_105At, _106Zero);
                _108Multiply = Multiply(_35PairItem1, _107At);
                _109PairItem2 = PairItem2(_68Pair);
                _110PairItem1 = PairItem1(_109PairItem2);
                _111One = One();
                _112At = At(_105At, _111One);
                _113Multiply = Multiply(_110PairItem1, _112At);
                _114Add = Add(_108Multiply, _113Multiply);
                _115PairItem2 = PairItem2(_101Pair);
                _116PairItem1 = PairItem1(_115PairItem2);
                _117Two = Two();
                _118At = At(_105At, _117Two);
                _119Multiply = Multiply(_116PairItem1, _118At);
                _120Add = Add(_114Add, _119Multiply);
                _121PairItem2 = PairItem2(_34PairItem2);
                _122PairItem2 = PairItem2(_37PairItem1);
                _123At = At(_36PairItem2, _122PairItem2);
                _124Add = Add(_123At, _70PairItem1);
                _125At = At(_36PairItem2, _124Add);
                _126Add = Add(_125At, _103PairItem1);
                _127At = At(_24PairItem1, _126Add);
                _128Zero = Zero();
                _129At = At(_127At, _128Zero);
                _130Multiply = Multiply(_121PairItem2, _129At);
                _131One = One();
                _132At = At(_127At, _131One);
                _133Multiply = Multiply(_110PairItem1, _132At);
                _134Add = Add(_130Multiply, _133Multiply);
                _135Two = Two();
                _136At = At(_127At, _135Two);
                _137Multiply = Multiply(_116PairItem1, _136At);
                _138Add = Add(_134Add, _137Multiply);
                _139Constant = 3;
                _140Constant = 2;
                _141Multiply = Multiply(_140Constant, _35PairItem1);
                _142Subtract = Subtract(_139Constant, _141Multiply);
                _143Multiply = Multiply(_35PairItem1, _35PairItem1);
                _144Multiply = Multiply(_142Subtract, _143Multiply);
                _145FloatLerp = FloatLerp(_120Add, _138Add, _144Multiply);
                _146PairItem2 = PairItem2(_69PairItem1);
                _147Add = Add(_39At, _146PairItem2);
                _148At = At(_36PairItem2, _147Add);
                _149Add = Add(_148At, _103PairItem1);
                _150At = At(_24PairItem1, _149Add);
                _151Zero = Zero();
                _152At = At(_150At, _151Zero);
                _153Multiply = Multiply(_35PairItem1, _152At);
                _154PairItem2 = PairItem2(_109PairItem2);
                _155One = One();
                _156At = At(_150At, _155One);
                _157Multiply = Multiply(_154PairItem2, _156At);
                _158Add = Add(_153Multiply, _157Multiply);
                _159Two = Two();
                _160At = At(_150At, _159Two);
                _161Multiply = Multiply(_116PairItem1, _160At);
                _162Add = Add(_158Add, _161Multiply);
                _163Add = Add(_123At, _146PairItem2);
                _164At = At(_36PairItem2, _163Add);
                _165Add = Add(_164At, _103PairItem1);
                _166At = At(_24PairItem1, _165Add);
                _167Zero = Zero();
                _168At = At(_166At, _167Zero);
                _169Multiply = Multiply(_121PairItem2, _168At);
                _170One = One();
                _171At = At(_166At, _170One);
                _172Multiply = Multiply(_154PairItem2, _171At);
                _173Add = Add(_169Multiply, _172Multiply);
                _174Two = Two();
                _175At = At(_166At, _174Two);
                _176Multiply = Multiply(_116PairItem1, _175At);
                _177Add = Add(_173Add, _176Multiply);
                _178FloatLerp = FloatLerp(_162Add, _177Add, _144Multiply);
                _179Constant = 3;
                _180Constant = 2;
                _181Multiply = Multiply(_180Constant, _110PairItem1);
                _182Subtract = Subtract(_179Constant, _181Multiply);
                _183Multiply = Multiply(_110PairItem1, _110PairItem1);
                _184Multiply = Multiply(_182Subtract, _183Multiply);
                _185FloatLerp = FloatLerp(_145FloatLerp, _178FloatLerp, _184Multiply);
                _186PairItem2 = PairItem2(_102PairItem1);
                _187Add = Add(_72At, _186PairItem2);
                _188At = At(_24PairItem1, _187Add);
                _189Zero = Zero();
                _190At = At(_188At, _189Zero);
                _191Multiply = Multiply(_35PairItem1, _190At);
                _192One = One();
                _193At = At(_188At, _192One);
                _194Multiply = Multiply(_110PairItem1, _193At);
                _195Add = Add(_191Multiply, _194Multiply);
                _196PairItem2 = PairItem2(_115PairItem2);
                _197Two = Two();
                _198At = At(_188At, _197Two);
                _199Multiply = Multiply(_196PairItem2, _198At);
                _200Add = Add(_195Add, _199Multiply);
                _201Add = Add(_125At, _186PairItem2);
                _202At = At(_24PairItem1, _201Add);
                _203Zero = Zero();
                _204At = At(_202At, _203Zero);
                _205Multiply = Multiply(_121PairItem2, _204At);
                _206One = One();
                _207At = At(_202At, _206One);
                _208Multiply = Multiply(_110PairItem1, _207At);
                _209Add = Add(_205Multiply, _208Multiply);
                _210Two = Two();
                _211At = At(_202At, _210Two);
                _212Multiply = Multiply(_196PairItem2, _211At);
                _213Add = Add(_209Add, _212Multiply);
                _214FloatLerp = FloatLerp(_200Add, _213Add, _144Multiply);
                _215Add = Add(_148At, _186PairItem2);
                _216At = At(_24PairItem1, _215Add);
                _217Zero = Zero();
                _218At = At(_216At, _217Zero);
                _219Multiply = Multiply(_35PairItem1, _218At);
                _220One = One();
                _221At = At(_216At, _220One);
                _222Multiply = Multiply(_154PairItem2, _221At);
                _223Add = Add(_219Multiply, _222Multiply);
                _224Two = Two();
                _225At = At(_216At, _224Two);
                _226Multiply = Multiply(_196PairItem2, _225At);
                _227Add = Add(_223Add, _226Multiply);
                _228Add = Add(_164At, _186PairItem2);
                _229At = At(_24PairItem1, _228Add);
                _230Zero = Zero();
                _231At = At(_229At, _230Zero);
                _232Multiply = Multiply(_121PairItem2, _231At);
                _233One = One();
                _234At = At(_229At, _233One);
                _235Multiply = Multiply(_154PairItem2, _234At);
                _236Add = Add(_232Multiply, _235Multiply);
                _237Two = Two();
                _238At = At(_229At, _237Two);
                _239Multiply = Multiply(_196PairItem2, _238At);
                _240Add = Add(_236Add, _239Multiply);
                _241FloatLerp = FloatLerp(_227Add, _240Add, _144Multiply);
                _242FloatLerp = FloatLerp(_214FloatLerp, _241FloatLerp, _184Multiply);
                _243Constant = 3;
                _244Constant = 2;
                _245Multiply = Multiply(_244Constant, _116PairItem1);
                _246Subtract = Subtract(_243Constant, _245Multiply);
                _247Multiply = Multiply(_116PairItem1, _116PairItem1);
                _248Multiply = Multiply(_246Subtract, _247Multiply);
                _249FloatLerp = FloatLerp(_185FloatLerp, _242FloatLerp, _248Multiply);
                _250NaN = NaN();
                _251Compare = Compare(_249FloatLerp, _250NaN);
                _252Zero = Zero();
                _253Equal = Equal(_251Compare, _252Zero);
                _255Multiply = Multiply(_3At, if (_253Equal)
                    {
                      Single _254FloatZero;// 77:NoiseDeformerNoise3->117:FloatZero 121792
                      _254FloatZero = FloatZero();
                      _254FloatZero;
                      }else
                    {
                      _249FloatLerp;
                      });
                _256Zero = Zero();
                _257At = At(x0, _256Zero);
                _258Add = Add(_255Multiply, _257At);
                _259Unit = Unit(_258Add);
                _260Add = Add(_1At, _25FloatOne);
                _261Append = Append(_259Unit, _260Add);
                _261Append;
                });
            _27Count = Count(_26GenerateN);
            _28One = One();
            _29Subtract = Subtract(_27Count, _28One);
            _30At = At(_26GenerateN, _29Subtract);
            _31Zero = Zero();
            _32At = At(_30At, _31Zero);
            _32At;
            }, _19X, _16Y);
        _22Vector3 = Vector3(_18Apply2, _20Apply2, _21Apply2);
        _23Vector3 = Vector3(strengthX, strengthY, strengthZ);
        _24Multiply = Multiply(_22Vector3, _23Vector3);
        _25Add = Add(_10Transform, _24Multiply);
        _26Transform = Transform(_25Add, _8Pass-through: Matrix);
        _26Transform;
        }, _27Pair);
    _29ParallelMap = ParallelMap(_0MeshVertices, _28Bind2of2);
    _30SetMeshVertices = SetMeshVertices(mesh, _29ParallelMap);
    _30SetMeshVertices;
    }