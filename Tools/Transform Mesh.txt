(InstanceState state, TriMesh mesh, Single x offset, Single y offset, Single z offset, Single x rotation, Single y rotation, Single z rotation, Single x scale, Single y scale, Single z scale) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 41550
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 41552
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 41551
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 41549
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 41548
    TriMesh _5IfThen;// 2:MeshSetVertices-ext->10:IfThen 41544
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 2:MeshSetVertices-ext->0:MeshVertices 41559
        IArray[Vector3] _1MeshVertices;// 1:MeshTransform-ext->3:MeshVertices 41565
        Vector3 _2Vector3;// 3:Vector3 41582
        Matrix _3TranslationMatrix;// 2:MatrixFromPRS-ext->3:TranslationMatrix 41576
        Vector3 _4Vector3;// 5:Vector3 41627
        Single _5X;// 1:VectorAsArray->1:X 41623
        IArray[Single] _6Unit;// 4:Array3->2:Unit 41622
        Single _7Y;// 1:VectorAsArray->2:Y 41624
        IArray[Single] _8Append;// 4:Array3->3:Append 41621
        Single _9Z;// 1:VectorAsArray->3:Z 41625
        IArray[Single] _10Append;// 4:Array3->6:Append 41620
        Func[Single, Single] _11Pass-through: function1;// 0:Pass-through: function1 41602
        IArray[Single] _12Map;// 1:VectorMapComponents-ext->2:Map 41615
        Int32 _13Zero;// 3:ArrayToVector-ext->5:Zero 41606
        Single _14At;// 3:ArrayToVector-ext->1:At 41605
        Int32 _15One;// 6:PlusOne->1:One 41610
        Int32 _16Add;// 6:PlusOne->0:Add 41609
        Single _17At;// 3:ArrayToVector-ext->2:At 41607
        Int32 _18One;// 7:PlusOne->1:One 41614
        Int32 _19Add;// 7:PlusOne->0:Add 41613
        Single _20At;// 3:ArrayToVector-ext->3:At 41611
        Vector3 _21Vector3;// 3:ArrayToVector-ext->4:Vector3 41604
        Single _22X;// 1:RotationMatrixFromEuler->0:X 41595
        Matrix _23RotationXMatrix;// 1:RotationMatrixFromEuler->4:RotationXMatrix 41594
        Single _24Y;// 1:RotationMatrixFromEuler->2:Y 41597
        Matrix _25RotationYMatrix;// 1:RotationMatrixFromEuler->5:RotationYMatrix 41596
        Matrix _26Multiply;// 8:MultiplyThreeNumbers->0:Multiply 41593
        Single _27Z;// 1:RotationMatrixFromEuler->3:Z 41599
        Matrix _28RotationZMatrix;// 1:RotationMatrixFromEuler->6:RotationZMatrix 41598
        Matrix _29Multiply;// 8:MultiplyThreeNumbers->1:Multiply 41592
        Quaternion _30GetMatrixRotation;// 4:QuaternionFromEuler->4:GetMatrixRotation 41587
        Matrix _31MatrixFromQuaternion;// 2:MatrixFromPRS-ext->4:MatrixFromQuaternion 41577
        Matrix _32Multiply;// 6:Multiply3-ext->3:Multiply 41575
        Vector3 _33Vector3;// 6:Vector3 41634
        Single _34Constant;// 17:Vector3PercentToRatio-ext->0:Constant 41633
        Vector3 _35DivideByScalar;// 17:Vector3PercentToRatio-ext->1:DivideByScalar 41632
        Single _36Constant;// 8:Origin->0:Constant 41581
        Vector3 _37Vector3;// 8:Origin->1:Vector3 41580
        Matrix _38ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 41579
        Matrix _39Multiply;// 6:Multiply3-ext->4:Multiply 41574
        IArray[Vector3] _40Map;// 1:MeshTransform-ext->4:Map 41564
        Int32 _41Zero;// 7:SoftSelection->2:Zero 41562
        IArray[Single] _42PerVertexData;// 7:SoftSelection->3:PerVertexData 41561
        IArray[Vector3] _43Combine3;// 1:LerpVectors-ext->10:Combine3 41557
        TriMesh _44SetMeshVertices;// 2:MeshSetVertices-ext->6:SetMeshVertices 41553
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Vector3 = Vector3(x offset, y offset, z offset);
        _3TranslationMatrix = TranslationMatrix(_2Vector3);
        _4Vector3 = Vector3(x rotation, y rotation, z rotation);
        _5X = X(_4Vector3);
        _6Unit = Unit(_5X);
        _7Y = Y(_4Vector3);
        _8Append = Append(_6Unit, _7Y);
        _9Z = Z(_4Vector3);
        _10Append = Append(_8Append, _9Z);
        _11Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 18:EulerDegreesToRadians-ext->2:ToRadians 41626
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _12Map = Map(_10Append, _11Pass-through: function1);
        _13Zero = Zero();
        _14At = At(_12Map, _13Zero);
        _15One = One();
        _16Add = Add(_13Zero, _15One);
        _17At = At(_12Map, _16Add);
        _18One = One();
        _19Add = Add(_16Add, _18One);
        _20At = At(_12Map, _19Add);
        _21Vector3 = Vector3(_14At, _17At, _20At);
        _22X = X(_21Vector3);
        _23RotationXMatrix = RotationXMatrix(_22X);
        _24Y = Y(_21Vector3);
        _25RotationYMatrix = RotationYMatrix(_24Y);
        _26Multiply = Multiply(_23RotationXMatrix, _25RotationYMatrix);
        _27Z = Z(_21Vector3);
        _28RotationZMatrix = RotationZMatrix(_27Z);
        _29Multiply = Multiply(_26Multiply, _28RotationZMatrix);
        _30GetMatrixRotation = GetMatrixRotation(_29Multiply);
        _31MatrixFromQuaternion = MatrixFromQuaternion(_30GetMatrixRotation);
        _32Multiply = Multiply(_3TranslationMatrix, _31MatrixFromQuaternion);
        _33Vector3 = Vector3(x scale, y scale, z scale);
        _34Constant = 100;
        _35DivideByScalar = DivideByScalar(_33Vector3, _34Constant);
        _36Constant = 0;
        _37Vector3 = Vector3(_36Constant, _36Constant, _36Constant);
        _38ScalingTranslationMatrix = ScalingTranslationMatrix(_35DivideByScalar, _37Vector3);
        _39Multiply = Multiply(_32Multiply, _38ScalingTranslationMatrix);
        _40Map = Map(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 1:MeshTransform-ext->5:Transform 41566
            _0Transform = Transform(x0, _39Multiply);
            _0Transform;
            });
        _41Zero = Zero();
        _42PerVertexData = PerVertexData(mesh, _41Zero);
        _43Combine3 = Combine3(_0MeshVertices, _40Map, _42PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 41558
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _44SetMeshVertices = SetMeshVertices(mesh, _43Combine3);
        _44SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 1:MeshTransform-ext->3:MeshVertices 41565
        Vector3 _1Vector3;// 3:Vector3 41582
        Matrix _2TranslationMatrix;// 2:MatrixFromPRS-ext->3:TranslationMatrix 41576
        Vector3 _3Vector3;// 5:Vector3 41627
        Single _4X;// 1:VectorAsArray->1:X 41623
        IArray[Single] _5Unit;// 4:Array3->2:Unit 41622
        Single _6Y;// 1:VectorAsArray->2:Y 41624
        IArray[Single] _7Append;// 4:Array3->3:Append 41621
        Single _8Z;// 1:VectorAsArray->3:Z 41625
        IArray[Single] _9Append;// 4:Array3->6:Append 41620
        Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 41602
        IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 41615
        Int32 _12Zero;// 3:ArrayToVector-ext->5:Zero 41606
        Single _13At;// 3:ArrayToVector-ext->1:At 41605
        Int32 _14One;// 6:PlusOne->1:One 41610
        Int32 _15Add;// 6:PlusOne->0:Add 41609
        Single _16At;// 3:ArrayToVector-ext->2:At 41607
        Int32 _17One;// 7:PlusOne->1:One 41614
        Int32 _18Add;// 7:PlusOne->0:Add 41613
        Single _19At;// 3:ArrayToVector-ext->3:At 41611
        Vector3 _20Vector3;// 3:ArrayToVector-ext->4:Vector3 41604
        Single _21X;// 1:RotationMatrixFromEuler->0:X 41595
        Matrix _22RotationXMatrix;// 1:RotationMatrixFromEuler->4:RotationXMatrix 41594
        Single _23Y;// 1:RotationMatrixFromEuler->2:Y 41597
        Matrix _24RotationYMatrix;// 1:RotationMatrixFromEuler->5:RotationYMatrix 41596
        Matrix _25Multiply;// 8:MultiplyThreeNumbers->0:Multiply 41593
        Single _26Z;// 1:RotationMatrixFromEuler->3:Z 41599
        Matrix _27RotationZMatrix;// 1:RotationMatrixFromEuler->6:RotationZMatrix 41598
        Matrix _28Multiply;// 8:MultiplyThreeNumbers->1:Multiply 41592
        Quaternion _29GetMatrixRotation;// 4:QuaternionFromEuler->4:GetMatrixRotation 41587
        Matrix _30MatrixFromQuaternion;// 2:MatrixFromPRS-ext->4:MatrixFromQuaternion 41577
        Matrix _31Multiply;// 6:Multiply3-ext->3:Multiply 41575
        Vector3 _32Vector3;// 6:Vector3 41634
        Single _33Constant;// 17:Vector3PercentToRatio-ext->0:Constant 41633
        Vector3 _34DivideByScalar;// 17:Vector3PercentToRatio-ext->1:DivideByScalar 41632
        Single _35Constant;// 8:Origin->0:Constant 41581
        Vector3 _36Vector3;// 8:Origin->1:Vector3 41580
        Matrix _37ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 41579
        Matrix _38Multiply;// 6:Multiply3-ext->4:Multiply 41574
        IArray[Vector3] _39Map;// 1:MeshTransform-ext->4:Map 41564
        TriMesh _40SetMeshVertices;// 2:MeshSetVertices-ext->8:SetMeshVertices 41563
        _0MeshVertices = MeshVertices(mesh);
        _1Vector3 = Vector3(x offset, y offset, z offset);
        _2TranslationMatrix = TranslationMatrix(_1Vector3);
        _3Vector3 = Vector3(x rotation, y rotation, z rotation);
        _4X = X(_3Vector3);
        _5Unit = Unit(_4X);
        _6Y = Y(_3Vector3);
        _7Append = Append(_5Unit, _6Y);
        _8Z = Z(_3Vector3);
        _9Append = Append(_7Append, _8Z);
        _10Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 18:EulerDegreesToRadians-ext->2:ToRadians 41626
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _11Map = Map(_9Append, _10Pass-through: function1);
        _12Zero = Zero();
        _13At = At(_11Map, _12Zero);
        _14One = One();
        _15Add = Add(_12Zero, _14One);
        _16At = At(_11Map, _15Add);
        _17One = One();
        _18Add = Add(_15Add, _17One);
        _19At = At(_11Map, _18Add);
        _20Vector3 = Vector3(_13At, _16At, _19At);
        _21X = X(_20Vector3);
        _22RotationXMatrix = RotationXMatrix(_21X);
        _23Y = Y(_20Vector3);
        _24RotationYMatrix = RotationYMatrix(_23Y);
        _25Multiply = Multiply(_22RotationXMatrix, _24RotationYMatrix);
        _26Z = Z(_20Vector3);
        _27RotationZMatrix = RotationZMatrix(_26Z);
        _28Multiply = Multiply(_25Multiply, _27RotationZMatrix);
        _29GetMatrixRotation = GetMatrixRotation(_28Multiply);
        _30MatrixFromQuaternion = MatrixFromQuaternion(_29GetMatrixRotation);
        _31Multiply = Multiply(_2TranslationMatrix, _30MatrixFromQuaternion);
        _32Vector3 = Vector3(x scale, y scale, z scale);
        _33Constant = 100;
        _34DivideByScalar = DivideByScalar(_32Vector3, _33Constant);
        _35Constant = 0;
        _36Vector3 = Vector3(_35Constant, _35Constant, _35Constant);
        _37ScalingTranslationMatrix = ScalingTranslationMatrix(_34DivideByScalar, _36Vector3);
        _38Multiply = Multiply(_31Multiply, _37ScalingTranslationMatrix);
        _39Map = Map(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 1:MeshTransform-ext->5:Transform 41566
            _0Transform = Transform(x0, _38Multiply);
            _0Transform;
            });
        _40SetMeshVertices = SetMeshVertices(mesh, _39Map);
        _40SetMeshVertices;
        });
    _5IfThen;
    }