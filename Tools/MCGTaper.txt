(InstanceState state, TriMesh mesh, Int32 axis, Boolean useGizmoXform, INode gizmo, Matrix modifierTransform, Single amount, Single curve) => 
  {
    IArray[Vector3] _0MeshVertices;// 13:TaperMesh->15:MeshVertices 124178
    IArray[Vector3] _1MeshVertices;// 2:MeshBoundingBox->1:MeshVertices 124266
    BoundingBox _2BoxFromPoints;// 2:MeshBoundingBox->0:BoxFromPoints 124265
    Matrix _11Pass-through: Matrix;// 0:Pass-through: Matrix 124172
    IArray[Vector3] _12ParallelMap;// 13:TaperMesh->11:ParallelMap 124177
    TriMesh _13SetMeshVertices;// 13:TaperMesh->18:SetMeshVertices 124175
    _0MeshVertices = MeshVertices(mesh);
    _1MeshVertices = MeshVertices(mesh);
    _2BoxFromPoints = BoxFromPoints(_1MeshVertices);
    _11Pass-through: Matrix = if (useGizmoXform)
      {
        Boolean _3IsValidNode;// 0:GizmoTransformInLocalSpace->35:IsValidNode 124274
        _3IsValidNode = IsValidNode(gizmo);
        if (_3IsValidNode)
          {
            Boolean _4IsValidNode;// 3:ValidNodeWorldTransform->2:IsValidNode 124280
            Matrix _7InvertMatrix;// 37:MaxtoolMatrixWorldToLocalTransform->2:InvertMatrix 124284
            Matrix _8Multiply;// 32:NodeToLocalTransform->18:Multiply 124277
            _4IsValidNode = IsValidNode(gizmo);
            _7InvertMatrix = InvertMatrix(modifierTransform);
            _8Multiply = Multiply(if (_4IsValidNode)
                {
                  Matrix _5WorldTransform;// 3:ValidNodeWorldTransform->1:WorldTransform 124281
                  _5WorldTransform = WorldTransform(gizmo);
                  _5WorldTransform;
                  }else
                {
                  Matrix _6MatrixIdentity;// 3:ValidNodeWorldTransform->4:MatrixIdentity 124282
                  _6MatrixIdentity = MatrixIdentity();
                  _6MatrixIdentity;
                  }, _7InvertMatrix);
            _8Multiply;
            }else
          {
            Matrix _9MatrixIdentity;// 0:GizmoTransformInLocalSpace->40:MatrixIdentity 124285
            _9MatrixIdentity = MatrixIdentity();
            _9MatrixIdentity;
            };
        }else
      {
        Matrix _10MatrixIdentity;// 12:MatrixIdentity 124288
        _10MatrixIdentity = MatrixIdentity();
        _10MatrixIdentity;
        };
    _12ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
      {
        Single _0FloatZero;// 0:TaperDeformer->88:FloatZero 124188
        Vector3 _1BoxMax;// 47:BoundingBoxExtent->1:BoxMax 124213
        Vector3 _2BoxMin;// 47:BoundingBoxExtent->2:BoxMin 124214
        Vector3 _3Subtract;// 47:BoundingBoxExtent->3:Subtract 124212
        Single _4X;// 2:Vector3ToArray->1:X 124200
        IArray[Single] _5Unit;// 4:Array3->2:Unit 124199
        Single _6Y;// 2:Vector3ToArray->2:Y 124201
        IArray[Single] _7Append;// 4:Array3->3:Append 124198
        Single _8Z;// 2:Vector3ToArray->3:Z 124202
        IArray[Single] _9Append;// 4:Array3->6:Append 124197
        Int32 _10Zero;// 4:ValidIndex->2:Zero 124206
        Int32 _11Count;// 4:ValidIndex->4:Count 124210
        Int32 _12One;// 5:MinusOne->2:One 124209
        Int32 _13Subtract;// 5:MinusOne->1:Subtract 124208
        Int32 _14ClampInt;// 4:ValidIndex->3:ClampInt 124205
        Single _15At;// 48:Vector3At->3:At 124192
        Boolean _16Equal;// 0:TaperDeformer->89:Equal 124187
        Matrix _17InvertMatrix;// 0:TaperDeformer->79:InvertMatrix 124219
        Vector3 _18Transform;// 0:TaperDeformer->2:Transform 124218
        Boolean _27IsValidNode;// 0:GizmoTransformInLocalSpace->35:IsValidNode 124274
        Boolean _34IsValidNode;// 3:ValidNodeWorldTransform->2:IsValidNode 124280
        Matrix _37InvertMatrix;// 37:MaxtoolMatrixWorldToLocalTransform->2:InvertMatrix 124284
        Vector3 _68Transform;// 0:TaperDeformer->1:Transform 124185
        _0FloatZero = FloatZero();
        _1BoxMax = BoxMax(_2BoxFromPoints);
        _2BoxMin = BoxMin(_2BoxFromPoints);
        _3Subtract = Subtract(_1BoxMax, _2BoxMin);
        _4X = X(_3Subtract);
        _5Unit = Unit(_4X);
        _6Y = Y(_3Subtract);
        _7Append = Append(_5Unit, _6Y);
        _8Z = Z(_3Subtract);
        _9Append = Append(_7Append, _8Z);
        _10Zero = Zero();
        _11Count = Count(_9Append);
        _12One = One();
        _13Subtract = Subtract(_11Count, _12One);
        _14ClampInt = ClampInt(axis, _10Zero, _13Subtract);
        _15At = At(_9Append, _14ClampInt);
        _16Equal = Equal(_0FloatZero, _15At);
        _17InvertMatrix = InvertMatrix(_11Pass-through: Matrix);
        _18Transform = Transform(x0, _17InvertMatrix);
        _27IsValidNode = IsValidNode(gizmo);
        _34IsValidNode = IsValidNode(gizmo);
        _37InvertMatrix = InvertMatrix(modifierTransform);
        _68Transform = Transform(if (_16Equal)
          {
            _18Transform;
            }else
          {
            Single _38HalfPi;// 0:TaperDeformer->33:HalfPi 124240
            Single _39NegativeFloat;// 0:TaperDeformer->24:NegativeFloat 124239
            Matrix _40RotationYMatrix;// 0:TaperDeformer->38:RotationYMatrix 124238
            Func[Matrix] _41Pass-through: any;// 0:Pass-through: any 124232
            IArray[Func[Matrix]] _42Unit;// 27:Array3->2:Unit 124237
            Matrix _43RotationXMatrix;// 0:TaperDeformer->26:RotationXMatrix 124241
            Func[Matrix] _44Pass-through: any;// 0:Pass-through: any 124233
            IArray[Func[Matrix]] _45Append;// 27:Array3->3:Append 124236
            Matrix _46MatrixIdentity;// 0:TaperDeformer->23:MatrixIdentity 124242
            Func[Matrix] _47Pass-through: any;// 0:Pass-through: any 124234
            IArray[Func[Matrix]] _48Append;// 27:Array3->6:Append 124235
            Func[Matrix] _49At;// 0:TaperDeformer->8:At 124231
            Matrix _50Apply0;// 0:TaperDeformer->15:Apply0 124230
            Vector3 _51Transform;// 0:TaperDeformer->6:Transform 124227
            Single _52X;// 0:TaperDeformer->50:X 124225
            Single _53FloatOne;// 13:TaperDeformerWeightFunc->3:FloatOne 124249
            Single _54Z;// 0:TaperDeformer->49:Z 124256
            Single _55Divide;// 0:TaperDeformer->40:Divide 124255
            Single _56Multiply;// 13:TaperDeformerWeightFunc->4:Multiply 124251
            Single _57Subtract;// 13:TaperDeformerWeightFunc->9:Subtract 124253
            Single _58Multiply;// 13:TaperDeformerWeightFunc->7:Multiply 124254
            Single _59Multiply;// 13:TaperDeformerWeightFunc->8:Multiply 124252
            Single _60Add;// 13:TaperDeformerWeightFunc->6:Add 124250
            Single _61Add;// 13:TaperDeformerWeightFunc->5:Add 124248
            Single _62Multiply;// 0:TaperDeformer->46:Multiply 124224
            Single _63Y;// 0:TaperDeformer->41:Y 124260
            Single _64Multiply;// 0:TaperDeformer->37:Multiply 124259
            Vector3 _65Vector3;// 0:TaperDeformer->36:Vector3 124222
            Matrix _66InvertMatrix;// 0:TaperDeformer->5:InvertMatrix 124262
            Vector3 _67Transform;// 0:TaperDeformer->7:Transform 124221
            _38HalfPi = HalfPi();
            _39NegativeFloat = NegativeFloat(_38HalfPi);
            _40RotationYMatrix = RotationYMatrix(_39NegativeFloat);
            _41Pass-through: any = () => 
              {
                _40RotationYMatrix;
                };
            _42Unit = Unit(_41Pass-through: any);
            _43RotationXMatrix = RotationXMatrix(_38HalfPi);
            _44Pass-through: any = () => 
              {
                _43RotationXMatrix;
                };
            _45Append = Append(_42Unit, _44Pass-through: any);
            _46MatrixIdentity = MatrixIdentity();
            _47Pass-through: any = () => 
              {
                _46MatrixIdentity;
                };
            _48Append = Append(_45Append, _47Pass-through: any);
            _49At = At(_48Append, axis);
            _50Apply0 = Apply0(_49At);
            _51Transform = Transform(_18Transform, _50Apply0);
            _52X = X(_51Transform);
            _53FloatOne = FloatOne();
            _54Z = Z(_51Transform);
            _55Divide = Divide(_54Z, _15At);
            _56Multiply = Multiply(amount, _55Divide);
            _57Subtract = Subtract(_53FloatOne, _55Divide);
            _58Multiply = Multiply(curve, _55Divide);
            _59Multiply = Multiply(_57Subtract, _58Multiply);
            _60Add = Add(_56Multiply, _59Multiply);
            _61Add = Add(_53FloatOne, _60Add);
            _62Multiply = Multiply(_52X, _61Add);
            _63Y = Y(_51Transform);
            _64Multiply = Multiply(_63Y, _61Add);
            _65Vector3 = Vector3(_62Multiply, _64Multiply, _54Z);
            _66InvertMatrix = InvertMatrix(_50Apply0);
            _67Transform = Transform(_65Vector3, _66InvertMatrix);
            _67Transform;
            }, _11Pass-through: Matrix);
        _68Transform;
        });
    _13SetMeshVertices = SetMeshVertices(mesh, _12ParallelMap);
    _13SetMeshVertices;
    }