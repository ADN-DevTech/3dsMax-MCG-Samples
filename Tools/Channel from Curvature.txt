(InstanceState state, Int32 target channel, TriMesh mesh) => 
  {
    Int32 _0Constant;// 0:MapChannelOrGeometrySet-ext->0:Constant 93142
    Boolean _1Equal;// 0:MapChannelOrGeometrySet-ext->6:Equal 93141
    IArray[Int32] _2MeshIndices;// 5:MapChannelFromFaceVertex-ext->3:MeshIndices 93150
    IArray[Int32] _3Indices;// 4:MapIndices-ext->4:Indices 93149
    Func[Int32, Vector3] _4Pass-through: function1;// 0:Pass-through: function1 93135
    IArray[Vector3] _5Map;// 4:MapIndices-ext->2:Map 93148
    IArray[Int32] _6Indices;// 5:MapChannelFromFaceVertex-ext->5:Indices 93151
    _0Constant = -3;
    _1Equal = Equal(_0Constant, target channel);
    _2MeshIndices = MeshIndices(mesh);
    _3Indices = Indices(_2MeshIndices);
    _4Pass-through: function1 = (Int32 x0) => 
      {
        Int32 _0Constant;// 2:Three->0:Constant 93180
        Int32 _1Divide;// 7:DivideByThree->1:Divide 93179
        Face3 _2MeshFace;// 0:FaceVertexCurvature-ext->3:MeshFace 93177
        Vector3 _3FaceMidpoint;// 0:FaceVertexCurvature-ext->2:FaceMidpoint 93176
        IArray[Vector3] _4MeshVertices;// 6:MeshFaceVertex-ext->2:MeshVertices 93188
        IArray[Int32] _5MeshIndices;// 6:MeshFaceVertex-ext->3:MeshIndices 93189
        Int32 _6At;// 4:ArrayIndirectLookup-ext->3:At 93187
        Vector3 _7At;// 4:ArrayIndirectLookup-ext->4:At 93186
        Vector3 _8Subtract;// 0:FaceVertexCurvature-ext->4:Subtract 93175
        Single _9Length;// 8:VectorIsSmall-ext->3:Length 93164
        Single _10Constant;// 4:VectorLengthEpsilon-ext->0:Constant 93165
        Boolean _11LessThan;// 8:VectorIsSmall-ext->5:LessThan 93163
        IArray[Vector3] _12VertexNormals;// 9:MeshFaceVertexNormal-ext->4:VertexNormals 93197
        IArray[Int32] _13MeshIndices;// 9:MeshFaceVertexNormal-ext->3:MeshIndices 93198
        Int32 _14At;// 2:ArrayIndirectLookup-ext->3:At 93196
        Vector3 _15At;// 2:ArrayIndirectLookup-ext->4:At 93195
        Single _16Length;// 9:VectorIsSmall-ext->3:Length 93168
        Single _17Constant;// 4:VectorLengthEpsilon-ext->0:Constant 93169
        Boolean _18LessThan;// 9:VectorIsSmall-ext->5:LessThan 93167
        Boolean _19OrElse;// 5:VectorsAngle-ext->10:OrElse 93161
        Single _25Pass-through: Single;// 0:Pass-through: Single 93154
        Vector3 _26Vector3;// 3:ScalarToVector-ext->1:Vector3 93155
        _0Constant = 3;
        _1Divide = Divide(x0, _0Constant);
        _2MeshFace = MeshFace(mesh, _1Divide);
        _3FaceMidpoint = FaceMidpoint(_2MeshFace);
        _4MeshVertices = MeshVertices(mesh);
        _5MeshIndices = MeshIndices(mesh);
        _6At = At(_5MeshIndices, x0);
        _7At = At(_4MeshVertices, _6At);
        _8Subtract = Subtract(_3FaceMidpoint, _7At);
        _9Length = Length(_8Subtract);
        _10Constant = 1E-06;
        _11LessThan = LessThan(_9Length, _10Constant);
        _12VertexNormals = VertexNormals(mesh);
        _13MeshIndices = MeshIndices(mesh);
        _14At = At(_13MeshIndices, x0);
        _15At = At(_12VertexNormals, _14At);
        _16Length = Length(_15At);
        _17Constant = 1E-06;
        _18LessThan = LessThan(_16Length, _17Constant);
        _19OrElse = OrElse(_11LessThan, _18LessThan);
        _25Pass-through: Single = if (_19OrElse)
          {
            Single _20FloatZero;// 5:VectorsAngle-ext->5:FloatZero 93170
            _20FloatZero = FloatZero();
            _20FloatZero;
            }else
          {
            Vector3 _21Cross;// 5:VectorsAngle-ext->11:Cross 93173
            Single _22Length;// 5:VectorsAngle-ext->3:Length 93172
            Single _23Dot;// 5:VectorsAngle-ext->12:Dot 93174
            Single _24Atan2;// 5:VectorsAngle-ext->2:Atan2 93171
            _21Cross = Cross(_8Subtract, _15At);
            _22Length = Length(_21Cross);
            _23Dot = Dot(_8Subtract, _15At);
            _24Atan2 = Atan2(_22Length, _23Dot);
            _24Atan2;
            };
        _26Vector3 = Vector3(_25Pass-through: Single, _25Pass-through: Single, _25Pass-through: Single);
        _26Vector3;
        };
    _5Map = Map(_3Indices, _4Pass-through: function1);
    _6Indices = Indices(_5Map);
    if (_1Equal)
      {
        MeshData _7MeshData;// 0:MapChannelOrGeometrySet-ext->9:MeshData 93144
        TriMesh _8CreateMeshWithMeshData;// 0:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 93143
        _7MeshData = MeshData(mesh);
        _8CreateMeshWithMeshData = CreateMeshWithMeshData(_5Map, _6Indices, _7MeshData);
        _8CreateMeshWithMeshData;
        }else
      {
        TriMesh _9SetMapChannel;// 0:MapChannelOrGeometrySet-ext->0:SetMapChannel 93145
        _9SetMapChannel = SetMapChannel(mesh, target channel, _5Map, _6Indices);
        _9SetMapChannel;
        };
    }