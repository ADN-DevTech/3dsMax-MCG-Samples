(InstanceState state, Int32 flux channel, Boolean position only, INode source, TriMesh mesh, Int32 seed, Int32 axis, Boolean combine effect, Single strength) => 
  {
    Func[Random, Int32] _0Pass-through: function1;// 0:Pass-through: function1 53149
    Random _1RandomNumberGenerator;// 14:MeshRandomFacePositions.ext->6:RandomNumberGenerator 53158
    Func[Int32] _2Bind;// 8:RandomArray.ext->4:Bind 53153
    MapChannel _3GetMapChannel;// 1:MatricesFromMapChannel.ext->9:GetMapChannel 53321
    IArray[Vector3] _4MapChannelVertexBuffer;// 1:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 53320
    Int32 _5Count;// 2:Slices->2:Count 53317
    Int32 _6Constant;// 1:MatricesFromMapChannel.ext->0:Constant 53322
    Int32 _7Divide;// 2:Slices->3:Divide 53316
    IArray[Int32] _8Range;// 2:Slices->4:Range 53315
    IArray[IArray[Vector3]] _9Map;// 2:Slices->5:Map 53314
    IArray[Matrix] _10Map;// 1:MatricesFromMapChannel.ext->5:Map 53311
    Int32 _11Count;// 7:Count 53308
    IArray[Int32] _12ArrayOfFunction;// 8:RandomArray.ext->5:ArrayOfFunction 53152
    Boolean _13IsValidNode;// 13:MeshFromNodeWithDefault.ext->1:IsValidNode 53303
    TriMesh _15Pass-through: TriMesh;// 0:Pass-through: TriMesh 53128
    IArray[Face3] _16MeshFaces;// 14:MeshRandomFacePositions.ext->18:MeshFaces 53157
    Func[Random, Face3] _17Pass-through: function1;// 0:Pass-through: function1 53166
    Random _18RandomNumberGenerator;// 19:RandomFacePositions.ext->6:RandomNumberGenerator 53185
    Func[Face3] _19Bind;// 4:RandomArray.ext->4:Bind 53170
    Int32 _20Count;// 3:RandomElements.ext->8:Count 53183
    Int32 _21Zero;// 4:GreaterThanZero->1:Zero 53182
    Boolean _22GreaterThan;// 4:GreaterThanZero->3:GreaterThan 53181
    Int32 _24Pass-through: Int32;// 0:Pass-through: Int32 53168
    IArray[Face3] _25ArrayOfFunction;// 4:RandomArray.ext->5:ArrayOfFunction 53169
    Int32 _26One;// 11:PlusOne->1:One 53198
    Int32 _27Add;// 11:PlusOne->0:Add 53197
    Random _28RandomNumberGenerator;// 19:RandomFacePositions.ext->9:RandomNumberGenerator 53195
    Func[Single] _29Bind;// 7:PseudoRandomFloats.ext->2:Bind 53193
    Int32 _30Two;// 8:MultiplyByTwo->1:Two 53201
    Int32 _31Multiply;// 8:MultiplyByTwo->0:Multiply 53200
    IArray[Single] _32ArrayOfFunction;// 7:PseudoRandomFloats.ext->3:ArrayOfFunction 53192
    Int32 _33Zero;// 12:ArrayElementsByTwoFromZero.ext->23:Zero 53188
    Int32 _34Two;// 12:ArrayElementsByTwoFromZero.ext->21:Two 53189
    IArray[Single] _35Stride;// 12:ArrayElementsByTwoFromZero.ext->22:Stride 53187
    Int32 _36One;// 10:ArrayElementsByTwoFromOne.ext->0:One 53204
    Int32 _37Two;// 10:ArrayElementsByTwoFromOne.ext->5:Two 53205
    IArray[Single] _38Stride;// 10:ArrayElementsByTwoFromOne.ext->2:Stride 53203
    IArray[Vector3] _39Combine3;// 19:RandomFacePositions.ext->13:Combine3 53162
    IArray[Tuple[Int32, Vector3]] _40Combine;// 14:MeshRandomFacePositions.ext->15:Combine 53141
    IArray[Matrix] _41Map;// 3:MeshRandomFacePositionMatrices.ext->3:Map 53137
    Int32 _43Zero;// 3:RandomElements.ext->9:Zero 53184
    IArray[Matrix] _46Pass-through: array;// 0:Pass-through: array 52896
    TriMesh _98Pass-through: TriMesh;// 0:Pass-through: TriMesh 52902
    TriMesh _150Pass-through: TriMesh;// 0:Pass-through: TriMesh 53025
    Int32 _151One;// 8:PlusOne->1:One 53023
    Int32 _152Add;// 8:PlusOne->0:Add 53022
    MapChannel _153GetMapChannel;// 12:MatricesFromMapChannel.ext->9:GetMapChannel 53037
    IArray[Vector3] _154MapChannelVertexBuffer;// 12:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 53036
    Int32 _155Count;// 2:Slices->2:Count 53033
    Int32 _156Constant;// 12:MatricesFromMapChannel.ext->0:Constant 53038
    Int32 _157Divide;// 2:Slices->3:Divide 53032
    IArray[Int32] _158Range;// 2:Slices->4:Range 53031
    IArray[IArray[Vector3]] _159Map;// 2:Slices->5:Map 53030
    IArray[Matrix] _160Map;// 12:MatricesFromMapChannel.ext->5:Map 53027
    TriMesh _210Pass-through: TriMesh;// 0:Pass-through: TriMesh 53065
    MapChannel _211GetMapChannel;// 11:MatricesFromMapChannel.ext->9:GetMapChannel 53077
    IArray[Vector3] _212MapChannelVertexBuffer;// 11:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 53076
    Int32 _213Count;// 2:Slices->2:Count 53073
    Int32 _214Constant;// 11:MatricesFromMapChannel.ext->0:Constant 53078
    Int32 _215Divide;// 2:Slices->3:Divide 53072
    IArray[Int32] _216Range;// 2:Slices->4:Range 53071
    IArray[IArray[Vector3]] _217Map;// 2:Slices->5:Map 53070
    IArray[Matrix] _218Map;// 11:MatricesFromMapChannel.ext->5:Map 53067
    Single _219Constant;// 17:DivideBy100.ext->0:Constant 53125
    Single _220Divide;// 17:DivideBy100.ext->2:Divide 53124
    IArray[Matrix] _221Combine;// 4:ClonerStoreMatrices.ext->10:Combine 53024
    Func[Matrix, IArray[Vector3]] _222Pass-through: function1;// 0:Pass-through: function1 52907
    IArray[IArray[Vector3]] _223Map;// 5:FlatMap->4:Map 52909
    IArray[Vector3] _224Flatten;// 5:FlatMap->3:Flatten 52908
    IArray[Int32] _225MeshIndices;// 13:StoreMatricesInMapChannel.ext->0:MeshIndices 52918
    TriMesh _226SetMapChannel;// 13:StoreMatricesInMapChannel.ext->7:SetMapChannel 52905
    TriMesh _227IgnoreFirst;// 4:ClonerStoreMatrices.ext->9:IgnoreFirst 52901
    TriMesh _228IgnoreFirst;// 4:ClonerStoreMatrices.ext->2:IgnoreFirst 52900
    _0Pass-through: function1 = (Random x0) => 
      {
        Int32 _0Zero;// 16:RandomIndices.ext->3:Zero 53155
        Boolean _1IsValidNode;// 13:MeshFromNodeWithDefault.ext->1:IsValidNode 53303
        TriMesh _3Pass-through: TriMesh;// 0:Pass-through: TriMesh 53128
        IArray[Face3] _4MeshFaces;// 14:MeshRandomFacePositions.ext->18:MeshFaces 53157
        Int32 _5Count;// 16:RandomIndices.ext->1:Count 53156
        _0Zero = Zero();
        _1IsValidNode = IsValidNode(source);
        _3Pass-through: TriMesh = if (_1IsValidNode)
          {
            TriMesh _2MeshFromNode;// 13:MeshFromNodeWithDefault.ext->2:MeshFromNode 53304
            _2MeshFromNode = MeshFromNode(source);
            _2MeshFromNode;
            }else
          {
            mesh;
            };
        _4MeshFaces = MeshFaces(_3Pass-through: TriMesh);
        _5Count = Count(_4MeshFaces);
        PseudoRandomIntRange(x0, _0Zero, _5Count);
        };
    _1RandomNumberGenerator = RandomNumberGenerator(seed);
    _2Bind = Bind(_0Pass-through: function1, _1RandomNumberGenerator);
    _3GetMapChannel = GetMapChannel(mesh, flux channel);
    _4MapChannelVertexBuffer = MapChannelVertexBuffer(_3GetMapChannel);
    _5Count = Count(_4MapChannelVertexBuffer);
    _6Constant = 4;
    _7Divide = Divide(_5Count, _6Constant);
    _8Range = Range(_7Divide);
    _9Map = Map(_8Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 53319
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 53318
        _0Multiply = Multiply(_6Constant, x0);
        _1Slice = Slice(_4MapChannelVertexBuffer, _0Multiply, _6Constant);
        _1Slice;
        });
    _10Map = Map(_9Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 53331
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 53332
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 53336
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 53335
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 53330
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 53333
        Int32 _6One;// 8:PlusOne->1:One 53340
        Int32 _7Add;// 8:PlusOne->0:Add 53339
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 53337
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 53329
        Int32 _10Constant;// 25:Three->0:Constant 53334
        Int32 _11One;// 9:PlusOne->1:One 53344
        Int32 _12Add;// 9:PlusOne->0:Add 53343
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 53341
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 53328
        Int32 _15One;// 10:PlusOne->1:One 53348
        Int32 _16Add;// 10:PlusOne->0:Add 53347
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 53345
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 53324
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _11Count = Count(_10Map);
    _12ArrayOfFunction = ArrayOfFunction(_2Bind, _11Count);
    _13IsValidNode = IsValidNode(source);
    _15Pass-through: TriMesh = if (_13IsValidNode)
      {
        TriMesh _14MeshFromNode;// 13:MeshFromNodeWithDefault.ext->2:MeshFromNode 53304
        _14MeshFromNode = MeshFromNode(source);
        _14MeshFromNode;
        }else
      {
        mesh;
        };
    _16MeshFaces = MeshFaces(_15Pass-through: TriMesh);
    _17Pass-through: function1 = (Random x0) => 
      {
        Int32 _0Count;// 2:RandomElement.ext->3:Count 53175
        Face3 _1At;// 2:RandomElement.ext->5:At 53173
        _0Count = Count(_16MeshFaces);
        _1At = At(_16MeshFaces, PseudoRandomInt(x0, _0Count));
        _1At;
        };
    _18RandomNumberGenerator = RandomNumberGenerator(seed);
    _19Bind = Bind(_17Pass-through: function1, _18RandomNumberGenerator);
    _20Count = Count(_16MeshFaces);
    _21Zero = Zero();
    _22GreaterThan = GreaterThan(_20Count, _21Zero);
    _24Pass-through: Int32 = if (_22GreaterThan)
      {
        _11Count;
        }else
      {
        Int32 _23Zero;// 3:RandomElements.ext->9:Zero 53184
        _23Zero = Zero();
        _23Zero;
        };
    _25ArrayOfFunction = ArrayOfFunction(_19Bind, _24Pass-through: Int32);
    _26One = One();
    _27Add = Add(seed, _26One);
    _28RandomNumberGenerator = RandomNumberGenerator(_27Add);
    _29Bind = Bind((Random x0) => 
      {
        PseudoRandomFloat(x0);
        }, _28RandomNumberGenerator);
    _30Two = Two();
    _31Multiply = Multiply(_11Count, _30Two);
    _32ArrayOfFunction = ArrayOfFunction(_29Bind, _31Multiply);
    _33Zero = Zero();
    _34Two = Two();
    _35Stride = Stride(_32ArrayOfFunction, _33Zero, _34Two);
    _36One = One();
    _37Two = Two();
    _38Stride = Stride(_32ArrayOfFunction, _36One, _37Two);
    _39Combine3 = Combine3(_25ArrayOfFunction, _35Stride, _38Stride, (Face3 x0, Single x1, Single x2) => 
      {
        Vector3 _0FaceVertexA;// 4:FacePositionFromBarycentric.ext->1:FaceVertexA 53210
        Vector3 _1FaceVertexB;// 4:FacePositionFromBarycentric.ext->2:FaceVertexB 53211
        Vector3 _2FaceVertexC;// 4:FacePositionFromBarycentric.ext->4:FaceVertexC 53212
        Vector3 _3Barycentric;// 4:FacePositionFromBarycentric.ext->3:Barycentric 53209
        _0FaceVertexA = FaceVertexA(x0);
        _1FaceVertexB = FaceVertexB(x0);
        _2FaceVertexC = FaceVertexC(x0);
        _3Barycentric = Barycentric(_0FaceVertexA, _1FaceVertexB, _2FaceVertexC, x1, x2);
        _3Barycentric;
        });
    _40Combine = Combine(_12ArrayOfFunction, _39Combine3, (Int32 x0, Vector3 x1) => 
      {
        Tuple[Int32, Vector3] _0Pair;// 17:FacePosition.ext->2:Pair 53215
        _0Pair = Pair(x0, x1);
        _0Pair;
        });
    _41Map = Map(_40Combine, (Tuple[Int32, Vector3] x0) => 
      {
        Int32 _0Zero;// 3:ChooseAxis.ext->9:Zero 53260
        Boolean _1GreaterThanOrEqual;// 3:ChooseAxis.ext->8:GreaterThanOrEqual 53259
        Vector3 _2XAxis;// 3:ChooseAxis.ext->3:XAxis 53268
        IArray[Vector3] _3Unit;// 2:Array3->2:Unit 53267
        Vector3 _4YAxis;// 3:ChooseAxis.ext->4:YAxis 53269
        IArray[Vector3] _5Append;// 2:Array3->3:Append 53266
        Vector3 _6ZAxis;// 3:ChooseAxis.ext->5:ZAxis 53270
        IArray[Vector3] _7Append;// 2:Array3->6:Append 53265
        Vector3 _14Pass-through: Vector3;// 0:Pass-through: Vector3 53223
        Vector3 _15Normalize;// 5:RotationBetweenVectorsFix.ext->4:Normalize 53255
        Int32 _16PairItem1;// 7:FacePositionFromTuple.ext->5:PairItem1 53293
        Vector3 _17PairItem2;// 7:FacePositionFromTuple.ext->6:PairItem2 53294
        Tuple[Int32, Vector3] _18Pair;// 7:FacePosition.ext->2:Pair 53292
        Int32 _19PairItem1;// 10:MeshFacePositionMatrix.ext->4:PairItem1 53288
        Face3 _20MeshFace;// 10:MeshFacePositionMatrix.ext->8:MeshFace 53287
        Vector3 _21FaceNormal;// 6:MeshFaceMatrix.ext->9:FaceNormal 53286
        Single _22Length;// 4:VectorIsSmall.ext->3:Length 53283
        Single _23Constant;// 4:VectorLengthEpsilon.ext->0:Constant 53284
        Boolean _24LessThan;// 4:VectorIsSmall.ext->5:LessThan 53282
        Vector3 _26Pass-through: Vector3;// 0:Pass-through: Vector3 53224
        Vector3 _27Normalize;// 5:RotationBetweenVectorsFix.ext->5:Normalize 53256
        Single _28Dot;// 0:RotationBetweenUnitVectors.ext->6:Dot 53231
        Single _29FloatOne;// 0:RotationBetweenUnitVectors.ext->8:FloatOne 53232
        Single _30Add;// 0:RotationBetweenUnitVectors.ext->7:Add 53230
        Single _31Constant;// 0:RotationBetweenUnitVectors.ext->0:Constant 53233
        Boolean _32LessThan;// 0:RotationBetweenUnitVectors.ext->40:LessThan 53229
        Quaternion _64QuaternionNormalize;// 0:RotationBetweenUnitVectors.ext->3:QuaternionNormalize 53227
        Vector3 _65PairItem2;// 10:MeshFacePositionMatrix.ext->2:PairItem2 53295
        Matrix _66RotationTranslationMatrix;// 6:MeshFaceMatrix.ext->7:RotationTranslationMatrix 53222
        _0Zero = Zero();
        _1GreaterThanOrEqual = GreaterThanOrEqual(axis, _0Zero);
        _2XAxis = XAxis();
        _3Unit = Unit(_2XAxis);
        _4YAxis = YAxis();
        _5Append = Append(_3Unit, _4YAxis);
        _6ZAxis = ZAxis();
        _7Append = Append(_5Append, _6ZAxis);
        _14Pass-through: Vector3 = if (_1GreaterThanOrEqual)
          {
            Vector3 _8At;// 3:ChooseAxis.ext->1:At 53261
            _8At = At(_7Append, axis);
            _8At;
            }else
          {
            Int32 _9One;// 10:PlusOne->1:One 53276
            Int32 _10Add;// 10:PlusOne->0:Add 53275
            Int32 _11Negative;// 3:ChooseAxis.ext->11:Negative 53273
            Vector3 _12At;// 3:ChooseAxis.ext->12:At 53272
            Vector3 _13Negate;// 3:ChooseAxis.ext->13:Negate 53271
            _9One = One();
            _10Add = Add(axis, _9One);
            _11Negative = Negative(_10Add);
            _12At = At(_7Append, _11Negative);
            _13Negate = Negate(_12At);
            _13Negate;
            };
        _15Normalize = Normalize(_14Pass-through: Vector3);
        _16PairItem1 = PairItem1(x0);
        _17PairItem2 = PairItem2(x0);
        _18Pair = Pair(_16PairItem1, _17PairItem2);
        _19PairItem1 = PairItem1(_18Pair);
        _20MeshFace = MeshFace(_15Pass-through: TriMesh, _19PairItem1);
        _21FaceNormal = FaceNormal(_20MeshFace);
        _22Length = Length(_21FaceNormal);
        _23Constant = 1E-06;
        _24LessThan = LessThan(_22Length, _23Constant);
        _26Pass-through: Vector3 = if (_24LessThan)
          {
            Vector3 _25ZAxis;// 6:VectorOrZAxis.ext->2:ZAxis 53285
            _25ZAxis = ZAxis();
            _25ZAxis;
            }else
          {
            _21FaceNormal;
            };
        _27Normalize = Normalize(_26Pass-through: Vector3);
        _28Dot = Dot(_15Normalize, _27Normalize);
        _29FloatOne = FloatOne();
        _30Add = Add(_28Dot, _29FloatOne);
        _31Constant = 1E-07;
        _32LessThan = LessThan(_30Add, _31Constant);
        _64QuaternionNormalize = QuaternionNormalize(if (_32LessThan)
          {
            Single _39X;// 0:RotationBetweenUnitVectors.ext->12:X 53238
            Single _40Abs;// 0:RotationBetweenUnitVectors.ext->11:Abs 53237
            Single _41Z;// 0:RotationBetweenUnitVectors.ext->14:Z 53241
            Single _42Abs;// 0:RotationBetweenUnitVectors.ext->13:Abs 53240
            Boolean _43GreaterThan;// 0:RotationBetweenUnitVectors.ext->15:GreaterThan 53236
            Single _60FloatZero;// 0:RotationBetweenUnitVectors.ext->36:FloatZero 53252
            Quaternion _61QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors.ext->35:QuaternionFromVectorAndTheta 53234
            _39X = X(_15Normalize);
            _40Abs = Abs(_39X);
            _41Z = Z(_15Normalize);
            _42Abs = Abs(_41Z);
            _43GreaterThan = GreaterThan(_40Abs, _42Abs);
            _60FloatZero = FloatZero();
            _61QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_43GreaterThan)
              {
                Single _50Y;// 0:RotationBetweenUnitVectors.ext->29:Y 53244
                Single _51NegativeFloat;// 0:RotationBetweenUnitVectors.ext->30:NegativeFloat 53243
                Single _52X;// 0:RotationBetweenUnitVectors.ext->23:X 53245
                Single _53FloatZero;// 0:RotationBetweenUnitVectors.ext->21:FloatZero 53246
                Vector3 _54Vector3;// 0:RotationBetweenUnitVectors.ext->19:Vector3 53242
                _50Y = Y(_15Normalize);
                _51NegativeFloat = NegativeFloat(_50Y);
                _52X = X(_15Normalize);
                _53FloatZero = FloatZero();
                _54Vector3 = Vector3(_51NegativeFloat, _52X, _53FloatZero);
                _54Vector3;
                }else
              {
                Single _55FloatZero;// 0:RotationBetweenUnitVectors.ext->22:FloatZero 53248
                Single _56Z;// 0:RotationBetweenUnitVectors.ext->26:Z 53250
                Single _57NegativeFloat;// 0:RotationBetweenUnitVectors.ext->25:NegativeFloat 53249
                Single _58Y;// 0:RotationBetweenUnitVectors.ext->24:Y 53251
                Vector3 _59Vector3;// 0:RotationBetweenUnitVectors.ext->20:Vector3 53247
                _55FloatZero = FloatZero();
                _56Z = Z(_15Normalize);
                _57NegativeFloat = NegativeFloat(_56Z);
                _58Y = Y(_15Normalize);
                _59Vector3 = Vector3(_55FloatZero, _57NegativeFloat, _58Y);
                _59Vector3;
                }, _60FloatZero);
            _61QuaternionFromVectorAndTheta;
            }else
          {
            Vector3 _62Cross;// 0:RotationBetweenUnitVectors.ext->2:Cross 53254
            Quaternion _63QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors.ext->5:QuaternionFromVectorAndTheta 53253
            _62Cross = Cross(_15Normalize, _27Normalize);
            _63QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_62Cross, _30Add);
            _63QuaternionFromVectorAndTheta;
            });
        _65PairItem2 = PairItem2(_18Pair);
        _66RotationTranslationMatrix = RotationTranslationMatrix(_64QuaternionNormalize, _65PairItem2);
        _66RotationTranslationMatrix;
        });
    _43Zero = Zero();
    _46Pass-through: array = if (position only)
      {
        Func[Matrix, Matrix] _44Pass-through: function1;// 0:Pass-through: function1 53134
        IArray[Matrix] _45Map;// 9:MapConditional.ext->4:Map 53136
        _44Pass-through: function1 = (Matrix x0) => 
          {
            Vector3 _0GetMatrixTranslation;// 8:MatrixTranslationAsMatrix.ext->1:GetMatrixTranslation 53298
            Matrix _1TranslationMatrix;// 8:MatrixTranslationAsMatrix.ext->2:TranslationMatrix 53297
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _1TranslationMatrix = TranslationMatrix(_0GetMatrixTranslation);
            _1TranslationMatrix;
            };
        _45Map = Map(_41Map, _44Pass-through: function1);
        _45Map;
        }else
      {
        _41Map;
        };
    _98Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _49Pass-through: function1;// 0:Pass-through: function1 52925
        IArray[IArray[Vector3]] _50Map;// 5:FlatMap->4:Map 52927
        IArray[Vector3] _51Flatten;// 5:FlatMap->3:Flatten 52926
        IArray[Int32] _52MeshIndices;// 6:StoreMatricesInMapChannel.ext->0:MeshIndices 52936
        TriMesh _53SetMapChannel;// 6:StoreMatricesInMapChannel.ext->7:SetMapChannel 52923
        _49Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 52931
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 52930
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 52929
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 52935
                Int32 _1Add;// 5:PlusOne->0:Add 52934
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 52932
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _50Map = Map(_46Pass-through: array, _49Pass-through: function1);
        _51Flatten = Flatten(_50Map);
        _52MeshIndices = MeshIndices(mesh);
        _53SetMapChannel = SetMapChannel(mesh, flux channel, _51Flatten, _52MeshIndices);
        _53SetMapChannel;
        }else
      {
        Int32 _54Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 52975
        Boolean _55Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 52974
        MapChannel _58Pass-through: any;// 0:Pass-through: any 52966
        Object _59Null;// 6:IsNullFix2.ext->3:Null 52970
        Object _60As;// 6:IsNullFix2.ext->23:As 52968
        Boolean _61Equal;// 6:IsNullFix2.ext->1:Equal 52967
        Boolean _62Not;// 4:MapChannelExists.ext->4:Not 52965
        Int32 _63One;// 8:PlusOne->1:One 53023
        Int32 _64Add;// 8:PlusOne->0:Add 53022
        TriMesh _92Pass-through: TriMesh;// 0:Pass-through: TriMesh 52941
        Func[Matrix, IArray[Vector3]] _93Pass-through: function1;// 0:Pass-through: function1 52946
        IArray[IArray[Vector3]] _94Map;// 5:FlatMap->4:Map 52948
        IArray[Vector3] _95Flatten;// 5:FlatMap->3:Flatten 52947
        IArray[Int32] _96MeshIndices;// 13:StoreMatricesInMapChannel.ext->0:MeshIndices 52957
        TriMesh _97SetMapChannel;// 13:StoreMatricesInMapChannel.ext->7:SetMapChannel 52944
        _54Constant = -3;
        _55Equal = Equal(flux channel, _54Constant);
        _58Pass-through: any = if (_55Equal)
          {
            MapChannel _56TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 52976
            _56TopologyChannel = TopologyChannel(mesh);
            _56TopologyChannel;
            }else
          {
            MapChannel _57GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 52977
            _57GetMapChannel = GetMapChannel(mesh, flux channel);
            _57GetMapChannel;
            };
        _59Null = Null();
        _60As = As(_58Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 52969
            _0IgnoreFirst = IgnoreFirst(x0, _59Null);
            _0IgnoreFirst;
            });
        _61Equal = Equal(_60As, _59Null);
        _62Not = Not(_61Equal);
        _63One = One();
        _64Add = Add(flux channel, _63One);
        _92Pass-through: TriMesh = if (_62Not)
          {
            Int32 _65Constant;// 7:SetMapChannelOrGeometry.ext->0:Constant 52987
            Boolean _66Equal;// 7:SetMapChannelOrGeometry.ext->6:Equal 52986
            Int32 _67Constant;// 0:GetMapChannelOrGeometry.ext->0:Constant 52997
            Boolean _68Equal;// 0:GetMapChannelOrGeometry.ext->4:Equal 52996
            MapChannel _71Pass-through: MapChannel;// 0:Pass-through: MapChannel 52979
            IArray[Vector3] _72MapChannelVertexBuffer;// 8:AssignMapChannel.ext->3:MapChannelVertexBuffer 52991
            IArray[Int32] _75MapChannelIndexBuffer;// 8:AssignMapChannel.ext->4:MapChannelIndexBuffer 52992
            _65Constant = -3;
            _66Equal = Equal(_65Constant, _64Add);
            _67Constant = -3;
            _68Equal = Equal(flux channel, _67Constant);
            _71Pass-through: MapChannel = if (_68Equal)
              {
                MapChannel _69TopologyChannel;// 0:GetMapChannelOrGeometry.ext->6:TopologyChannel 52998
                _69TopologyChannel = TopologyChannel(mesh);
                _69TopologyChannel;
                }else
              {
                MapChannel _70GetMapChannel;// 0:GetMapChannelOrGeometry.ext->3:GetMapChannel 52999
                _70GetMapChannel = GetMapChannel(mesh, flux channel);
                _70GetMapChannel;
                };
            _72MapChannelVertexBuffer = MapChannelVertexBuffer(_71Pass-through: MapChannel);
            _75MapChannelIndexBuffer = MapChannelIndexBuffer(_71Pass-through: MapChannel);
            if (_66Equal)
              {
                MeshData _76MeshData;// 7:SetMapChannelOrGeometry.ext->9:MeshData 52989
                TriMesh _77CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry.ext->8:CreateMeshWithMeshData 52988
                _76MeshData = MeshData(mesh);
                _77CreateMeshWithMeshData = CreateMeshWithMeshData(_72MapChannelVertexBuffer, _75MapChannelIndexBuffer, _76MeshData);
                _77CreateMeshWithMeshData;
                }else
              {
                TriMesh _78SetMapChannel;// 7:SetMapChannelOrGeometry.ext->0:SetMapChannel 52990
                _78SetMapChannel = SetMapChannel(mesh, _64Add, _72MapChannelVertexBuffer, _75MapChannelIndexBuffer);
                _78SetMapChannel;
                };
            }else
          {
            Int32 _79Constant;// 10:SetMapChannelOrGeometry.ext->0:Constant 53008
            Boolean _80Equal;// 10:SetMapChannelOrGeometry.ext->6:Equal 53007
            Single _81Constant;// 5:Origin->0:Constant 53014
            Vector3 _82Vector3;// 5:Origin->1:Vector3 53013
            IArray[Vector3] _83Unit;// 2:MapChannelClear.ext->4:Unit 53012
            Int32 _84Zero;// 2:MapChannelClear.ext->9:Zero 53016
            Int32 _85FaceCount;// 2:MapChannelClear.ext->6:FaceCount 53020
            Int32 _86Constant;// 1:Three->0:Constant 53019
            Int32 _87Multiply;// 7:MultiplyByThree->2:Multiply 53018
            IArray[Int32] _88ArrayOf;// 2:MapChannelClear.ext->8:ArrayOf 53015
            _79Constant = -3;
            _80Equal = Equal(_79Constant, _64Add);
            _81Constant = 0;
            _82Vector3 = Vector3(_81Constant, _81Constant, _81Constant);
            _83Unit = Unit(_82Vector3);
            _84Zero = Zero();
            _85FaceCount = FaceCount(mesh);
            _86Constant = 3;
            _87Multiply = Multiply(_85FaceCount, _86Constant);
            _88ArrayOf = ArrayOf(_84Zero, _87Multiply);
            if (_80Equal)
              {
                MeshData _89MeshData;// 10:SetMapChannelOrGeometry.ext->9:MeshData 53010
                TriMesh _90CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry.ext->8:CreateMeshWithMeshData 53009
                _89MeshData = MeshData(mesh);
                _90CreateMeshWithMeshData = CreateMeshWithMeshData(_83Unit, _88ArrayOf, _89MeshData);
                _90CreateMeshWithMeshData;
                }else
              {
                TriMesh _91SetMapChannel;// 10:SetMapChannelOrGeometry.ext->0:SetMapChannel 53011
                _91SetMapChannel = SetMapChannel(mesh, _64Add, _83Unit, _88ArrayOf);
                _91SetMapChannel;
                };
            };
        _93Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 52952
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 52951
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 52950
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 52956
                Int32 _1Add;// 5:PlusOne->0:Add 52955
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 52953
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _94Map = Map(_46Pass-through: array, _93Pass-through: function1);
        _95Flatten = Flatten(_94Map);
        _96MeshIndices = MeshIndices(_92Pass-through: TriMesh);
        _97SetMapChannel = SetMapChannel(_92Pass-through: TriMesh, flux channel, _95Flatten, _96MeshIndices);
        _97SetMapChannel;
        };
    _150Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _101Pass-through: function1;// 0:Pass-through: function1 52925
        IArray[IArray[Vector3]] _102Map;// 5:FlatMap->4:Map 52927
        IArray[Vector3] _103Flatten;// 5:FlatMap->3:Flatten 52926
        IArray[Int32] _104MeshIndices;// 6:StoreMatricesInMapChannel.ext->0:MeshIndices 52936
        TriMesh _105SetMapChannel;// 6:StoreMatricesInMapChannel.ext->7:SetMapChannel 52923
        _101Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 52931
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 52930
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 52929
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 52935
                Int32 _1Add;// 5:PlusOne->0:Add 52934
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 52932
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _102Map = Map(_46Pass-through: array, _101Pass-through: function1);
        _103Flatten = Flatten(_102Map);
        _104MeshIndices = MeshIndices(mesh);
        _105SetMapChannel = SetMapChannel(mesh, flux channel, _103Flatten, _104MeshIndices);
        _105SetMapChannel;
        }else
      {
        Int32 _106Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 52975
        Boolean _107Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 52974
        MapChannel _110Pass-through: any;// 0:Pass-through: any 52966
        Object _111Null;// 6:IsNullFix2.ext->3:Null 52970
        Object _112As;// 6:IsNullFix2.ext->23:As 52968
        Boolean _113Equal;// 6:IsNullFix2.ext->1:Equal 52967
        Boolean _114Not;// 4:MapChannelExists.ext->4:Not 52965
        Int32 _115One;// 8:PlusOne->1:One 53023
        Int32 _116Add;// 8:PlusOne->0:Add 53022
        TriMesh _144Pass-through: TriMesh;// 0:Pass-through: TriMesh 52941
        Func[Matrix, IArray[Vector3]] _145Pass-through: function1;// 0:Pass-through: function1 52946
        IArray[IArray[Vector3]] _146Map;// 5:FlatMap->4:Map 52948
        IArray[Vector3] _147Flatten;// 5:FlatMap->3:Flatten 52947
        IArray[Int32] _148MeshIndices;// 13:StoreMatricesInMapChannel.ext->0:MeshIndices 52957
        TriMesh _149SetMapChannel;// 13:StoreMatricesInMapChannel.ext->7:SetMapChannel 52944
        _106Constant = -3;
        _107Equal = Equal(flux channel, _106Constant);
        _110Pass-through: any = if (_107Equal)
          {
            MapChannel _108TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 52976
            _108TopologyChannel = TopologyChannel(mesh);
            _108TopologyChannel;
            }else
          {
            MapChannel _109GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 52977
            _109GetMapChannel = GetMapChannel(mesh, flux channel);
            _109GetMapChannel;
            };
        _111Null = Null();
        _112As = As(_110Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 52969
            _0IgnoreFirst = IgnoreFirst(x0, _111Null);
            _0IgnoreFirst;
            });
        _113Equal = Equal(_112As, _111Null);
        _114Not = Not(_113Equal);
        _115One = One();
        _116Add = Add(flux channel, _115One);
        _144Pass-through: TriMesh = if (_114Not)
          {
            Int32 _117Constant;// 7:SetMapChannelOrGeometry.ext->0:Constant 52987
            Boolean _118Equal;// 7:SetMapChannelOrGeometry.ext->6:Equal 52986
            Int32 _119Constant;// 0:GetMapChannelOrGeometry.ext->0:Constant 52997
            Boolean _120Equal;// 0:GetMapChannelOrGeometry.ext->4:Equal 52996
            MapChannel _123Pass-through: MapChannel;// 0:Pass-through: MapChannel 52979
            IArray[Vector3] _124MapChannelVertexBuffer;// 8:AssignMapChannel.ext->3:MapChannelVertexBuffer 52991
            IArray[Int32] _127MapChannelIndexBuffer;// 8:AssignMapChannel.ext->4:MapChannelIndexBuffer 52992
            _117Constant = -3;
            _118Equal = Equal(_117Constant, _116Add);
            _119Constant = -3;
            _120Equal = Equal(flux channel, _119Constant);
            _123Pass-through: MapChannel = if (_120Equal)
              {
                MapChannel _121TopologyChannel;// 0:GetMapChannelOrGeometry.ext->6:TopologyChannel 52998
                _121TopologyChannel = TopologyChannel(mesh);
                _121TopologyChannel;
                }else
              {
                MapChannel _122GetMapChannel;// 0:GetMapChannelOrGeometry.ext->3:GetMapChannel 52999
                _122GetMapChannel = GetMapChannel(mesh, flux channel);
                _122GetMapChannel;
                };
            _124MapChannelVertexBuffer = MapChannelVertexBuffer(_123Pass-through: MapChannel);
            _127MapChannelIndexBuffer = MapChannelIndexBuffer(_123Pass-through: MapChannel);
            if (_118Equal)
              {
                MeshData _128MeshData;// 7:SetMapChannelOrGeometry.ext->9:MeshData 52989
                TriMesh _129CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry.ext->8:CreateMeshWithMeshData 52988
                _128MeshData = MeshData(mesh);
                _129CreateMeshWithMeshData = CreateMeshWithMeshData(_124MapChannelVertexBuffer, _127MapChannelIndexBuffer, _128MeshData);
                _129CreateMeshWithMeshData;
                }else
              {
                TriMesh _130SetMapChannel;// 7:SetMapChannelOrGeometry.ext->0:SetMapChannel 52990
                _130SetMapChannel = SetMapChannel(mesh, _116Add, _124MapChannelVertexBuffer, _127MapChannelIndexBuffer);
                _130SetMapChannel;
                };
            }else
          {
            Int32 _131Constant;// 10:SetMapChannelOrGeometry.ext->0:Constant 53008
            Boolean _132Equal;// 10:SetMapChannelOrGeometry.ext->6:Equal 53007
            Single _133Constant;// 5:Origin->0:Constant 53014
            Vector3 _134Vector3;// 5:Origin->1:Vector3 53013
            IArray[Vector3] _135Unit;// 2:MapChannelClear.ext->4:Unit 53012
            Int32 _136Zero;// 2:MapChannelClear.ext->9:Zero 53016
            Int32 _137FaceCount;// 2:MapChannelClear.ext->6:FaceCount 53020
            Int32 _138Constant;// 1:Three->0:Constant 53019
            Int32 _139Multiply;// 7:MultiplyByThree->2:Multiply 53018
            IArray[Int32] _140ArrayOf;// 2:MapChannelClear.ext->8:ArrayOf 53015
            _131Constant = -3;
            _132Equal = Equal(_131Constant, _116Add);
            _133Constant = 0;
            _134Vector3 = Vector3(_133Constant, _133Constant, _133Constant);
            _135Unit = Unit(_134Vector3);
            _136Zero = Zero();
            _137FaceCount = FaceCount(mesh);
            _138Constant = 3;
            _139Multiply = Multiply(_137FaceCount, _138Constant);
            _140ArrayOf = ArrayOf(_136Zero, _139Multiply);
            if (_132Equal)
              {
                MeshData _141MeshData;// 10:SetMapChannelOrGeometry.ext->9:MeshData 53010
                TriMesh _142CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry.ext->8:CreateMeshWithMeshData 53009
                _141MeshData = MeshData(mesh);
                _142CreateMeshWithMeshData = CreateMeshWithMeshData(_135Unit, _140ArrayOf, _141MeshData);
                _142CreateMeshWithMeshData;
                }else
              {
                TriMesh _143SetMapChannel;// 10:SetMapChannelOrGeometry.ext->0:SetMapChannel 53011
                _143SetMapChannel = SetMapChannel(mesh, _116Add, _135Unit, _140ArrayOf);
                _143SetMapChannel;
                };
            };
        _145Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 52952
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 52951
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 52950
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 52956
                Int32 _1Add;// 5:PlusOne->0:Add 52955
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 52953
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _146Map = Map(_46Pass-through: array, _145Pass-through: function1);
        _147Flatten = Flatten(_146Map);
        _148MeshIndices = MeshIndices(_144Pass-through: TriMesh);
        _149SetMapChannel = SetMapChannel(_144Pass-through: TriMesh, flux channel, _147Flatten, _148MeshIndices);
        _149SetMapChannel;
        };
    _151One = One();
    _152Add = Add(flux channel, _151One);
    _153GetMapChannel = GetMapChannel(_150Pass-through: TriMesh, _152Add);
    _154MapChannelVertexBuffer = MapChannelVertexBuffer(_153GetMapChannel);
    _155Count = Count(_154MapChannelVertexBuffer);
    _156Constant = 4;
    _157Divide = Divide(_155Count, _156Constant);
    _158Range = Range(_157Divide);
    _159Map = Map(_158Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 53035
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 53034
        _0Multiply = Multiply(_156Constant, x0);
        _1Slice = Slice(_154MapChannelVertexBuffer, _0Multiply, _156Constant);
        _1Slice;
        });
    _160Map = Map(_159Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 53047
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 53048
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 53052
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 53051
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 53046
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 53049
        Int32 _6One;// 8:PlusOne->1:One 53056
        Int32 _7Add;// 8:PlusOne->0:Add 53055
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 53053
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 53045
        Int32 _10Constant;// 25:Three->0:Constant 53050
        Int32 _11One;// 9:PlusOne->1:One 53060
        Int32 _12Add;// 9:PlusOne->0:Add 53059
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 53057
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 53044
        Int32 _15One;// 10:PlusOne->1:One 53064
        Int32 _16Add;// 10:PlusOne->0:Add 53063
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 53061
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 53040
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _210Pass-through: TriMesh = if (combine effect)
      {
        Func[Matrix, IArray[Vector3]] _163Pass-through: function1;// 0:Pass-through: function1 52925
        IArray[IArray[Vector3]] _164Map;// 5:FlatMap->4:Map 52927
        IArray[Vector3] _165Flatten;// 5:FlatMap->3:Flatten 52926
        IArray[Int32] _166MeshIndices;// 6:StoreMatricesInMapChannel.ext->0:MeshIndices 52936
        TriMesh _167SetMapChannel;// 6:StoreMatricesInMapChannel.ext->7:SetMapChannel 52923
        _163Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 52931
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 52930
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 52929
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 52935
                Int32 _1Add;// 5:PlusOne->0:Add 52934
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 52932
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _164Map = Map(_46Pass-through: array, _163Pass-through: function1);
        _165Flatten = Flatten(_164Map);
        _166MeshIndices = MeshIndices(mesh);
        _167SetMapChannel = SetMapChannel(mesh, flux channel, _165Flatten, _166MeshIndices);
        _167SetMapChannel;
        }else
      {
        Int32 _168Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 52975
        Boolean _169Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 52974
        MapChannel _172Pass-through: any;// 0:Pass-through: any 52966
        Object _173Null;// 6:IsNullFix2.ext->3:Null 52970
        Object _174As;// 6:IsNullFix2.ext->23:As 52968
        Boolean _175Equal;// 6:IsNullFix2.ext->1:Equal 52967
        Boolean _176Not;// 4:MapChannelExists.ext->4:Not 52965
        TriMesh _204Pass-through: TriMesh;// 0:Pass-through: TriMesh 52941
        Func[Matrix, IArray[Vector3]] _205Pass-through: function1;// 0:Pass-through: function1 52946
        IArray[IArray[Vector3]] _206Map;// 5:FlatMap->4:Map 52948
        IArray[Vector3] _207Flatten;// 5:FlatMap->3:Flatten 52947
        IArray[Int32] _208MeshIndices;// 13:StoreMatricesInMapChannel.ext->0:MeshIndices 52957
        TriMesh _209SetMapChannel;// 13:StoreMatricesInMapChannel.ext->7:SetMapChannel 52944
        _168Constant = -3;
        _169Equal = Equal(flux channel, _168Constant);
        _172Pass-through: any = if (_169Equal)
          {
            MapChannel _170TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 52976
            _170TopologyChannel = TopologyChannel(mesh);
            _170TopologyChannel;
            }else
          {
            MapChannel _171GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 52977
            _171GetMapChannel = GetMapChannel(mesh, flux channel);
            _171GetMapChannel;
            };
        _173Null = Null();
        _174As = As(_172Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 52969
            _0IgnoreFirst = IgnoreFirst(x0, _173Null);
            _0IgnoreFirst;
            });
        _175Equal = Equal(_174As, _173Null);
        _176Not = Not(_175Equal);
        _204Pass-through: TriMesh = if (_176Not)
          {
            Int32 _177Constant;// 7:SetMapChannelOrGeometry.ext->0:Constant 52987
            Boolean _178Equal;// 7:SetMapChannelOrGeometry.ext->6:Equal 52986
            Int32 _179Constant;// 0:GetMapChannelOrGeometry.ext->0:Constant 52997
            Boolean _180Equal;// 0:GetMapChannelOrGeometry.ext->4:Equal 52996
            MapChannel _183Pass-through: MapChannel;// 0:Pass-through: MapChannel 52979
            IArray[Vector3] _184MapChannelVertexBuffer;// 8:AssignMapChannel.ext->3:MapChannelVertexBuffer 52991
            IArray[Int32] _187MapChannelIndexBuffer;// 8:AssignMapChannel.ext->4:MapChannelIndexBuffer 52992
            _177Constant = -3;
            _178Equal = Equal(_177Constant, _152Add);
            _179Constant = -3;
            _180Equal = Equal(flux channel, _179Constant);
            _183Pass-through: MapChannel = if (_180Equal)
              {
                MapChannel _181TopologyChannel;// 0:GetMapChannelOrGeometry.ext->6:TopologyChannel 52998
                _181TopologyChannel = TopologyChannel(mesh);
                _181TopologyChannel;
                }else
              {
                MapChannel _182GetMapChannel;// 0:GetMapChannelOrGeometry.ext->3:GetMapChannel 52999
                _182GetMapChannel = GetMapChannel(mesh, flux channel);
                _182GetMapChannel;
                };
            _184MapChannelVertexBuffer = MapChannelVertexBuffer(_183Pass-through: MapChannel);
            _187MapChannelIndexBuffer = MapChannelIndexBuffer(_183Pass-through: MapChannel);
            if (_178Equal)
              {
                MeshData _188MeshData;// 7:SetMapChannelOrGeometry.ext->9:MeshData 52989
                TriMesh _189CreateMeshWithMeshData;// 7:SetMapChannelOrGeometry.ext->8:CreateMeshWithMeshData 52988
                _188MeshData = MeshData(mesh);
                _189CreateMeshWithMeshData = CreateMeshWithMeshData(_184MapChannelVertexBuffer, _187MapChannelIndexBuffer, _188MeshData);
                _189CreateMeshWithMeshData;
                }else
              {
                TriMesh _190SetMapChannel;// 7:SetMapChannelOrGeometry.ext->0:SetMapChannel 52990
                _190SetMapChannel = SetMapChannel(mesh, _152Add, _184MapChannelVertexBuffer, _187MapChannelIndexBuffer);
                _190SetMapChannel;
                };
            }else
          {
            Int32 _191Constant;// 10:SetMapChannelOrGeometry.ext->0:Constant 53008
            Boolean _192Equal;// 10:SetMapChannelOrGeometry.ext->6:Equal 53007
            Single _193Constant;// 5:Origin->0:Constant 53014
            Vector3 _194Vector3;// 5:Origin->1:Vector3 53013
            IArray[Vector3] _195Unit;// 2:MapChannelClear.ext->4:Unit 53012
            Int32 _196Zero;// 2:MapChannelClear.ext->9:Zero 53016
            Int32 _197FaceCount;// 2:MapChannelClear.ext->6:FaceCount 53020
            Int32 _198Constant;// 1:Three->0:Constant 53019
            Int32 _199Multiply;// 7:MultiplyByThree->2:Multiply 53018
            IArray[Int32] _200ArrayOf;// 2:MapChannelClear.ext->8:ArrayOf 53015
            _191Constant = -3;
            _192Equal = Equal(_191Constant, _152Add);
            _193Constant = 0;
            _194Vector3 = Vector3(_193Constant, _193Constant, _193Constant);
            _195Unit = Unit(_194Vector3);
            _196Zero = Zero();
            _197FaceCount = FaceCount(mesh);
            _198Constant = 3;
            _199Multiply = Multiply(_197FaceCount, _198Constant);
            _200ArrayOf = ArrayOf(_196Zero, _199Multiply);
            if (_192Equal)
              {
                MeshData _201MeshData;// 10:SetMapChannelOrGeometry.ext->9:MeshData 53010
                TriMesh _202CreateMeshWithMeshData;// 10:SetMapChannelOrGeometry.ext->8:CreateMeshWithMeshData 53009
                _201MeshData = MeshData(mesh);
                _202CreateMeshWithMeshData = CreateMeshWithMeshData(_195Unit, _200ArrayOf, _201MeshData);
                _202CreateMeshWithMeshData;
                }else
              {
                TriMesh _203SetMapChannel;// 10:SetMapChannelOrGeometry.ext->0:SetMapChannel 53011
                _203SetMapChannel = SetMapChannel(mesh, _152Add, _195Unit, _200ArrayOf);
                _203SetMapChannel;
                };
            };
        _205Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 52952
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 52951
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 52950
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 52956
                Int32 _1Add;// 5:PlusOne->0:Add 52955
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 52953
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _206Map = Map(_46Pass-through: array, _205Pass-through: function1);
        _207Flatten = Flatten(_206Map);
        _208MeshIndices = MeshIndices(_204Pass-through: TriMesh);
        _209SetMapChannel = SetMapChannel(_204Pass-through: TriMesh, flux channel, _207Flatten, _208MeshIndices);
        _209SetMapChannel;
        };
    _211GetMapChannel = GetMapChannel(_210Pass-through: TriMesh, flux channel);
    _212MapChannelVertexBuffer = MapChannelVertexBuffer(_211GetMapChannel);
    _213Count = Count(_212MapChannelVertexBuffer);
    _214Constant = 4;
    _215Divide = Divide(_213Count, _214Constant);
    _216Range = Range(_215Divide);
    _217Map = Map(_216Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 53075
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 53074
        _0Multiply = Multiply(_214Constant, x0);
        _1Slice = Slice(_212MapChannelVertexBuffer, _0Multiply, _214Constant);
        _1Slice;
        });
    _218Map = Map(_217Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 53087
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 53088
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 53092
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 53091
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 53086
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 53089
        Int32 _6One;// 8:PlusOne->1:One 53096
        Int32 _7Add;// 8:PlusOne->0:Add 53095
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 53093
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 53085
        Int32 _10Constant;// 25:Three->0:Constant 53090
        Int32 _11One;// 9:PlusOne->1:One 53100
        Int32 _12Add;// 9:PlusOne->0:Add 53099
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 53097
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 53084
        Int32 _15One;// 10:PlusOne->1:One 53104
        Int32 _16Add;// 10:PlusOne->0:Add 53103
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 53101
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 53080
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _219Constant = 100;
    _220Divide = Divide(strength, _219Constant);
    _221Combine = Combine(_160Map, _218Map, (Matrix x0, Matrix x1) => 
      {
        Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp.ext->6:GetMatrixScaling 53115
        Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp.ext->7:GetMatrixScaling 53116
        Vector3 _2Lerp;// 12:MatrixComponentsLerp.ext->11:Lerp 53114
        Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp.ext->4:GetMatrixRotation 53118
        Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp.ext->5:GetMatrixRotation 53119
        Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp.ext->9:QuaternionLerp 53117
        Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->2:GetMatrixTranslation 53121
        Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->3:GetMatrixTranslation 53122
        Vector3 _8Lerp;// 12:MatrixComponentsLerp.ext->10:Lerp 53120
        Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp.ext->14:ScalingRotationTranslationMatrix 53113
        _0GetMatrixScaling = GetMatrixScaling(x0);
        _1GetMatrixScaling = GetMatrixScaling(x1);
        _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _220Divide);
        _3GetMatrixRotation = GetMatrixRotation(x0);
        _4GetMatrixRotation = GetMatrixRotation(x1);
        _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _220Divide);
        _6GetMatrixTranslation = GetMatrixTranslation(x0);
        _7GetMatrixTranslation = GetMatrixTranslation(x1);
        _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _220Divide);
        _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
        _9ScalingRotationTranslationMatrix;
        });
    _222Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 52913
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 52912
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 52911
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 52917
            Int32 _1Add;// 5:PlusOne->0:Add 52916
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 52914
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _223Map = Map(_221Combine, _222Pass-through: function1);
    _224Flatten = Flatten(_223Map);
    _225MeshIndices = MeshIndices(_98Pass-through: TriMesh);
    _226SetMapChannel = SetMapChannel(_98Pass-through: TriMesh, flux channel, _224Flatten, _225MeshIndices);
    _227IgnoreFirst = IgnoreFirst(_46Pass-through: array, _226SetMapChannel);
    _228IgnoreFirst = IgnoreFirst(flux channel, _227IgnoreFirst);
    _228IgnoreFirst;
    }