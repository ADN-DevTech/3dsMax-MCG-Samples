(InstanceState state, Boolean capBottom, Boolean capTop, Int32 numSegments, Int32 numSides, Single radius, Single height) => 
  {
    Int32 _0One;// 12:PlusOne->1:One 53470
    Int32 _1Add;// 12:PlusOne->0:Add 53469
    IArray[Int32] _2Range;// 5:MapRange->2:Range 53467
    IArray[Single] _3RangeExclusiveFloat;// 0:Cylinder-ext->6:RangeExclusiveFloat 53514
    IArray[Vector3] _4Map;// 0:Cylinder-ext->7:Map 53513
    Vector3 _5ZAxis;// 0:Cylinder-ext->5:ZAxis 53533
    Single _6IntAsFloat;// 0:Cylinder-ext->16:IntAsFloat 53535
    Single _7Divide;// 0:Cylinder-ext->13:Divide 53534
    Vector3 _8MultiplyByScalar;// 0:Cylinder-ext->10:MultiplyByScalar 53532
    Func[Int32, IArray[Vector3]] _9Pass-through: function1;// 0:Pass-through: function1 53465
    IArray[IArray[Vector3]] _10Map;// 5:MapRange->3:Map 53466
    IArray[Vector3] _11Flatten;// 9:PointsExtrude-ext->11:Flatten 53463
    Boolean _12False;// 9:PointsExtrude-ext->9:False 53477
    Boolean _13True;// 9:True 53542
    QuadMesh _14QuadMeshStrip;// 9:PointsExtrude-ext->4:QuadMeshStrip 53462
    Int32 _61Count;// 9:PointsExtrude-ext->20:Count 53487
    IArray[Int32] _62Range;// 30:MapRange->2:Range 53485
    Int32 _63Constant;// 9:PointsExtrude-ext->0:Constant 53489
    Func[Int32, Int32] _64Pass-through: function1;// 0:Pass-through: function1 53483
    IArray[Int32] _65Map;// 30:MapRange->3:Map 53484
    IArray[Int32] _66QuadMeshIndices;// 9:PointsExtrude-ext->19:QuadMeshIndices 53495
    Int32 _67Count;// 21:TakeLastN-ext->1:Count 53494
    Int32 _68Multiply;// 9:PointsExtrude-ext->31:Multiply 53496
    Int32 _69Subtract;// 21:TakeLastN-ext->3:Subtract 53493
    IArray[Int32] _70Skip;// 21:TakeLastN-ext->4:Skip 53492
    IArray[Int32] _71Map;// 29:SelectByIndex->2:Map 53480
    IArray[Vector3] _72QuadMeshVertices;// 14:QuadMeshFanCap-ext->3:QuadMeshVertices 53378
    IArray[Vector3] _73Map;// 12:SelectByIndex->2:Map 53403
    Int32 _74Count;// 8:IfArrayNonEmpty->3:Count 53390
    Int32 _75Zero;// 4:GreaterThanZero->1:Zero 53389
    Boolean _76GreaterThan;// 4:GreaterThanZero->3:GreaterThan 53388
    Vector3 _84DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 53395
    Vector3 _85Aggregate;// 2:Sum->0:Aggregate 53394
    Int32 _86Count;// 6:AverageVector->3:Count 53398
    Single _87IntAsFloat;// 6:AverageVector->1:IntAsFloat 53397
    Vector3 _88DivideByScalar;// 6:AverageVector->5:DivideByScalar 53392
    Single _89Constant;// 9:Origin->0:Constant 53400
    Vector3 _90Vector3;// 9:Origin->1:Vector3 53399
    Boolean _91True;// 14:QuadMeshFanCap-ext->6:True 53460
    Int32 _92Count;// 5:QuadMeshFanIndices-ext->17:Count 53427
    Int32 _93One;// 16:MinusOne->2:One 53426
    Int32 _94Subtract;// 16:MinusOne->1:Subtract 53425
    IArray[Int32] _95Range;// 9:MapRange->2:Range 53423
    Int32 _96Zero;// 5:QuadMeshFanIndices-ext->12:Zero 53442
    Func[Int32, IArray[Int32]] _97Pass-through: function1;// 0:Pass-through: function1 53421
    IArray[IArray[Int32]] _98Map;// 9:MapRange->3:Map 53422
    IArray[Int32] _106Flatten;// 5:QuadMeshFanIndices-ext->11:Flatten 53414
    IArray[Int32] _114Unit;// 4:Array3->2:Unit 53456
    Int32 _115Zero;// 5:QuadMeshFanIndices-ext->15:Zero 53457
    IArray[Int32] _116Append;// 4:Array3->3:Append 53455
    IArray[Int32] _117Append;// 4:Array3->6:Append 53454
    Int32 _118One;// 5:QuadMeshFanIndices-ext->19:One 53458
    IArray[Int32] _119Append;// 3:Array4->5:Append 53450
    QuadMesh _179Pass-through: QuadMesh;// 0:Pass-through: QuadMesh 53227
    IArray[Vector3] _180QuadMeshVertices;// 3:QuadMeshToTriMesh-ext->14:QuadMeshVertices 53242
    IArray[Int32] _181QuadMeshIndices;// 3:QuadMeshToTriMesh-ext->2:QuadMeshIndices 53255
    Int32 _182Count;// 3:Slices->2:Count 53252
    Int32 _183Constant;// 3:QuadMeshToTriMesh-ext->0:Constant 53256
    Int32 _184Divide;// 3:Slices->3:Divide 53251
    IArray[Int32] _185Range;// 3:Slices->4:Range 53250
    IArray[IArray[Int32]] _186Map;// 3:Slices->5:Map 53249
    Int32 _187Constant;// 3:QuadMeshToTriMesh-ext->0:Constant 53271
    IArray[Int32] _188Range;// 3:QuadMeshToTriMesh-ext->6:Range 53270
    Int32 _189Constant;// 3:QuadMeshToTriMesh-ext->0:Constant 53272
    IArray[Int32] _190Append;// 3:QuadMeshToTriMesh-ext->11:Append 53269
    Int32 _191Constant;// 3:QuadMeshToTriMesh-ext->0:Constant 53273
    IArray[Int32] _192Append;// 3:QuadMeshToTriMesh-ext->12:Append 53268
    Int32 _193Constant;// 3:QuadMeshToTriMesh-ext->0:Constant 53274
    IArray[Int32] _194Append;// 3:QuadMeshToTriMesh-ext->17:Append 53267
    IArray[Int32] _195Map;// 23:IntArrayCheck-ext->1:Map 53265
    Func[IArray[Int32], IArray[Int32]] _196Pass-through: function1;// 0:Pass-through: function1 53244
    IArray[IArray[Int32]] _197Map;// 1:FlatMap->4:Map 53246
    IArray[Int32] _198Flatten;// 1:FlatMap->3:Flatten 53245
    TriMesh _199CreateMesh;// 3:QuadMeshToTriMesh-ext->13:CreateMesh 53241
    IArray[Int32] _200MeshIndices;// 16:HideEveryThirdEdge->2:MeshIndices 53232
    IArray[Int32] _201Indices;// 16:HideEveryThirdEdge->8:Indices 53231
    Int32 _202Constant;// 16:HideEveryThirdEdge->0:Constant 53239
    Int32 _203Constant;// 16:HideEveryThirdEdge->0:Constant 53240
    IArray[Boolean] _204Map;// 16:HideEveryThirdEdge->5:Map 53230
    TriMesh _205SetVisibleEdges;// 16:HideEveryThirdEdge->9:SetVisibleEdges 53229
    _0One = One();
    _1Add = Add(numSegments, _0One);
    _2Range = Range(_1Add);
    _3RangeExclusiveFloat = RangeExclusiveFloat(numSides);
    _4Map = Map(_3RangeExclusiveFloat, (Single x0) => 
      {
        Single _0Constant;// 9:OneMinus->0:Constant 53526
        Single _1Subtract;// 9:OneMinus->2:Subtract 53525
        Single _2Constant;// 2:PointOnCircle-ext->0:Constant 53527
        Single _3Subtract;// 2:PointOnCircle-ext->10:Subtract 53523
        Single _4TwoPi;// 2:PointOnCircle-ext->5:TwoPi 53528
        Single _5Multiply;// 2:PointOnCircle-ext->6:Multiply 53522
        Single _6Cos;// 2:PointOnCircle-ext->3:Cos 53521
        Single _7TwoPi;// 2:PointOnCircle-ext->2:TwoPi 53531
        Single _8Multiply;// 2:PointOnCircle-ext->1:Multiply 53530
        Single _9Sin;// 2:PointOnCircle-ext->0:Sin 53529
        Single _10Constant;// 4:Vector3FromXY->0:Constant 53520
        Vector3 _11Vector3;// 4:Vector3FromXY->0:Vector3 53519
        Vector3 _12MultiplyByScalar;// 0:Cylinder-ext->14:MultiplyByScalar 53515
        _0Constant = 1;
        _1Subtract = Subtract(_0Constant, x0);
        _2Constant = 0.25;
        _3Subtract = Subtract(_1Subtract, _2Constant);
        _4TwoPi = TwoPi();
        _5Multiply = Multiply(_3Subtract, _4TwoPi);
        _6Cos = Cos(_5Multiply);
        _7TwoPi = TwoPi();
        _8Multiply = Multiply(_3Subtract, _7TwoPi);
        _9Sin = Sin(_8Multiply);
        _10Constant = 0;
        _11Vector3 = Vector3(_6Cos, _9Sin, _10Constant);
        _12MultiplyByScalar = MultiplyByScalar(_11Vector3, radius);
        _12MultiplyByScalar;
        });
    _5ZAxis = ZAxis();
    _6IntAsFloat = IntAsFloat(numSegments);
    _7Divide = Divide(height, _6IntAsFloat);
    _8MultiplyByScalar = MultiplyByScalar(_5ZAxis, _7Divide);
    _9Pass-through: function1 = (Int32 x0) => 
      {
        Single _0IntAsFloat;// 9:PointsExtrude-ext->7:IntAsFloat 53476
        Vector3 _1MultiplyByScalar;// 9:PointsExtrude-ext->6:MultiplyByScalar 53475
        IArray[Vector3] _2Map;// 3:MovePoints->2:Map 53473
        _0IntAsFloat = IntAsFloat(x0);
        _1MultiplyByScalar = MultiplyByScalar(_8MultiplyByScalar, _0IntAsFloat);
        _2Map = Map(_4Map, (Vector3 x0) => 
          {
            Vector3 _0Add;// 3:MovePoints->3:Add 53474
            _0Add = Add(x0, _1MultiplyByScalar);
            _0Add;
            });
        _2Map;
        };
    _10Map = Map(_2Range, _9Pass-through: function1);
    _11Flatten = Flatten(_10Map);
    _12False = False();
    _13True = True();
    _14QuadMeshStrip = QuadMeshStrip(_11Flatten, _1Add, _12False, _13True);
    _61Count = Count(_4Map);
    _62Range = Range(_61Count);
    _63Constant = 4;
    _64Pass-through: function1 = (Int32 x0) => 
      {
        Int32 _0Multiply;// 9:PointsExtrude-ext->24:Multiply 53488
        _0Multiply = Multiply(x0, _63Constant);
        _0Multiply;
        };
    _65Map = Map(_62Range, _64Pass-through: function1);
    _66QuadMeshIndices = QuadMeshIndices(_14QuadMeshStrip);
    _67Count = Count(_66QuadMeshIndices);
    _68Multiply = Multiply(_61Count, _63Constant);
    _69Subtract = Subtract(_67Count, _68Multiply);
    _70Skip = Skip(_66QuadMeshIndices, _69Subtract);
    _71Map = Map(_65Map, (Int32 x0) => 
      {
        Int32 _0At;// 29:SelectByIndex->3:At 53481
        _0At = At(_70Skip, x0);
        _0At;
        });
    _72QuadMeshVertices = QuadMeshVertices(_14QuadMeshStrip);
    _73Map = Map(_71Map, (Int32 x0) => 
      {
        Vector3 _0At;// 12:SelectByIndex->3:At 53404
        _0At = At(_72QuadMeshVertices, x0);
        _0At;
        });
    _74Count = Count(_73Map);
    _75Zero = Zero();
    _76GreaterThan = GreaterThan(_74Count, _75Zero);
    _84DefaultValueOfElement = DefaultValueOfElement(_73Map);
    _85Aggregate = Aggregate(_73Map, _84DefaultValueOfElement, (Vector3 x0, Vector3 x1) => 
      {
        Vector3 _0Add;// 2:Sum->2:Add 53396
        _0Add = Add(x0, x1);
        _0Add;
        });
    _86Count = Count(_73Map);
    _87IntAsFloat = IntAsFloat(_86Count);
    _88DivideByScalar = DivideByScalar(_85Aggregate, _87IntAsFloat);
    _89Constant = 0;
    _90Vector3 = Vector3(_89Constant, _89Constant, _89Constant);
    _91True = True();
    _92Count = Count(_71Map);
    _93One = One();
    _94Subtract = Subtract(_92Count, _93One);
    _95Range = Range(_94Subtract);
    _96Zero = Zero();
    _97Pass-through: function1 = (Int32 x0) => 
      {
        Int32 _0One;// 13:PlusOne->1:One 53441
        Int32 _1Add;// 13:PlusOne->0:Add 53440
        IArray[Int32] _2Unit;// 4:Array3->2:Unit 53438
        IArray[Int32] _3Append;// 4:Array3->3:Append 53437
        IArray[Int32] _4Append;// 4:Array3->6:Append 53436
        Int32 _5One;// 10:PlusOne->1:One 53445
        Int32 _6Add;// 10:PlusOne->0:Add 53444
        IArray[Int32] _7Append;// 2:Array4->5:Append 53432
        _0One = One();
        _1Add = Add(x0, _0One);
        _2Unit = Unit(_1Add);
        _3Append = Append(_2Unit, _96Zero);
        _4Append = Append(_3Append, _96Zero);
        _5One = One();
        _6Add = Add(_1Add, _5One);
        _7Append = Append(_4Append, _6Add);
        _7Append;
        };
    _98Map = Map(_95Range, _97Pass-through: function1);
    _106Flatten = Flatten(if (_91True)
      {
        IArray[Int32] _99Unit;// 4:Array3->2:Unit 53456
        Int32 _100Zero;// 5:QuadMeshFanIndices-ext->15:Zero 53457
        IArray[Int32] _101Append;// 4:Array3->3:Append 53455
        IArray[Int32] _102Append;// 4:Array3->6:Append 53454
        Int32 _103One;// 5:QuadMeshFanIndices-ext->19:One 53458
        IArray[Int32] _104Append;// 3:Array4->5:Append 53450
        IArray[IArray[Int32]] _105Append;// 18:AppendIf->1:Append 53419
        _99Unit = Unit(_92Count);
        _100Zero = Zero();
        _101Append = Append(_99Unit, _100Zero);
        _102Append = Append(_101Append, _100Zero);
        _103One = One();
        _104Append = Append(_102Append, _103One);
        _105Append = Append(_98Map, _104Append);
        _105Append;
        }else
      {
        _98Map;
        });
    _114Unit = Unit(_92Count);
    _115Zero = Zero();
    _116Append = Append(_114Unit, _115Zero);
    _117Append = Append(_116Append, _115Zero);
    _118One = One();
    _119Append = Append(_117Append, _118One);
    _179Pass-through: QuadMesh = if (capBottom)
      {
        QuadMesh _127Pass-through: QuadMesh;// 0:Pass-through: QuadMesh 53285
        IArray[Vector3] _128QuadMeshVertices;// 40:QuadMeshFanCap-ext->3:QuadMeshVertices 53289
        IArray[Int32] _129Range;// 32:MapRange->2:Range 53505
        Int32 _130Constant;// 9:PointsExtrude-ext->0:Constant 53509
        Int32 _131Constant;// 9:PointsExtrude-ext->0:Constant 53510
        Func[Int32, Int32] _132Pass-through: function1;// 0:Pass-through: function1 53503
        IArray[Int32] _133Map;// 32:MapRange->3:Map 53504
        Int32 _134Multiply;// 9:PointsExtrude-ext->22:Multiply 53512
        IArray[Int32] _135Take;// 9:PointsExtrude-ext->46:Take 53511
        IArray[Int32] _136Map;// 34:SelectByIndex->2:Map 53500
        IArray[Int32] _137Reverse;// 9:PointsExtrude-ext->47:Reverse 53497
        IArray[Vector3] _138Map;// 12:SelectByIndex->2:Map 53314
        Int32 _139Count;// 8:IfArrayNonEmpty->3:Count 53301
        Int32 _140Zero;// 4:GreaterThanZero->1:Zero 53300
        Boolean _141GreaterThan;// 4:GreaterThanZero->3:GreaterThan 53299
        IArray[Vector3] _149Append;// 40:QuadMeshFanCap-ext->7:Append 53288
        IArray[Int32] _150QuadMeshIndices;// 40:QuadMeshFanCap-ext->4:QuadMeshIndices 53317
        Boolean _151True;// 40:QuadMeshFanCap-ext->6:True 53371
        Int32 _152Count;// 5:QuadMeshFanIndices-ext->17:Count 53338
        Int32 _153One;// 16:MinusOne->2:One 53337
        Int32 _154Subtract;// 16:MinusOne->1:Subtract 53336
        IArray[Int32] _155Range;// 9:MapRange->2:Range 53334
        Int32 _156Zero;// 5:QuadMeshFanIndices-ext->12:Zero 53353
        Func[Int32, IArray[Int32]] _157Pass-through: function1;// 0:Pass-through: function1 53332
        IArray[IArray[Int32]] _158Map;// 9:MapRange->3:Map 53333
        IArray[Int32] _166Flatten;// 5:QuadMeshFanIndices-ext->11:Flatten 53325
        Int32 _167Count;// 40:QuadMeshFanCap-ext->8:Count 53372
        IArray[Int32] _168Prepend;// 5:QuadMeshFanIndices-ext->4:Prepend 53370
        IArray[Int32] _169Map;// 20:SelectByIndex->2:Map 53323
        IArray[Int32] _170Concatenate;// 40:QuadMeshFanCap-ext->9:Concatenate 53316
        QuadMesh _171QuadMesh;// 40:QuadMeshFanCap-ext->10:QuadMesh 53287
        _127Pass-through: QuadMesh = if (capTop)
          {
            IArray[Vector3] _120Append;// 14:QuadMeshFanCap-ext->7:Append 53377
            IArray[Int32] _121QuadMeshIndices;// 14:QuadMeshFanCap-ext->4:QuadMeshIndices 53406
            Int32 _122Count;// 14:QuadMeshFanCap-ext->8:Count 53461
            IArray[Int32] _123Prepend;// 5:QuadMeshFanIndices-ext->4:Prepend 53459
            IArray[Int32] _124Map;// 20:SelectByIndex->2:Map 53412
            IArray[Int32] _125Concatenate;// 14:QuadMeshFanCap-ext->9:Concatenate 53405
            QuadMesh _126QuadMesh;// 14:QuadMeshFanCap-ext->10:QuadMesh 53376
            _120Append = Append(_72QuadMeshVertices, if (_76GreaterThan)
              {
                _88DivideByScalar;
                }else
              {
                _90Vector3;
                });
            _121QuadMeshIndices = QuadMeshIndices(_14QuadMeshStrip);
            _122Count = Count(_72QuadMeshVertices);
            _123Prepend = Prepend(_71Map, _122Count);
            _124Map = Map(_106Flatten, (Int32 x0) => 
              {
                Int32 _0At;// 20:SelectByIndex->3:At 53413
                _0At = At(_123Prepend, x0);
                _0At;
                });
            _125Concatenate = Concatenate(_121QuadMeshIndices, _124Map);
            _126QuadMesh = QuadMesh(_120Append, _125Concatenate);
            _126QuadMesh;
            }else
          {
            _14QuadMeshStrip;
            };
        _128QuadMeshVertices = QuadMeshVertices(_127Pass-through: QuadMesh);
        _129Range = Range(_61Count);
        _130Constant = 4;
        _131Constant = 3;
        _132Pass-through: function1 = (Int32 x0) => 
          {
            Int32 _0Multiply;// 9:PointsExtrude-ext->35:Multiply 53508
            Int32 _1Add;// 9:PointsExtrude-ext->23:Add 53507
            _0Multiply = Multiply(x0, _130Constant);
            _1Add = Add(_0Multiply, _131Constant);
            _1Add;
            };
        _133Map = Map(_129Range, _132Pass-through: function1);
        _134Multiply = Multiply(_61Count, _130Constant);
        _135Take = Take(_66QuadMeshIndices, _134Multiply);
        _136Map = Map(_133Map, (Int32 x0) => 
          {
            Int32 _0At;// 34:SelectByIndex->3:At 53501
            _0At = At(_135Take, x0);
            _0At;
            });
        _137Reverse = Reverse(_136Map);
        _138Map = Map(_137Reverse, (Int32 x0) => 
          {
            Vector3 _0At;// 12:SelectByIndex->3:At 53315
            _0At = At(_128QuadMeshVertices, x0);
            _0At;
            });
        _139Count = Count(_138Map);
        _140Zero = Zero();
        _141GreaterThan = GreaterThan(_139Count, _140Zero);
        _149Append = Append(_128QuadMeshVertices, if (_141GreaterThan)
          {
            Vector3 _142DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 53306
            Vector3 _143Aggregate;// 2:Sum->0:Aggregate 53305
            Int32 _144Count;// 6:AverageVector->3:Count 53309
            Single _145IntAsFloat;// 6:AverageVector->1:IntAsFloat 53308
            Vector3 _146DivideByScalar;// 6:AverageVector->5:DivideByScalar 53303
            _142DefaultValueOfElement = DefaultValueOfElement(_138Map);
            _143Aggregate = Aggregate(_138Map, _142DefaultValueOfElement, (Vector3 x0, Vector3 x1) => 
              {
                Vector3 _0Add;// 2:Sum->2:Add 53307
                _0Add = Add(x0, x1);
                _0Add;
                });
            _144Count = Count(_138Map);
            _145IntAsFloat = IntAsFloat(_144Count);
            _146DivideByScalar = DivideByScalar(_143Aggregate, _145IntAsFloat);
            _146DivideByScalar;
            }else
          {
            Single _147Constant;// 9:Origin->0:Constant 53311
            Vector3 _148Vector3;// 9:Origin->1:Vector3 53310
            _147Constant = 0;
            _148Vector3 = Vector3(_147Constant, _147Constant, _147Constant);
            _148Vector3;
            });
        _150QuadMeshIndices = QuadMeshIndices(_127Pass-through: QuadMesh);
        _151True = True();
        _152Count = Count(_137Reverse);
        _153One = One();
        _154Subtract = Subtract(_152Count, _153One);
        _155Range = Range(_154Subtract);
        _156Zero = Zero();
        _157Pass-through: function1 = (Int32 x0) => 
          {
            Int32 _0One;// 13:PlusOne->1:One 53352
            Int32 _1Add;// 13:PlusOne->0:Add 53351
            IArray[Int32] _2Unit;// 4:Array3->2:Unit 53349
            IArray[Int32] _3Append;// 4:Array3->3:Append 53348
            IArray[Int32] _4Append;// 4:Array3->6:Append 53347
            Int32 _5One;// 10:PlusOne->1:One 53356
            Int32 _6Add;// 10:PlusOne->0:Add 53355
            IArray[Int32] _7Append;// 2:Array4->5:Append 53343
            _0One = One();
            _1Add = Add(x0, _0One);
            _2Unit = Unit(_1Add);
            _3Append = Append(_2Unit, _156Zero);
            _4Append = Append(_3Append, _156Zero);
            _5One = One();
            _6Add = Add(_1Add, _5One);
            _7Append = Append(_4Append, _6Add);
            _7Append;
            };
        _158Map = Map(_155Range, _157Pass-through: function1);
        _166Flatten = Flatten(if (_151True)
          {
            IArray[Int32] _159Unit;// 4:Array3->2:Unit 53367
            Int32 _160Zero;// 5:QuadMeshFanIndices-ext->15:Zero 53368
            IArray[Int32] _161Append;// 4:Array3->3:Append 53366
            IArray[Int32] _162Append;// 4:Array3->6:Append 53365
            Int32 _163One;// 5:QuadMeshFanIndices-ext->19:One 53369
            IArray[Int32] _164Append;// 3:Array4->5:Append 53361
            IArray[IArray[Int32]] _165Append;// 18:AppendIf->1:Append 53330
            _159Unit = Unit(_152Count);
            _160Zero = Zero();
            _161Append = Append(_159Unit, _160Zero);
            _162Append = Append(_161Append, _160Zero);
            _163One = One();
            _164Append = Append(_162Append, _163One);
            _165Append = Append(_158Map, _164Append);
            _165Append;
            }else
          {
            _158Map;
            });
        _167Count = Count(_128QuadMeshVertices);
        _168Prepend = Prepend(_137Reverse, _167Count);
        _169Map = Map(_166Flatten, (Int32 x0) => 
          {
            Int32 _0At;// 20:SelectByIndex->3:At 53324
            _0At = At(_168Prepend, x0);
            _0At;
            });
        _170Concatenate = Concatenate(_150QuadMeshIndices, _169Map);
        _171QuadMesh = QuadMesh(_149Append, _170Concatenate);
        _171QuadMesh;
        }else
      {
        if (capTop)
          {
            IArray[Vector3] _172Append;// 14:QuadMeshFanCap-ext->7:Append 53377
            IArray[Int32] _173QuadMeshIndices;// 14:QuadMeshFanCap-ext->4:QuadMeshIndices 53406
            Int32 _174Count;// 14:QuadMeshFanCap-ext->8:Count 53461
            IArray[Int32] _175Prepend;// 5:QuadMeshFanIndices-ext->4:Prepend 53459
            IArray[Int32] _176Map;// 20:SelectByIndex->2:Map 53412
            IArray[Int32] _177Concatenate;// 14:QuadMeshFanCap-ext->9:Concatenate 53405
            QuadMesh _178QuadMesh;// 14:QuadMeshFanCap-ext->10:QuadMesh 53376
            _172Append = Append(_72QuadMeshVertices, if (_76GreaterThan)
              {
                _88DivideByScalar;
                }else
              {
                _90Vector3;
                });
            _173QuadMeshIndices = QuadMeshIndices(_14QuadMeshStrip);
            _174Count = Count(_72QuadMeshVertices);
            _175Prepend = Prepend(_71Map, _174Count);
            _176Map = Map(_106Flatten, (Int32 x0) => 
              {
                Int32 _0At;// 20:SelectByIndex->3:At 53413
                _0At = At(_175Prepend, x0);
                _0At;
                });
            _177Concatenate = Concatenate(_173QuadMeshIndices, _176Map);
            _178QuadMesh = QuadMesh(_172Append, _177Concatenate);
            _178QuadMesh;
            }else
          {
            _14QuadMeshStrip;
            };
        };
    _180QuadMeshVertices = QuadMeshVertices(_179Pass-through: QuadMesh);
    _181QuadMeshIndices = QuadMeshIndices(_179Pass-through: QuadMesh);
    _182Count = Count(_181QuadMeshIndices);
    _183Constant = 4;
    _184Divide = Divide(_182Count, _183Constant);
    _185Range = Range(_184Divide);
    _186Map = Map(_185Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 3:Slices->6:Multiply 53254
        IArray[Int32] _1Slice;// 3:Slices->0:Slice 53253
        _0Multiply = Multiply(_183Constant, x0);
        _1Slice = Slice(_181QuadMeshIndices, _0Multiply, _183Constant);
        _1Slice;
        });
    _187Constant = 3;
    _188Range = Range(_187Constant);
    _189Constant = 2;
    _190Append = Append(_188Range, _189Constant);
    _191Constant = 3;
    _192Append = Append(_190Append, _191Constant);
    _193Constant = 0;
    _194Append = Append(_192Append, _193Constant);
    _195Map = Map(_194Append, (Int32 x0) => 
      {
        x0;
        });
    _196Pass-through: function1 = (IArray[Int32] x0) => 
      {
        IArray[Int32] _0Map;// 5:IntArrayCheck-ext->1:Map 53261
        IArray[Int32] _1Map;// 5:IntArrayCheck-ext->1:Map 53276
        IArray[Int32] _2Map;// 22:SelectByIndex2-ext->2:Map 53259
        _0Map = Map(_195Map, (Int32 x0) => 
          {
            x0;
            });
        _1Map = Map(x0, (Int32 x0) => 
          {
            x0;
            });
        _2Map = Map(_0Map, (Int32 x0) => 
          {
            Int32 _0At;// 22:SelectByIndex2-ext->3:At 53263
            _0At = At(_1Map, x0);
            _0At;
            });
        _2Map;
        };
    _197Map = Map(_186Map, _196Pass-through: function1);
    _198Flatten = Flatten(_197Map);
    _199CreateMesh = CreateMesh(_180QuadMeshVertices, _198Flatten);
    _200MeshIndices = MeshIndices(_199CreateMesh);
    _201Indices = Indices(_200MeshIndices);
    _202Constant = 3;
    _203Constant = 2;
    _204Map = Map(_201Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 53238
        Boolean _1Equal;// 6:ModuloEquals->4:Equal 53237
        Boolean _2Not;// 16:HideEveryThirdEdge->7:Not 53233
        _0Modulo = Modulo(x0, _202Constant);
        _1Equal = Equal(_0Modulo, _203Constant);
        _2Not = Not(_1Equal);
        _2Not;
        });
    _205SetVisibleEdges = SetVisibleEdges(_199CreateMesh, _204Map);
    _205SetVisibleEdges;
    }