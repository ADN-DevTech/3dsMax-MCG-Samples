(InstanceState state, Boolean maintain edge lengths, TriMesh mesh, Int32 iterations, INode original mesh, Single amount) => 
  {
    if (maintain edge lengths)
      {
        TriMesh _0Repeat;// 10:Iterate-ext->7:Repeat 94074
        _0Repeat = Repeat(mesh, iterations, (TriMesh x0, Int32 x1) => 
          {
            Boolean _0IsValidNode;// 6:NodeMeshOrDefault-ext->1:IsValidNode 94337
            TriMesh _3Pass-through: TriMesh;// 0:Pass-through: TriMesh 94068
            Func[TriMesh, TriMesh] _4Pass-through: function1;// 0:Pass-through: function1 94073
            TriMesh _5Apply1;// 10:Iterate-ext->1:Apply1 94076
            TriMesh _6IgnoreSecond;// 10:Iterate-ext->9:IgnoreSecond 94075
            _0IsValidNode = IsValidNode(original mesh);
            _3Pass-through: TriMesh = if (_0IsValidNode)
              {
                TriMesh _1MeshFromNode;// 6:NodeMeshOrDefault-ext->2:MeshFromNode 94338
                _1MeshFromNode = MeshFromNode(original mesh);
                _1MeshFromNode;
                }else
              {
                TriMesh _2EmptyMesh;// 7:EmptyMesh 94340
                _2EmptyMesh = EmptyMesh();
                _2EmptyMesh;
                };
            _4Pass-through: function1 = (TriMesh x0) => 
              {
                IArray[Vector3] _0MeshVertices;// 10:MeshMoveVerticesToward-ext->2:MeshVertices 94085
                IArray[Vector3] _1MeshVertices;// 0:MeshRelaxTowardsOriginal-ext->6:MeshVertices 94091
                IArray[Int32] _2Indices;// 7:MapIndices-ext->4:Indices 94090
                Func[Int32, Vector3] _3Pass-through: function1;// 0:Pass-through: function1 94088
                IArray[Vector3] _4Map;// 7:MapIndices-ext->2:Map 94089
                IArray[Vector3] _5Combine;// 10:MeshMoveVerticesToward-ext->5:Combine 94084
                TriMesh _6SetMeshVertices;// 10:MeshMoveVerticesToward-ext->3:SetMeshVertices 94083
                _0MeshVertices = MeshVertices(x0);
                _1MeshVertices = MeshVertices(_3Pass-through: TriMesh);
                _2Indices = Indices(_1MeshVertices);
                _3Pass-through: function1 = (Int32 x0) => 
                  {
                    IArray[Int32] _0VertexFaceLookup;// 2:AdjacentVertexIndices->2:VertexFaceLookup 94141
                    Func[Int32, IArray[Int32]] _1Pass-through: function1;// 0:Pass-through: function1 94138
                    IArray[IArray[Int32]] _2Map;// 3:FlatMap->4:Map 94140
                    IArray[Int32] _3Flatten;// 3:FlatMap->3:Flatten 94139
                    IArray[Int32] _4Sort;// 6:RemoveDuplicates->7:Sort 94122
                    IArray[Int32] _5Indices;// 6:RemoveDuplicates->0:Indices 94121
                    IArray[Int32] _6Filter;// 6:RemoveDuplicates->3:Filter 94120
                    IArray[Int32] _7Map;// 5:SelectByIndex->2:Map 94118
                    IArray[Vector3] _8MeshVertices;// 7:VertexNeighbours-ext->3:MeshVertices 94164
                    IArray[Vector3] _9Map;// 4:SelectByIndex->2:Map 94111
                    IArray[Vector3] _10MeshVertices;// 2:Vertex-ext->3:MeshVertices 94169
                    Vector3 _11At;// 2:Vertex-ext->5:At 94168
                    IArray[Vector3] _12Map;// 5:VertexNeighbourDeltas-ext->6:Map 94106
                    IArray[Int32] _13VertexFaceLookup;// 2:AdjacentVertexIndices->2:VertexFaceLookup 94205
                    Func[Int32, IArray[Int32]] _14Pass-through: function1;// 0:Pass-through: function1 94202
                    IArray[IArray[Int32]] _15Map;// 3:FlatMap->4:Map 94204
                    IArray[Int32] _16Flatten;// 3:FlatMap->3:Flatten 94203
                    IArray[Int32] _17Sort;// 6:RemoveDuplicates->7:Sort 94186
                    IArray[Int32] _18Indices;// 6:RemoveDuplicates->0:Indices 94185
                    IArray[Int32] _19Filter;// 6:RemoveDuplicates->3:Filter 94184
                    IArray[Int32] _20Map;// 5:SelectByIndex->2:Map 94182
                    IArray[Vector3] _21MeshVertices;// 4:VertexNeighbours-ext->3:MeshVertices 94228
                    IArray[Vector3] _22Map;// 4:SelectByIndex->2:Map 94175
                    IArray[Vector3] _23Combine;// 2:ArrayAdd-ext->2:Combine 94102
                    Vector3 _24DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 94096
                    Vector3 _25Aggregate;// 2:Sum->0:Aggregate 94095
                    Int32 _26Count;// 8:AverageVector->3:Count 94099
                    Single _27IntAsFloat;// 8:AverageVector->1:IntAsFloat 94098
                    Vector3 _28DivideByScalar;// 8:AverageVector->5:DivideByScalar 94093
                    _0VertexFaceLookup = VertexFaceLookup(_3Pass-through: TriMesh, x0);
                    _1Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Constant;// 1:Three->0:Constant 94156
                        Int32 _1Multiply;// 2:MultiplyByThree->2:Multiply 94155
                        IArray[Int32] _2Unit;// 0:Array3->2:Unit 94153
                        Int32 _3One;// 3:PlusOne->1:One 94159
                        Int32 _4Add;// 3:PlusOne->0:Add 94158
                        IArray[Int32] _5Append;// 0:Array3->3:Append 94152
                        Int32 _6One;// 4:PlusOne->1:One 94162
                        Int32 _7Add;// 4:PlusOne->0:Add 94161
                        IArray[Int32] _8Append;// 0:Array3->6:Append 94151
                        IArray[Int32] _9MeshIndices;// 4:FaceToVertexIndices->7:MeshIndices 94163
                        IArray[Int32] _10Map;// 8:SelectByIndex->2:Map 94146
                        _0Constant = 3;
                        _1Multiply = Multiply(x0, _0Constant);
                        _2Unit = Unit(_1Multiply);
                        _3One = One();
                        _4Add = Add(_1Multiply, _3One);
                        _5Append = Append(_2Unit, _4Add);
                        _6One = One();
                        _7Add = Add(_4Add, _6One);
                        _8Append = Append(_5Append, _7Add);
                        _9MeshIndices = MeshIndices(_3Pass-through: TriMesh);
                        _10Map = Map(_8Append, (Int32 x0) => 
                          {
                            Int32 _0At;// 8:SelectByIndex->3:At 94147
                            _0At = At(_9MeshIndices, x0);
                            _0At;
                            });
                        _10Map;
                        };
                    _2Map = Map(_0VertexFaceLookup, _1Pass-through: function1);
                    _3Flatten = Flatten(_2Map);
                    _4Sort = Sort(_3Flatten);
                    _5Indices = Indices(_4Sort);
                    _6Filter = Filter(_5Indices, (Int32 x0) => 
                      {
                        Int32 _0Zero;// 2:GreaterThanZero->1:Zero 94129
                        Boolean _1GreaterThan;// 2:GreaterThanZero->3:GreaterThan 94128
                        Boolean _8Not;// 6:RemoveDuplicates->4:Not 94123
                        _0Zero = Zero();
                        _1GreaterThan = GreaterThan(x0, _0Zero);
                        _8Not = Not(if (_1GreaterThan)
                          {
                            Int32 _2At;// 2:SameAsPreviousElement->6:At 94131
                            Int32 _3One;// 5:MinusOne->2:One 94135
                            Int32 _4Subtract;// 5:MinusOne->1:Subtract 94134
                            Int32 _5At;// 2:SameAsPreviousElement->7:At 94132
                            Boolean _6Equal;// 2:SameAsPreviousElement->3:Equal 94130
                            _2At = At(_4Sort, x0);
                            _3One = One();
                            _4Subtract = Subtract(x0, _3One);
                            _5At = At(_4Sort, _4Subtract);
                            _6Equal = Equal(_2At, _5At);
                            _6Equal;
                            }else
                          {
                            Boolean _7False;// 2:SameAsPreviousElement->8:False 94136
                            _7False = False();
                            _7False;
                            });
                        _8Not;
                        });
                    _7Map = Map(_6Filter, (Int32 x0) => 
                      {
                        Int32 _0At;// 5:SelectByIndex->3:At 94119
                        _0At = At(_4Sort, x0);
                        _0At;
                        });
                    _8MeshVertices = MeshVertices(_3Pass-through: TriMesh);
                    _9Map = Map(_7Map, (Int32 x0) => 
                      {
                        Vector3 _0At;// 4:SelectByIndex->3:At 94112
                        _0At = At(_8MeshVertices, x0);
                        _0At;
                        });
                    _10MeshVertices = MeshVertices(_3Pass-through: TriMesh);
                    _11At = At(_10MeshVertices, x0);
                    _12Map = Map(_9Map, (Vector3 x0) => 
                      {
                        Vector3 _0Subtract;// 5:VertexNeighbourDeltas-ext->9:Subtract 94165
                        _0Subtract = Subtract(_11At, x0);
                        _0Subtract;
                        });
                    _13VertexFaceLookup = VertexFaceLookup(x0, x0);
                    _14Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Constant;// 1:Three->0:Constant 94220
                        Int32 _1Multiply;// 2:MultiplyByThree->2:Multiply 94219
                        IArray[Int32] _2Unit;// 0:Array3->2:Unit 94217
                        Int32 _3One;// 3:PlusOne->1:One 94223
                        Int32 _4Add;// 3:PlusOne->0:Add 94222
                        IArray[Int32] _5Append;// 0:Array3->3:Append 94216
                        Int32 _6One;// 4:PlusOne->1:One 94226
                        Int32 _7Add;// 4:PlusOne->0:Add 94225
                        IArray[Int32] _8Append;// 0:Array3->6:Append 94215
                        IArray[Int32] _9MeshIndices;// 4:FaceToVertexIndices->7:MeshIndices 94227
                        IArray[Int32] _10Map;// 8:SelectByIndex->2:Map 94210
                        _0Constant = 3;
                        _1Multiply = Multiply(x0, _0Constant);
                        _2Unit = Unit(_1Multiply);
                        _3One = One();
                        _4Add = Add(_1Multiply, _3One);
                        _5Append = Append(_2Unit, _4Add);
                        _6One = One();
                        _7Add = Add(_4Add, _6One);
                        _8Append = Append(_5Append, _7Add);
                        _9MeshIndices = MeshIndices(x0);
                        _10Map = Map(_8Append, (Int32 x0) => 
                          {
                            Int32 _0At;// 8:SelectByIndex->3:At 94211
                            _0At = At(_9MeshIndices, x0);
                            _0At;
                            });
                        _10Map;
                        };
                    _15Map = Map(_13VertexFaceLookup, _14Pass-through: function1);
                    _16Flatten = Flatten(_15Map);
                    _17Sort = Sort(_16Flatten);
                    _18Indices = Indices(_17Sort);
                    _19Filter = Filter(_18Indices, (Int32 x0) => 
                      {
                        Int32 _0Zero;// 2:GreaterThanZero->1:Zero 94193
                        Boolean _1GreaterThan;// 2:GreaterThanZero->3:GreaterThan 94192
                        Boolean _8Not;// 6:RemoveDuplicates->4:Not 94187
                        _0Zero = Zero();
                        _1GreaterThan = GreaterThan(x0, _0Zero);
                        _8Not = Not(if (_1GreaterThan)
                          {
                            Int32 _2At;// 2:SameAsPreviousElement->6:At 94195
                            Int32 _3One;// 5:MinusOne->2:One 94199
                            Int32 _4Subtract;// 5:MinusOne->1:Subtract 94198
                            Int32 _5At;// 2:SameAsPreviousElement->7:At 94196
                            Boolean _6Equal;// 2:SameAsPreviousElement->3:Equal 94194
                            _2At = At(_17Sort, x0);
                            _3One = One();
                            _4Subtract = Subtract(x0, _3One);
                            _5At = At(_17Sort, _4Subtract);
                            _6Equal = Equal(_2At, _5At);
                            _6Equal;
                            }else
                          {
                            Boolean _7False;// 2:SameAsPreviousElement->8:False 94200
                            _7False = False();
                            _7False;
                            });
                        _8Not;
                        });
                    _20Map = Map(_19Filter, (Int32 x0) => 
                      {
                        Int32 _0At;// 5:SelectByIndex->3:At 94183
                        _0At = At(_17Sort, x0);
                        _0At;
                        });
                    _21MeshVertices = MeshVertices(x0);
                    _22Map = Map(_20Map, (Int32 x0) => 
                      {
                        Vector3 _0At;// 4:SelectByIndex->3:At 94176
                        _0At = At(_21MeshVertices, x0);
                        _0At;
                        });
                    _23Combine = Combine(_12Map, _22Map, (Vector3 x0, Vector3 x1) => 
                      {
                        Vector3 _0Add;// 2:ArrayAdd-ext->5:Add 94103
                        _0Add = Add(x0, x1);
                        _0Add;
                        });
                    _24DefaultValueOfElement = DefaultValueOfElement(_23Combine);
                    _25Aggregate = Aggregate(_23Combine, _24DefaultValueOfElement, (Vector3 x0, Vector3 x1) => 
                      {
                        Vector3 _0Add;// 2:Sum->2:Add 94097
                        _0Add = Add(x0, x1);
                        _0Add;
                        });
                    _26Count = Count(_23Combine);
                    _27IntAsFloat = IntAsFloat(_26Count);
                    _28DivideByScalar = DivideByScalar(_25Aggregate, _27IntAsFloat);
                    _28DivideByScalar;
                    };
                _4Map = Map(_2Indices, _3Pass-through: function1);
                _5Combine = Combine(_0MeshVertices, _4Map, (Vector3 x0, Vector3 x1) => 
                  {
                    Vector3 _0Lerp;// 10:MeshMoveVerticesToward-ext->8:Lerp 94086
                    _0Lerp = Lerp(x0, x1, amount);
                    _0Lerp;
                    });
                _6SetMeshVertices = SetMeshVertices(x0, _5Combine);
                _6SetMeshVertices;
                };
            _5Apply1 = Apply1(_4Pass-through: function1, x0);
            _6IgnoreSecond = IgnoreSecond(_5Apply1, x1);
            _6IgnoreSecond;
            });
        _0Repeat;
        }else
      {
        TriMesh _1Repeat;// 4:Iterate-ext->7:Repeat 94232
        _1Repeat = Repeat(mesh, iterations, (TriMesh x0, Int32 x1) => 
          {
            Func[TriMesh, TriMesh] _0Pass-through: function1;// 0:Pass-through: function1 94231
            TriMesh _1Apply1;// 4:Iterate-ext->1:Apply1 94234
            TriMesh _2IgnoreSecond;// 4:Iterate-ext->9:IgnoreSecond 94233
            _0Pass-through: function1 = (TriMesh x0) => 
              {
                String _0Constant;// 0:HasPerVertexChannel->0:Constant 94245
                Int32 _1Zero;// 4:HasSoftSelection->3:Zero 94247
                String _2ToString;// 0:HasPerVertexChannel->7:ToString 94246
                String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 94244
                Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 94243
                TriMesh _5IfThen;// 11:MeshSetVertices-ext->10:IfThen 94239
                _0Constant = per-vertex data channel ;
                _1Zero = Zero();
                _2ToString = ToString(_1Zero);
                _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
                _4IsChannelAvailable = IsChannelAvailable(x0, _3ConcatenateStrings);
                _5IfThen = IfThen(_4IsChannelAvailable, () => 
                  {
                    IArray[Vector3] _0MeshVertices;// 11:MeshSetVertices-ext->0:MeshVertices 94254
                    IArray[Vector3] _1MeshVertices;// 3:MeshRelax-ext->2:MeshVertices 94261
                    IArray[Int32] _2Indices;// 3:MeshRelax-ext->5:Indices 94260
                    IArray[Vector3] _3Map;// 3:MeshRelax-ext->9:Map 94259
                    Int32 _4Zero;// 7:SoftSelection->2:Zero 94257
                    IArray[Single] _5PerVertexData;// 7:SoftSelection->3:PerVertexData 94256
                    IArray[Vector3] _6Combine3;// 1:LerpVectors-ext->10:Combine3 94252
                    TriMesh _7SetMeshVertices;// 11:MeshSetVertices-ext->6:SetMeshVertices 94248
                    _0MeshVertices = MeshVertices(x0);
                    _1MeshVertices = MeshVertices(x0);
                    _2Indices = Indices(_1MeshVertices);
                    _3Map = Map(_2Indices, (Int32 x0) => 
                      {
                        Vector3 _0At;// 3:MeshRelax-ext->8:At 94263
                        IArray[Int32] _1VertexFaceLookup;// 3:AdjacentVertexIndices->2:VertexFaceLookup 94308
                        Func[Int32, IArray[Int32]] _2Pass-through: function1;// 0:Pass-through: function1 94305
                        IArray[IArray[Int32]] _3Map;// 3:FlatMap->4:Map 94307
                        IArray[Int32] _4Flatten;// 3:FlatMap->3:Flatten 94306
                        IArray[Int32] _5Sort;// 6:RemoveDuplicates->7:Sort 94289
                        IArray[Int32] _6Indices;// 6:RemoveDuplicates->0:Indices 94288
                        IArray[Int32] _7Filter;// 6:RemoveDuplicates->3:Filter 94287
                        IArray[Int32] _8Map;// 5:SelectByIndex->2:Map 94285
                        IArray[Vector3] _9MeshVertices;// 4:SelectVertices->3:MeshVertices 94279
                        IArray[Vector3] _10Map;// 2:SelectByIndex->2:Map 94277
                        Vector3 _11DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 94269
                        Vector3 _12Aggregate;// 2:Sum->0:Aggregate 94268
                        Int32 _13Count;// 7:AverageVector->3:Count 94272
                        Single _14IntAsFloat;// 7:AverageVector->1:IntAsFloat 94271
                        Vector3 _15DivideByScalar;// 7:AverageVector->5:DivideByScalar 94266
                        Vector3 _16Lerp;// 3:MeshRelax-ext->12:Lerp 94262
                        _0At = At(_1MeshVertices, x0);
                        _1VertexFaceLookup = VertexFaceLookup(x0, x0);
                        _2Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Constant;// 1:Three->0:Constant 94323
                            Int32 _1Multiply;// 2:MultiplyByThree->2:Multiply 94322
                            IArray[Int32] _2Unit;// 0:Array3->2:Unit 94320
                            Int32 _3One;// 3:PlusOne->1:One 94326
                            Int32 _4Add;// 3:PlusOne->0:Add 94325
                            IArray[Int32] _5Append;// 0:Array3->3:Append 94319
                            Int32 _6One;// 4:PlusOne->1:One 94329
                            Int32 _7Add;// 4:PlusOne->0:Add 94328
                            IArray[Int32] _8Append;// 0:Array3->6:Append 94318
                            IArray[Int32] _9MeshIndices;// 4:FaceToVertexIndices->7:MeshIndices 94330
                            IArray[Int32] _10Map;// 8:SelectByIndex->2:Map 94313
                            _0Constant = 3;
                            _1Multiply = Multiply(x0, _0Constant);
                            _2Unit = Unit(_1Multiply);
                            _3One = One();
                            _4Add = Add(_1Multiply, _3One);
                            _5Append = Append(_2Unit, _4Add);
                            _6One = One();
                            _7Add = Add(_4Add, _6One);
                            _8Append = Append(_5Append, _7Add);
                            _9MeshIndices = MeshIndices(x0);
                            _10Map = Map(_8Append, (Int32 x0) => 
                              {
                                Int32 _0At;// 8:SelectByIndex->3:At 94314
                                _0At = At(_9MeshIndices, x0);
                                _0At;
                                });
                            _10Map;
                            };
                        _3Map = Map(_1VertexFaceLookup, _2Pass-through: function1);
                        _4Flatten = Flatten(_3Map);
                        _5Sort = Sort(_4Flatten);
                        _6Indices = Indices(_5Sort);
                        _7Filter = Filter(_6Indices, (Int32 x0) => 
                          {
                            Int32 _0Zero;// 2:GreaterThanZero->1:Zero 94296
                            Boolean _1GreaterThan;// 2:GreaterThanZero->3:GreaterThan 94295
                            Boolean _8Not;// 6:RemoveDuplicates->4:Not 94290
                            _0Zero = Zero();
                            _1GreaterThan = GreaterThan(x0, _0Zero);
                            _8Not = Not(if (_1GreaterThan)
                              {
                                Int32 _2At;// 2:SameAsPreviousElement->6:At 94298
                                Int32 _3One;// 5:MinusOne->2:One 94302
                                Int32 _4Subtract;// 5:MinusOne->1:Subtract 94301
                                Int32 _5At;// 2:SameAsPreviousElement->7:At 94299
                                Boolean _6Equal;// 2:SameAsPreviousElement->3:Equal 94297
                                _2At = At(_5Sort, x0);
                                _3One = One();
                                _4Subtract = Subtract(x0, _3One);
                                _5At = At(_5Sort, _4Subtract);
                                _6Equal = Equal(_2At, _5At);
                                _6Equal;
                                }else
                              {
                                Boolean _7False;// 2:SameAsPreviousElement->8:False 94303
                                _7False = False();
                                _7False;
                                });
                            _8Not;
                            });
                        _8Map = Map(_7Filter, (Int32 x0) => 
                          {
                            Int32 _0At;// 5:SelectByIndex->3:At 94286
                            _0At = At(_5Sort, x0);
                            _0At;
                            });
                        _9MeshVertices = MeshVertices(x0);
                        _10Map = Map(_8Map, (Int32 x0) => 
                          {
                            Vector3 _0At;// 2:SelectByIndex->3:At 94278
                            _0At = At(_9MeshVertices, x0);
                            _0At;
                            });
                        _11DefaultValueOfElement = DefaultValueOfElement(_10Map);
                        _12Aggregate = Aggregate(_10Map, _11DefaultValueOfElement, (Vector3 x0, Vector3 x1) => 
                          {
                            Vector3 _0Add;// 2:Sum->2:Add 94270
                            _0Add = Add(x0, x1);
                            _0Add;
                            });
                        _13Count = Count(_10Map);
                        _14IntAsFloat = IntAsFloat(_13Count);
                        _15DivideByScalar = DivideByScalar(_12Aggregate, _14IntAsFloat);
                        _16Lerp = Lerp(_0At, _15DivideByScalar, amount);
                        _16Lerp;
                        });
                    _4Zero = Zero();
                    _5PerVertexData = PerVertexData(x0, _4Zero);
                    _6Combine3 = Combine3(_0MeshVertices, _3Map, _5PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
                      {
                        Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 94253
                        _0Lerp = Lerp(x0, x1, x2);
                        _0Lerp;
                        });
                    _7SetMeshVertices = SetMeshVertices(x0, _6Combine3);
                    _7SetMeshVertices;
                    }, () => 
                  {
                    IArray[Vector3] _0MeshVertices;// 3:MeshRelax-ext->2:MeshVertices 94261
                    IArray[Int32] _1Indices;// 3:MeshRelax-ext->5:Indices 94260
                    IArray[Vector3] _2Map;// 3:MeshRelax-ext->9:Map 94259
                    TriMesh _3SetMeshVertices;// 11:MeshSetVertices-ext->8:SetMeshVertices 94258
                    _0MeshVertices = MeshVertices(x0);
                    _1Indices = Indices(_0MeshVertices);
                    _2Map = Map(_1Indices, (Int32 x0) => 
                      {
                        Vector3 _0At;// 3:MeshRelax-ext->8:At 94263
                        IArray[Int32] _1VertexFaceLookup;// 3:AdjacentVertexIndices->2:VertexFaceLookup 94308
                        Func[Int32, IArray[Int32]] _2Pass-through: function1;// 0:Pass-through: function1 94305
                        IArray[IArray[Int32]] _3Map;// 3:FlatMap->4:Map 94307
                        IArray[Int32] _4Flatten;// 3:FlatMap->3:Flatten 94306
                        IArray[Int32] _5Sort;// 6:RemoveDuplicates->7:Sort 94289
                        IArray[Int32] _6Indices;// 6:RemoveDuplicates->0:Indices 94288
                        IArray[Int32] _7Filter;// 6:RemoveDuplicates->3:Filter 94287
                        IArray[Int32] _8Map;// 5:SelectByIndex->2:Map 94285
                        IArray[Vector3] _9MeshVertices;// 4:SelectVertices->3:MeshVertices 94279
                        IArray[Vector3] _10Map;// 2:SelectByIndex->2:Map 94277
                        Vector3 _11DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 94269
                        Vector3 _12Aggregate;// 2:Sum->0:Aggregate 94268
                        Int32 _13Count;// 7:AverageVector->3:Count 94272
                        Single _14IntAsFloat;// 7:AverageVector->1:IntAsFloat 94271
                        Vector3 _15DivideByScalar;// 7:AverageVector->5:DivideByScalar 94266
                        Vector3 _16Lerp;// 3:MeshRelax-ext->12:Lerp 94262
                        _0At = At(_0MeshVertices, x0);
                        _1VertexFaceLookup = VertexFaceLookup(x0, x0);
                        _2Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Constant;// 1:Three->0:Constant 94323
                            Int32 _1Multiply;// 2:MultiplyByThree->2:Multiply 94322
                            IArray[Int32] _2Unit;// 0:Array3->2:Unit 94320
                            Int32 _3One;// 3:PlusOne->1:One 94326
                            Int32 _4Add;// 3:PlusOne->0:Add 94325
                            IArray[Int32] _5Append;// 0:Array3->3:Append 94319
                            Int32 _6One;// 4:PlusOne->1:One 94329
                            Int32 _7Add;// 4:PlusOne->0:Add 94328
                            IArray[Int32] _8Append;// 0:Array3->6:Append 94318
                            IArray[Int32] _9MeshIndices;// 4:FaceToVertexIndices->7:MeshIndices 94330
                            IArray[Int32] _10Map;// 8:SelectByIndex->2:Map 94313
                            _0Constant = 3;
                            _1Multiply = Multiply(x0, _0Constant);
                            _2Unit = Unit(_1Multiply);
                            _3One = One();
                            _4Add = Add(_1Multiply, _3One);
                            _5Append = Append(_2Unit, _4Add);
                            _6One = One();
                            _7Add = Add(_4Add, _6One);
                            _8Append = Append(_5Append, _7Add);
                            _9MeshIndices = MeshIndices(x0);
                            _10Map = Map(_8Append, (Int32 x0) => 
                              {
                                Int32 _0At;// 8:SelectByIndex->3:At 94314
                                _0At = At(_9MeshIndices, x0);
                                _0At;
                                });
                            _10Map;
                            };
                        _3Map = Map(_1VertexFaceLookup, _2Pass-through: function1);
                        _4Flatten = Flatten(_3Map);
                        _5Sort = Sort(_4Flatten);
                        _6Indices = Indices(_5Sort);
                        _7Filter = Filter(_6Indices, (Int32 x0) => 
                          {
                            Int32 _0Zero;// 2:GreaterThanZero->1:Zero 94296
                            Boolean _1GreaterThan;// 2:GreaterThanZero->3:GreaterThan 94295
                            Boolean _8Not;// 6:RemoveDuplicates->4:Not 94290
                            _0Zero = Zero();
                            _1GreaterThan = GreaterThan(x0, _0Zero);
                            _8Not = Not(if (_1GreaterThan)
                              {
                                Int32 _2At;// 2:SameAsPreviousElement->6:At 94298
                                Int32 _3One;// 5:MinusOne->2:One 94302
                                Int32 _4Subtract;// 5:MinusOne->1:Subtract 94301
                                Int32 _5At;// 2:SameAsPreviousElement->7:At 94299
                                Boolean _6Equal;// 2:SameAsPreviousElement->3:Equal 94297
                                _2At = At(_5Sort, x0);
                                _3One = One();
                                _4Subtract = Subtract(x0, _3One);
                                _5At = At(_5Sort, _4Subtract);
                                _6Equal = Equal(_2At, _5At);
                                _6Equal;
                                }else
                              {
                                Boolean _7False;// 2:SameAsPreviousElement->8:False 94303
                                _7False = False();
                                _7False;
                                });
                            _8Not;
                            });
                        _8Map = Map(_7Filter, (Int32 x0) => 
                          {
                            Int32 _0At;// 5:SelectByIndex->3:At 94286
                            _0At = At(_5Sort, x0);
                            _0At;
                            });
                        _9MeshVertices = MeshVertices(x0);
                        _10Map = Map(_8Map, (Int32 x0) => 
                          {
                            Vector3 _0At;// 2:SelectByIndex->3:At 94278
                            _0At = At(_9MeshVertices, x0);
                            _0At;
                            });
                        _11DefaultValueOfElement = DefaultValueOfElement(_10Map);
                        _12Aggregate = Aggregate(_10Map, _11DefaultValueOfElement, (Vector3 x0, Vector3 x1) => 
                          {
                            Vector3 _0Add;// 2:Sum->2:Add 94270
                            _0Add = Add(x0, x1);
                            _0Add;
                            });
                        _13Count = Count(_10Map);
                        _14IntAsFloat = IntAsFloat(_13Count);
                        _15DivideByScalar = DivideByScalar(_12Aggregate, _14IntAsFloat);
                        _16Lerp = Lerp(_0At, _15DivideByScalar, amount);
                        _16Lerp;
                        });
                    _3SetMeshVertices = SetMeshVertices(x0, _2Map);
                    _3SetMeshVertices;
                    });
                _5IfThen;
                };
            _1Apply1 = Apply1(_0Pass-through: function1, x0);
            _2IgnoreSecond = IgnoreSecond(_1Apply1, x1);
            _2IgnoreSecond;
            });
        _1Repeat;
        };
    }