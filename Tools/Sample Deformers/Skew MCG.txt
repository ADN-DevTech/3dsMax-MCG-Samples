(InstanceState state, TriMesh mesh, Boolean applyLimits, BoundingBox boundingBox, Int32 axis, Single lower, Single upper, Single bias, Single amount, Single direction, Boolean use node transform, INode gizmo node, Matrix modifierTransform, Vector3 deformer translation, Vector3 deformer rotation, Vector3 deformer scale) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 94667
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 94669
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 94668
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 94666
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 94665
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 94661
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 94676
        IArray[Vector3] _1MeshVertices;// 0:MeshDeformVertices-ext->4:MeshVertices 94682
        Single _2Constant;// 22:DivideBy100-ext->0:Constant 94991
        Single _3Divide;// 22:DivideBy100-ext->2:Divide 94990
        Single _4Constant;// 46:DivideBy100-ext->0:Constant 94995
        Single _5Divide;// 46:DivideBy100-ext->2:Divide 94994
        Single _6FloatZero;// 16:Skew-ext->11:FloatZero 94877
        Func[Vector3, Single] _7Pass-through: function1;// 0:Pass-through: function1 94651
        Single _8Constant;// 15:Origin->0:Constant 94750
        Vector3 _9Vector3;// 15:Origin->1:Vector3 94749
        Vector3 _10XAxis;// 10:AlongXAxis->0:XAxis 94882
        Vector3 _11MultiplyByScalar;// 10:AlongXAxis->1:MultiplyByScalar 94881
        Single _12Constant;// 0:Origin->0:Constant 94923
        Vector3 _13Vector3;// 0:Origin->1:Vector3 94922
        Single _14X;// 1:SetZ->4:X 94920
        Single _15Y;// 1:SetZ->5:Y 94921
        Vector3 _16Vector3;// 1:SetZ->2:Vector3 94919
        Single _17X;// 1:VectorAsArray->1:X 94912
        IArray[Single] _18Unit;// 4:Array3->2:Unit 94911
        Single _19Y;// 1:VectorAsArray->2:Y 94913
        IArray[Single] _20Append;// 4:Array3->3:Append 94910
        Single _21Z;// 1:VectorAsArray->3:Z 94914
        IArray[Single] _22Append;// 4:Array3->6:Append 94909
        Func[Single, Single] _23Pass-through: function1;// 0:Pass-through: function1 94891
        IArray[Single] _24Map;// 1:VectorMapComponents-ext->2:Map 94904
        Int32 _25Zero;// 3:VectorFromArray-ext->5:Zero 94895
        Single _26At;// 3:VectorFromArray-ext->1:At 94894
        Int32 _27One;// 6:PlusOne->1:One 94899
        Int32 _28Add;// 6:PlusOne->0:Add 94898
        Single _29At;// 3:VectorFromArray-ext->2:At 94896
        Int32 _30One;// 7:PlusOne->1:One 94903
        Int32 _31Add;// 7:PlusOne->0:Add 94902
        Single _32At;// 3:VectorFromArray-ext->3:At 94900
        Vector3 _33Vector3;// 3:VectorFromArray-ext->4:Vector3 94893
        Single _34Y;// 2:QuaternionFromVector3-ext->7:Y 94886
        Single _35X;// 2:QuaternionFromVector3-ext->6:X 94887
        Single _36Z;// 2:QuaternionFromVector3-ext->8:Z 94888
        Quaternion _37QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 94885
        Vector3 _38Rotate;// 16:Skew-ext->17:Rotate 94879
        Vector3 _39ZAxis;// 19:VectorAlignZAxis-ext->1:ZAxis 94960
        Vector3 _40Normalize;// 0:RotationBetweenVectorsFix-ext->4:Normalize 94958
        Int32 _41Zero;// 21:AxisChoose-ext->9:Zero 94964
        Boolean _42GreaterThanOrEqual;// 21:AxisChoose-ext->8:GreaterThanOrEqual 94963
        Vector3 _43XAxis;// 21:AxisChoose-ext->3:XAxis 94972
        IArray[Vector3] _44Unit;// 2:Array3->2:Unit 94971
        Vector3 _45YAxis;// 21:AxisChoose-ext->4:YAxis 94973
        IArray[Vector3] _46Append;// 2:Array3->3:Append 94970
        Vector3 _47ZAxis;// 21:AxisChoose-ext->5:ZAxis 94974
        IArray[Vector3] _48Append;// 2:Array3->6:Append 94969
        Vector3 _55Pass-through: Vector3;// 0:Pass-through: Vector3 94924
        Vector3 _56Normalize;// 0:RotationBetweenVectorsFix-ext->5:Normalize 94959
        Single _57Dot;// 0:RotationBetweenUnitVectors-ext->6:Dot 94934
        Single _58FloatOne;// 0:RotationBetweenUnitVectors-ext->8:FloatOne 94935
        Single _59Add;// 0:RotationBetweenUnitVectors-ext->7:Add 94933
        Single _60Constant;// 0:RotationBetweenUnitVectors-ext->0:Constant 94936
        Boolean _61LessThan;// 0:RotationBetweenUnitVectors-ext->40:LessThan 94932
        Quaternion _81QuaternionNormalize;// 0:RotationBetweenUnitVectors-ext->3:QuaternionNormalize 94930
        Matrix _82MatrixFromQuaternion;// 19:VectorAlignZAxis-ext->4:MatrixFromQuaternion 94925
        Vector3 _83Transform;// 16:Skew-ext->20:Transform 94878
        Single _84Constant;// 16:Origin->0:Constant 94752
        Vector3 _85Vector3;// 16:Origin->1:Vector3 94751
        Single _86Constant;// 2:Origin->0:Constant 94982
        Vector3 _87Vector3;// 2:Origin->1:Vector3 94981
        Single _88Constant;// 17:OnesVector-ext->0:Constant 94754
        Vector3 _89Vector3;// 17:OnesVector-ext->2:Vector3 94753
        Single _90Constant;// 14:OnesVector-ext->0:Constant 94984
        Vector3 _91Vector3;// 14:OnesVector-ext->2:Vector3 94983
        Func[Vector3, Vector3] _92Pass-through: function1;// 0:Pass-through: function1 94657
        Matrix _131Pass-through: Matrix;// 0:Pass-through: Matrix 94637
        Matrix _132InvertMatrix;// 0:MeshDeformVertices-ext->7:InvertMatrix 94687
        IArray[Vector3] _133ParallelMap;// 0:MeshDeformVertices-ext->5:ParallelMap 94681
        Int32 _134Zero;// 7:SoftSelection->2:Zero 94679
        IArray[Single] _135PerVertexData;// 7:SoftSelection->3:PerVertexData 94678
        IArray[Vector3] _136Combine3;// 1:LerpVectors-ext->10:Combine3 94674
        TriMesh _137SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 94670
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 100;
        _3Divide = Divide(lower, _2Constant);
        _4Constant = 100;
        _5Divide = Divide(upper, _4Constant);
        _6FloatZero = FloatZero();
        _7Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 94872
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 94871
            Single _2X;// 2:VectorAsArray->1:X 94845
            IArray[Single] _3Unit;// 4:Array3->2:Unit 94844
            Single _4Y;// 2:VectorAsArray->2:Y 94846
            IArray[Single] _5Append;// 4:Array3->3:Append 94843
            Single _6Z;// 2:VectorAsArray->3:Z 94847
            IArray[Single] _7Append;// 4:Array3->6:Append 94842
            Vector3 _8BoxMax;// 9:BoundingBoxExtent-ext->1:BoxMax 94875
            Vector3 _9BoxMin;// 9:BoundingBoxExtent-ext->2:BoxMin 94876
            Vector3 _10Subtract;// 9:BoundingBoxExtent-ext->3:Subtract 94874
            Single _11X;// 4:VectorAsArray->1:X 94855
            IArray[Single] _12Unit;// 4:Array3->2:Unit 94854
            Single _13Y;// 4:VectorAsArray->2:Y 94856
            IArray[Single] _14Append;// 4:Array3->3:Append 94853
            Single _15Z;// 4:VectorAsArray->3:Z 94857
            IArray[Single] _16Append;// 4:Array3->6:Append 94852
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 94837
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 94828
            Single _19At;// 7:VectorFromArray-ext->1:At 94827
            Int32 _20One;// 6:PlusOne->1:One 94832
            Int32 _21Add;// 6:PlusOne->0:Add 94831
            Single _22At;// 7:VectorFromArray-ext->2:At 94829
            Int32 _23One;// 7:PlusOne->1:One 94836
            Int32 _24Add;// 7:PlusOne->0:Add 94835
            Single _25At;// 7:VectorFromArray-ext->3:At 94833
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 94826
            Single _27X;// 2:VectorAsArray-ext->1:X 94820
            IArray[Single] _28Unit;// 4:Array3-ext->2:Unit 94819
            Single _29Y;// 2:VectorAsArray-ext->2:Y 94821
            IArray[Single] _30Append;// 4:Array3-ext->3:Append 94818
            Single _31Z;// 2:VectorAsArray-ext->3:Z 94822
            IArray[Single] _32Append;// 4:Array3-ext->6:Append 94817
            Single _33At;// 10:VectorElement-ext->3:At 94812
            Single _42Pass-through: Single;// 0:Pass-through: Single 94763
            Single _43FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 94769
            Boolean _44LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 94768
            Single _45Abs;// 13:FloatApplyBias-ext->66:Abs 94772
            Single _46FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 94777
            Single _47FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 94780
            Single _48Add;// 13:FloatApplyBias-ext->94:Add 94779
            Single _49Constant;// 13:FloatApplyBias-ext->0:Constant 94781
            Single _50Multiply;// 13:FloatApplyBias-ext->80:Multiply 94778
            Single _51Subtract;// 13:FloatApplyBias-ext->83:Subtract 94776
            Single _52Constant;// 13:FloatApplyBias-ext->0:Constant 94782
            Single _53Constant;// 13:FloatApplyBias-ext->0:Constant 94783
            Single _54ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 94775
            Single _55LogN;// 13:FloatApplyBias-ext->99:LogN 94774
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 94785
            Single _57LogN;// 13:FloatApplyBias-ext->19:LogN 94784
            Single _58Divide;// 13:FloatApplyBias-ext->102:Divide 94773
            Single _59Pow;// 13:FloatApplyBias-ext->20:Pow 94771
            Boolean _71True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 94806
            Single _82Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 94804
            Single _83Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 94805
            Single _84Divide;// 7:FloatRescaleToLimit-ext->10:Divide 94803
            Single _86Pass-through: Single;// 0:Pass-through: Single 94755
            Single _87Constant;// 3:FloatSubtractFromOne-ext->0:Constant 94761
            Single _88Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 94760
            Single _89Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 94762
            Single _90Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 94758
            Single _91Add;// 23:FloatApplyCurvature-ext->6:Add 94757
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 94867
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 94868
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 94866
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 94863
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 94870
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 94869
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Unit = Unit(_27X);
            _29Y = Y(_26Vector3);
            _30Append = Append(_28Unit, _29Y);
            _31Z = Z(_26Vector3);
            _32Append = Append(_30Append, _31Z);
            _33At = At(_32Append, axis);
            _42Pass-through: Single = if (applyLimits)
              {
                Boolean _34True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 94806
                Single _35Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 94804
                Single _36Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 94805
                Single _37Divide;// 7:FloatRescaleToLimit-ext->10:Divide 94803
                _34True = True();
                _35Subtract = Subtract(_33At, _3Divide);
                _36Subtract = Subtract(_5Divide, _3Divide);
                _37Divide = Divide(_35Subtract, _36Subtract);
                if (_34True)
                  {
                    Single _38Constant;// 9:ClampFloatToOne->0:Constant 94800
                    Single _39Constant;// 9:ClampFloatToOne->0:Constant 94802
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 94801
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 94799
                    _38Constant = 1;
                    _39Constant = 0;
                    _40GreaterFloat = GreaterFloat(_39Constant, _37Divide);
                    _41LesserFloat = LesserFloat(_38Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    _37Divide;
                    };
                }else
              {
                _33At;
                };
            _43FloatZero = FloatZero();
            _44LessThan = LessThan(_42Pass-through: Single, _43FloatZero);
            _45Abs = Abs(_42Pass-through: Single);
            _46FloatOne = FloatOne();
            _47FloatOne = FloatOne();
            _48Add = Add(bias, _47FloatOne);
            _49Constant = 0.5;
            _50Multiply = Multiply(_48Add, _49Constant);
            _51Subtract = Subtract(_46FloatOne, _50Multiply);
            _52Constant = 1E-05;
            _53Constant = 0.99999;
            _54ClampFloat = ClampFloat(_51Subtract, _52Constant, _53Constant);
            _55LogN = LogN(_54ClampFloat);
            _56Constant = 0.5;
            _57LogN = LogN(_56Constant);
            _58Divide = Divide(_55LogN, _57LogN);
            _59Pow = Pow(_45Abs, _58Divide);
            _71True = True();
            _82Subtract = Subtract(_33At, _3Divide);
            _83Subtract = Subtract(_5Divide, _3Divide);
            _84Divide = Divide(_82Subtract, _83Subtract);
            _86Pass-through: Single = if (_44LessThan)
              {
                Single _85NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 94770
                _85NegativeFloat = NegativeFloat(_59Pow);
                _85NegativeFloat;
                }else
              {
                _59Pow;
                };
            _87Constant = 1;
            _88Subtract = Subtract(_87Constant, _86Pass-through: Single);
            _89Multiply = Multiply(_86Pass-through: Single, _6FloatZero);
            _90Multiply = Multiply(_88Subtract, _89Multiply);
            _91Add = Add(_86Pass-through: Single, _90Multiply);
            _91Add;
            };
        _8Constant = 0;
        _9Vector3 = Vector3(_8Constant, _8Constant, _8Constant);
        _10XAxis = XAxis();
        _11MultiplyByScalar = MultiplyByScalar(_10XAxis, amount);
        _12Constant = 0;
        _13Vector3 = Vector3(_12Constant, _12Constant, _12Constant);
        _14X = X(_13Vector3);
        _15Y = Y(_13Vector3);
        _16Vector3 = Vector3(_14X, _15Y, direction);
        _17X = X(_16Vector3);
        _18Unit = Unit(_17X);
        _19Y = Y(_16Vector3);
        _20Append = Append(_18Unit, _19Y);
        _21Z = Z(_16Vector3);
        _22Append = Append(_20Append, _21Z);
        _23Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 94915
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _24Map = Map(_22Append, _23Pass-through: function1);
        _25Zero = Zero();
        _26At = At(_24Map, _25Zero);
        _27One = One();
        _28Add = Add(_25Zero, _27One);
        _29At = At(_24Map, _28Add);
        _30One = One();
        _31Add = Add(_28Add, _30One);
        _32At = At(_24Map, _31Add);
        _33Vector3 = Vector3(_26At, _29At, _32At);
        _34Y = Y(_33Vector3);
        _35X = X(_33Vector3);
        _36Z = Z(_33Vector3);
        _37QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_34Y, _35X, _36Z);
        _38Rotate = Rotate(_11MultiplyByScalar, _37QuaternionFromYawPitchRoll);
        _39ZAxis = ZAxis();
        _40Normalize = Normalize(_39ZAxis);
        _41Zero = Zero();
        _42GreaterThanOrEqual = GreaterThanOrEqual(axis, _41Zero);
        _43XAxis = XAxis();
        _44Unit = Unit(_43XAxis);
        _45YAxis = YAxis();
        _46Append = Append(_44Unit, _45YAxis);
        _47ZAxis = ZAxis();
        _48Append = Append(_46Append, _47ZAxis);
        _55Pass-through: Vector3 = if (_42GreaterThanOrEqual)
          {
            Vector3 _49At;// 21:AxisChoose-ext->1:At 94965
            _49At = At(_48Append, axis);
            _49At;
            }else
          {
            Int32 _50One;// 10:PlusOne->1:One 94980
            Int32 _51Add;// 10:PlusOne->0:Add 94979
            Int32 _52Negative;// 21:AxisChoose-ext->11:Negative 94977
            Vector3 _53At;// 21:AxisChoose-ext->12:At 94976
            Vector3 _54Negate;// 21:AxisChoose-ext->13:Negate 94975
            _50One = One();
            _51Add = Add(axis, _50One);
            _52Negative = Negative(_51Add);
            _53At = At(_48Append, _52Negative);
            _54Negate = Negate(_53At);
            _54Negate;
            };
        _56Normalize = Normalize(_55Pass-through: Vector3);
        _57Dot = Dot(_40Normalize, _56Normalize);
        _58FloatOne = FloatOne();
        _59Add = Add(_57Dot, _58FloatOne);
        _60Constant = 1E-07;
        _61LessThan = LessThan(_59Add, _60Constant);
        _81QuaternionNormalize = QuaternionNormalize(if (_61LessThan)
          {
            Single _62X;// 0:RotationBetweenUnitVectors-ext->12:X 94941
            Single _63Abs;// 0:RotationBetweenUnitVectors-ext->11:Abs 94940
            Single _64Z;// 0:RotationBetweenUnitVectors-ext->14:Z 94944
            Single _65Abs;// 0:RotationBetweenUnitVectors-ext->13:Abs 94943
            Boolean _66GreaterThan;// 0:RotationBetweenUnitVectors-ext->15:GreaterThan 94939
            Single _77FloatZero;// 0:RotationBetweenUnitVectors-ext->36:FloatZero 94955
            Quaternion _78QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->35:QuaternionFromVectorAndTheta 94937
            _62X = X(_40Normalize);
            _63Abs = Abs(_62X);
            _64Z = Z(_40Normalize);
            _65Abs = Abs(_64Z);
            _66GreaterThan = GreaterThan(_63Abs, _65Abs);
            _77FloatZero = FloatZero();
            _78QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_66GreaterThan)
              {
                Single _67Y;// 0:RotationBetweenUnitVectors-ext->29:Y 94947
                Single _68NegativeFloat;// 0:RotationBetweenUnitVectors-ext->30:NegativeFloat 94946
                Single _69X;// 0:RotationBetweenUnitVectors-ext->23:X 94948
                Single _70FloatZero;// 0:RotationBetweenUnitVectors-ext->21:FloatZero 94949
                Vector3 _71Vector3;// 0:RotationBetweenUnitVectors-ext->19:Vector3 94945
                _67Y = Y(_40Normalize);
                _68NegativeFloat = NegativeFloat(_67Y);
                _69X = X(_40Normalize);
                _70FloatZero = FloatZero();
                _71Vector3 = Vector3(_68NegativeFloat, _69X, _70FloatZero);
                _71Vector3;
                }else
              {
                Single _72FloatZero;// 0:RotationBetweenUnitVectors-ext->22:FloatZero 94951
                Single _73Z;// 0:RotationBetweenUnitVectors-ext->26:Z 94953
                Single _74NegativeFloat;// 0:RotationBetweenUnitVectors-ext->25:NegativeFloat 94952
                Single _75Y;// 0:RotationBetweenUnitVectors-ext->24:Y 94954
                Vector3 _76Vector3;// 0:RotationBetweenUnitVectors-ext->20:Vector3 94950
                _72FloatZero = FloatZero();
                _73Z = Z(_40Normalize);
                _74NegativeFloat = NegativeFloat(_73Z);
                _75Y = Y(_40Normalize);
                _76Vector3 = Vector3(_72FloatZero, _74NegativeFloat, _75Y);
                _76Vector3;
                }, _77FloatZero);
            _78QuaternionFromVectorAndTheta;
            }else
          {
            Vector3 _79Cross;// 0:RotationBetweenUnitVectors-ext->2:Cross 94957
            Quaternion _80QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->5:QuaternionFromVectorAndTheta 94956
            _79Cross = Cross(_40Normalize, _56Normalize);
            _80QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_79Cross, _59Add);
            _80QuaternionFromVectorAndTheta;
            });
        _82MatrixFromQuaternion = MatrixFromQuaternion(_81QuaternionNormalize);
        _83Transform = Transform(_38Rotate, _82MatrixFromQuaternion);
        _84Constant = 0;
        _85Vector3 = Vector3(_84Constant, _84Constant, _84Constant);
        _86Constant = 0;
        _87Vector3 = Vector3(_86Constant, _86Constant, _86Constant);
        _88Constant = 1;
        _89Vector3 = Vector3(_88Constant, _88Constant, _88Constant);
        _90Constant = 1;
        _91Vector3 = Vector3(_90Constant, _90Constant, _90Constant);
        _92Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:MeshTransformVertices-ext->5:Apply1 94748
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 94712
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 94706
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 94746
            Single _4X;// 1:VectorAsArray->1:X 94742
            IArray[Single] _5Unit;// 4:Array3->2:Unit 94741
            Single _6Y;// 1:VectorAsArray->2:Y 94743
            IArray[Single] _7Append;// 4:Array3->3:Append 94740
            Single _8Z;// 1:VectorAsArray->3:Z 94744
            IArray[Single] _9Append;// 4:Array3->6:Append 94739
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 94721
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 94734
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 94725
            Single _13At;// 3:VectorFromArray-ext->1:At 94724
            Int32 _14One;// 6:PlusOne->1:One 94729
            Int32 _15Add;// 6:PlusOne->0:Add 94728
            Single _16At;// 3:VectorFromArray-ext->2:At 94726
            Int32 _17One;// 7:PlusOne->1:One 94733
            Int32 _18Add;// 7:PlusOne->0:Add 94732
            Single _19At;// 3:VectorFromArray-ext->3:At 94730
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 94723
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 94716
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 94717
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 94718
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 94715
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 94707
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 94705
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 94747
            Single _28Constant;// 8:Origin->0:Constant 94711
            Vector3 _29Vector3;// 8:Origin->1:Vector3 94710
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 94709
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 94704
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 94697
            Vector3 _33Transform;// 0:MeshTransformVertices-ext->4:Transform 94688
            _0Apply1 = Apply1(_7Pass-through: function1, x0);
            _1Lerp = Lerp(_9Vector3, _83Transform, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_85Vector3, _87Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 94745
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_89Vector3, _91Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _131Pass-through: Matrix = if (use node transform)
          {
            Boolean _93IsValidNode;// 8:GizmoTransformInLocalSpace->35:IsValidNode 95005
            _93IsValidNode = IsValidNode(gizmo node);
            if (_93IsValidNode)
              {
                Boolean _94IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 95011
                Matrix _97InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 95015
                Matrix _98Multiply;// 32:NodeToLocalTransform->18:Multiply 95008
                _94IsValidNode = IsValidNode(gizmo node);
                _97InvertMatrix = InvertMatrix(modifierTransform);
                _98Multiply = Multiply(if (_94IsValidNode)
                    {
                      Matrix _95WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 95012
                      _95WorldTransform = WorldTransform(gizmo node);
                      _95WorldTransform;
                      }else
                    {
                      Matrix _96MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 95013
                      _96MatrixIdentity = MatrixIdentity();
                      _96MatrixIdentity;
                      }, _97InvertMatrix);
                _98Multiply;
                }else
              {
                Matrix _99MatrixIdentity;// 8:GizmoTransformInLocalSpace->40:MatrixIdentity 95016
                _99MatrixIdentity = MatrixIdentity();
                _99MatrixIdentity;
                };
            }else
          {
            Matrix _100TranslationMatrix;// 11:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 95027
            Single _101X;// 1:VectorAsArray->1:X 95063
            IArray[Single] _102Unit;// 4:Array3->2:Unit 95062
            Single _103Y;// 1:VectorAsArray->2:Y 95064
            IArray[Single] _104Append;// 4:Array3->3:Append 95061
            Single _105Z;// 1:VectorAsArray->3:Z 95065
            IArray[Single] _106Append;// 4:Array3->6:Append 95060
            Func[Single, Single] _107Pass-through: function1;// 0:Pass-through: function1 95042
            IArray[Single] _108Map;// 1:VectorMapComponents-ext->2:Map 95055
            Int32 _109Zero;// 3:VectorFromArray-ext->5:Zero 95046
            Single _110At;// 3:VectorFromArray-ext->1:At 95045
            Int32 _111One;// 6:PlusOne->1:One 95050
            Int32 _112Add;// 6:PlusOne->0:Add 95049
            Single _113At;// 3:VectorFromArray-ext->2:At 95047
            Int32 _114One;// 7:PlusOne->1:One 95054
            Int32 _115Add;// 7:PlusOne->0:Add 95053
            Single _116At;// 3:VectorFromArray-ext->3:At 95051
            Vector3 _117Vector3;// 3:VectorFromArray-ext->4:Vector3 95044
            Single _118Y;// 2:QuaternionFromVector3-ext->7:Y 95037
            Single _119X;// 2:QuaternionFromVector3-ext->6:X 95038
            Single _120Z;// 2:QuaternionFromVector3-ext->8:Z 95039
            Quaternion _121QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95036
            Matrix _122MatrixFromQuaternion;// 11:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 95028
            Matrix _123Multiply;// 6:Multiply3-ext->3:Multiply 95026
            Single _124Constant;// 45:OnesVector-ext->0:Constant 95071
            Vector3 _125Vector3;// 45:OnesVector-ext->2:Vector3 95070
            Vector3 _126Add;// 44:Add 95068
            Single _127Constant;// 8:Origin->0:Constant 95032
            Vector3 _128Vector3;// 8:Origin->1:Vector3 95031
            Matrix _129ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 95030
            Matrix _130Multiply;// 6:Multiply3-ext->4:Multiply 95025
            _100TranslationMatrix = TranslationMatrix(deformer translation);
            _101X = X(deformer rotation);
            _102Unit = Unit(_101X);
            _103Y = Y(deformer rotation);
            _104Append = Append(_102Unit, _103Y);
            _105Z = Z(deformer rotation);
            _106Append = Append(_104Append, _105Z);
            _107Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95066
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _108Map = Map(_106Append, _107Pass-through: function1);
            _109Zero = Zero();
            _110At = At(_108Map, _109Zero);
            _111One = One();
            _112Add = Add(_109Zero, _111One);
            _113At = At(_108Map, _112Add);
            _114One = One();
            _115Add = Add(_112Add, _114One);
            _116At = At(_108Map, _115Add);
            _117Vector3 = Vector3(_110At, _113At, _116At);
            _118Y = Y(_117Vector3);
            _119X = X(_117Vector3);
            _120Z = Z(_117Vector3);
            _121QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_118Y, _119X, _120Z);
            _122MatrixFromQuaternion = MatrixFromQuaternion(_121QuaternionFromYawPitchRoll);
            _123Multiply = Multiply(_100TranslationMatrix, _122MatrixFromQuaternion);
            _124Constant = 1;
            _125Vector3 = Vector3(_124Constant, _124Constant, _124Constant);
            _126Add = Add(deformer scale, _125Vector3);
            _127Constant = 0;
            _128Vector3 = Vector3(_127Constant, _127Constant, _127Constant);
            _129ScalingTranslationMatrix = ScalingTranslationMatrix(_126Add, _128Vector3);
            _130Multiply = Multiply(_123Multiply, _129ScalingTranslationMatrix);
            _130Multiply;
            };
        _132InvertMatrix = InvertMatrix(_131Pass-through: Matrix);
        _133ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:MeshDeformVertices-ext->11:Transform 94685
            Vector3 _1Apply1;// 0:MeshDeformVertices-ext->8:Apply1 94684
            Vector3 _2Transform;// 0:MeshDeformVertices-ext->9:Transform 94683
            _0Transform = Transform(x0, _132InvertMatrix);
            _1Apply1 = Apply1(_92Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _131Pass-through: Matrix);
            _2Transform;
            });
        _134Zero = Zero();
        _135PerVertexData = PerVertexData(mesh, _134Zero);
        _136Combine3 = Combine3(_0MeshVertices, _133ParallelMap, _135PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 94675
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _137SetMeshVertices = SetMeshVertices(mesh, _136Combine3);
        _137SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 0:MeshDeformVertices-ext->4:MeshVertices 94682
        Single _1Constant;// 22:DivideBy100-ext->0:Constant 94991
        Single _2Divide;// 22:DivideBy100-ext->2:Divide 94990
        Single _3Constant;// 46:DivideBy100-ext->0:Constant 94995
        Single _4Divide;// 46:DivideBy100-ext->2:Divide 94994
        Single _5FloatZero;// 16:Skew-ext->11:FloatZero 94877
        Func[Vector3, Single] _6Pass-through: function1;// 0:Pass-through: function1 94651
        Single _7Constant;// 15:Origin->0:Constant 94750
        Vector3 _8Vector3;// 15:Origin->1:Vector3 94749
        Vector3 _9XAxis;// 10:AlongXAxis->0:XAxis 94882
        Vector3 _10MultiplyByScalar;// 10:AlongXAxis->1:MultiplyByScalar 94881
        Single _11Constant;// 0:Origin->0:Constant 94923
        Vector3 _12Vector3;// 0:Origin->1:Vector3 94922
        Single _13X;// 1:SetZ->4:X 94920
        Single _14Y;// 1:SetZ->5:Y 94921
        Vector3 _15Vector3;// 1:SetZ->2:Vector3 94919
        Single _16X;// 1:VectorAsArray->1:X 94912
        IArray[Single] _17Unit;// 4:Array3->2:Unit 94911
        Single _18Y;// 1:VectorAsArray->2:Y 94913
        IArray[Single] _19Append;// 4:Array3->3:Append 94910
        Single _20Z;// 1:VectorAsArray->3:Z 94914
        IArray[Single] _21Append;// 4:Array3->6:Append 94909
        Func[Single, Single] _22Pass-through: function1;// 0:Pass-through: function1 94891
        IArray[Single] _23Map;// 1:VectorMapComponents-ext->2:Map 94904
        Int32 _24Zero;// 3:VectorFromArray-ext->5:Zero 94895
        Single _25At;// 3:VectorFromArray-ext->1:At 94894
        Int32 _26One;// 6:PlusOne->1:One 94899
        Int32 _27Add;// 6:PlusOne->0:Add 94898
        Single _28At;// 3:VectorFromArray-ext->2:At 94896
        Int32 _29One;// 7:PlusOne->1:One 94903
        Int32 _30Add;// 7:PlusOne->0:Add 94902
        Single _31At;// 3:VectorFromArray-ext->3:At 94900
        Vector3 _32Vector3;// 3:VectorFromArray-ext->4:Vector3 94893
        Single _33Y;// 2:QuaternionFromVector3-ext->7:Y 94886
        Single _34X;// 2:QuaternionFromVector3-ext->6:X 94887
        Single _35Z;// 2:QuaternionFromVector3-ext->8:Z 94888
        Quaternion _36QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 94885
        Vector3 _37Rotate;// 16:Skew-ext->17:Rotate 94879
        Vector3 _38ZAxis;// 19:VectorAlignZAxis-ext->1:ZAxis 94960
        Vector3 _39Normalize;// 0:RotationBetweenVectorsFix-ext->4:Normalize 94958
        Int32 _40Zero;// 21:AxisChoose-ext->9:Zero 94964
        Boolean _41GreaterThanOrEqual;// 21:AxisChoose-ext->8:GreaterThanOrEqual 94963
        Vector3 _42XAxis;// 21:AxisChoose-ext->3:XAxis 94972
        Vector3 _43YAxis;// 21:AxisChoose-ext->4:YAxis 94973
        Vector3 _44ZAxis;// 21:AxisChoose-ext->5:ZAxis 94974
        Vector3 _57Pass-through: Vector3;// 0:Pass-through: Vector3 94924
        Vector3 _58Normalize;// 0:RotationBetweenVectorsFix-ext->5:Normalize 94959
        Single _59Dot;// 0:RotationBetweenUnitVectors-ext->6:Dot 94934
        Single _60FloatOne;// 0:RotationBetweenUnitVectors-ext->8:FloatOne 94935
        Single _61Add;// 0:RotationBetweenUnitVectors-ext->7:Add 94933
        Single _62Constant;// 0:RotationBetweenUnitVectors-ext->0:Constant 94936
        Boolean _63LessThan;// 0:RotationBetweenUnitVectors-ext->40:LessThan 94932
        Quaternion _83QuaternionNormalize;// 0:RotationBetweenUnitVectors-ext->3:QuaternionNormalize 94930
        Matrix _84MatrixFromQuaternion;// 19:VectorAlignZAxis-ext->4:MatrixFromQuaternion 94925
        Vector3 _85Transform;// 16:Skew-ext->20:Transform 94878
        Single _86Constant;// 16:Origin->0:Constant 94752
        Vector3 _87Vector3;// 16:Origin->1:Vector3 94751
        Single _88Constant;// 2:Origin->0:Constant 94982
        Vector3 _89Vector3;// 2:Origin->1:Vector3 94981
        Single _90Constant;// 17:OnesVector-ext->0:Constant 94754
        Vector3 _91Vector3;// 17:OnesVector-ext->2:Vector3 94753
        Single _92Constant;// 14:OnesVector-ext->0:Constant 94984
        Vector3 _93Vector3;// 14:OnesVector-ext->2:Vector3 94983
        Func[Vector3, Vector3] _94Pass-through: function1;// 0:Pass-through: function1 94657
        Matrix _133Pass-through: Matrix;// 0:Pass-through: Matrix 94637
        Matrix _134InvertMatrix;// 0:MeshDeformVertices-ext->7:InvertMatrix 94687
        IArray[Vector3] _135ParallelMap;// 0:MeshDeformVertices-ext->5:ParallelMap 94681
        TriMesh _136SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 94680
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 100;
        _2Divide = Divide(lower, _1Constant);
        _3Constant = 100;
        _4Divide = Divide(upper, _3Constant);
        _5FloatZero = FloatZero();
        _6Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 94872
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 94871
            Single _2X;// 2:VectorAsArray->1:X 94845
            IArray[Single] _3Unit;// 4:Array3->2:Unit 94844
            Single _4Y;// 2:VectorAsArray->2:Y 94846
            IArray[Single] _5Append;// 4:Array3->3:Append 94843
            Single _6Z;// 2:VectorAsArray->3:Z 94847
            IArray[Single] _7Append;// 4:Array3->6:Append 94842
            Vector3 _8BoxMax;// 9:BoundingBoxExtent-ext->1:BoxMax 94875
            Vector3 _9BoxMin;// 9:BoundingBoxExtent-ext->2:BoxMin 94876
            Vector3 _10Subtract;// 9:BoundingBoxExtent-ext->3:Subtract 94874
            Single _11X;// 4:VectorAsArray->1:X 94855
            IArray[Single] _12Unit;// 4:Array3->2:Unit 94854
            Single _13Y;// 4:VectorAsArray->2:Y 94856
            IArray[Single] _14Append;// 4:Array3->3:Append 94853
            Single _15Z;// 4:VectorAsArray->3:Z 94857
            IArray[Single] _16Append;// 4:Array3->6:Append 94852
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 94837
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 94828
            Single _19At;// 7:VectorFromArray-ext->1:At 94827
            Int32 _20One;// 6:PlusOne->1:One 94832
            Int32 _21Add;// 6:PlusOne->0:Add 94831
            Single _22At;// 7:VectorFromArray-ext->2:At 94829
            Int32 _23One;// 7:PlusOne->1:One 94836
            Int32 _24Add;// 7:PlusOne->0:Add 94835
            Single _25At;// 7:VectorFromArray-ext->3:At 94833
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 94826
            Single _27X;// 2:VectorAsArray-ext->1:X 94820
            Single _28Y;// 2:VectorAsArray-ext->2:Y 94821
            Single _29Z;// 2:VectorAsArray-ext->3:Z 94822
            Single _49Pass-through: Single;// 0:Pass-through: Single 94763
            Single _50FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 94769
            Boolean _51LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 94768
            Single _52Abs;// 13:FloatApplyBias-ext->66:Abs 94772
            Single _53FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 94777
            Single _54FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 94780
            Single _55Add;// 13:FloatApplyBias-ext->94:Add 94779
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 94781
            Single _57Multiply;// 13:FloatApplyBias-ext->80:Multiply 94778
            Single _58Subtract;// 13:FloatApplyBias-ext->83:Subtract 94776
            Single _59Constant;// 13:FloatApplyBias-ext->0:Constant 94782
            Single _60Constant;// 13:FloatApplyBias-ext->0:Constant 94783
            Single _61ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 94775
            Single _62LogN;// 13:FloatApplyBias-ext->99:LogN 94774
            Single _63Constant;// 13:FloatApplyBias-ext->0:Constant 94785
            Single _64LogN;// 13:FloatApplyBias-ext->19:LogN 94784
            Single _65Divide;// 13:FloatApplyBias-ext->102:Divide 94773
            Single _66Pow;// 13:FloatApplyBias-ext->20:Pow 94771
            Boolean _86True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 94806
            IArray[Single] _87Unit;// 4:Array3-ext->2:Unit 94819
            IArray[Single] _88Append;// 4:Array3-ext->3:Append 94818
            IArray[Single] _89Append;// 4:Array3-ext->6:Append 94817
            Single _90At;// 10:VectorElement-ext->3:At 94812
            Single _101Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 94804
            Single _102Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 94805
            Single _103Divide;// 7:FloatRescaleToLimit-ext->10:Divide 94803
            Single _105Pass-through: Single;// 0:Pass-through: Single 94755
            Single _106Constant;// 3:FloatSubtractFromOne-ext->0:Constant 94761
            Single _107Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 94760
            Single _108Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 94762
            Single _109Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 94758
            Single _110Add;// 23:FloatApplyCurvature-ext->6:Add 94757
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 94867
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 94868
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 94866
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 94863
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 94870
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 94869
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Y = Y(_26Vector3);
            _29Z = Z(_26Vector3);
            _49Pass-through: Single = if (applyLimits)
              {
                Boolean _30True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 94806
                IArray[Single] _31Unit;// 4:Array3-ext->2:Unit 94819
                IArray[Single] _32Append;// 4:Array3-ext->3:Append 94818
                IArray[Single] _33Append;// 4:Array3-ext->6:Append 94817
                Single _34At;// 10:VectorElement-ext->3:At 94812
                _30True = True();
                _31Unit = Unit(_27X);
                _32Append = Append(_31Unit, _28Y);
                _33Append = Append(_32Append, _29Z);
                _34At = At(_33Append, axis);
                if (_30True)
                  {
                    Single _35Constant;// 9:ClampFloatToOne->0:Constant 94800
                    Single _36Constant;// 9:ClampFloatToOne->0:Constant 94802
                    Single _37Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 94804
                    Single _38Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 94805
                    Single _39Divide;// 7:FloatRescaleToLimit-ext->10:Divide 94803
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 94801
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 94799
                    _35Constant = 1;
                    _36Constant = 0;
                    _37Subtract = Subtract(_34At, _2Divide);
                    _38Subtract = Subtract(_4Divide, _2Divide);
                    _39Divide = Divide(_37Subtract, _38Subtract);
                    _40GreaterFloat = GreaterFloat(_36Constant, _39Divide);
                    _41LesserFloat = LesserFloat(_35Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    Single _42Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 94804
                    Single _43Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 94805
                    Single _44Divide;// 7:FloatRescaleToLimit-ext->10:Divide 94803
                    _42Subtract = Subtract(_34At, _2Divide);
                    _43Subtract = Subtract(_4Divide, _2Divide);
                    _44Divide = Divide(_42Subtract, _43Subtract);
                    _44Divide;
                    };
                }else
              {
                IArray[Single] _45Unit;// 4:Array3-ext->2:Unit 94819
                IArray[Single] _46Append;// 4:Array3-ext->3:Append 94818
                IArray[Single] _47Append;// 4:Array3-ext->6:Append 94817
                Single _48At;// 10:VectorElement-ext->3:At 94812
                _45Unit = Unit(_27X);
                _46Append = Append(_45Unit, _28Y);
                _47Append = Append(_46Append, _29Z);
                _48At = At(_47Append, axis);
                _48At;
                };
            _50FloatZero = FloatZero();
            _51LessThan = LessThan(_49Pass-through: Single, _50FloatZero);
            _52Abs = Abs(_49Pass-through: Single);
            _53FloatOne = FloatOne();
            _54FloatOne = FloatOne();
            _55Add = Add(bias, _54FloatOne);
            _56Constant = 0.5;
            _57Multiply = Multiply(_55Add, _56Constant);
            _58Subtract = Subtract(_53FloatOne, _57Multiply);
            _59Constant = 1E-05;
            _60Constant = 0.99999;
            _61ClampFloat = ClampFloat(_58Subtract, _59Constant, _60Constant);
            _62LogN = LogN(_61ClampFloat);
            _63Constant = 0.5;
            _64LogN = LogN(_63Constant);
            _65Divide = Divide(_62LogN, _64LogN);
            _66Pow = Pow(_52Abs, _65Divide);
            _86True = True();
            _87Unit = Unit(_27X);
            _88Append = Append(_87Unit, _28Y);
            _89Append = Append(_88Append, _29Z);
            _90At = At(_89Append, axis);
            _101Subtract = Subtract(_90At, _2Divide);
            _102Subtract = Subtract(_4Divide, _2Divide);
            _103Divide = Divide(_101Subtract, _102Subtract);
            _105Pass-through: Single = if (_51LessThan)
              {
                Single _104NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 94770
                _104NegativeFloat = NegativeFloat(_66Pow);
                _104NegativeFloat;
                }else
              {
                _66Pow;
                };
            _106Constant = 1;
            _107Subtract = Subtract(_106Constant, _105Pass-through: Single);
            _108Multiply = Multiply(_105Pass-through: Single, _5FloatZero);
            _109Multiply = Multiply(_107Subtract, _108Multiply);
            _110Add = Add(_105Pass-through: Single, _109Multiply);
            _110Add;
            };
        _7Constant = 0;
        _8Vector3 = Vector3(_7Constant, _7Constant, _7Constant);
        _9XAxis = XAxis();
        _10MultiplyByScalar = MultiplyByScalar(_9XAxis, amount);
        _11Constant = 0;
        _12Vector3 = Vector3(_11Constant, _11Constant, _11Constant);
        _13X = X(_12Vector3);
        _14Y = Y(_12Vector3);
        _15Vector3 = Vector3(_13X, _14Y, direction);
        _16X = X(_15Vector3);
        _17Unit = Unit(_16X);
        _18Y = Y(_15Vector3);
        _19Append = Append(_17Unit, _18Y);
        _20Z = Z(_15Vector3);
        _21Append = Append(_19Append, _20Z);
        _22Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 94915
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _23Map = Map(_21Append, _22Pass-through: function1);
        _24Zero = Zero();
        _25At = At(_23Map, _24Zero);
        _26One = One();
        _27Add = Add(_24Zero, _26One);
        _28At = At(_23Map, _27Add);
        _29One = One();
        _30Add = Add(_27Add, _29One);
        _31At = At(_23Map, _30Add);
        _32Vector3 = Vector3(_25At, _28At, _31At);
        _33Y = Y(_32Vector3);
        _34X = X(_32Vector3);
        _35Z = Z(_32Vector3);
        _36QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_33Y, _34X, _35Z);
        _37Rotate = Rotate(_10MultiplyByScalar, _36QuaternionFromYawPitchRoll);
        _38ZAxis = ZAxis();
        _39Normalize = Normalize(_38ZAxis);
        _40Zero = Zero();
        _41GreaterThanOrEqual = GreaterThanOrEqual(axis, _40Zero);
        _42XAxis = XAxis();
        _43YAxis = YAxis();
        _44ZAxis = ZAxis();
        _57Pass-through: Vector3 = if (_41GreaterThanOrEqual)
          {
            IArray[Vector3] _45Unit;// 2:Array3->2:Unit 94971
            IArray[Vector3] _46Append;// 2:Array3->3:Append 94970
            IArray[Vector3] _47Append;// 2:Array3->6:Append 94969
            Vector3 _48At;// 21:AxisChoose-ext->1:At 94965
            _45Unit = Unit(_42XAxis);
            _46Append = Append(_45Unit, _43YAxis);
            _47Append = Append(_46Append, _44ZAxis);
            _48At = At(_47Append, axis);
            _48At;
            }else
          {
            IArray[Vector3] _49Unit;// 2:Array3->2:Unit 94971
            IArray[Vector3] _50Append;// 2:Array3->3:Append 94970
            IArray[Vector3] _51Append;// 2:Array3->6:Append 94969
            Int32 _52One;// 10:PlusOne->1:One 94980
            Int32 _53Add;// 10:PlusOne->0:Add 94979
            Int32 _54Negative;// 21:AxisChoose-ext->11:Negative 94977
            Vector3 _55At;// 21:AxisChoose-ext->12:At 94976
            Vector3 _56Negate;// 21:AxisChoose-ext->13:Negate 94975
            _49Unit = Unit(_42XAxis);
            _50Append = Append(_49Unit, _43YAxis);
            _51Append = Append(_50Append, _44ZAxis);
            _52One = One();
            _53Add = Add(axis, _52One);
            _54Negative = Negative(_53Add);
            _55At = At(_51Append, _54Negative);
            _56Negate = Negate(_55At);
            _56Negate;
            };
        _58Normalize = Normalize(_57Pass-through: Vector3);
        _59Dot = Dot(_39Normalize, _58Normalize);
        _60FloatOne = FloatOne();
        _61Add = Add(_59Dot, _60FloatOne);
        _62Constant = 1E-07;
        _63LessThan = LessThan(_61Add, _62Constant);
        _83QuaternionNormalize = QuaternionNormalize(if (_63LessThan)
          {
            Single _64X;// 0:RotationBetweenUnitVectors-ext->12:X 94941
            Single _65Abs;// 0:RotationBetweenUnitVectors-ext->11:Abs 94940
            Single _66Z;// 0:RotationBetweenUnitVectors-ext->14:Z 94944
            Single _67Abs;// 0:RotationBetweenUnitVectors-ext->13:Abs 94943
            Boolean _68GreaterThan;// 0:RotationBetweenUnitVectors-ext->15:GreaterThan 94939
            Single _79FloatZero;// 0:RotationBetweenUnitVectors-ext->36:FloatZero 94955
            Quaternion _80QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->35:QuaternionFromVectorAndTheta 94937
            _64X = X(_39Normalize);
            _65Abs = Abs(_64X);
            _66Z = Z(_39Normalize);
            _67Abs = Abs(_66Z);
            _68GreaterThan = GreaterThan(_65Abs, _67Abs);
            _79FloatZero = FloatZero();
            _80QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_68GreaterThan)
              {
                Single _69Y;// 0:RotationBetweenUnitVectors-ext->29:Y 94947
                Single _70NegativeFloat;// 0:RotationBetweenUnitVectors-ext->30:NegativeFloat 94946
                Single _71X;// 0:RotationBetweenUnitVectors-ext->23:X 94948
                Single _72FloatZero;// 0:RotationBetweenUnitVectors-ext->21:FloatZero 94949
                Vector3 _73Vector3;// 0:RotationBetweenUnitVectors-ext->19:Vector3 94945
                _69Y = Y(_39Normalize);
                _70NegativeFloat = NegativeFloat(_69Y);
                _71X = X(_39Normalize);
                _72FloatZero = FloatZero();
                _73Vector3 = Vector3(_70NegativeFloat, _71X, _72FloatZero);
                _73Vector3;
                }else
              {
                Single _74FloatZero;// 0:RotationBetweenUnitVectors-ext->22:FloatZero 94951
                Single _75Z;// 0:RotationBetweenUnitVectors-ext->26:Z 94953
                Single _76NegativeFloat;// 0:RotationBetweenUnitVectors-ext->25:NegativeFloat 94952
                Single _77Y;// 0:RotationBetweenUnitVectors-ext->24:Y 94954
                Vector3 _78Vector3;// 0:RotationBetweenUnitVectors-ext->20:Vector3 94950
                _74FloatZero = FloatZero();
                _75Z = Z(_39Normalize);
                _76NegativeFloat = NegativeFloat(_75Z);
                _77Y = Y(_39Normalize);
                _78Vector3 = Vector3(_74FloatZero, _76NegativeFloat, _77Y);
                _78Vector3;
                }, _79FloatZero);
            _80QuaternionFromVectorAndTheta;
            }else
          {
            Vector3 _81Cross;// 0:RotationBetweenUnitVectors-ext->2:Cross 94957
            Quaternion _82QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->5:QuaternionFromVectorAndTheta 94956
            _81Cross = Cross(_39Normalize, _58Normalize);
            _82QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_81Cross, _61Add);
            _82QuaternionFromVectorAndTheta;
            });
        _84MatrixFromQuaternion = MatrixFromQuaternion(_83QuaternionNormalize);
        _85Transform = Transform(_37Rotate, _84MatrixFromQuaternion);
        _86Constant = 0;
        _87Vector3 = Vector3(_86Constant, _86Constant, _86Constant);
        _88Constant = 0;
        _89Vector3 = Vector3(_88Constant, _88Constant, _88Constant);
        _90Constant = 1;
        _91Vector3 = Vector3(_90Constant, _90Constant, _90Constant);
        _92Constant = 1;
        _93Vector3 = Vector3(_92Constant, _92Constant, _92Constant);
        _94Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:MeshTransformVertices-ext->5:Apply1 94748
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 94712
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 94706
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 94746
            Single _4X;// 1:VectorAsArray->1:X 94742
            IArray[Single] _5Unit;// 4:Array3->2:Unit 94741
            Single _6Y;// 1:VectorAsArray->2:Y 94743
            IArray[Single] _7Append;// 4:Array3->3:Append 94740
            Single _8Z;// 1:VectorAsArray->3:Z 94744
            IArray[Single] _9Append;// 4:Array3->6:Append 94739
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 94721
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 94734
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 94725
            Single _13At;// 3:VectorFromArray-ext->1:At 94724
            Int32 _14One;// 6:PlusOne->1:One 94729
            Int32 _15Add;// 6:PlusOne->0:Add 94728
            Single _16At;// 3:VectorFromArray-ext->2:At 94726
            Int32 _17One;// 7:PlusOne->1:One 94733
            Int32 _18Add;// 7:PlusOne->0:Add 94732
            Single _19At;// 3:VectorFromArray-ext->3:At 94730
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 94723
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 94716
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 94717
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 94718
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 94715
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 94707
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 94705
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 94747
            Single _28Constant;// 8:Origin->0:Constant 94711
            Vector3 _29Vector3;// 8:Origin->1:Vector3 94710
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 94709
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 94704
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 94697
            Vector3 _33Transform;// 0:MeshTransformVertices-ext->4:Transform 94688
            _0Apply1 = Apply1(_6Pass-through: function1, x0);
            _1Lerp = Lerp(_8Vector3, _85Transform, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_87Vector3, _89Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 94745
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_91Vector3, _93Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _133Pass-through: Matrix = if (use node transform)
          {
            Boolean _95IsValidNode;// 8:GizmoTransformInLocalSpace->35:IsValidNode 95005
            _95IsValidNode = IsValidNode(gizmo node);
            if (_95IsValidNode)
              {
                Boolean _96IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 95011
                Matrix _99InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 95015
                Matrix _100Multiply;// 32:NodeToLocalTransform->18:Multiply 95008
                _96IsValidNode = IsValidNode(gizmo node);
                _99InvertMatrix = InvertMatrix(modifierTransform);
                _100Multiply = Multiply(if (_96IsValidNode)
                    {
                      Matrix _97WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 95012
                      _97WorldTransform = WorldTransform(gizmo node);
                      _97WorldTransform;
                      }else
                    {
                      Matrix _98MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 95013
                      _98MatrixIdentity = MatrixIdentity();
                      _98MatrixIdentity;
                      }, _99InvertMatrix);
                _100Multiply;
                }else
              {
                Matrix _101MatrixIdentity;// 8:GizmoTransformInLocalSpace->40:MatrixIdentity 95016
                _101MatrixIdentity = MatrixIdentity();
                _101MatrixIdentity;
                };
            }else
          {
            Matrix _102TranslationMatrix;// 11:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 95027
            Single _103X;// 1:VectorAsArray->1:X 95063
            IArray[Single] _104Unit;// 4:Array3->2:Unit 95062
            Single _105Y;// 1:VectorAsArray->2:Y 95064
            IArray[Single] _106Append;// 4:Array3->3:Append 95061
            Single _107Z;// 1:VectorAsArray->3:Z 95065
            IArray[Single] _108Append;// 4:Array3->6:Append 95060
            Func[Single, Single] _109Pass-through: function1;// 0:Pass-through: function1 95042
            IArray[Single] _110Map;// 1:VectorMapComponents-ext->2:Map 95055
            Int32 _111Zero;// 3:VectorFromArray-ext->5:Zero 95046
            Single _112At;// 3:VectorFromArray-ext->1:At 95045
            Int32 _113One;// 6:PlusOne->1:One 95050
            Int32 _114Add;// 6:PlusOne->0:Add 95049
            Single _115At;// 3:VectorFromArray-ext->2:At 95047
            Int32 _116One;// 7:PlusOne->1:One 95054
            Int32 _117Add;// 7:PlusOne->0:Add 95053
            Single _118At;// 3:VectorFromArray-ext->3:At 95051
            Vector3 _119Vector3;// 3:VectorFromArray-ext->4:Vector3 95044
            Single _120Y;// 2:QuaternionFromVector3-ext->7:Y 95037
            Single _121X;// 2:QuaternionFromVector3-ext->6:X 95038
            Single _122Z;// 2:QuaternionFromVector3-ext->8:Z 95039
            Quaternion _123QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95036
            Matrix _124MatrixFromQuaternion;// 11:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 95028
            Matrix _125Multiply;// 6:Multiply3-ext->3:Multiply 95026
            Single _126Constant;// 45:OnesVector-ext->0:Constant 95071
            Vector3 _127Vector3;// 45:OnesVector-ext->2:Vector3 95070
            Vector3 _128Add;// 44:Add 95068
            Single _129Constant;// 8:Origin->0:Constant 95032
            Vector3 _130Vector3;// 8:Origin->1:Vector3 95031
            Matrix _131ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 95030
            Matrix _132Multiply;// 6:Multiply3-ext->4:Multiply 95025
            _102TranslationMatrix = TranslationMatrix(deformer translation);
            _103X = X(deformer rotation);
            _104Unit = Unit(_103X);
            _105Y = Y(deformer rotation);
            _106Append = Append(_104Unit, _105Y);
            _107Z = Z(deformer rotation);
            _108Append = Append(_106Append, _107Z);
            _109Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95066
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _110Map = Map(_108Append, _109Pass-through: function1);
            _111Zero = Zero();
            _112At = At(_110Map, _111Zero);
            _113One = One();
            _114Add = Add(_111Zero, _113One);
            _115At = At(_110Map, _114Add);
            _116One = One();
            _117Add = Add(_114Add, _116One);
            _118At = At(_110Map, _117Add);
            _119Vector3 = Vector3(_112At, _115At, _118At);
            _120Y = Y(_119Vector3);
            _121X = X(_119Vector3);
            _122Z = Z(_119Vector3);
            _123QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_120Y, _121X, _122Z);
            _124MatrixFromQuaternion = MatrixFromQuaternion(_123QuaternionFromYawPitchRoll);
            _125Multiply = Multiply(_102TranslationMatrix, _124MatrixFromQuaternion);
            _126Constant = 1;
            _127Vector3 = Vector3(_126Constant, _126Constant, _126Constant);
            _128Add = Add(deformer scale, _127Vector3);
            _129Constant = 0;
            _130Vector3 = Vector3(_129Constant, _129Constant, _129Constant);
            _131ScalingTranslationMatrix = ScalingTranslationMatrix(_128Add, _130Vector3);
            _132Multiply = Multiply(_125Multiply, _131ScalingTranslationMatrix);
            _132Multiply;
            };
        _134InvertMatrix = InvertMatrix(_133Pass-through: Matrix);
        _135ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:MeshDeformVertices-ext->11:Transform 94685
            Vector3 _1Apply1;// 0:MeshDeformVertices-ext->8:Apply1 94684
            Vector3 _2Transform;// 0:MeshDeformVertices-ext->9:Transform 94683
            _0Transform = Transform(x0, _134InvertMatrix);
            _1Apply1 = Apply1(_94Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _133Pass-through: Matrix);
            _2Transform;
            });
        _136SetMeshVertices = SetMeshVertices(mesh, _135ParallelMap);
        _136SetMeshVertices;
        });
    _5IfThen;
    }