(InstanceState state, TriMesh mesh, Boolean applyLimits, BoundingBox boundingBox, Int32 axis, Single lower, Single upper, Single bias, Single amount, Single direction, Boolean use gizmo node, INode gizmo node, Matrix modifierTransform) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 51068
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 51070
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 51069
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 51067
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 51066
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 51062
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 51077
        IArray[Vector3] _1MeshVertices;// 0:DeformVertices-ext->4:MeshVertices 51083
        Single _2Constant;// 22:DivideBy100-ext->0:Constant 51392
        Single _3Divide;// 22:DivideBy100-ext->2:Divide 51391
        Single _4Constant;// 46:DivideBy100-ext->0:Constant 51396
        Single _5Divide;// 46:DivideBy100-ext->2:Divide 51395
        Single _6FloatZero;// 16:Skew-ext->11:FloatZero 51278
        Func[Vector3, Single] _7Pass-through: function1;// 0:Pass-through: function1 51052
        Single _8Constant;// 15:Origin->0:Constant 51151
        Vector3 _9Vector3;// 15:Origin->1:Vector3 51150
        Vector3 _10XAxis;// 10:AlongXAxis->0:XAxis 51283
        Vector3 _11MultiplyByScalar;// 10:AlongXAxis->1:MultiplyByScalar 51282
        Single _12Constant;// 0:Origin->0:Constant 51324
        Vector3 _13Vector3;// 0:Origin->1:Vector3 51323
        Single _14X;// 1:SetZ->4:X 51321
        Single _15Y;// 1:SetZ->5:Y 51322
        Vector3 _16Vector3;// 1:SetZ->2:Vector3 51320
        Single _17X;// 1:VectorAsArray->1:X 51313
        IArray[Single] _18Unit;// 4:Array3->2:Unit 51312
        Single _19Y;// 1:VectorAsArray->2:Y 51314
        IArray[Single] _20Append;// 4:Array3->3:Append 51311
        Single _21Z;// 1:VectorAsArray->3:Z 51315
        IArray[Single] _22Append;// 4:Array3->6:Append 51310
        Func[Single, Single] _23Pass-through: function1;// 0:Pass-through: function1 51292
        IArray[Single] _24Map;// 1:VectorMapComponents-ext->2:Map 51305
        Int32 _25Zero;// 3:VectorFromArray-ext->5:Zero 51296
        Single _26At;// 3:VectorFromArray-ext->1:At 51295
        Int32 _27One;// 6:PlusOne->1:One 51300
        Int32 _28Add;// 6:PlusOne->0:Add 51299
        Single _29At;// 3:VectorFromArray-ext->2:At 51297
        Int32 _30One;// 7:PlusOne->1:One 51304
        Int32 _31Add;// 7:PlusOne->0:Add 51303
        Single _32At;// 3:VectorFromArray-ext->3:At 51301
        Vector3 _33Vector3;// 3:VectorFromArray-ext->4:Vector3 51294
        Single _34Y;// 2:QuaternionFromVector3-ext->7:Y 51287
        Single _35X;// 2:QuaternionFromVector3-ext->6:X 51288
        Single _36Z;// 2:QuaternionFromVector3-ext->8:Z 51289
        Quaternion _37QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 51286
        Vector3 _38Rotate;// 16:Skew-ext->17:Rotate 51280
        Vector3 _39ZAxis;// 19:VectorAlignZAxis-ext->1:ZAxis 51361
        Vector3 _40Normalize;// 0:RotationBetweenVectorsFix-ext->4:Normalize 51359
        Int32 _41Zero;// 21:AxisChoose-ext->9:Zero 51365
        Boolean _42GreaterThanOrEqual;// 21:AxisChoose-ext->8:GreaterThanOrEqual 51364
        Vector3 _43XAxis;// 21:AxisChoose-ext->3:XAxis 51373
        IArray[Vector3] _44Unit;// 2:Array3->2:Unit 51372
        Vector3 _45YAxis;// 21:AxisChoose-ext->4:YAxis 51374
        IArray[Vector3] _46Append;// 2:Array3->3:Append 51371
        Vector3 _47ZAxis;// 21:AxisChoose-ext->5:ZAxis 51375
        IArray[Vector3] _48Append;// 2:Array3->6:Append 51370
        Vector3 _55Pass-through: Vector3;// 0:Pass-through: Vector3 51325
        Vector3 _56Normalize;// 0:RotationBetweenVectorsFix-ext->5:Normalize 51360
        Single _57Dot;// 0:RotationBetweenUnitVectors-ext->6:Dot 51335
        Single _58FloatOne;// 0:RotationBetweenUnitVectors-ext->8:FloatOne 51336
        Single _59Add;// 0:RotationBetweenUnitVectors-ext->7:Add 51334
        Single _60Constant;// 0:RotationBetweenUnitVectors-ext->0:Constant 51337
        Boolean _61LessThan;// 0:RotationBetweenUnitVectors-ext->40:LessThan 51333
        Quaternion _81QuaternionNormalize;// 0:RotationBetweenUnitVectors-ext->3:QuaternionNormalize 51331
        Matrix _82MatrixFromQuaternion;// 19:VectorAlignZAxis-ext->4:MatrixFromQuaternion 51326
        Vector3 _83Transform;// 16:Skew-ext->20:Transform 51279
        Single _84Constant;// 16:Origin->0:Constant 51153
        Vector3 _85Vector3;// 16:Origin->1:Vector3 51152
        Single _86Constant;// 2:Origin->0:Constant 51383
        Vector3 _87Vector3;// 2:Origin->1:Vector3 51382
        Single _88Constant;// 17:OnesVector-ext->0:Constant 51155
        Vector3 _89Vector3;// 17:OnesVector-ext->2:Vector3 51154
        Single _90Constant;// 14:OnesVector-ext->0:Constant 51385
        Vector3 _91Vector3;// 14:OnesVector-ext->2:Vector3 51384
        Func[Vector3, Vector3] _92Pass-through: function1;// 0:Pass-through: function1 51058
        Matrix _99Pass-through: Matrix;// 0:Pass-through: Matrix 51038
        Matrix _100InvertMatrix;// 0:DeformVertices-ext->7:InvertMatrix 51088
        IArray[Vector3] _101ParallelMap;// 0:DeformVertices-ext->5:ParallelMap 51082
        Int32 _102Zero;// 7:SoftSelection->2:Zero 51080
        IArray[Single] _103PerVertexData;// 7:SoftSelection->3:PerVertexData 51079
        IArray[Vector3] _104Combine3;// 1:LerpVectors-ext->10:Combine3 51075
        TriMesh _105SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 51071
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 100;
        _3Divide = Divide(lower, _2Constant);
        _4Constant = 100;
        _5Divide = Divide(upper, _4Constant);
        _6FloatZero = FloatZero();
        _7Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 51273
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 51272
            Single _2X;// 2:VectorAsArray->1:X 51246
            IArray[Single] _3Unit;// 4:Array3->2:Unit 51245
            Single _4Y;// 2:VectorAsArray->2:Y 51247
            IArray[Single] _5Append;// 4:Array3->3:Append 51244
            Single _6Z;// 2:VectorAsArray->3:Z 51248
            IArray[Single] _7Append;// 4:Array3->6:Append 51243
            Vector3 _8BoxMax;// 9:BoxExtent-ext->1:BoxMax 51276
            Vector3 _9BoxMin;// 9:BoxExtent-ext->2:BoxMin 51277
            Vector3 _10Subtract;// 9:BoxExtent-ext->3:Subtract 51275
            Single _11X;// 4:VectorAsArray->1:X 51256
            IArray[Single] _12Unit;// 4:Array3->2:Unit 51255
            Single _13Y;// 4:VectorAsArray->2:Y 51257
            IArray[Single] _14Append;// 4:Array3->3:Append 51254
            Single _15Z;// 4:VectorAsArray->3:Z 51258
            IArray[Single] _16Append;// 4:Array3->6:Append 51253
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 51238
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 51229
            Single _19At;// 7:VectorFromArray-ext->1:At 51228
            Int32 _20One;// 6:PlusOne->1:One 51233
            Int32 _21Add;// 6:PlusOne->0:Add 51232
            Single _22At;// 7:VectorFromArray-ext->2:At 51230
            Int32 _23One;// 7:PlusOne->1:One 51237
            Int32 _24Add;// 7:PlusOne->0:Add 51236
            Single _25At;// 7:VectorFromArray-ext->3:At 51234
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 51227
            Single _27X;// 2:VectorAsArray-ext->1:X 51221
            IArray[Single] _28Unit;// 4:Array3-ext->2:Unit 51220
            Single _29Y;// 2:VectorAsArray-ext->2:Y 51222
            IArray[Single] _30Append;// 4:Array3-ext->3:Append 51219
            Single _31Z;// 2:VectorAsArray-ext->3:Z 51223
            IArray[Single] _32Append;// 4:Array3-ext->6:Append 51218
            Single _33At;// 10:VectorElement-ext->3:At 51213
            Single _42Pass-through: Single;// 0:Pass-through: Single 51164
            Single _43FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 51170
            Boolean _44LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 51169
            Single _45Abs;// 13:FloatApplyBias-ext->66:Abs 51173
            Single _46FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 51178
            Single _47FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 51181
            Single _48Add;// 13:FloatApplyBias-ext->94:Add 51180
            Single _49Constant;// 13:FloatApplyBias-ext->0:Constant 51182
            Single _50Multiply;// 13:FloatApplyBias-ext->80:Multiply 51179
            Single _51Subtract;// 13:FloatApplyBias-ext->83:Subtract 51177
            Single _52Constant;// 13:FloatApplyBias-ext->0:Constant 51183
            Single _53Constant;// 13:FloatApplyBias-ext->0:Constant 51184
            Single _54ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 51176
            Single _55LogN;// 13:FloatApplyBias-ext->99:LogN 51175
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 51186
            Single _57LogN;// 13:FloatApplyBias-ext->19:LogN 51185
            Single _58Divide;// 13:FloatApplyBias-ext->102:Divide 51174
            Single _59Pow;// 13:FloatApplyBias-ext->20:Pow 51172
            Boolean _71True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 51207
            Single _82Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 51205
            Single _83Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 51206
            Single _84Divide;// 7:FloatRescaleToLimit-ext->10:Divide 51204
            Single _86Pass-through: Single;// 0:Pass-through: Single 51156
            Single _87Constant;// 3:FloatSubtractFromOne-ext->0:Constant 51162
            Single _88Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 51161
            Single _89Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 51163
            Single _90Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 51159
            Single _91Add;// 23:FloatApplyCurvature-ext->6:Add 51158
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 51268
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 51269
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 51267
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 51264
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 51271
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 51270
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Unit = Unit(_27X);
            _29Y = Y(_26Vector3);
            _30Append = Append(_28Unit, _29Y);
            _31Z = Z(_26Vector3);
            _32Append = Append(_30Append, _31Z);
            _33At = At(_32Append, axis);
            _42Pass-through: Single = if (applyLimits)
              {
                Boolean _34True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 51207
                Single _35Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 51205
                Single _36Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 51206
                Single _37Divide;// 7:FloatRescaleToLimit-ext->10:Divide 51204
                _34True = True();
                _35Subtract = Subtract(_33At, _3Divide);
                _36Subtract = Subtract(_5Divide, _3Divide);
                _37Divide = Divide(_35Subtract, _36Subtract);
                if (_34True)
                  {
                    Single _38Constant;// 9:ClampFloatToOne->0:Constant 51201
                    Single _39Constant;// 9:ClampFloatToOne->0:Constant 51203
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 51202
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 51200
                    _38Constant = 1;
                    _39Constant = 0;
                    _40GreaterFloat = GreaterFloat(_39Constant, _37Divide);
                    _41LesserFloat = LesserFloat(_38Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    _37Divide;
                    };
                }else
              {
                _33At;
                };
            _43FloatZero = FloatZero();
            _44LessThan = LessThan(_42Pass-through: Single, _43FloatZero);
            _45Abs = Abs(_42Pass-through: Single);
            _46FloatOne = FloatOne();
            _47FloatOne = FloatOne();
            _48Add = Add(bias, _47FloatOne);
            _49Constant = 0.5;
            _50Multiply = Multiply(_48Add, _49Constant);
            _51Subtract = Subtract(_46FloatOne, _50Multiply);
            _52Constant = 1E-05;
            _53Constant = 0.99999;
            _54ClampFloat = ClampFloat(_51Subtract, _52Constant, _53Constant);
            _55LogN = LogN(_54ClampFloat);
            _56Constant = 0.5;
            _57LogN = LogN(_56Constant);
            _58Divide = Divide(_55LogN, _57LogN);
            _59Pow = Pow(_45Abs, _58Divide);
            _71True = True();
            _82Subtract = Subtract(_33At, _3Divide);
            _83Subtract = Subtract(_5Divide, _3Divide);
            _84Divide = Divide(_82Subtract, _83Subtract);
            _86Pass-through: Single = if (_44LessThan)
              {
                Single _85NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 51171
                _85NegativeFloat = NegativeFloat(_59Pow);
                _85NegativeFloat;
                }else
              {
                _59Pow;
                };
            _87Constant = 1;
            _88Subtract = Subtract(_87Constant, _86Pass-through: Single);
            _89Multiply = Multiply(_86Pass-through: Single, _6FloatZero);
            _90Multiply = Multiply(_88Subtract, _89Multiply);
            _91Add = Add(_86Pass-through: Single, _90Multiply);
            _91Add;
            };
        _8Constant = 0;
        _9Vector3 = Vector3(_8Constant, _8Constant, _8Constant);
        _10XAxis = XAxis();
        _11MultiplyByScalar = MultiplyByScalar(_10XAxis, amount);
        _12Constant = 0;
        _13Vector3 = Vector3(_12Constant, _12Constant, _12Constant);
        _14X = X(_13Vector3);
        _15Y = Y(_13Vector3);
        _16Vector3 = Vector3(_14X, _15Y, direction);
        _17X = X(_16Vector3);
        _18Unit = Unit(_17X);
        _19Y = Y(_16Vector3);
        _20Append = Append(_18Unit, _19Y);
        _21Z = Z(_16Vector3);
        _22Append = Append(_20Append, _21Z);
        _23Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 51316
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _24Map = Map(_22Append, _23Pass-through: function1);
        _25Zero = Zero();
        _26At = At(_24Map, _25Zero);
        _27One = One();
        _28Add = Add(_25Zero, _27One);
        _29At = At(_24Map, _28Add);
        _30One = One();
        _31Add = Add(_28Add, _30One);
        _32At = At(_24Map, _31Add);
        _33Vector3 = Vector3(_26At, _29At, _32At);
        _34Y = Y(_33Vector3);
        _35X = X(_33Vector3);
        _36Z = Z(_33Vector3);
        _37QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_34Y, _35X, _36Z);
        _38Rotate = Rotate(_11MultiplyByScalar, _37QuaternionFromYawPitchRoll);
        _39ZAxis = ZAxis();
        _40Normalize = Normalize(_39ZAxis);
        _41Zero = Zero();
        _42GreaterThanOrEqual = GreaterThanOrEqual(axis, _41Zero);
        _43XAxis = XAxis();
        _44Unit = Unit(_43XAxis);
        _45YAxis = YAxis();
        _46Append = Append(_44Unit, _45YAxis);
        _47ZAxis = ZAxis();
        _48Append = Append(_46Append, _47ZAxis);
        _55Pass-through: Vector3 = if (_42GreaterThanOrEqual)
          {
            Vector3 _49At;// 21:AxisChoose-ext->1:At 51366
            _49At = At(_48Append, axis);
            _49At;
            }else
          {
            Int32 _50One;// 10:PlusOne->1:One 51381
            Int32 _51Add;// 10:PlusOne->0:Add 51380
            Int32 _52Negative;// 21:AxisChoose-ext->11:Negative 51378
            Vector3 _53At;// 21:AxisChoose-ext->12:At 51377
            Vector3 _54Negate;// 21:AxisChoose-ext->13:Negate 51376
            _50One = One();
            _51Add = Add(axis, _50One);
            _52Negative = Negative(_51Add);
            _53At = At(_48Append, _52Negative);
            _54Negate = Negate(_53At);
            _54Negate;
            };
        _56Normalize = Normalize(_55Pass-through: Vector3);
        _57Dot = Dot(_40Normalize, _56Normalize);
        _58FloatOne = FloatOne();
        _59Add = Add(_57Dot, _58FloatOne);
        _60Constant = 1E-07;
        _61LessThan = LessThan(_59Add, _60Constant);
        _81QuaternionNormalize = QuaternionNormalize(if (_61LessThan)
          {
            Single _62X;// 0:RotationBetweenUnitVectors-ext->12:X 51342
            Single _63Abs;// 0:RotationBetweenUnitVectors-ext->11:Abs 51341
            Single _64Z;// 0:RotationBetweenUnitVectors-ext->14:Z 51345
            Single _65Abs;// 0:RotationBetweenUnitVectors-ext->13:Abs 51344
            Boolean _66GreaterThan;// 0:RotationBetweenUnitVectors-ext->15:GreaterThan 51340
            Single _77FloatZero;// 0:RotationBetweenUnitVectors-ext->36:FloatZero 51356
            Quaternion _78QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->35:QuaternionFromVectorAndTheta 51338
            _62X = X(_40Normalize);
            _63Abs = Abs(_62X);
            _64Z = Z(_40Normalize);
            _65Abs = Abs(_64Z);
            _66GreaterThan = GreaterThan(_63Abs, _65Abs);
            _77FloatZero = FloatZero();
            _78QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_66GreaterThan)
              {
                Single _67Y;// 0:RotationBetweenUnitVectors-ext->29:Y 51348
                Single _68NegativeFloat;// 0:RotationBetweenUnitVectors-ext->30:NegativeFloat 51347
                Single _69X;// 0:RotationBetweenUnitVectors-ext->23:X 51349
                Single _70FloatZero;// 0:RotationBetweenUnitVectors-ext->21:FloatZero 51350
                Vector3 _71Vector3;// 0:RotationBetweenUnitVectors-ext->19:Vector3 51346
                _67Y = Y(_40Normalize);
                _68NegativeFloat = NegativeFloat(_67Y);
                _69X = X(_40Normalize);
                _70FloatZero = FloatZero();
                _71Vector3 = Vector3(_68NegativeFloat, _69X, _70FloatZero);
                _71Vector3;
                }else
              {
                Single _72FloatZero;// 0:RotationBetweenUnitVectors-ext->22:FloatZero 51352
                Single _73Z;// 0:RotationBetweenUnitVectors-ext->26:Z 51354
                Single _74NegativeFloat;// 0:RotationBetweenUnitVectors-ext->25:NegativeFloat 51353
                Single _75Y;// 0:RotationBetweenUnitVectors-ext->24:Y 51355
                Vector3 _76Vector3;// 0:RotationBetweenUnitVectors-ext->20:Vector3 51351
                _72FloatZero = FloatZero();
                _73Z = Z(_40Normalize);
                _74NegativeFloat = NegativeFloat(_73Z);
                _75Y = Y(_40Normalize);
                _76Vector3 = Vector3(_72FloatZero, _74NegativeFloat, _75Y);
                _76Vector3;
                }, _77FloatZero);
            _78QuaternionFromVectorAndTheta;
            }else
          {
            Vector3 _79Cross;// 0:RotationBetweenUnitVectors-ext->2:Cross 51358
            Quaternion _80QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->5:QuaternionFromVectorAndTheta 51357
            _79Cross = Cross(_40Normalize, _56Normalize);
            _80QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_79Cross, _59Add);
            _80QuaternionFromVectorAndTheta;
            });
        _82MatrixFromQuaternion = MatrixFromQuaternion(_81QuaternionNormalize);
        _83Transform = Transform(_38Rotate, _82MatrixFromQuaternion);
        _84Constant = 0;
        _85Vector3 = Vector3(_84Constant, _84Constant, _84Constant);
        _86Constant = 0;
        _87Vector3 = Vector3(_86Constant, _86Constant, _86Constant);
        _88Constant = 1;
        _89Vector3 = Vector3(_88Constant, _88Constant, _88Constant);
        _90Constant = 1;
        _91Vector3 = Vector3(_90Constant, _90Constant, _90Constant);
        _92Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:TransformVertices-ext->5:Apply1 51149
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 51113
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 51107
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 51147
            Single _4X;// 1:VectorAsArray->1:X 51143
            IArray[Single] _5Unit;// 4:Array3->2:Unit 51142
            Single _6Y;// 1:VectorAsArray->2:Y 51144
            IArray[Single] _7Append;// 4:Array3->3:Append 51141
            Single _8Z;// 1:VectorAsArray->3:Z 51145
            IArray[Single] _9Append;// 4:Array3->6:Append 51140
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 51122
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 51135
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 51126
            Single _13At;// 3:VectorFromArray-ext->1:At 51125
            Int32 _14One;// 6:PlusOne->1:One 51130
            Int32 _15Add;// 6:PlusOne->0:Add 51129
            Single _16At;// 3:VectorFromArray-ext->2:At 51127
            Int32 _17One;// 7:PlusOne->1:One 51134
            Int32 _18Add;// 7:PlusOne->0:Add 51133
            Single _19At;// 3:VectorFromArray-ext->3:At 51131
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 51124
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 51117
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 51118
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 51119
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 51116
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 51108
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 51106
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 51148
            Single _28Constant;// 8:Origin->0:Constant 51112
            Vector3 _29Vector3;// 8:Origin->1:Vector3 51111
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 51110
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 51105
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 51098
            Vector3 _33Transform;// 0:TransformVertices-ext->4:Transform 51089
            _0Apply1 = Apply1(_7Pass-through: function1, x0);
            _1Lerp = Lerp(_9Vector3, _83Transform, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_85Vector3, _87Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 51146
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_89Vector3, _91Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _99Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _93IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 51408
            _93IsValidNode = IsValidNode(gizmo node);
            if (_93IsValidNode)
              {
                Matrix _94ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 51412
                Matrix _95InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 51413
                Matrix _96Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 51411
                _94ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _95InvertMatrix = InvertMatrix(modifierTransform);
                _96Multiply = Multiply(_94ObjectTransformBeforeWSM, _95InvertMatrix);
                _96Multiply;
                }else
              {
                Matrix _97MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 51414
                _97MatrixIdentity = MatrixIdentity();
                _97MatrixIdentity;
                };
            }else
          {
            Matrix _98MatrixIdentity;// 4:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 51415
            _98MatrixIdentity = MatrixIdentity();
            _98MatrixIdentity;
            };
        _100InvertMatrix = InvertMatrix(_99Pass-through: Matrix);
        _101ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:DeformVertices-ext->11:Transform 51086
            Vector3 _1Apply1;// 0:DeformVertices-ext->8:Apply1 51085
            Vector3 _2Transform;// 0:DeformVertices-ext->9:Transform 51084
            _0Transform = Transform(x0, _100InvertMatrix);
            _1Apply1 = Apply1(_92Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _99Pass-through: Matrix);
            _2Transform;
            });
        _102Zero = Zero();
        _103PerVertexData = PerVertexData(mesh, _102Zero);
        _104Combine3 = Combine3(_0MeshVertices, _101ParallelMap, _103PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 51076
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _105SetMeshVertices = SetMeshVertices(mesh, _104Combine3);
        _105SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 0:DeformVertices-ext->4:MeshVertices 51083
        Single _1Constant;// 22:DivideBy100-ext->0:Constant 51392
        Single _2Divide;// 22:DivideBy100-ext->2:Divide 51391
        Single _3Constant;// 46:DivideBy100-ext->0:Constant 51396
        Single _4Divide;// 46:DivideBy100-ext->2:Divide 51395
        Single _5FloatZero;// 16:Skew-ext->11:FloatZero 51278
        Func[Vector3, Single] _6Pass-through: function1;// 0:Pass-through: function1 51052
        Single _7Constant;// 15:Origin->0:Constant 51151
        Vector3 _8Vector3;// 15:Origin->1:Vector3 51150
        Vector3 _9XAxis;// 10:AlongXAxis->0:XAxis 51283
        Vector3 _10MultiplyByScalar;// 10:AlongXAxis->1:MultiplyByScalar 51282
        Single _11Constant;// 0:Origin->0:Constant 51324
        Vector3 _12Vector3;// 0:Origin->1:Vector3 51323
        Single _13X;// 1:SetZ->4:X 51321
        Single _14Y;// 1:SetZ->5:Y 51322
        Vector3 _15Vector3;// 1:SetZ->2:Vector3 51320
        Single _16X;// 1:VectorAsArray->1:X 51313
        IArray[Single] _17Unit;// 4:Array3->2:Unit 51312
        Single _18Y;// 1:VectorAsArray->2:Y 51314
        IArray[Single] _19Append;// 4:Array3->3:Append 51311
        Single _20Z;// 1:VectorAsArray->3:Z 51315
        IArray[Single] _21Append;// 4:Array3->6:Append 51310
        Func[Single, Single] _22Pass-through: function1;// 0:Pass-through: function1 51292
        IArray[Single] _23Map;// 1:VectorMapComponents-ext->2:Map 51305
        Int32 _24Zero;// 3:VectorFromArray-ext->5:Zero 51296
        Single _25At;// 3:VectorFromArray-ext->1:At 51295
        Int32 _26One;// 6:PlusOne->1:One 51300
        Int32 _27Add;// 6:PlusOne->0:Add 51299
        Single _28At;// 3:VectorFromArray-ext->2:At 51297
        Int32 _29One;// 7:PlusOne->1:One 51304
        Int32 _30Add;// 7:PlusOne->0:Add 51303
        Single _31At;// 3:VectorFromArray-ext->3:At 51301
        Vector3 _32Vector3;// 3:VectorFromArray-ext->4:Vector3 51294
        Single _33Y;// 2:QuaternionFromVector3-ext->7:Y 51287
        Single _34X;// 2:QuaternionFromVector3-ext->6:X 51288
        Single _35Z;// 2:QuaternionFromVector3-ext->8:Z 51289
        Quaternion _36QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 51286
        Vector3 _37Rotate;// 16:Skew-ext->17:Rotate 51280
        Vector3 _38ZAxis;// 19:VectorAlignZAxis-ext->1:ZAxis 51361
        Vector3 _39Normalize;// 0:RotationBetweenVectorsFix-ext->4:Normalize 51359
        Int32 _40Zero;// 21:AxisChoose-ext->9:Zero 51365
        Boolean _41GreaterThanOrEqual;// 21:AxisChoose-ext->8:GreaterThanOrEqual 51364
        Vector3 _42XAxis;// 21:AxisChoose-ext->3:XAxis 51373
        Vector3 _43YAxis;// 21:AxisChoose-ext->4:YAxis 51374
        Vector3 _44ZAxis;// 21:AxisChoose-ext->5:ZAxis 51375
        Vector3 _57Pass-through: Vector3;// 0:Pass-through: Vector3 51325
        Vector3 _58Normalize;// 0:RotationBetweenVectorsFix-ext->5:Normalize 51360
        Single _59Dot;// 0:RotationBetweenUnitVectors-ext->6:Dot 51335
        Single _60FloatOne;// 0:RotationBetweenUnitVectors-ext->8:FloatOne 51336
        Single _61Add;// 0:RotationBetweenUnitVectors-ext->7:Add 51334
        Single _62Constant;// 0:RotationBetweenUnitVectors-ext->0:Constant 51337
        Boolean _63LessThan;// 0:RotationBetweenUnitVectors-ext->40:LessThan 51333
        Quaternion _83QuaternionNormalize;// 0:RotationBetweenUnitVectors-ext->3:QuaternionNormalize 51331
        Matrix _84MatrixFromQuaternion;// 19:VectorAlignZAxis-ext->4:MatrixFromQuaternion 51326
        Vector3 _85Transform;// 16:Skew-ext->20:Transform 51279
        Single _86Constant;// 16:Origin->0:Constant 51153
        Vector3 _87Vector3;// 16:Origin->1:Vector3 51152
        Single _88Constant;// 2:Origin->0:Constant 51383
        Vector3 _89Vector3;// 2:Origin->1:Vector3 51382
        Single _90Constant;// 17:OnesVector-ext->0:Constant 51155
        Vector3 _91Vector3;// 17:OnesVector-ext->2:Vector3 51154
        Single _92Constant;// 14:OnesVector-ext->0:Constant 51385
        Vector3 _93Vector3;// 14:OnesVector-ext->2:Vector3 51384
        Func[Vector3, Vector3] _94Pass-through: function1;// 0:Pass-through: function1 51058
        Matrix _101Pass-through: Matrix;// 0:Pass-through: Matrix 51038
        Matrix _102InvertMatrix;// 0:DeformVertices-ext->7:InvertMatrix 51088
        IArray[Vector3] _103ParallelMap;// 0:DeformVertices-ext->5:ParallelMap 51082
        TriMesh _104SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 51081
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 100;
        _2Divide = Divide(lower, _1Constant);
        _3Constant = 100;
        _4Divide = Divide(upper, _3Constant);
        _5FloatZero = FloatZero();
        _6Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 51273
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 51272
            Single _2X;// 2:VectorAsArray->1:X 51246
            IArray[Single] _3Unit;// 4:Array3->2:Unit 51245
            Single _4Y;// 2:VectorAsArray->2:Y 51247
            IArray[Single] _5Append;// 4:Array3->3:Append 51244
            Single _6Z;// 2:VectorAsArray->3:Z 51248
            IArray[Single] _7Append;// 4:Array3->6:Append 51243
            Vector3 _8BoxMax;// 9:BoxExtent-ext->1:BoxMax 51276
            Vector3 _9BoxMin;// 9:BoxExtent-ext->2:BoxMin 51277
            Vector3 _10Subtract;// 9:BoxExtent-ext->3:Subtract 51275
            Single _11X;// 4:VectorAsArray->1:X 51256
            IArray[Single] _12Unit;// 4:Array3->2:Unit 51255
            Single _13Y;// 4:VectorAsArray->2:Y 51257
            IArray[Single] _14Append;// 4:Array3->3:Append 51254
            Single _15Z;// 4:VectorAsArray->3:Z 51258
            IArray[Single] _16Append;// 4:Array3->6:Append 51253
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 51238
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 51229
            Single _19At;// 7:VectorFromArray-ext->1:At 51228
            Int32 _20One;// 6:PlusOne->1:One 51233
            Int32 _21Add;// 6:PlusOne->0:Add 51232
            Single _22At;// 7:VectorFromArray-ext->2:At 51230
            Int32 _23One;// 7:PlusOne->1:One 51237
            Int32 _24Add;// 7:PlusOne->0:Add 51236
            Single _25At;// 7:VectorFromArray-ext->3:At 51234
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 51227
            Single _27X;// 2:VectorAsArray-ext->1:X 51221
            Single _28Y;// 2:VectorAsArray-ext->2:Y 51222
            Single _29Z;// 2:VectorAsArray-ext->3:Z 51223
            Single _49Pass-through: Single;// 0:Pass-through: Single 51164
            Single _50FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 51170
            Boolean _51LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 51169
            Single _52Abs;// 13:FloatApplyBias-ext->66:Abs 51173
            Single _53FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 51178
            Single _54FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 51181
            Single _55Add;// 13:FloatApplyBias-ext->94:Add 51180
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 51182
            Single _57Multiply;// 13:FloatApplyBias-ext->80:Multiply 51179
            Single _58Subtract;// 13:FloatApplyBias-ext->83:Subtract 51177
            Single _59Constant;// 13:FloatApplyBias-ext->0:Constant 51183
            Single _60Constant;// 13:FloatApplyBias-ext->0:Constant 51184
            Single _61ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 51176
            Single _62LogN;// 13:FloatApplyBias-ext->99:LogN 51175
            Single _63Constant;// 13:FloatApplyBias-ext->0:Constant 51186
            Single _64LogN;// 13:FloatApplyBias-ext->19:LogN 51185
            Single _65Divide;// 13:FloatApplyBias-ext->102:Divide 51174
            Single _66Pow;// 13:FloatApplyBias-ext->20:Pow 51172
            Boolean _86True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 51207
            IArray[Single] _87Unit;// 4:Array3-ext->2:Unit 51220
            IArray[Single] _88Append;// 4:Array3-ext->3:Append 51219
            IArray[Single] _89Append;// 4:Array3-ext->6:Append 51218
            Single _90At;// 10:VectorElement-ext->3:At 51213
            Single _101Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 51205
            Single _102Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 51206
            Single _103Divide;// 7:FloatRescaleToLimit-ext->10:Divide 51204
            Single _105Pass-through: Single;// 0:Pass-through: Single 51156
            Single _106Constant;// 3:FloatSubtractFromOne-ext->0:Constant 51162
            Single _107Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 51161
            Single _108Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 51163
            Single _109Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 51159
            Single _110Add;// 23:FloatApplyCurvature-ext->6:Add 51158
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 51268
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 51269
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 51267
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 51264
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 51271
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 51270
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Y = Y(_26Vector3);
            _29Z = Z(_26Vector3);
            _49Pass-through: Single = if (applyLimits)
              {
                Boolean _30True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 51207
                IArray[Single] _31Unit;// 4:Array3-ext->2:Unit 51220
                IArray[Single] _32Append;// 4:Array3-ext->3:Append 51219
                IArray[Single] _33Append;// 4:Array3-ext->6:Append 51218
                Single _34At;// 10:VectorElement-ext->3:At 51213
                _30True = True();
                _31Unit = Unit(_27X);
                _32Append = Append(_31Unit, _28Y);
                _33Append = Append(_32Append, _29Z);
                _34At = At(_33Append, axis);
                if (_30True)
                  {
                    Single _35Constant;// 9:ClampFloatToOne->0:Constant 51201
                    Single _36Constant;// 9:ClampFloatToOne->0:Constant 51203
                    Single _37Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 51205
                    Single _38Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 51206
                    Single _39Divide;// 7:FloatRescaleToLimit-ext->10:Divide 51204
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 51202
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 51200
                    _35Constant = 1;
                    _36Constant = 0;
                    _37Subtract = Subtract(_34At, _2Divide);
                    _38Subtract = Subtract(_4Divide, _2Divide);
                    _39Divide = Divide(_37Subtract, _38Subtract);
                    _40GreaterFloat = GreaterFloat(_36Constant, _39Divide);
                    _41LesserFloat = LesserFloat(_35Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    Single _42Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 51205
                    Single _43Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 51206
                    Single _44Divide;// 7:FloatRescaleToLimit-ext->10:Divide 51204
                    _42Subtract = Subtract(_34At, _2Divide);
                    _43Subtract = Subtract(_4Divide, _2Divide);
                    _44Divide = Divide(_42Subtract, _43Subtract);
                    _44Divide;
                    };
                }else
              {
                IArray[Single] _45Unit;// 4:Array3-ext->2:Unit 51220
                IArray[Single] _46Append;// 4:Array3-ext->3:Append 51219
                IArray[Single] _47Append;// 4:Array3-ext->6:Append 51218
                Single _48At;// 10:VectorElement-ext->3:At 51213
                _45Unit = Unit(_27X);
                _46Append = Append(_45Unit, _28Y);
                _47Append = Append(_46Append, _29Z);
                _48At = At(_47Append, axis);
                _48At;
                };
            _50FloatZero = FloatZero();
            _51LessThan = LessThan(_49Pass-through: Single, _50FloatZero);
            _52Abs = Abs(_49Pass-through: Single);
            _53FloatOne = FloatOne();
            _54FloatOne = FloatOne();
            _55Add = Add(bias, _54FloatOne);
            _56Constant = 0.5;
            _57Multiply = Multiply(_55Add, _56Constant);
            _58Subtract = Subtract(_53FloatOne, _57Multiply);
            _59Constant = 1E-05;
            _60Constant = 0.99999;
            _61ClampFloat = ClampFloat(_58Subtract, _59Constant, _60Constant);
            _62LogN = LogN(_61ClampFloat);
            _63Constant = 0.5;
            _64LogN = LogN(_63Constant);
            _65Divide = Divide(_62LogN, _64LogN);
            _66Pow = Pow(_52Abs, _65Divide);
            _86True = True();
            _87Unit = Unit(_27X);
            _88Append = Append(_87Unit, _28Y);
            _89Append = Append(_88Append, _29Z);
            _90At = At(_89Append, axis);
            _101Subtract = Subtract(_90At, _2Divide);
            _102Subtract = Subtract(_4Divide, _2Divide);
            _103Divide = Divide(_101Subtract, _102Subtract);
            _105Pass-through: Single = if (_51LessThan)
              {
                Single _104NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 51171
                _104NegativeFloat = NegativeFloat(_66Pow);
                _104NegativeFloat;
                }else
              {
                _66Pow;
                };
            _106Constant = 1;
            _107Subtract = Subtract(_106Constant, _105Pass-through: Single);
            _108Multiply = Multiply(_105Pass-through: Single, _5FloatZero);
            _109Multiply = Multiply(_107Subtract, _108Multiply);
            _110Add = Add(_105Pass-through: Single, _109Multiply);
            _110Add;
            };
        _7Constant = 0;
        _8Vector3 = Vector3(_7Constant, _7Constant, _7Constant);
        _9XAxis = XAxis();
        _10MultiplyByScalar = MultiplyByScalar(_9XAxis, amount);
        _11Constant = 0;
        _12Vector3 = Vector3(_11Constant, _11Constant, _11Constant);
        _13X = X(_12Vector3);
        _14Y = Y(_12Vector3);
        _15Vector3 = Vector3(_13X, _14Y, direction);
        _16X = X(_15Vector3);
        _17Unit = Unit(_16X);
        _18Y = Y(_15Vector3);
        _19Append = Append(_17Unit, _18Y);
        _20Z = Z(_15Vector3);
        _21Append = Append(_19Append, _20Z);
        _22Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 51316
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _23Map = Map(_21Append, _22Pass-through: function1);
        _24Zero = Zero();
        _25At = At(_23Map, _24Zero);
        _26One = One();
        _27Add = Add(_24Zero, _26One);
        _28At = At(_23Map, _27Add);
        _29One = One();
        _30Add = Add(_27Add, _29One);
        _31At = At(_23Map, _30Add);
        _32Vector3 = Vector3(_25At, _28At, _31At);
        _33Y = Y(_32Vector3);
        _34X = X(_32Vector3);
        _35Z = Z(_32Vector3);
        _36QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_33Y, _34X, _35Z);
        _37Rotate = Rotate(_10MultiplyByScalar, _36QuaternionFromYawPitchRoll);
        _38ZAxis = ZAxis();
        _39Normalize = Normalize(_38ZAxis);
        _40Zero = Zero();
        _41GreaterThanOrEqual = GreaterThanOrEqual(axis, _40Zero);
        _42XAxis = XAxis();
        _43YAxis = YAxis();
        _44ZAxis = ZAxis();
        _57Pass-through: Vector3 = if (_41GreaterThanOrEqual)
          {
            IArray[Vector3] _45Unit;// 2:Array3->2:Unit 51372
            IArray[Vector3] _46Append;// 2:Array3->3:Append 51371
            IArray[Vector3] _47Append;// 2:Array3->6:Append 51370
            Vector3 _48At;// 21:AxisChoose-ext->1:At 51366
            _45Unit = Unit(_42XAxis);
            _46Append = Append(_45Unit, _43YAxis);
            _47Append = Append(_46Append, _44ZAxis);
            _48At = At(_47Append, axis);
            _48At;
            }else
          {
            IArray[Vector3] _49Unit;// 2:Array3->2:Unit 51372
            IArray[Vector3] _50Append;// 2:Array3->3:Append 51371
            IArray[Vector3] _51Append;// 2:Array3->6:Append 51370
            Int32 _52One;// 10:PlusOne->1:One 51381
            Int32 _53Add;// 10:PlusOne->0:Add 51380
            Int32 _54Negative;// 21:AxisChoose-ext->11:Negative 51378
            Vector3 _55At;// 21:AxisChoose-ext->12:At 51377
            Vector3 _56Negate;// 21:AxisChoose-ext->13:Negate 51376
            _49Unit = Unit(_42XAxis);
            _50Append = Append(_49Unit, _43YAxis);
            _51Append = Append(_50Append, _44ZAxis);
            _52One = One();
            _53Add = Add(axis, _52One);
            _54Negative = Negative(_53Add);
            _55At = At(_51Append, _54Negative);
            _56Negate = Negate(_55At);
            _56Negate;
            };
        _58Normalize = Normalize(_57Pass-through: Vector3);
        _59Dot = Dot(_39Normalize, _58Normalize);
        _60FloatOne = FloatOne();
        _61Add = Add(_59Dot, _60FloatOne);
        _62Constant = 1E-07;
        _63LessThan = LessThan(_61Add, _62Constant);
        _83QuaternionNormalize = QuaternionNormalize(if (_63LessThan)
          {
            Single _64X;// 0:RotationBetweenUnitVectors-ext->12:X 51342
            Single _65Abs;// 0:RotationBetweenUnitVectors-ext->11:Abs 51341
            Single _66Z;// 0:RotationBetweenUnitVectors-ext->14:Z 51345
            Single _67Abs;// 0:RotationBetweenUnitVectors-ext->13:Abs 51344
            Boolean _68GreaterThan;// 0:RotationBetweenUnitVectors-ext->15:GreaterThan 51340
            Single _79FloatZero;// 0:RotationBetweenUnitVectors-ext->36:FloatZero 51356
            Quaternion _80QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->35:QuaternionFromVectorAndTheta 51338
            _64X = X(_39Normalize);
            _65Abs = Abs(_64X);
            _66Z = Z(_39Normalize);
            _67Abs = Abs(_66Z);
            _68GreaterThan = GreaterThan(_65Abs, _67Abs);
            _79FloatZero = FloatZero();
            _80QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_68GreaterThan)
              {
                Single _69Y;// 0:RotationBetweenUnitVectors-ext->29:Y 51348
                Single _70NegativeFloat;// 0:RotationBetweenUnitVectors-ext->30:NegativeFloat 51347
                Single _71X;// 0:RotationBetweenUnitVectors-ext->23:X 51349
                Single _72FloatZero;// 0:RotationBetweenUnitVectors-ext->21:FloatZero 51350
                Vector3 _73Vector3;// 0:RotationBetweenUnitVectors-ext->19:Vector3 51346
                _69Y = Y(_39Normalize);
                _70NegativeFloat = NegativeFloat(_69Y);
                _71X = X(_39Normalize);
                _72FloatZero = FloatZero();
                _73Vector3 = Vector3(_70NegativeFloat, _71X, _72FloatZero);
                _73Vector3;
                }else
              {
                Single _74FloatZero;// 0:RotationBetweenUnitVectors-ext->22:FloatZero 51352
                Single _75Z;// 0:RotationBetweenUnitVectors-ext->26:Z 51354
                Single _76NegativeFloat;// 0:RotationBetweenUnitVectors-ext->25:NegativeFloat 51353
                Single _77Y;// 0:RotationBetweenUnitVectors-ext->24:Y 51355
                Vector3 _78Vector3;// 0:RotationBetweenUnitVectors-ext->20:Vector3 51351
                _74FloatZero = FloatZero();
                _75Z = Z(_39Normalize);
                _76NegativeFloat = NegativeFloat(_75Z);
                _77Y = Y(_39Normalize);
                _78Vector3 = Vector3(_74FloatZero, _76NegativeFloat, _77Y);
                _78Vector3;
                }, _79FloatZero);
            _80QuaternionFromVectorAndTheta;
            }else
          {
            Vector3 _81Cross;// 0:RotationBetweenUnitVectors-ext->2:Cross 51358
            Quaternion _82QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->5:QuaternionFromVectorAndTheta 51357
            _81Cross = Cross(_39Normalize, _58Normalize);
            _82QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_81Cross, _61Add);
            _82QuaternionFromVectorAndTheta;
            });
        _84MatrixFromQuaternion = MatrixFromQuaternion(_83QuaternionNormalize);
        _85Transform = Transform(_37Rotate, _84MatrixFromQuaternion);
        _86Constant = 0;
        _87Vector3 = Vector3(_86Constant, _86Constant, _86Constant);
        _88Constant = 0;
        _89Vector3 = Vector3(_88Constant, _88Constant, _88Constant);
        _90Constant = 1;
        _91Vector3 = Vector3(_90Constant, _90Constant, _90Constant);
        _92Constant = 1;
        _93Vector3 = Vector3(_92Constant, _92Constant, _92Constant);
        _94Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:TransformVertices-ext->5:Apply1 51149
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 51113
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 51107
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 51147
            Single _4X;// 1:VectorAsArray->1:X 51143
            IArray[Single] _5Unit;// 4:Array3->2:Unit 51142
            Single _6Y;// 1:VectorAsArray->2:Y 51144
            IArray[Single] _7Append;// 4:Array3->3:Append 51141
            Single _8Z;// 1:VectorAsArray->3:Z 51145
            IArray[Single] _9Append;// 4:Array3->6:Append 51140
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 51122
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 51135
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 51126
            Single _13At;// 3:VectorFromArray-ext->1:At 51125
            Int32 _14One;// 6:PlusOne->1:One 51130
            Int32 _15Add;// 6:PlusOne->0:Add 51129
            Single _16At;// 3:VectorFromArray-ext->2:At 51127
            Int32 _17One;// 7:PlusOne->1:One 51134
            Int32 _18Add;// 7:PlusOne->0:Add 51133
            Single _19At;// 3:VectorFromArray-ext->3:At 51131
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 51124
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 51117
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 51118
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 51119
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 51116
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 51108
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 51106
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 51148
            Single _28Constant;// 8:Origin->0:Constant 51112
            Vector3 _29Vector3;// 8:Origin->1:Vector3 51111
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 51110
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 51105
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 51098
            Vector3 _33Transform;// 0:TransformVertices-ext->4:Transform 51089
            _0Apply1 = Apply1(_6Pass-through: function1, x0);
            _1Lerp = Lerp(_8Vector3, _85Transform, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_87Vector3, _89Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 51146
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_91Vector3, _93Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _101Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _95IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 51408
            _95IsValidNode = IsValidNode(gizmo node);
            if (_95IsValidNode)
              {
                Matrix _96ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 51412
                Matrix _97InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 51413
                Matrix _98Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 51411
                _96ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _97InvertMatrix = InvertMatrix(modifierTransform);
                _98Multiply = Multiply(_96ObjectTransformBeforeWSM, _97InvertMatrix);
                _98Multiply;
                }else
              {
                Matrix _99MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 51414
                _99MatrixIdentity = MatrixIdentity();
                _99MatrixIdentity;
                };
            }else
          {
            Matrix _100MatrixIdentity;// 4:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 51415
            _100MatrixIdentity = MatrixIdentity();
            _100MatrixIdentity;
            };
        _102InvertMatrix = InvertMatrix(_101Pass-through: Matrix);
        _103ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:DeformVertices-ext->11:Transform 51086
            Vector3 _1Apply1;// 0:DeformVertices-ext->8:Apply1 51085
            Vector3 _2Transform;// 0:DeformVertices-ext->9:Transform 51084
            _0Transform = Transform(x0, _102InvertMatrix);
            _1Apply1 = Apply1(_94Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _101Pass-through: Matrix);
            _2Transform;
            });
        _104SetMeshVertices = SetMeshVertices(mesh, _103ParallelMap);
        _104SetMeshVertices;
        });
    _5IfThen;
    }