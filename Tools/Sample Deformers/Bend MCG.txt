(InstanceState state, TriMesh mesh, Boolean limit, BoundingBox boundingBox, Single lower limit, Single upper limit, Int32 axis, Single angle, Single direction, Boolean use gizmo node, INode gizmo node, Matrix modifierTransform) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 52964
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 52966
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 52965
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 52963
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 52962
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 52958
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 52973
        IArray[Vector3] _1MeshVertices;// 7:DeformVertices-ext->4:MeshVertices 52979
        Single _2Constant;// 8:DivideBy100Float->0:Constant 53089
        Single _3Divide;// 8:DivideBy100Float->1:Divide 53088
        Vector3 _4Vector3;// 24:ScalarToVector-ext->1:Vector3 53086
        Vector3 _5BoxMax;// 28:BoundingBoxExtent->1:BoxMax 53077
        Vector3 _6BoxMin;// 28:BoundingBoxExtent->2:BoxMin 53078
        Vector3 _7Subtract;// 28:BoundingBoxExtent->3:Subtract 53076
        Single _8Constant;// 26:DivideBy100Float->0:Constant 53083
        Single _9Divide;// 26:DivideBy100Float->1:Divide 53082
        Vector3 _10Vector3;// 23:ScalarToVector-ext->1:Vector3 53080
        Vector3 _11Multiply;// 35:Bend-ext->27:Multiply 53074
        Single _12ToRadians;// 35:Bend-ext->19:ToRadians 53090
        Single _13ToRadians;// 35:Bend-ext->16:ToRadians 53091
        Func[Vector3, Vector3] _14Pass-through: function1;// 0:Pass-through: function1 52954
        Matrix _21Pass-through: Matrix;// 0:Pass-through: Matrix 52952
        Matrix _22InvertMatrix;// 7:DeformVertices-ext->7:InvertMatrix 52984
        IArray[Vector3] _23ParallelMap;// 7:DeformVertices-ext->5:ParallelMap 52978
        Int32 _24Zero;// 7:SoftSelection->2:Zero 52976
        IArray[Single] _25PerVertexData;// 7:SoftSelection->3:PerVertexData 52975
        IArray[Vector3] _26Combine3;// 1:LerpVectors-ext->10:Combine3 52971
        TriMesh _27SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 52967
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 100;
        _3Divide = Divide(upper limit, _2Constant);
        _4Vector3 = Vector3(_3Divide, _3Divide, _3Divide);
        _5BoxMax = BoxMax(boundingBox);
        _6BoxMin = BoxMin(boundingBox);
        _7Subtract = Subtract(_5BoxMax, _6BoxMin);
        _8Constant = 100;
        _9Divide = Divide(lower limit, _8Constant);
        _10Vector3 = Vector3(_9Divide, _9Divide, _9Divide);
        _11Multiply = Multiply(_7Subtract, _10Vector3);
        _12ToRadians = ToRadians(angle);
        _13ToRadians = ToRadians(direction);
        _14Pass-through: function1 = (Vector3 x0) => 
          {
            BoundingBox _2Pass-through: BoundingBox;// 0:Pass-through: BoundingBox 52985
            Vector3 _3BoxMax;// 5:BoundingBoxExtent->1:BoxMax 53053
            Vector3 _4BoxMin;// 5:BoundingBoxExtent->2:BoxMin 53054
            Vector3 _5Subtract;// 5:BoundingBoxExtent->3:Subtract 53052
            Single _6X;// 2:VectorAsArray-ext->1:X 53048
            IArray[Single] _7Unit;// 4:Array3-ext->2:Unit 53047
            Single _8Y;// 2:VectorAsArray-ext->2:Y 53049
            IArray[Single] _9Append;// 4:Array3-ext->3:Append 53046
            Single _10Z;// 2:VectorAsArray-ext->3:Z 53050
            IArray[Single] _11Append;// 4:Array3-ext->6:Append 53045
            Single _12At;// 4:VectorElement-ext->3:At 53040
            Single _13Abs;// 3:FloatIsSmall-ext->4:Abs 53032
            Single _14Constant;// 2:VectorLengthEpsilon-ext->0:Constant 53033
            Boolean _15LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 53031
            Single _18IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 53028
            Func[Vector3, Vector3] _19Pass-through: function1;// 0:Pass-through: function1 52990
            Vector3 _20Apply1;// 23:TransformInMatrixSpaceAndRestore-ext->6:Apply1 52994
            Single _21HalfPi;// 15:MatrixRotationFromDirectionAndAxis-ext->3:HalfPi 53068
            Single _22NegativeFloat;// 15:MatrixRotationFromDirectionAndAxis-ext->4:NegativeFloat 53067
            Matrix _23RotationYMatrix;// 15:MatrixRotationFromDirectionAndAxis-ext->1:RotationYMatrix 53066
            Func[Matrix] _24Pass-through: any;// 0:Pass-through: any 53060
            IArray[Func[Matrix]] _25Unit;// 7:Array3->2:Unit 53065
            Matrix _26RotationXMatrix;// 15:MatrixRotationFromDirectionAndAxis-ext->6:RotationXMatrix 53069
            Func[Matrix] _27Pass-through: any;// 0:Pass-through: any 53061
            IArray[Func[Matrix]] _28Append;// 7:Array3->3:Append 53064
            Matrix _29MatrixIdentity;// 15:MatrixRotationFromDirectionAndAxis-ext->5:MatrixIdentity 53070
            Func[Matrix] _30Pass-through: any;// 0:Pass-through: any 53062
            IArray[Func[Matrix]] _31Append;// 7:Array3->6:Append 53063
            Func[Matrix] _32At;// 15:MatrixRotationFromDirectionAndAxis-ext->8:At 53059
            Matrix _33Apply0;// 15:MatrixRotationFromDirectionAndAxis-ext->74:Apply0 53058
            Matrix _34RotationZMatrix;// 15:MatrixRotationFromDirectionAndAxis-ext->81:RotationZMatrix 53071
            Matrix _35Multiply;// 15:MatrixRotationFromDirectionAndAxis-ext->82:Multiply 53057
            Matrix _36InvertMatrix;// 23:TransformInMatrixSpaceAndRestore-ext->3:InvertMatrix 52995
            Vector3 _37Transform;// 23:TransformInMatrixSpaceAndRestore-ext->5:Transform 52993
            _2Pass-through: BoundingBox = if (limit)
              {
                Vector3 _0Multiply;// 35:Bend-ext->25:Multiply 53084
                BoundingBox _1Box;// 35:Bend-ext->13:Box 53073
                _0Multiply = Multiply(_7Subtract, _4Vector3);
                _1Box = Box(_11Multiply, _0Multiply);
                _1Box;
                }else
              {
                boundingBox;
                };
            _3BoxMax = BoxMax(_2Pass-through: BoundingBox);
            _4BoxMin = BoxMin(_2Pass-through: BoundingBox);
            _5Subtract = Subtract(_3BoxMax, _4BoxMin);
            _6X = X(_5Subtract);
            _7Unit = Unit(_6X);
            _8Y = Y(_5Subtract);
            _9Append = Append(_7Unit, _8Y);
            _10Z = Z(_5Subtract);
            _11Append = Append(_9Append, _10Z);
            _12At = At(_11Append, axis);
            _13Abs = Abs(_12ToRadians);
            _14Constant = 1E-06;
            _15LessThanOrEqual = LessThanOrEqual(_13Abs, _14Constant);
            _18IgnoreFirst = IgnoreFirst(_12At, if (_15LessThanOrEqual)
              {
                Single _16FloatZero;// 24:DivideDefaultToZero-ext->6:FloatZero 53035
                _16FloatZero = FloatZero();
                _16FloatZero;
                }else
              {
                Single _17Divide;// 9:DivideDefault-ext->5:Divide 53034
                _17Divide = Divide(_12At, _12ToRadians);
                _17Divide;
                });
            _19Pass-through: function1 = (Vector3 x0) => 
              {
                Single _0Abs;// 4:FloatAlmostZero-ext->1:Abs 53001
                Single _1Constant;// 4:FloatAlmostZero-ext->0:Constant 53002
                Boolean _2LessThanOrEqual;// 4:FloatAlmostZero-ext->2:LessThanOrEqual 53000
                _0Abs = Abs(_18IgnoreFirst);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                if (_2LessThanOrEqual)
                  {
                    x0;
                    }else
                  {
                    Single _3Pi;// 4:BendDeformPoint-ext->37:Pi 53011
                    Single _4Z;// 4:BendDeformPoint-ext->38:Z 53013
                    Single _5Divide;// 4:BendDeformPoint-ext->46:Divide 53012
                    Single _6Subtract;// 4:BendDeformPoint-ext->51:Subtract 53010
                    Single _7Cos;// 4:BendDeformPoint-ext->50:Cos 53009
                    Single _8Multiply;// 4:BendDeformPoint-ext->57:Multiply 53008
                    Single _9Add;// 4:BendDeformPoint-ext->58:Add 53005
                    Single _10X;// 4:BendDeformPoint-ext->40:X 53017
                    Single _11Multiply;// 4:BendDeformPoint-ext->61:Multiply 53015
                    Single _12Subtract;// 4:BendDeformPoint-ext->60:Subtract 53004
                    Single _13Y;// 4:BendDeformPoint-ext->41:Y 53018
                    Single _14Sin;// 4:BendDeformPoint-ext->55:Sin 53021
                    Single _15Multiply;// 4:BendDeformPoint-ext->63:Multiply 53020
                    Single _16Multiply;// 4:BendDeformPoint-ext->65:Multiply 53022
                    Single _17Subtract;// 4:BendDeformPoint-ext->66:Subtract 53019
                    Vector3 _18Vector3;// 4:BendDeformPoint-ext->36:Vector3 53003
                    _3Pi = Pi();
                    _4Z = Z(x0);
                    _5Divide = Divide(_4Z, _18IgnoreFirst);
                    _6Subtract = Subtract(_3Pi, _5Divide);
                    _7Cos = Cos(_6Subtract);
                    _8Multiply = Multiply(_18IgnoreFirst, _7Cos);
                    _9Add = Add(_18IgnoreFirst, _8Multiply);
                    _10X = X(x0);
                    _11Multiply = Multiply(_10X, _7Cos);
                    _12Subtract = Subtract(_9Add, _11Multiply);
                    _13Y = Y(x0);
                    _14Sin = Sin(_6Subtract);
                    _15Multiply = Multiply(_18IgnoreFirst, _14Sin);
                    _16Multiply = Multiply(_10X, _14Sin);
                    _17Subtract = Subtract(_15Multiply, _16Multiply);
                    _18Vector3 = Vector3(_12Subtract, _13Y, _17Subtract);
                    _18Vector3;
                    };
                };
            _20Apply1 = Apply1(_19Pass-through: function1, x0);
            _21HalfPi = HalfPi();
            _22NegativeFloat = NegativeFloat(_21HalfPi);
            _23RotationYMatrix = RotationYMatrix(_22NegativeFloat);
            _24Pass-through: any = () => 
              {
                _23RotationYMatrix;
                };
            _25Unit = Unit(_24Pass-through: any);
            _26RotationXMatrix = RotationXMatrix(_21HalfPi);
            _27Pass-through: any = () => 
              {
                _26RotationXMatrix;
                };
            _28Append = Append(_25Unit, _27Pass-through: any);
            _29MatrixIdentity = MatrixIdentity();
            _30Pass-through: any = () => 
              {
                _29MatrixIdentity;
                };
            _31Append = Append(_28Append, _30Pass-through: any);
            _32At = At(_31Append, axis);
            _33Apply0 = Apply0(_32At);
            _34RotationZMatrix = RotationZMatrix(_13ToRadians);
            _35Multiply = Multiply(_33Apply0, _34RotationZMatrix);
            _36InvertMatrix = InvertMatrix(_35Multiply);
            _37Transform = Transform(_20Apply1, _36InvertMatrix);
            _37Transform;
            };
        _21Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _15IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 53107
            _15IsValidNode = IsValidNode(gizmo node);
            if (_15IsValidNode)
              {
                Matrix _16ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 53111
                Matrix _17InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 53112
                Matrix _18Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 53110
                _16ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _17InvertMatrix = InvertMatrix(modifierTransform);
                _18Multiply = Multiply(_16ObjectTransformBeforeWSM, _17InvertMatrix);
                _18Multiply;
                }else
              {
                Matrix _19MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 53113
                _19MatrixIdentity = MatrixIdentity();
                _19MatrixIdentity;
                };
            }else
          {
            Matrix _20MatrixIdentity;// 16:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 53114
            _20MatrixIdentity = MatrixIdentity();
            _20MatrixIdentity;
            };
        _22InvertMatrix = InvertMatrix(_21Pass-through: Matrix);
        _23ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 7:DeformVertices-ext->11:Transform 52982
            Vector3 _1Apply1;// 7:DeformVertices-ext->8:Apply1 52981
            Vector3 _2Transform;// 7:DeformVertices-ext->9:Transform 52980
            _0Transform = Transform(x0, _22InvertMatrix);
            _1Apply1 = Apply1(_14Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _21Pass-through: Matrix);
            _2Transform;
            });
        _24Zero = Zero();
        _25PerVertexData = PerVertexData(mesh, _24Zero);
        _26Combine3 = Combine3(_0MeshVertices, _23ParallelMap, _25PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 52972
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _27SetMeshVertices = SetMeshVertices(mesh, _26Combine3);
        _27SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 7:DeformVertices-ext->4:MeshVertices 52979
        Single _1Constant;// 8:DivideBy100Float->0:Constant 53089
        Single _2Divide;// 8:DivideBy100Float->1:Divide 53088
        Vector3 _3Vector3;// 24:ScalarToVector-ext->1:Vector3 53086
        Vector3 _4BoxMax;// 28:BoundingBoxExtent->1:BoxMax 53077
        Vector3 _5BoxMin;// 28:BoundingBoxExtent->2:BoxMin 53078
        Vector3 _6Subtract;// 28:BoundingBoxExtent->3:Subtract 53076
        Single _7Constant;// 26:DivideBy100Float->0:Constant 53083
        Single _8Divide;// 26:DivideBy100Float->1:Divide 53082
        Vector3 _9Vector3;// 23:ScalarToVector-ext->1:Vector3 53080
        Vector3 _10Multiply;// 35:Bend-ext->27:Multiply 53074
        Single _11ToRadians;// 35:Bend-ext->19:ToRadians 53090
        Single _12ToRadians;// 35:Bend-ext->16:ToRadians 53091
        Func[Vector3, Vector3] _13Pass-through: function1;// 0:Pass-through: function1 52954
        Matrix _20Pass-through: Matrix;// 0:Pass-through: Matrix 52952
        Matrix _21InvertMatrix;// 7:DeformVertices-ext->7:InvertMatrix 52984
        IArray[Vector3] _22ParallelMap;// 7:DeformVertices-ext->5:ParallelMap 52978
        TriMesh _23SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 52977
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 100;
        _2Divide = Divide(upper limit, _1Constant);
        _3Vector3 = Vector3(_2Divide, _2Divide, _2Divide);
        _4BoxMax = BoxMax(boundingBox);
        _5BoxMin = BoxMin(boundingBox);
        _6Subtract = Subtract(_4BoxMax, _5BoxMin);
        _7Constant = 100;
        _8Divide = Divide(lower limit, _7Constant);
        _9Vector3 = Vector3(_8Divide, _8Divide, _8Divide);
        _10Multiply = Multiply(_6Subtract, _9Vector3);
        _11ToRadians = ToRadians(angle);
        _12ToRadians = ToRadians(direction);
        _13Pass-through: function1 = (Vector3 x0) => 
          {
            BoundingBox _2Pass-through: BoundingBox;// 0:Pass-through: BoundingBox 52985
            Vector3 _3BoxMax;// 5:BoundingBoxExtent->1:BoxMax 53053
            Vector3 _4BoxMin;// 5:BoundingBoxExtent->2:BoxMin 53054
            Vector3 _5Subtract;// 5:BoundingBoxExtent->3:Subtract 53052
            Single _6X;// 2:VectorAsArray-ext->1:X 53048
            IArray[Single] _7Unit;// 4:Array3-ext->2:Unit 53047
            Single _8Y;// 2:VectorAsArray-ext->2:Y 53049
            IArray[Single] _9Append;// 4:Array3-ext->3:Append 53046
            Single _10Z;// 2:VectorAsArray-ext->3:Z 53050
            IArray[Single] _11Append;// 4:Array3-ext->6:Append 53045
            Single _12At;// 4:VectorElement-ext->3:At 53040
            Single _13Abs;// 3:FloatIsSmall-ext->4:Abs 53032
            Single _14Constant;// 2:VectorLengthEpsilon-ext->0:Constant 53033
            Boolean _15LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 53031
            Single _18IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 53028
            Func[Vector3, Vector3] _19Pass-through: function1;// 0:Pass-through: function1 52990
            Vector3 _20Apply1;// 23:TransformInMatrixSpaceAndRestore-ext->6:Apply1 52994
            Single _21HalfPi;// 15:MatrixRotationFromDirectionAndAxis-ext->3:HalfPi 53068
            Single _22NegativeFloat;// 15:MatrixRotationFromDirectionAndAxis-ext->4:NegativeFloat 53067
            Matrix _23RotationYMatrix;// 15:MatrixRotationFromDirectionAndAxis-ext->1:RotationYMatrix 53066
            Func[Matrix] _24Pass-through: any;// 0:Pass-through: any 53060
            IArray[Func[Matrix]] _25Unit;// 7:Array3->2:Unit 53065
            Matrix _26RotationXMatrix;// 15:MatrixRotationFromDirectionAndAxis-ext->6:RotationXMatrix 53069
            Func[Matrix] _27Pass-through: any;// 0:Pass-through: any 53061
            IArray[Func[Matrix]] _28Append;// 7:Array3->3:Append 53064
            Matrix _29MatrixIdentity;// 15:MatrixRotationFromDirectionAndAxis-ext->5:MatrixIdentity 53070
            Func[Matrix] _30Pass-through: any;// 0:Pass-through: any 53062
            IArray[Func[Matrix]] _31Append;// 7:Array3->6:Append 53063
            Func[Matrix] _32At;// 15:MatrixRotationFromDirectionAndAxis-ext->8:At 53059
            Matrix _33Apply0;// 15:MatrixRotationFromDirectionAndAxis-ext->74:Apply0 53058
            Matrix _34RotationZMatrix;// 15:MatrixRotationFromDirectionAndAxis-ext->81:RotationZMatrix 53071
            Matrix _35Multiply;// 15:MatrixRotationFromDirectionAndAxis-ext->82:Multiply 53057
            Matrix _36InvertMatrix;// 23:TransformInMatrixSpaceAndRestore-ext->3:InvertMatrix 52995
            Vector3 _37Transform;// 23:TransformInMatrixSpaceAndRestore-ext->5:Transform 52993
            _2Pass-through: BoundingBox = if (limit)
              {
                Vector3 _0Multiply;// 35:Bend-ext->25:Multiply 53084
                BoundingBox _1Box;// 35:Bend-ext->13:Box 53073
                _0Multiply = Multiply(_6Subtract, _3Vector3);
                _1Box = Box(_10Multiply, _0Multiply);
                _1Box;
                }else
              {
                boundingBox;
                };
            _3BoxMax = BoxMax(_2Pass-through: BoundingBox);
            _4BoxMin = BoxMin(_2Pass-through: BoundingBox);
            _5Subtract = Subtract(_3BoxMax, _4BoxMin);
            _6X = X(_5Subtract);
            _7Unit = Unit(_6X);
            _8Y = Y(_5Subtract);
            _9Append = Append(_7Unit, _8Y);
            _10Z = Z(_5Subtract);
            _11Append = Append(_9Append, _10Z);
            _12At = At(_11Append, axis);
            _13Abs = Abs(_11ToRadians);
            _14Constant = 1E-06;
            _15LessThanOrEqual = LessThanOrEqual(_13Abs, _14Constant);
            _18IgnoreFirst = IgnoreFirst(_12At, if (_15LessThanOrEqual)
              {
                Single _16FloatZero;// 24:DivideDefaultToZero-ext->6:FloatZero 53035
                _16FloatZero = FloatZero();
                _16FloatZero;
                }else
              {
                Single _17Divide;// 9:DivideDefault-ext->5:Divide 53034
                _17Divide = Divide(_12At, _11ToRadians);
                _17Divide;
                });
            _19Pass-through: function1 = (Vector3 x0) => 
              {
                Single _0Abs;// 4:FloatAlmostZero-ext->1:Abs 53001
                Single _1Constant;// 4:FloatAlmostZero-ext->0:Constant 53002
                Boolean _2LessThanOrEqual;// 4:FloatAlmostZero-ext->2:LessThanOrEqual 53000
                _0Abs = Abs(_18IgnoreFirst);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                if (_2LessThanOrEqual)
                  {
                    x0;
                    }else
                  {
                    Single _3Pi;// 4:BendDeformPoint-ext->37:Pi 53011
                    Single _4Z;// 4:BendDeformPoint-ext->38:Z 53013
                    Single _5Divide;// 4:BendDeformPoint-ext->46:Divide 53012
                    Single _6Subtract;// 4:BendDeformPoint-ext->51:Subtract 53010
                    Single _7Cos;// 4:BendDeformPoint-ext->50:Cos 53009
                    Single _8Multiply;// 4:BendDeformPoint-ext->57:Multiply 53008
                    Single _9Add;// 4:BendDeformPoint-ext->58:Add 53005
                    Single _10X;// 4:BendDeformPoint-ext->40:X 53017
                    Single _11Multiply;// 4:BendDeformPoint-ext->61:Multiply 53015
                    Single _12Subtract;// 4:BendDeformPoint-ext->60:Subtract 53004
                    Single _13Y;// 4:BendDeformPoint-ext->41:Y 53018
                    Single _14Sin;// 4:BendDeformPoint-ext->55:Sin 53021
                    Single _15Multiply;// 4:BendDeformPoint-ext->63:Multiply 53020
                    Single _16Multiply;// 4:BendDeformPoint-ext->65:Multiply 53022
                    Single _17Subtract;// 4:BendDeformPoint-ext->66:Subtract 53019
                    Vector3 _18Vector3;// 4:BendDeformPoint-ext->36:Vector3 53003
                    _3Pi = Pi();
                    _4Z = Z(x0);
                    _5Divide = Divide(_4Z, _18IgnoreFirst);
                    _6Subtract = Subtract(_3Pi, _5Divide);
                    _7Cos = Cos(_6Subtract);
                    _8Multiply = Multiply(_18IgnoreFirst, _7Cos);
                    _9Add = Add(_18IgnoreFirst, _8Multiply);
                    _10X = X(x0);
                    _11Multiply = Multiply(_10X, _7Cos);
                    _12Subtract = Subtract(_9Add, _11Multiply);
                    _13Y = Y(x0);
                    _14Sin = Sin(_6Subtract);
                    _15Multiply = Multiply(_18IgnoreFirst, _14Sin);
                    _16Multiply = Multiply(_10X, _14Sin);
                    _17Subtract = Subtract(_15Multiply, _16Multiply);
                    _18Vector3 = Vector3(_12Subtract, _13Y, _17Subtract);
                    _18Vector3;
                    };
                };
            _20Apply1 = Apply1(_19Pass-through: function1, x0);
            _21HalfPi = HalfPi();
            _22NegativeFloat = NegativeFloat(_21HalfPi);
            _23RotationYMatrix = RotationYMatrix(_22NegativeFloat);
            _24Pass-through: any = () => 
              {
                _23RotationYMatrix;
                };
            _25Unit = Unit(_24Pass-through: any);
            _26RotationXMatrix = RotationXMatrix(_21HalfPi);
            _27Pass-through: any = () => 
              {
                _26RotationXMatrix;
                };
            _28Append = Append(_25Unit, _27Pass-through: any);
            _29MatrixIdentity = MatrixIdentity();
            _30Pass-through: any = () => 
              {
                _29MatrixIdentity;
                };
            _31Append = Append(_28Append, _30Pass-through: any);
            _32At = At(_31Append, axis);
            _33Apply0 = Apply0(_32At);
            _34RotationZMatrix = RotationZMatrix(_12ToRadians);
            _35Multiply = Multiply(_33Apply0, _34RotationZMatrix);
            _36InvertMatrix = InvertMatrix(_35Multiply);
            _37Transform = Transform(_20Apply1, _36InvertMatrix);
            _37Transform;
            };
        _20Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _14IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 53107
            _14IsValidNode = IsValidNode(gizmo node);
            if (_14IsValidNode)
              {
                Matrix _15ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 53111
                Matrix _16InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 53112
                Matrix _17Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 53110
                _15ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _16InvertMatrix = InvertMatrix(modifierTransform);
                _17Multiply = Multiply(_15ObjectTransformBeforeWSM, _16InvertMatrix);
                _17Multiply;
                }else
              {
                Matrix _18MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 53113
                _18MatrixIdentity = MatrixIdentity();
                _18MatrixIdentity;
                };
            }else
          {
            Matrix _19MatrixIdentity;// 16:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 53114
            _19MatrixIdentity = MatrixIdentity();
            _19MatrixIdentity;
            };
        _21InvertMatrix = InvertMatrix(_20Pass-through: Matrix);
        _22ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 7:DeformVertices-ext->11:Transform 52982
            Vector3 _1Apply1;// 7:DeformVertices-ext->8:Apply1 52981
            Vector3 _2Transform;// 7:DeformVertices-ext->9:Transform 52980
            _0Transform = Transform(x0, _21InvertMatrix);
            _1Apply1 = Apply1(_13Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _20Pass-through: Matrix);
            _2Transform;
            });
        _23SetMeshVertices = SetMeshVertices(mesh, _22ParallelMap);
        _23SetMeshVertices;
        });
    _5IfThen;
    }