(InstanceState state, TriMesh mesh, Single waveLength, Single amplitude1, Single amplitude2, Single phase, Single decay, Boolean use node transform, INode gizmo node, Matrix modifierTransform, Vector3 deformer translation, Vector3 deformer rotation, Vector3 deformer scale) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 96569
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 96571
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 96570
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 96568
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 96567
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 96563
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 96578
        IArray[Vector3] _1MeshVertices;// 4:MeshDeformVertices-ext->4:MeshVertices 96584
        Single _2Constant;// 0:Constant 96653
        Single _3Divide;// 7:Divide 96651
        Func[Vector3, Vector3] _4Pass-through: function1;// 0:Pass-through: function1 96559
        Matrix _43Pass-through: Matrix;// 0:Pass-through: Matrix 96557
        Matrix _44InvertMatrix;// 4:MeshDeformVertices-ext->7:InvertMatrix 96589
        IArray[Vector3] _45ParallelMap;// 4:MeshDeformVertices-ext->5:ParallelMap 96583
        Int32 _46Zero;// 7:SoftSelection->2:Zero 96581
        IArray[Single] _47PerVertexData;// 7:SoftSelection->3:PerVertexData 96580
        IArray[Vector3] _48Combine3;// 1:LerpVectors-ext->10:Combine3 96576
        TriMesh _49SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 96572
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 1000;
        _3Divide = Divide(decay, _2Constant);
        _4Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0X;// 1:PointDeformLinearWave-ext->40:X 96599
            Single _1Y;// 1:PointDeformLinearWave-ext->41:Y 96602
            Single _2FloatOne;// 1:PointDeformLinearWave-ext->31:FloatOne 96628
            Single _3Constant;// 1:PointDeformLinearWave-ext->0:Constant 96633
            Single _4FloatZero;// 1:PointDeformLinearWave-ext->27:FloatZero 96637
            Single _5Constant;// 1:PointDeformLinearWave-ext->0:Constant 96640
            Single _6Divide;// 1:PointDeformLinearWave-ext->18:Divide 96639
            Single _7Constant;// 1:PointDeformLinearWave-ext->0:Constant 96642
            Single _8Constant;// 1:PointDeformLinearWave-ext->0:Constant 96643
            Single _9Multiply;// 1:PointDeformLinearWave-ext->17:Multiply 96641
            Single _10Multiply;// 1:PointDeformLinearWave-ext->22:Multiply 96638
            Boolean _11Equal;// 1:PointDeformLinearWave-ext->26:Equal 96636
            Single _13Divide;// 1:PointDeformLinearWave-ext->0:Divide 96634
            Single _14Multiply;// 1:PointDeformLinearWave-ext->25:Multiply 96632
            Single _15Abs;// 1:PointDeformLinearWave-ext->6:Abs 96631
            Single _16Multiply;// 1:PointDeformLinearWave-ext->30:Multiply 96630
            Single _17Subtract;// 1:PointDeformLinearWave-ext->32:Subtract 96627
            Single _18Multiply;// 1:PointDeformLinearWave-ext->48:Multiply 96626
            Single _19Add;// 1:PointDeformLinearWave-ext->50:Add 96625
            Single _20TwoPi;// 7:WaveDeformerWaveFunc->10:TwoPi 96614
            Single _21FloatZero;// 7:WaveDeformerWaveFunc->2:FloatZero 96619
            Boolean _22Equal;// 7:WaveDeformerWaveFunc->1:Equal 96618
            Single _24Divide;// 7:WaveDeformerWaveFunc->13:Divide 96616
            Single _25Add;// 7:WaveDeformerWaveFunc->14:Add 96615
            Single _26Multiply;// 7:WaveDeformerWaveFunc->20:Multiply 96613
            Single _27Sin;// 7:WaveDeformerWaveFunc->21:Sin 96612
            Single _28Abs;// 7:WaveDeformerWaveFunc->18:Abs 96623
            Single _29NegativeFloat;// 7:WaveDeformerWaveFunc->16:NegativeFloat 96624
            Single _30Multiply;// 7:WaveDeformerWaveFunc->17:Multiply 96622
            Single _31Exp;// 7:WaveDeformerWaveFunc->15:Exp 96621
            Single _32Multiply;// 7:WaveDeformerWaveFunc->19:Multiply 96611
            Single _33Multiply;// 7:WaveDeformerWaveFunc->11:Multiply 96610
            Single _34Z;// 1:PointDeformLinearWave-ext->38:Z 96645
            Single _35Add;// 1:PointDeformLinearWave-ext->8:Add 96604
            Vector3 _36Vector3;// 1:PointDeformLinearWave-ext->36:Vector3 96597
            _0X = X(x0);
            _1Y = Y(x0);
            _2FloatOne = FloatOne();
            _3Constant = 2;
            _4FloatZero = FloatZero();
            _5Constant = 10;
            _6Divide = Divide(waveLength, _5Constant);
            _7Constant = 4;
            _8Constant = 4;
            _9Multiply = Multiply(_7Constant, _8Constant);
            _10Multiply = Multiply(_6Divide, _9Multiply);
            _11Equal = Equal(_4FloatZero, _10Multiply);
            _13Divide = Divide(_0X, if (_11Equal)
                {
                  Single _12FloatOne;// 1:PointDeformLinearWave-ext->24:FloatOne 96644
                  _12FloatOne = FloatOne();
                  _12FloatOne;
                  }else
                {
                  _10Multiply;
                  });
            _14Multiply = Multiply(_3Constant, _13Divide);
            _15Abs = Abs(_14Multiply);
            _16Multiply = Multiply(_15Abs, _15Abs);
            _17Subtract = Subtract(_2FloatOne, _16Multiply);
            _18Multiply = Multiply(_17Subtract, amplitude1);
            _19Add = Add(_18Multiply, amplitude2);
            _20TwoPi = TwoPi();
            _21FloatZero = FloatZero();
            _22Equal = Equal(_21FloatZero, waveLength);
            _24Divide = Divide(_1Y, if (_22Equal)
                {
                  Single _23Constant;// 7:WaveDeformerWaveFunc->0:Constant 96620
                  _23Constant = 1E-07;
                  _23Constant;
                  }else
                {
                  waveLength;
                  });
            _25Add = Add(_24Divide, phase);
            _26Multiply = Multiply(_20TwoPi, _25Add);
            _27Sin = Sin(_26Multiply);
            _28Abs = Abs(_1Y);
            _29NegativeFloat = NegativeFloat(_3Divide);
            _30Multiply = Multiply(_28Abs, _29NegativeFloat);
            _31Exp = Exp(_30Multiply);
            _32Multiply = Multiply(_27Sin, _31Exp);
            _33Multiply = Multiply(_19Add, _32Multiply);
            _34Z = Z(x0);
            _35Add = Add(_33Multiply, _34Z);
            _36Vector3 = Vector3(_0X, _1Y, _35Add);
            _36Vector3;
            };
        _43Pass-through: Matrix = if (use node transform)
          {
            Boolean _5IsValidNode;// 23:GizmoTransformInLocalSpace->35:IsValidNode 96659
            _5IsValidNode = IsValidNode(gizmo node);
            if (_5IsValidNode)
              {
                Boolean _6IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 96665
                Matrix _9InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 96669
                Matrix _10Multiply;// 32:NodeToLocalTransform->18:Multiply 96662
                _6IsValidNode = IsValidNode(gizmo node);
                _9InvertMatrix = InvertMatrix(modifierTransform);
                _10Multiply = Multiply(if (_6IsValidNode)
                    {
                      Matrix _7WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 96666
                      _7WorldTransform = WorldTransform(gizmo node);
                      _7WorldTransform;
                      }else
                    {
                      Matrix _8MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 96667
                      _8MatrixIdentity = MatrixIdentity();
                      _8MatrixIdentity;
                      }, _9InvertMatrix);
                _10Multiply;
                }else
              {
                Matrix _11MatrixIdentity;// 23:GizmoTransformInLocalSpace->40:MatrixIdentity 96670
                _11MatrixIdentity = MatrixIdentity();
                _11MatrixIdentity;
                };
            }else
          {
            Matrix _12TranslationMatrix;// 22:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 96681
            Single _13X;// 1:VectorAsArray->1:X 96717
            IArray[Single] _14Unit;// 4:Array3->2:Unit 96716
            Single _15Y;// 1:VectorAsArray->2:Y 96718
            IArray[Single] _16Append;// 4:Array3->3:Append 96715
            Single _17Z;// 1:VectorAsArray->3:Z 96719
            IArray[Single] _18Append;// 4:Array3->6:Append 96714
            Func[Single, Single] _19Pass-through: function1;// 0:Pass-through: function1 96696
            IArray[Single] _20Map;// 1:VectorMapComponents-ext->2:Map 96709
            Int32 _21Zero;// 3:VectorFromArray-ext->5:Zero 96700
            Single _22At;// 3:VectorFromArray-ext->1:At 96699
            Int32 _23One;// 6:PlusOne->1:One 96704
            Int32 _24Add;// 6:PlusOne->0:Add 96703
            Single _25At;// 3:VectorFromArray-ext->2:At 96701
            Int32 _26One;// 7:PlusOne->1:One 96708
            Int32 _27Add;// 7:PlusOne->0:Add 96707
            Single _28At;// 3:VectorFromArray-ext->3:At 96705
            Vector3 _29Vector3;// 3:VectorFromArray-ext->4:Vector3 96698
            Single _30Y;// 2:QuaternionFromVector3-ext->7:Y 96691
            Single _31X;// 2:QuaternionFromVector3-ext->6:X 96692
            Single _32Z;// 2:QuaternionFromVector3-ext->8:Z 96693
            Quaternion _33QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 96690
            Matrix _34MatrixFromQuaternion;// 22:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 96682
            Matrix _35Multiply;// 6:Multiply3-ext->3:Multiply 96680
            Single _36Constant;// 45:OnesVector-ext->0:Constant 96725
            Vector3 _37Vector3;// 45:OnesVector-ext->2:Vector3 96724
            Vector3 _38Add;// 44:Add 96722
            Single _39Constant;// 8:Origin->0:Constant 96686
            Vector3 _40Vector3;// 8:Origin->1:Vector3 96685
            Matrix _41ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 96684
            Matrix _42Multiply;// 6:Multiply3-ext->4:Multiply 96679
            _12TranslationMatrix = TranslationMatrix(deformer translation);
            _13X = X(deformer rotation);
            _14Unit = Unit(_13X);
            _15Y = Y(deformer rotation);
            _16Append = Append(_14Unit, _15Y);
            _17Z = Z(deformer rotation);
            _18Append = Append(_16Append, _17Z);
            _19Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 96720
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _20Map = Map(_18Append, _19Pass-through: function1);
            _21Zero = Zero();
            _22At = At(_20Map, _21Zero);
            _23One = One();
            _24Add = Add(_21Zero, _23One);
            _25At = At(_20Map, _24Add);
            _26One = One();
            _27Add = Add(_24Add, _26One);
            _28At = At(_20Map, _27Add);
            _29Vector3 = Vector3(_22At, _25At, _28At);
            _30Y = Y(_29Vector3);
            _31X = X(_29Vector3);
            _32Z = Z(_29Vector3);
            _33QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_30Y, _31X, _32Z);
            _34MatrixFromQuaternion = MatrixFromQuaternion(_33QuaternionFromYawPitchRoll);
            _35Multiply = Multiply(_12TranslationMatrix, _34MatrixFromQuaternion);
            _36Constant = 1;
            _37Vector3 = Vector3(_36Constant, _36Constant, _36Constant);
            _38Add = Add(deformer scale, _37Vector3);
            _39Constant = 0;
            _40Vector3 = Vector3(_39Constant, _39Constant, _39Constant);
            _41ScalingTranslationMatrix = ScalingTranslationMatrix(_38Add, _40Vector3);
            _42Multiply = Multiply(_35Multiply, _41ScalingTranslationMatrix);
            _42Multiply;
            };
        _44InvertMatrix = InvertMatrix(_43Pass-through: Matrix);
        _45ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 4:MeshDeformVertices-ext->11:Transform 96587
            Vector3 _1Apply1;// 4:MeshDeformVertices-ext->8:Apply1 96586
            Vector3 _2Transform;// 4:MeshDeformVertices-ext->9:Transform 96585
            _0Transform = Transform(x0, _44InvertMatrix);
            _1Apply1 = Apply1(_4Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _43Pass-through: Matrix);
            _2Transform;
            });
        _46Zero = Zero();
        _47PerVertexData = PerVertexData(mesh, _46Zero);
        _48Combine3 = Combine3(_0MeshVertices, _45ParallelMap, _47PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 96577
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _49SetMeshVertices = SetMeshVertices(mesh, _48Combine3);
        _49SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 4:MeshDeformVertices-ext->4:MeshVertices 96584
        Single _1Constant;// 0:Constant 96653
        Single _2Divide;// 7:Divide 96651
        Func[Vector3, Vector3] _3Pass-through: function1;// 0:Pass-through: function1 96559
        Matrix _42Pass-through: Matrix;// 0:Pass-through: Matrix 96557
        Matrix _43InvertMatrix;// 4:MeshDeformVertices-ext->7:InvertMatrix 96589
        IArray[Vector3] _44ParallelMap;// 4:MeshDeformVertices-ext->5:ParallelMap 96583
        TriMesh _45SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 96582
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 1000;
        _2Divide = Divide(decay, _1Constant);
        _3Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0X;// 1:PointDeformLinearWave-ext->40:X 96599
            Single _1Y;// 1:PointDeformLinearWave-ext->41:Y 96602
            Single _2FloatOne;// 1:PointDeformLinearWave-ext->31:FloatOne 96628
            Single _3Constant;// 1:PointDeformLinearWave-ext->0:Constant 96633
            Single _4FloatZero;// 1:PointDeformLinearWave-ext->27:FloatZero 96637
            Single _5Constant;// 1:PointDeformLinearWave-ext->0:Constant 96640
            Single _6Divide;// 1:PointDeformLinearWave-ext->18:Divide 96639
            Single _7Constant;// 1:PointDeformLinearWave-ext->0:Constant 96642
            Single _8Constant;// 1:PointDeformLinearWave-ext->0:Constant 96643
            Single _9Multiply;// 1:PointDeformLinearWave-ext->17:Multiply 96641
            Single _10Multiply;// 1:PointDeformLinearWave-ext->22:Multiply 96638
            Boolean _11Equal;// 1:PointDeformLinearWave-ext->26:Equal 96636
            Single _13Divide;// 1:PointDeformLinearWave-ext->0:Divide 96634
            Single _14Multiply;// 1:PointDeformLinearWave-ext->25:Multiply 96632
            Single _15Abs;// 1:PointDeformLinearWave-ext->6:Abs 96631
            Single _16Multiply;// 1:PointDeformLinearWave-ext->30:Multiply 96630
            Single _17Subtract;// 1:PointDeformLinearWave-ext->32:Subtract 96627
            Single _18Multiply;// 1:PointDeformLinearWave-ext->48:Multiply 96626
            Single _19Add;// 1:PointDeformLinearWave-ext->50:Add 96625
            Single _20TwoPi;// 7:WaveDeformerWaveFunc->10:TwoPi 96614
            Single _21FloatZero;// 7:WaveDeformerWaveFunc->2:FloatZero 96619
            Boolean _22Equal;// 7:WaveDeformerWaveFunc->1:Equal 96618
            Single _24Divide;// 7:WaveDeformerWaveFunc->13:Divide 96616
            Single _25Add;// 7:WaveDeformerWaveFunc->14:Add 96615
            Single _26Multiply;// 7:WaveDeformerWaveFunc->20:Multiply 96613
            Single _27Sin;// 7:WaveDeformerWaveFunc->21:Sin 96612
            Single _28Abs;// 7:WaveDeformerWaveFunc->18:Abs 96623
            Single _29NegativeFloat;// 7:WaveDeformerWaveFunc->16:NegativeFloat 96624
            Single _30Multiply;// 7:WaveDeformerWaveFunc->17:Multiply 96622
            Single _31Exp;// 7:WaveDeformerWaveFunc->15:Exp 96621
            Single _32Multiply;// 7:WaveDeformerWaveFunc->19:Multiply 96611
            Single _33Multiply;// 7:WaveDeformerWaveFunc->11:Multiply 96610
            Single _34Z;// 1:PointDeformLinearWave-ext->38:Z 96645
            Single _35Add;// 1:PointDeformLinearWave-ext->8:Add 96604
            Vector3 _36Vector3;// 1:PointDeformLinearWave-ext->36:Vector3 96597
            _0X = X(x0);
            _1Y = Y(x0);
            _2FloatOne = FloatOne();
            _3Constant = 2;
            _4FloatZero = FloatZero();
            _5Constant = 10;
            _6Divide = Divide(waveLength, _5Constant);
            _7Constant = 4;
            _8Constant = 4;
            _9Multiply = Multiply(_7Constant, _8Constant);
            _10Multiply = Multiply(_6Divide, _9Multiply);
            _11Equal = Equal(_4FloatZero, _10Multiply);
            _13Divide = Divide(_0X, if (_11Equal)
                {
                  Single _12FloatOne;// 1:PointDeformLinearWave-ext->24:FloatOne 96644
                  _12FloatOne = FloatOne();
                  _12FloatOne;
                  }else
                {
                  _10Multiply;
                  });
            _14Multiply = Multiply(_3Constant, _13Divide);
            _15Abs = Abs(_14Multiply);
            _16Multiply = Multiply(_15Abs, _15Abs);
            _17Subtract = Subtract(_2FloatOne, _16Multiply);
            _18Multiply = Multiply(_17Subtract, amplitude1);
            _19Add = Add(_18Multiply, amplitude2);
            _20TwoPi = TwoPi();
            _21FloatZero = FloatZero();
            _22Equal = Equal(_21FloatZero, waveLength);
            _24Divide = Divide(_1Y, if (_22Equal)
                {
                  Single _23Constant;// 7:WaveDeformerWaveFunc->0:Constant 96620
                  _23Constant = 1E-07;
                  _23Constant;
                  }else
                {
                  waveLength;
                  });
            _25Add = Add(_24Divide, phase);
            _26Multiply = Multiply(_20TwoPi, _25Add);
            _27Sin = Sin(_26Multiply);
            _28Abs = Abs(_1Y);
            _29NegativeFloat = NegativeFloat(_2Divide);
            _30Multiply = Multiply(_28Abs, _29NegativeFloat);
            _31Exp = Exp(_30Multiply);
            _32Multiply = Multiply(_27Sin, _31Exp);
            _33Multiply = Multiply(_19Add, _32Multiply);
            _34Z = Z(x0);
            _35Add = Add(_33Multiply, _34Z);
            _36Vector3 = Vector3(_0X, _1Y, _35Add);
            _36Vector3;
            };
        _42Pass-through: Matrix = if (use node transform)
          {
            Boolean _4IsValidNode;// 23:GizmoTransformInLocalSpace->35:IsValidNode 96659
            _4IsValidNode = IsValidNode(gizmo node);
            if (_4IsValidNode)
              {
                Boolean _5IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 96665
                Matrix _8InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 96669
                Matrix _9Multiply;// 32:NodeToLocalTransform->18:Multiply 96662
                _5IsValidNode = IsValidNode(gizmo node);
                _8InvertMatrix = InvertMatrix(modifierTransform);
                _9Multiply = Multiply(if (_5IsValidNode)
                    {
                      Matrix _6WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 96666
                      _6WorldTransform = WorldTransform(gizmo node);
                      _6WorldTransform;
                      }else
                    {
                      Matrix _7MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 96667
                      _7MatrixIdentity = MatrixIdentity();
                      _7MatrixIdentity;
                      }, _8InvertMatrix);
                _9Multiply;
                }else
              {
                Matrix _10MatrixIdentity;// 23:GizmoTransformInLocalSpace->40:MatrixIdentity 96670
                _10MatrixIdentity = MatrixIdentity();
                _10MatrixIdentity;
                };
            }else
          {
            Matrix _11TranslationMatrix;// 22:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 96681
            Single _12X;// 1:VectorAsArray->1:X 96717
            IArray[Single] _13Unit;// 4:Array3->2:Unit 96716
            Single _14Y;// 1:VectorAsArray->2:Y 96718
            IArray[Single] _15Append;// 4:Array3->3:Append 96715
            Single _16Z;// 1:VectorAsArray->3:Z 96719
            IArray[Single] _17Append;// 4:Array3->6:Append 96714
            Func[Single, Single] _18Pass-through: function1;// 0:Pass-through: function1 96696
            IArray[Single] _19Map;// 1:VectorMapComponents-ext->2:Map 96709
            Int32 _20Zero;// 3:VectorFromArray-ext->5:Zero 96700
            Single _21At;// 3:VectorFromArray-ext->1:At 96699
            Int32 _22One;// 6:PlusOne->1:One 96704
            Int32 _23Add;// 6:PlusOne->0:Add 96703
            Single _24At;// 3:VectorFromArray-ext->2:At 96701
            Int32 _25One;// 7:PlusOne->1:One 96708
            Int32 _26Add;// 7:PlusOne->0:Add 96707
            Single _27At;// 3:VectorFromArray-ext->3:At 96705
            Vector3 _28Vector3;// 3:VectorFromArray-ext->4:Vector3 96698
            Single _29Y;// 2:QuaternionFromVector3-ext->7:Y 96691
            Single _30X;// 2:QuaternionFromVector3-ext->6:X 96692
            Single _31Z;// 2:QuaternionFromVector3-ext->8:Z 96693
            Quaternion _32QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 96690
            Matrix _33MatrixFromQuaternion;// 22:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 96682
            Matrix _34Multiply;// 6:Multiply3-ext->3:Multiply 96680
            Single _35Constant;// 45:OnesVector-ext->0:Constant 96725
            Vector3 _36Vector3;// 45:OnesVector-ext->2:Vector3 96724
            Vector3 _37Add;// 44:Add 96722
            Single _38Constant;// 8:Origin->0:Constant 96686
            Vector3 _39Vector3;// 8:Origin->1:Vector3 96685
            Matrix _40ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 96684
            Matrix _41Multiply;// 6:Multiply3-ext->4:Multiply 96679
            _11TranslationMatrix = TranslationMatrix(deformer translation);
            _12X = X(deformer rotation);
            _13Unit = Unit(_12X);
            _14Y = Y(deformer rotation);
            _15Append = Append(_13Unit, _14Y);
            _16Z = Z(deformer rotation);
            _17Append = Append(_15Append, _16Z);
            _18Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 96720
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _19Map = Map(_17Append, _18Pass-through: function1);
            _20Zero = Zero();
            _21At = At(_19Map, _20Zero);
            _22One = One();
            _23Add = Add(_20Zero, _22One);
            _24At = At(_19Map, _23Add);
            _25One = One();
            _26Add = Add(_23Add, _25One);
            _27At = At(_19Map, _26Add);
            _28Vector3 = Vector3(_21At, _24At, _27At);
            _29Y = Y(_28Vector3);
            _30X = X(_28Vector3);
            _31Z = Z(_28Vector3);
            _32QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_29Y, _30X, _31Z);
            _33MatrixFromQuaternion = MatrixFromQuaternion(_32QuaternionFromYawPitchRoll);
            _34Multiply = Multiply(_11TranslationMatrix, _33MatrixFromQuaternion);
            _35Constant = 1;
            _36Vector3 = Vector3(_35Constant, _35Constant, _35Constant);
            _37Add = Add(deformer scale, _36Vector3);
            _38Constant = 0;
            _39Vector3 = Vector3(_38Constant, _38Constant, _38Constant);
            _40ScalingTranslationMatrix = ScalingTranslationMatrix(_37Add, _39Vector3);
            _41Multiply = Multiply(_34Multiply, _40ScalingTranslationMatrix);
            _41Multiply;
            };
        _43InvertMatrix = InvertMatrix(_42Pass-through: Matrix);
        _44ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 4:MeshDeformVertices-ext->11:Transform 96587
            Vector3 _1Apply1;// 4:MeshDeformVertices-ext->8:Apply1 96586
            Vector3 _2Transform;// 4:MeshDeformVertices-ext->9:Transform 96585
            _0Transform = Transform(x0, _43InvertMatrix);
            _1Apply1 = Apply1(_3Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _42Pass-through: Matrix);
            _2Transform;
            });
        _45SetMeshVertices = SetMeshVertices(mesh, _44ParallelMap);
        _45SetMeshVertices;
        });
    _5IfThen;
    }