(InstanceState state, TriMesh mesh, Single waveLength, Single amplitude1, Single amplitude2, Single phase, Single decay, Boolean use gizmo node, INode gizmo node, Matrix modifierTransform) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 55862
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 55864
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 55863
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 55861
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 55860
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 55856
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 55871
        IArray[Vector3] _1MeshVertices;// 4:DeformVertices-ext->4:MeshVertices 55877
        Single _2Constant;// 0:Constant 55946
        Single _3Divide;// 7:Divide 55944
        Func[Vector3, Vector3] _4Pass-through: function1;// 0:Pass-through: function1 55852
        Matrix _11Pass-through: Matrix;// 0:Pass-through: Matrix 55850
        Matrix _12InvertMatrix;// 4:DeformVertices-ext->7:InvertMatrix 55882
        IArray[Vector3] _13ParallelMap;// 4:DeformVertices-ext->5:ParallelMap 55876
        Int32 _14Zero;// 7:SoftSelection->2:Zero 55874
        IArray[Single] _15PerVertexData;// 7:SoftSelection->3:PerVertexData 55873
        IArray[Vector3] _16Combine3;// 1:LerpVectors-ext->10:Combine3 55869
        TriMesh _17SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 55865
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 1000;
        _3Divide = Divide(decay, _2Constant);
        _4Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0X;// 1:DeformLinearWave-ext->40:X 55892
            Single _1Y;// 1:DeformLinearWave-ext->41:Y 55895
            Single _2FloatOne;// 1:DeformLinearWave-ext->31:FloatOne 55921
            Single _3Constant;// 1:DeformLinearWave-ext->0:Constant 55926
            Single _4FloatZero;// 1:DeformLinearWave-ext->27:FloatZero 55930
            Single _5Constant;// 1:DeformLinearWave-ext->0:Constant 55933
            Single _6Divide;// 1:DeformLinearWave-ext->18:Divide 55932
            Single _7Constant;// 1:DeformLinearWave-ext->0:Constant 55935
            Single _8Constant;// 1:DeformLinearWave-ext->0:Constant 55936
            Single _9Multiply;// 1:DeformLinearWave-ext->17:Multiply 55934
            Single _10Multiply;// 1:DeformLinearWave-ext->22:Multiply 55931
            Boolean _11Equal;// 1:DeformLinearWave-ext->26:Equal 55929
            Single _13Divide;// 1:DeformLinearWave-ext->0:Divide 55927
            Single _14Multiply;// 1:DeformLinearWave-ext->25:Multiply 55925
            Single _15Abs;// 1:DeformLinearWave-ext->6:Abs 55924
            Single _16Multiply;// 1:DeformLinearWave-ext->30:Multiply 55923
            Single _17Subtract;// 1:DeformLinearWave-ext->32:Subtract 55920
            Single _18Multiply;// 1:DeformLinearWave-ext->48:Multiply 55919
            Single _19Add;// 1:DeformLinearWave-ext->50:Add 55918
            Single _20TwoPi;// 7:WaveDeformerFunc-ext->10:TwoPi 55907
            Single _21FloatZero;// 7:WaveDeformerFunc-ext->2:FloatZero 55912
            Boolean _22Equal;// 7:WaveDeformerFunc-ext->1:Equal 55911
            Single _24Divide;// 7:WaveDeformerFunc-ext->13:Divide 55909
            Single _25Add;// 7:WaveDeformerFunc-ext->14:Add 55908
            Single _26Multiply;// 7:WaveDeformerFunc-ext->20:Multiply 55906
            Single _27Sin;// 7:WaveDeformerFunc-ext->21:Sin 55905
            Single _28Abs;// 7:WaveDeformerFunc-ext->18:Abs 55916
            Single _29NegativeFloat;// 7:WaveDeformerFunc-ext->16:NegativeFloat 55917
            Single _30Multiply;// 7:WaveDeformerFunc-ext->17:Multiply 55915
            Single _31Exp;// 7:WaveDeformerFunc-ext->15:Exp 55914
            Single _32Multiply;// 7:WaveDeformerFunc-ext->19:Multiply 55904
            Single _33Multiply;// 7:WaveDeformerFunc-ext->11:Multiply 55903
            Single _34Z;// 1:DeformLinearWave-ext->38:Z 55938
            Single _35Add;// 1:DeformLinearWave-ext->8:Add 55897
            Vector3 _36Vector3;// 1:DeformLinearWave-ext->36:Vector3 55890
            _0X = X(x0);
            _1Y = Y(x0);
            _2FloatOne = FloatOne();
            _3Constant = 2;
            _4FloatZero = FloatZero();
            _5Constant = 10;
            _6Divide = Divide(waveLength, _5Constant);
            _7Constant = 4;
            _8Constant = 4;
            _9Multiply = Multiply(_7Constant, _8Constant);
            _10Multiply = Multiply(_6Divide, _9Multiply);
            _11Equal = Equal(_4FloatZero, _10Multiply);
            _13Divide = Divide(_0X, if (_11Equal)
                {
                  Single _12FloatOne;// 1:DeformLinearWave-ext->24:FloatOne 55937
                  _12FloatOne = FloatOne();
                  _12FloatOne;
                  }else
                {
                  _10Multiply;
                  });
            _14Multiply = Multiply(_3Constant, _13Divide);
            _15Abs = Abs(_14Multiply);
            _16Multiply = Multiply(_15Abs, _15Abs);
            _17Subtract = Subtract(_2FloatOne, _16Multiply);
            _18Multiply = Multiply(_17Subtract, amplitude1);
            _19Add = Add(_18Multiply, amplitude2);
            _20TwoPi = TwoPi();
            _21FloatZero = FloatZero();
            _22Equal = Equal(_21FloatZero, waveLength);
            _24Divide = Divide(_1Y, if (_22Equal)
                {
                  Single _23Constant;// 7:WaveDeformerFunc-ext->0:Constant 55913
                  _23Constant = 1E-07;
                  _23Constant;
                  }else
                {
                  waveLength;
                  });
            _25Add = Add(_24Divide, phase);
            _26Multiply = Multiply(_20TwoPi, _25Add);
            _27Sin = Sin(_26Multiply);
            _28Abs = Abs(_1Y);
            _29NegativeFloat = NegativeFloat(_3Divide);
            _30Multiply = Multiply(_28Abs, _29NegativeFloat);
            _31Exp = Exp(_30Multiply);
            _32Multiply = Multiply(_27Sin, _31Exp);
            _33Multiply = Multiply(_19Add, _32Multiply);
            _34Z = Z(x0);
            _35Add = Add(_33Multiply, _34Z);
            _36Vector3 = Vector3(_0X, _1Y, _35Add);
            _36Vector3;
            };
        _11Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _5IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 55954
            _5IsValidNode = IsValidNode(gizmo node);
            if (_5IsValidNode)
              {
                Matrix _6ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 55958
                Matrix _7InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 55959
                Matrix _8Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 55957
                _6ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _7InvertMatrix = InvertMatrix(modifierTransform);
                _8Multiply = Multiply(_6ObjectTransformBeforeWSM, _7InvertMatrix);
                _8Multiply;
                }else
              {
                Matrix _9MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 55960
                _9MatrixIdentity = MatrixIdentity();
                _9MatrixIdentity;
                };
            }else
          {
            Matrix _10MatrixIdentity;// 16:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 55961
            _10MatrixIdentity = MatrixIdentity();
            _10MatrixIdentity;
            };
        _12InvertMatrix = InvertMatrix(_11Pass-through: Matrix);
        _13ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 4:DeformVertices-ext->11:Transform 55880
            Vector3 _1Apply1;// 4:DeformVertices-ext->8:Apply1 55879
            Vector3 _2Transform;// 4:DeformVertices-ext->9:Transform 55878
            _0Transform = Transform(x0, _12InvertMatrix);
            _1Apply1 = Apply1(_4Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _11Pass-through: Matrix);
            _2Transform;
            });
        _14Zero = Zero();
        _15PerVertexData = PerVertexData(mesh, _14Zero);
        _16Combine3 = Combine3(_0MeshVertices, _13ParallelMap, _15PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 55870
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _17SetMeshVertices = SetMeshVertices(mesh, _16Combine3);
        _17SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 4:DeformVertices-ext->4:MeshVertices 55877
        Single _1Constant;// 0:Constant 55946
        Single _2Divide;// 7:Divide 55944
        Func[Vector3, Vector3] _3Pass-through: function1;// 0:Pass-through: function1 55852
        Matrix _10Pass-through: Matrix;// 0:Pass-through: Matrix 55850
        Matrix _11InvertMatrix;// 4:DeformVertices-ext->7:InvertMatrix 55882
        IArray[Vector3] _12ParallelMap;// 4:DeformVertices-ext->5:ParallelMap 55876
        TriMesh _13SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 55875
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 1000;
        _2Divide = Divide(decay, _1Constant);
        _3Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0X;// 1:DeformLinearWave-ext->40:X 55892
            Single _1Y;// 1:DeformLinearWave-ext->41:Y 55895
            Single _2FloatOne;// 1:DeformLinearWave-ext->31:FloatOne 55921
            Single _3Constant;// 1:DeformLinearWave-ext->0:Constant 55926
            Single _4FloatZero;// 1:DeformLinearWave-ext->27:FloatZero 55930
            Single _5Constant;// 1:DeformLinearWave-ext->0:Constant 55933
            Single _6Divide;// 1:DeformLinearWave-ext->18:Divide 55932
            Single _7Constant;// 1:DeformLinearWave-ext->0:Constant 55935
            Single _8Constant;// 1:DeformLinearWave-ext->0:Constant 55936
            Single _9Multiply;// 1:DeformLinearWave-ext->17:Multiply 55934
            Single _10Multiply;// 1:DeformLinearWave-ext->22:Multiply 55931
            Boolean _11Equal;// 1:DeformLinearWave-ext->26:Equal 55929
            Single _13Divide;// 1:DeformLinearWave-ext->0:Divide 55927
            Single _14Multiply;// 1:DeformLinearWave-ext->25:Multiply 55925
            Single _15Abs;// 1:DeformLinearWave-ext->6:Abs 55924
            Single _16Multiply;// 1:DeformLinearWave-ext->30:Multiply 55923
            Single _17Subtract;// 1:DeformLinearWave-ext->32:Subtract 55920
            Single _18Multiply;// 1:DeformLinearWave-ext->48:Multiply 55919
            Single _19Add;// 1:DeformLinearWave-ext->50:Add 55918
            Single _20TwoPi;// 7:WaveDeformerFunc-ext->10:TwoPi 55907
            Single _21FloatZero;// 7:WaveDeformerFunc-ext->2:FloatZero 55912
            Boolean _22Equal;// 7:WaveDeformerFunc-ext->1:Equal 55911
            Single _24Divide;// 7:WaveDeformerFunc-ext->13:Divide 55909
            Single _25Add;// 7:WaveDeformerFunc-ext->14:Add 55908
            Single _26Multiply;// 7:WaveDeformerFunc-ext->20:Multiply 55906
            Single _27Sin;// 7:WaveDeformerFunc-ext->21:Sin 55905
            Single _28Abs;// 7:WaveDeformerFunc-ext->18:Abs 55916
            Single _29NegativeFloat;// 7:WaveDeformerFunc-ext->16:NegativeFloat 55917
            Single _30Multiply;// 7:WaveDeformerFunc-ext->17:Multiply 55915
            Single _31Exp;// 7:WaveDeformerFunc-ext->15:Exp 55914
            Single _32Multiply;// 7:WaveDeformerFunc-ext->19:Multiply 55904
            Single _33Multiply;// 7:WaveDeformerFunc-ext->11:Multiply 55903
            Single _34Z;// 1:DeformLinearWave-ext->38:Z 55938
            Single _35Add;// 1:DeformLinearWave-ext->8:Add 55897
            Vector3 _36Vector3;// 1:DeformLinearWave-ext->36:Vector3 55890
            _0X = X(x0);
            _1Y = Y(x0);
            _2FloatOne = FloatOne();
            _3Constant = 2;
            _4FloatZero = FloatZero();
            _5Constant = 10;
            _6Divide = Divide(waveLength, _5Constant);
            _7Constant = 4;
            _8Constant = 4;
            _9Multiply = Multiply(_7Constant, _8Constant);
            _10Multiply = Multiply(_6Divide, _9Multiply);
            _11Equal = Equal(_4FloatZero, _10Multiply);
            _13Divide = Divide(_0X, if (_11Equal)
                {
                  Single _12FloatOne;// 1:DeformLinearWave-ext->24:FloatOne 55937
                  _12FloatOne = FloatOne();
                  _12FloatOne;
                  }else
                {
                  _10Multiply;
                  });
            _14Multiply = Multiply(_3Constant, _13Divide);
            _15Abs = Abs(_14Multiply);
            _16Multiply = Multiply(_15Abs, _15Abs);
            _17Subtract = Subtract(_2FloatOne, _16Multiply);
            _18Multiply = Multiply(_17Subtract, amplitude1);
            _19Add = Add(_18Multiply, amplitude2);
            _20TwoPi = TwoPi();
            _21FloatZero = FloatZero();
            _22Equal = Equal(_21FloatZero, waveLength);
            _24Divide = Divide(_1Y, if (_22Equal)
                {
                  Single _23Constant;// 7:WaveDeformerFunc-ext->0:Constant 55913
                  _23Constant = 1E-07;
                  _23Constant;
                  }else
                {
                  waveLength;
                  });
            _25Add = Add(_24Divide, phase);
            _26Multiply = Multiply(_20TwoPi, _25Add);
            _27Sin = Sin(_26Multiply);
            _28Abs = Abs(_1Y);
            _29NegativeFloat = NegativeFloat(_2Divide);
            _30Multiply = Multiply(_28Abs, _29NegativeFloat);
            _31Exp = Exp(_30Multiply);
            _32Multiply = Multiply(_27Sin, _31Exp);
            _33Multiply = Multiply(_19Add, _32Multiply);
            _34Z = Z(x0);
            _35Add = Add(_33Multiply, _34Z);
            _36Vector3 = Vector3(_0X, _1Y, _35Add);
            _36Vector3;
            };
        _10Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _4IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 55954
            _4IsValidNode = IsValidNode(gizmo node);
            if (_4IsValidNode)
              {
                Matrix _5ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 55958
                Matrix _6InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 55959
                Matrix _7Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 55957
                _5ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _6InvertMatrix = InvertMatrix(modifierTransform);
                _7Multiply = Multiply(_5ObjectTransformBeforeWSM, _6InvertMatrix);
                _7Multiply;
                }else
              {
                Matrix _8MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 55960
                _8MatrixIdentity = MatrixIdentity();
                _8MatrixIdentity;
                };
            }else
          {
            Matrix _9MatrixIdentity;// 16:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 55961
            _9MatrixIdentity = MatrixIdentity();
            _9MatrixIdentity;
            };
        _11InvertMatrix = InvertMatrix(_10Pass-through: Matrix);
        _12ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 4:DeformVertices-ext->11:Transform 55880
            Vector3 _1Apply1;// 4:DeformVertices-ext->8:Apply1 55879
            Vector3 _2Transform;// 4:DeformVertices-ext->9:Transform 55878
            _0Transform = Transform(x0, _11InvertMatrix);
            _1Apply1 = Apply1(_3Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _10Pass-through: Matrix);
            _2Transform;
            });
        _13SetMeshVertices = SetMeshVertices(mesh, _12ParallelMap);
        _13SetMeshVertices;
        });
    _5IfThen;
    }