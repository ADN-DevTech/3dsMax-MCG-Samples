(InstanceState state, TriMesh mesh, Boolean applyLimits, BoundingBox boundingBox, Int32 axis, Single lower, Single upper, Single bias, Single amount, Boolean use gizmo node, INode gizmo node, Matrix modifierTransform) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 52067
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 52069
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 52068
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 52066
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 52065
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 52061
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 52076
        IArray[Vector3] _1MeshVertices;// 0:DeformVertices-ext->4:MeshVertices 52082
        Single _2Constant;// 22:DivideBy100-ext->0:Constant 52296
        Single _3Divide;// 22:DivideBy100-ext->2:Divide 52295
        Single _4Constant;// 46:DivideBy100-ext->0:Constant 52300
        Single _5Divide;// 46:DivideBy100-ext->2:Divide 52299
        Single _6Constant;// 17:DivideBy100Float->0:Constant 52304
        Single _7Divide;// 17:DivideBy100Float->1:Divide 52303
        Single _8FloatZero;// 16:Twist-ext->10:FloatZero 52277
        Func[Vector3, Single] _9Pass-through: function1;// 0:Pass-through: function1 52051
        Single _10Constant;// 15:Origin->0:Constant 52150
        Vector3 _11Vector3;// 15:Origin->1:Vector3 52149
        Single _12Constant;// 12:Origin->0:Constant 52279
        Vector3 _13Vector3;// 12:Origin->1:Vector3 52278
        Single _14Constant;// 16:Origin->0:Constant 52152
        Vector3 _15Vector3;// 16:Origin->1:Vector3 52151
        Single _16Constant;// 0:Origin->0:Constant 52287
        Vector3 _17Vector3;// 0:Origin->1:Vector3 52286
        Single _18X;// 1:SetZ->4:X 52284
        Single _19Y;// 1:SetZ->5:Y 52285
        Vector3 _20Vector3;// 1:SetZ->2:Vector3 52283
        Single _21Constant;// 17:OnesVector-ext->0:Constant 52154
        Vector3 _22Vector3;// 17:OnesVector-ext->2:Vector3 52153
        Single _23Constant;// 14:OnesVector-ext->0:Constant 52289
        Vector3 _24Vector3;// 14:OnesVector-ext->2:Vector3 52288
        Func[Vector3, Vector3] _25Pass-through: function1;// 0:Pass-through: function1 52057
        Matrix _32Pass-through: Matrix;// 0:Pass-through: Matrix 52037
        Matrix _33InvertMatrix;// 0:DeformVertices-ext->7:InvertMatrix 52087
        IArray[Vector3] _34ParallelMap;// 0:DeformVertices-ext->5:ParallelMap 52081
        Int32 _35Zero;// 7:SoftSelection->2:Zero 52079
        IArray[Single] _36PerVertexData;// 7:SoftSelection->3:PerVertexData 52078
        IArray[Vector3] _37Combine3;// 1:LerpVectors-ext->10:Combine3 52074
        TriMesh _38SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 52070
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 100;
        _3Divide = Divide(lower, _2Constant);
        _4Constant = 100;
        _5Divide = Divide(upper, _4Constant);
        _6Constant = 100;
        _7Divide = Divide(bias, _6Constant);
        _8FloatZero = FloatZero();
        _9Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 52272
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 52271
            Single _2X;// 2:VectorAsArray->1:X 52245
            IArray[Single] _3Unit;// 4:Array3->2:Unit 52244
            Single _4Y;// 2:VectorAsArray->2:Y 52246
            IArray[Single] _5Append;// 4:Array3->3:Append 52243
            Single _6Z;// 2:VectorAsArray->3:Z 52247
            IArray[Single] _7Append;// 4:Array3->6:Append 52242
            Vector3 _8BoxMax;// 9:BoxExtent-ext->1:BoxMax 52275
            Vector3 _9BoxMin;// 9:BoxExtent-ext->2:BoxMin 52276
            Vector3 _10Subtract;// 9:BoxExtent-ext->3:Subtract 52274
            Single _11X;// 4:VectorAsArray->1:X 52255
            IArray[Single] _12Unit;// 4:Array3->2:Unit 52254
            Single _13Y;// 4:VectorAsArray->2:Y 52256
            IArray[Single] _14Append;// 4:Array3->3:Append 52253
            Single _15Z;// 4:VectorAsArray->3:Z 52257
            IArray[Single] _16Append;// 4:Array3->6:Append 52252
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 52237
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 52228
            Single _19At;// 7:VectorFromArray-ext->1:At 52227
            Int32 _20One;// 6:PlusOne->1:One 52232
            Int32 _21Add;// 6:PlusOne->0:Add 52231
            Single _22At;// 7:VectorFromArray-ext->2:At 52229
            Int32 _23One;// 7:PlusOne->1:One 52236
            Int32 _24Add;// 7:PlusOne->0:Add 52235
            Single _25At;// 7:VectorFromArray-ext->3:At 52233
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 52226
            Single _27X;// 2:VectorAsArray-ext->1:X 52220
            IArray[Single] _28Unit;// 4:Array3-ext->2:Unit 52219
            Single _29Y;// 2:VectorAsArray-ext->2:Y 52221
            IArray[Single] _30Append;// 4:Array3-ext->3:Append 52218
            Single _31Z;// 2:VectorAsArray-ext->3:Z 52222
            IArray[Single] _32Append;// 4:Array3-ext->6:Append 52217
            Single _33At;// 10:VectorElement-ext->3:At 52212
            Single _42Pass-through: Single;// 0:Pass-through: Single 52163
            Single _43FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 52169
            Boolean _44LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 52168
            Single _45Abs;// 13:FloatApplyBias-ext->66:Abs 52172
            Single _46FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 52177
            Single _47FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 52180
            Single _48Add;// 13:FloatApplyBias-ext->94:Add 52179
            Single _49Constant;// 13:FloatApplyBias-ext->0:Constant 52181
            Single _50Multiply;// 13:FloatApplyBias-ext->80:Multiply 52178
            Single _51Subtract;// 13:FloatApplyBias-ext->83:Subtract 52176
            Single _52Constant;// 13:FloatApplyBias-ext->0:Constant 52182
            Single _53Constant;// 13:FloatApplyBias-ext->0:Constant 52183
            Single _54ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 52175
            Single _55LogN;// 13:FloatApplyBias-ext->99:LogN 52174
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 52185
            Single _57LogN;// 13:FloatApplyBias-ext->19:LogN 52184
            Single _58Divide;// 13:FloatApplyBias-ext->102:Divide 52173
            Single _59Pow;// 13:FloatApplyBias-ext->20:Pow 52171
            Boolean _71True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 52206
            Single _82Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 52204
            Single _83Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 52205
            Single _84Divide;// 7:FloatRescaleToLimit-ext->10:Divide 52203
            Single _86Pass-through: Single;// 0:Pass-through: Single 52155
            Single _87Constant;// 3:FloatSubtractFromOne-ext->0:Constant 52161
            Single _88Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 52160
            Single _89Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 52162
            Single _90Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 52158
            Single _91Add;// 23:FloatApplyCurvature-ext->6:Add 52157
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 52267
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 52268
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 52266
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 52263
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 52270
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 52269
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Unit = Unit(_27X);
            _29Y = Y(_26Vector3);
            _30Append = Append(_28Unit, _29Y);
            _31Z = Z(_26Vector3);
            _32Append = Append(_30Append, _31Z);
            _33At = At(_32Append, axis);
            _42Pass-through: Single = if (applyLimits)
              {
                Boolean _34True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 52206
                Single _35Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 52204
                Single _36Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 52205
                Single _37Divide;// 7:FloatRescaleToLimit-ext->10:Divide 52203
                _34True = True();
                _35Subtract = Subtract(_33At, _3Divide);
                _36Subtract = Subtract(_5Divide, _3Divide);
                _37Divide = Divide(_35Subtract, _36Subtract);
                if (_34True)
                  {
                    Single _38Constant;// 9:ClampFloatToOne->0:Constant 52200
                    Single _39Constant;// 9:ClampFloatToOne->0:Constant 52202
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 52201
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 52199
                    _38Constant = 1;
                    _39Constant = 0;
                    _40GreaterFloat = GreaterFloat(_39Constant, _37Divide);
                    _41LesserFloat = LesserFloat(_38Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    _37Divide;
                    };
                }else
              {
                _33At;
                };
            _43FloatZero = FloatZero();
            _44LessThan = LessThan(_42Pass-through: Single, _43FloatZero);
            _45Abs = Abs(_42Pass-through: Single);
            _46FloatOne = FloatOne();
            _47FloatOne = FloatOne();
            _48Add = Add(_7Divide, _47FloatOne);
            _49Constant = 0.5;
            _50Multiply = Multiply(_48Add, _49Constant);
            _51Subtract = Subtract(_46FloatOne, _50Multiply);
            _52Constant = 1E-05;
            _53Constant = 0.99999;
            _54ClampFloat = ClampFloat(_51Subtract, _52Constant, _53Constant);
            _55LogN = LogN(_54ClampFloat);
            _56Constant = 0.5;
            _57LogN = LogN(_56Constant);
            _58Divide = Divide(_55LogN, _57LogN);
            _59Pow = Pow(_45Abs, _58Divide);
            _71True = True();
            _82Subtract = Subtract(_33At, _3Divide);
            _83Subtract = Subtract(_5Divide, _3Divide);
            _84Divide = Divide(_82Subtract, _83Subtract);
            _86Pass-through: Single = if (_44LessThan)
              {
                Single _85NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 52170
                _85NegativeFloat = NegativeFloat(_59Pow);
                _85NegativeFloat;
                }else
              {
                _59Pow;
                };
            _87Constant = 1;
            _88Subtract = Subtract(_87Constant, _86Pass-through: Single);
            _89Multiply = Multiply(_86Pass-through: Single, _8FloatZero);
            _90Multiply = Multiply(_88Subtract, _89Multiply);
            _91Add = Add(_86Pass-through: Single, _90Multiply);
            _91Add;
            };
        _10Constant = 0;
        _11Vector3 = Vector3(_10Constant, _10Constant, _10Constant);
        _12Constant = 0;
        _13Vector3 = Vector3(_12Constant, _12Constant, _12Constant);
        _14Constant = 0;
        _15Vector3 = Vector3(_14Constant, _14Constant, _14Constant);
        _16Constant = 0;
        _17Vector3 = Vector3(_16Constant, _16Constant, _16Constant);
        _18X = X(_17Vector3);
        _19Y = Y(_17Vector3);
        _20Vector3 = Vector3(_18X, _19Y, amount);
        _21Constant = 1;
        _22Vector3 = Vector3(_21Constant, _21Constant, _21Constant);
        _23Constant = 1;
        _24Vector3 = Vector3(_23Constant, _23Constant, _23Constant);
        _25Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:TransformVertices-ext->5:Apply1 52148
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 52112
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 52106
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 52146
            Single _4X;// 1:VectorAsArray->1:X 52142
            IArray[Single] _5Unit;// 4:Array3->2:Unit 52141
            Single _6Y;// 1:VectorAsArray->2:Y 52143
            IArray[Single] _7Append;// 4:Array3->3:Append 52140
            Single _8Z;// 1:VectorAsArray->3:Z 52144
            IArray[Single] _9Append;// 4:Array3->6:Append 52139
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 52121
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 52134
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 52125
            Single _13At;// 3:VectorFromArray-ext->1:At 52124
            Int32 _14One;// 6:PlusOne->1:One 52129
            Int32 _15Add;// 6:PlusOne->0:Add 52128
            Single _16At;// 3:VectorFromArray-ext->2:At 52126
            Int32 _17One;// 7:PlusOne->1:One 52133
            Int32 _18Add;// 7:PlusOne->0:Add 52132
            Single _19At;// 3:VectorFromArray-ext->3:At 52130
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 52123
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 52116
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 52117
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 52118
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 52115
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 52107
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 52105
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 52147
            Single _28Constant;// 8:Origin->0:Constant 52111
            Vector3 _29Vector3;// 8:Origin->1:Vector3 52110
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 52109
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 52104
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 52097
            Vector3 _33Transform;// 0:TransformVertices-ext->4:Transform 52088
            _0Apply1 = Apply1(_9Pass-through: function1, x0);
            _1Lerp = Lerp(_11Vector3, _13Vector3, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_15Vector3, _20Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 52145
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_22Vector3, _24Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _32Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _26IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 52314
            _26IsValidNode = IsValidNode(gizmo node);
            if (_26IsValidNode)
              {
                Matrix _27ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 52318
                Matrix _28InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 52319
                Matrix _29Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 52317
                _27ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _28InvertMatrix = InvertMatrix(modifierTransform);
                _29Multiply = Multiply(_27ObjectTransformBeforeWSM, _28InvertMatrix);
                _29Multiply;
                }else
              {
                Matrix _30MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 52320
                _30MatrixIdentity = MatrixIdentity();
                _30MatrixIdentity;
                };
            }else
          {
            Matrix _31MatrixIdentity;// 5:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 52321
            _31MatrixIdentity = MatrixIdentity();
            _31MatrixIdentity;
            };
        _33InvertMatrix = InvertMatrix(_32Pass-through: Matrix);
        _34ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:DeformVertices-ext->11:Transform 52085
            Vector3 _1Apply1;// 0:DeformVertices-ext->8:Apply1 52084
            Vector3 _2Transform;// 0:DeformVertices-ext->9:Transform 52083
            _0Transform = Transform(x0, _33InvertMatrix);
            _1Apply1 = Apply1(_25Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _32Pass-through: Matrix);
            _2Transform;
            });
        _35Zero = Zero();
        _36PerVertexData = PerVertexData(mesh, _35Zero);
        _37Combine3 = Combine3(_0MeshVertices, _34ParallelMap, _36PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 52075
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _38SetMeshVertices = SetMeshVertices(mesh, _37Combine3);
        _38SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 0:DeformVertices-ext->4:MeshVertices 52082
        Single _1Constant;// 22:DivideBy100-ext->0:Constant 52296
        Single _2Divide;// 22:DivideBy100-ext->2:Divide 52295
        Single _3Constant;// 46:DivideBy100-ext->0:Constant 52300
        Single _4Divide;// 46:DivideBy100-ext->2:Divide 52299
        Single _5Constant;// 17:DivideBy100Float->0:Constant 52304
        Single _6Divide;// 17:DivideBy100Float->1:Divide 52303
        Single _7FloatZero;// 16:Twist-ext->10:FloatZero 52277
        Func[Vector3, Single] _8Pass-through: function1;// 0:Pass-through: function1 52051
        Single _9Constant;// 15:Origin->0:Constant 52150
        Vector3 _10Vector3;// 15:Origin->1:Vector3 52149
        Single _11Constant;// 12:Origin->0:Constant 52279
        Vector3 _12Vector3;// 12:Origin->1:Vector3 52278
        Single _13Constant;// 16:Origin->0:Constant 52152
        Vector3 _14Vector3;// 16:Origin->1:Vector3 52151
        Single _15Constant;// 0:Origin->0:Constant 52287
        Vector3 _16Vector3;// 0:Origin->1:Vector3 52286
        Single _17X;// 1:SetZ->4:X 52284
        Single _18Y;// 1:SetZ->5:Y 52285
        Vector3 _19Vector3;// 1:SetZ->2:Vector3 52283
        Single _20Constant;// 17:OnesVector-ext->0:Constant 52154
        Vector3 _21Vector3;// 17:OnesVector-ext->2:Vector3 52153
        Single _22Constant;// 14:OnesVector-ext->0:Constant 52289
        Vector3 _23Vector3;// 14:OnesVector-ext->2:Vector3 52288
        Func[Vector3, Vector3] _24Pass-through: function1;// 0:Pass-through: function1 52057
        Matrix _31Pass-through: Matrix;// 0:Pass-through: Matrix 52037
        Matrix _32InvertMatrix;// 0:DeformVertices-ext->7:InvertMatrix 52087
        IArray[Vector3] _33ParallelMap;// 0:DeformVertices-ext->5:ParallelMap 52081
        TriMesh _34SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 52080
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 100;
        _2Divide = Divide(lower, _1Constant);
        _3Constant = 100;
        _4Divide = Divide(upper, _3Constant);
        _5Constant = 100;
        _6Divide = Divide(bias, _5Constant);
        _7FloatZero = FloatZero();
        _8Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 52272
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 52271
            Single _2X;// 2:VectorAsArray->1:X 52245
            IArray[Single] _3Unit;// 4:Array3->2:Unit 52244
            Single _4Y;// 2:VectorAsArray->2:Y 52246
            IArray[Single] _5Append;// 4:Array3->3:Append 52243
            Single _6Z;// 2:VectorAsArray->3:Z 52247
            IArray[Single] _7Append;// 4:Array3->6:Append 52242
            Vector3 _8BoxMax;// 9:BoxExtent-ext->1:BoxMax 52275
            Vector3 _9BoxMin;// 9:BoxExtent-ext->2:BoxMin 52276
            Vector3 _10Subtract;// 9:BoxExtent-ext->3:Subtract 52274
            Single _11X;// 4:VectorAsArray->1:X 52255
            IArray[Single] _12Unit;// 4:Array3->2:Unit 52254
            Single _13Y;// 4:VectorAsArray->2:Y 52256
            IArray[Single] _14Append;// 4:Array3->3:Append 52253
            Single _15Z;// 4:VectorAsArray->3:Z 52257
            IArray[Single] _16Append;// 4:Array3->6:Append 52252
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 52237
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 52228
            Single _19At;// 7:VectorFromArray-ext->1:At 52227
            Int32 _20One;// 6:PlusOne->1:One 52232
            Int32 _21Add;// 6:PlusOne->0:Add 52231
            Single _22At;// 7:VectorFromArray-ext->2:At 52229
            Int32 _23One;// 7:PlusOne->1:One 52236
            Int32 _24Add;// 7:PlusOne->0:Add 52235
            Single _25At;// 7:VectorFromArray-ext->3:At 52233
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 52226
            Single _27X;// 2:VectorAsArray-ext->1:X 52220
            Single _28Y;// 2:VectorAsArray-ext->2:Y 52221
            Single _29Z;// 2:VectorAsArray-ext->3:Z 52222
            Single _49Pass-through: Single;// 0:Pass-through: Single 52163
            Single _50FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 52169
            Boolean _51LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 52168
            Single _52Abs;// 13:FloatApplyBias-ext->66:Abs 52172
            Single _53FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 52177
            Single _54FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 52180
            Single _55Add;// 13:FloatApplyBias-ext->94:Add 52179
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 52181
            Single _57Multiply;// 13:FloatApplyBias-ext->80:Multiply 52178
            Single _58Subtract;// 13:FloatApplyBias-ext->83:Subtract 52176
            Single _59Constant;// 13:FloatApplyBias-ext->0:Constant 52182
            Single _60Constant;// 13:FloatApplyBias-ext->0:Constant 52183
            Single _61ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 52175
            Single _62LogN;// 13:FloatApplyBias-ext->99:LogN 52174
            Single _63Constant;// 13:FloatApplyBias-ext->0:Constant 52185
            Single _64LogN;// 13:FloatApplyBias-ext->19:LogN 52184
            Single _65Divide;// 13:FloatApplyBias-ext->102:Divide 52173
            Single _66Pow;// 13:FloatApplyBias-ext->20:Pow 52171
            Boolean _86True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 52206
            IArray[Single] _87Unit;// 4:Array3-ext->2:Unit 52219
            IArray[Single] _88Append;// 4:Array3-ext->3:Append 52218
            IArray[Single] _89Append;// 4:Array3-ext->6:Append 52217
            Single _90At;// 10:VectorElement-ext->3:At 52212
            Single _101Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 52204
            Single _102Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 52205
            Single _103Divide;// 7:FloatRescaleToLimit-ext->10:Divide 52203
            Single _105Pass-through: Single;// 0:Pass-through: Single 52155
            Single _106Constant;// 3:FloatSubtractFromOne-ext->0:Constant 52161
            Single _107Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 52160
            Single _108Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 52162
            Single _109Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 52158
            Single _110Add;// 23:FloatApplyCurvature-ext->6:Add 52157
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 52267
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 52268
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 52266
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 52263
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 52270
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 52269
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Y = Y(_26Vector3);
            _29Z = Z(_26Vector3);
            _49Pass-through: Single = if (applyLimits)
              {
                Boolean _30True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 52206
                IArray[Single] _31Unit;// 4:Array3-ext->2:Unit 52219
                IArray[Single] _32Append;// 4:Array3-ext->3:Append 52218
                IArray[Single] _33Append;// 4:Array3-ext->6:Append 52217
                Single _34At;// 10:VectorElement-ext->3:At 52212
                _30True = True();
                _31Unit = Unit(_27X);
                _32Append = Append(_31Unit, _28Y);
                _33Append = Append(_32Append, _29Z);
                _34At = At(_33Append, axis);
                if (_30True)
                  {
                    Single _35Constant;// 9:ClampFloatToOne->0:Constant 52200
                    Single _36Constant;// 9:ClampFloatToOne->0:Constant 52202
                    Single _37Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 52204
                    Single _38Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 52205
                    Single _39Divide;// 7:FloatRescaleToLimit-ext->10:Divide 52203
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 52201
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 52199
                    _35Constant = 1;
                    _36Constant = 0;
                    _37Subtract = Subtract(_34At, _2Divide);
                    _38Subtract = Subtract(_4Divide, _2Divide);
                    _39Divide = Divide(_37Subtract, _38Subtract);
                    _40GreaterFloat = GreaterFloat(_36Constant, _39Divide);
                    _41LesserFloat = LesserFloat(_35Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    Single _42Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 52204
                    Single _43Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 52205
                    Single _44Divide;// 7:FloatRescaleToLimit-ext->10:Divide 52203
                    _42Subtract = Subtract(_34At, _2Divide);
                    _43Subtract = Subtract(_4Divide, _2Divide);
                    _44Divide = Divide(_42Subtract, _43Subtract);
                    _44Divide;
                    };
                }else
              {
                IArray[Single] _45Unit;// 4:Array3-ext->2:Unit 52219
                IArray[Single] _46Append;// 4:Array3-ext->3:Append 52218
                IArray[Single] _47Append;// 4:Array3-ext->6:Append 52217
                Single _48At;// 10:VectorElement-ext->3:At 52212
                _45Unit = Unit(_27X);
                _46Append = Append(_45Unit, _28Y);
                _47Append = Append(_46Append, _29Z);
                _48At = At(_47Append, axis);
                _48At;
                };
            _50FloatZero = FloatZero();
            _51LessThan = LessThan(_49Pass-through: Single, _50FloatZero);
            _52Abs = Abs(_49Pass-through: Single);
            _53FloatOne = FloatOne();
            _54FloatOne = FloatOne();
            _55Add = Add(_6Divide, _54FloatOne);
            _56Constant = 0.5;
            _57Multiply = Multiply(_55Add, _56Constant);
            _58Subtract = Subtract(_53FloatOne, _57Multiply);
            _59Constant = 1E-05;
            _60Constant = 0.99999;
            _61ClampFloat = ClampFloat(_58Subtract, _59Constant, _60Constant);
            _62LogN = LogN(_61ClampFloat);
            _63Constant = 0.5;
            _64LogN = LogN(_63Constant);
            _65Divide = Divide(_62LogN, _64LogN);
            _66Pow = Pow(_52Abs, _65Divide);
            _86True = True();
            _87Unit = Unit(_27X);
            _88Append = Append(_87Unit, _28Y);
            _89Append = Append(_88Append, _29Z);
            _90At = At(_89Append, axis);
            _101Subtract = Subtract(_90At, _2Divide);
            _102Subtract = Subtract(_4Divide, _2Divide);
            _103Divide = Divide(_101Subtract, _102Subtract);
            _105Pass-through: Single = if (_51LessThan)
              {
                Single _104NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 52170
                _104NegativeFloat = NegativeFloat(_66Pow);
                _104NegativeFloat;
                }else
              {
                _66Pow;
                };
            _106Constant = 1;
            _107Subtract = Subtract(_106Constant, _105Pass-through: Single);
            _108Multiply = Multiply(_105Pass-through: Single, _7FloatZero);
            _109Multiply = Multiply(_107Subtract, _108Multiply);
            _110Add = Add(_105Pass-through: Single, _109Multiply);
            _110Add;
            };
        _9Constant = 0;
        _10Vector3 = Vector3(_9Constant, _9Constant, _9Constant);
        _11Constant = 0;
        _12Vector3 = Vector3(_11Constant, _11Constant, _11Constant);
        _13Constant = 0;
        _14Vector3 = Vector3(_13Constant, _13Constant, _13Constant);
        _15Constant = 0;
        _16Vector3 = Vector3(_15Constant, _15Constant, _15Constant);
        _17X = X(_16Vector3);
        _18Y = Y(_16Vector3);
        _19Vector3 = Vector3(_17X, _18Y, amount);
        _20Constant = 1;
        _21Vector3 = Vector3(_20Constant, _20Constant, _20Constant);
        _22Constant = 1;
        _23Vector3 = Vector3(_22Constant, _22Constant, _22Constant);
        _24Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:TransformVertices-ext->5:Apply1 52148
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 52112
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 52106
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 52146
            Single _4X;// 1:VectorAsArray->1:X 52142
            IArray[Single] _5Unit;// 4:Array3->2:Unit 52141
            Single _6Y;// 1:VectorAsArray->2:Y 52143
            IArray[Single] _7Append;// 4:Array3->3:Append 52140
            Single _8Z;// 1:VectorAsArray->3:Z 52144
            IArray[Single] _9Append;// 4:Array3->6:Append 52139
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 52121
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 52134
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 52125
            Single _13At;// 3:VectorFromArray-ext->1:At 52124
            Int32 _14One;// 6:PlusOne->1:One 52129
            Int32 _15Add;// 6:PlusOne->0:Add 52128
            Single _16At;// 3:VectorFromArray-ext->2:At 52126
            Int32 _17One;// 7:PlusOne->1:One 52133
            Int32 _18Add;// 7:PlusOne->0:Add 52132
            Single _19At;// 3:VectorFromArray-ext->3:At 52130
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 52123
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 52116
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 52117
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 52118
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 52115
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 52107
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 52105
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 52147
            Single _28Constant;// 8:Origin->0:Constant 52111
            Vector3 _29Vector3;// 8:Origin->1:Vector3 52110
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 52109
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 52104
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 52097
            Vector3 _33Transform;// 0:TransformVertices-ext->4:Transform 52088
            _0Apply1 = Apply1(_8Pass-through: function1, x0);
            _1Lerp = Lerp(_10Vector3, _12Vector3, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_14Vector3, _19Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 52145
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_21Vector3, _23Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _31Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _25IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 52314
            _25IsValidNode = IsValidNode(gizmo node);
            if (_25IsValidNode)
              {
                Matrix _26ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 52318
                Matrix _27InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 52319
                Matrix _28Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 52317
                _26ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _27InvertMatrix = InvertMatrix(modifierTransform);
                _28Multiply = Multiply(_26ObjectTransformBeforeWSM, _27InvertMatrix);
                _28Multiply;
                }else
              {
                Matrix _29MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 52320
                _29MatrixIdentity = MatrixIdentity();
                _29MatrixIdentity;
                };
            }else
          {
            Matrix _30MatrixIdentity;// 5:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 52321
            _30MatrixIdentity = MatrixIdentity();
            _30MatrixIdentity;
            };
        _32InvertMatrix = InvertMatrix(_31Pass-through: Matrix);
        _33ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:DeformVertices-ext->11:Transform 52085
            Vector3 _1Apply1;// 0:DeformVertices-ext->8:Apply1 52084
            Vector3 _2Transform;// 0:DeformVertices-ext->9:Transform 52083
            _0Transform = Transform(x0, _32InvertMatrix);
            _1Apply1 = Apply1(_24Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _31Pass-through: Matrix);
            _2Transform;
            });
        _34SetMeshVertices = SetMeshVertices(mesh, _33ParallelMap);
        _34SetMeshVertices;
        });
    _5IfThen;
    }