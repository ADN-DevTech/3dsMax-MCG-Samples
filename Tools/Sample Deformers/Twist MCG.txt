(InstanceState state, TriMesh mesh, Boolean applyLimits, BoundingBox boundingBox, Int32 axis, Single lower, Single upper, Single bias, Single amount, Boolean use node transform, INode gizmo node, Matrix modifierTransform, Vector3 deformer translation, Vector3 deformer rotation, Vector3 deformer scale) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 87545
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 87547
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 87546
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 87544
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 87543
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 87539
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 87554
        IArray[Vector3] _1MeshVertices;// 0:MeshDeformVertices-ext->4:MeshVertices 87560
        Single _2Constant;// 22:DivideBy100-ext->0:Constant 87774
        Single _3Divide;// 22:DivideBy100-ext->2:Divide 87773
        Single _4Constant;// 46:DivideBy100-ext->0:Constant 87778
        Single _5Divide;// 46:DivideBy100-ext->2:Divide 87777
        Single _6Constant;// 17:DivideBy100Float->0:Constant 87782
        Single _7Divide;// 17:DivideBy100Float->1:Divide 87781
        Single _8FloatZero;// 16:Twist-ext->10:FloatZero 87755
        Func[Vector3, Single] _9Pass-through: function1;// 0:Pass-through: function1 87529
        Single _10Constant;// 15:Origin->0:Constant 87628
        Vector3 _11Vector3;// 15:Origin->1:Vector3 87627
        Single _12Constant;// 12:Origin->0:Constant 87757
        Vector3 _13Vector3;// 12:Origin->1:Vector3 87756
        Single _14Constant;// 16:Origin->0:Constant 87630
        Vector3 _15Vector3;// 16:Origin->1:Vector3 87629
        Single _16Constant;// 0:Origin->0:Constant 87765
        Vector3 _17Vector3;// 0:Origin->1:Vector3 87764
        Single _18X;// 1:SetZ->4:X 87762
        Single _19Y;// 1:SetZ->5:Y 87763
        Vector3 _20Vector3;// 1:SetZ->2:Vector3 87761
        Single _21Constant;// 17:OnesVector-ext->0:Constant 87632
        Vector3 _22Vector3;// 17:OnesVector-ext->2:Vector3 87631
        Single _23Constant;// 14:OnesVector-ext->0:Constant 87767
        Vector3 _24Vector3;// 14:OnesVector-ext->2:Vector3 87766
        Func[Vector3, Vector3] _25Pass-through: function1;// 0:Pass-through: function1 87535
        Matrix _64Pass-through: Matrix;// 0:Pass-through: Matrix 87515
        Matrix _65InvertMatrix;// 0:MeshDeformVertices-ext->7:InvertMatrix 87565
        IArray[Vector3] _66ParallelMap;// 0:MeshDeformVertices-ext->5:ParallelMap 87559
        Int32 _67Zero;// 7:SoftSelection->2:Zero 87557
        IArray[Single] _68PerVertexData;// 7:SoftSelection->3:PerVertexData 87556
        IArray[Vector3] _69Combine3;// 1:LerpVectors-ext->10:Combine3 87552
        TriMesh _70SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 87548
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 100;
        _3Divide = Divide(lower, _2Constant);
        _4Constant = 100;
        _5Divide = Divide(upper, _4Constant);
        _6Constant = 100;
        _7Divide = Divide(bias, _6Constant);
        _8FloatZero = FloatZero();
        _9Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 87750
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 87749
            Single _2X;// 2:VectorAsArray->1:X 87723
            IArray[Single] _3Unit;// 4:Array3->2:Unit 87722
            Single _4Y;// 2:VectorAsArray->2:Y 87724
            IArray[Single] _5Append;// 4:Array3->3:Append 87721
            Single _6Z;// 2:VectorAsArray->3:Z 87725
            IArray[Single] _7Append;// 4:Array3->6:Append 87720
            Vector3 _8BoxMax;// 9:BoundingBoxExtent-ext->1:BoxMax 87753
            Vector3 _9BoxMin;// 9:BoundingBoxExtent-ext->2:BoxMin 87754
            Vector3 _10Subtract;// 9:BoundingBoxExtent-ext->3:Subtract 87752
            Single _11X;// 4:VectorAsArray->1:X 87733
            IArray[Single] _12Unit;// 4:Array3->2:Unit 87732
            Single _13Y;// 4:VectorAsArray->2:Y 87734
            IArray[Single] _14Append;// 4:Array3->3:Append 87731
            Single _15Z;// 4:VectorAsArray->3:Z 87735
            IArray[Single] _16Append;// 4:Array3->6:Append 87730
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 87715
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 87706
            Single _19At;// 7:VectorFromArray-ext->1:At 87705
            Int32 _20One;// 6:PlusOne->1:One 87710
            Int32 _21Add;// 6:PlusOne->0:Add 87709
            Single _22At;// 7:VectorFromArray-ext->2:At 87707
            Int32 _23One;// 7:PlusOne->1:One 87714
            Int32 _24Add;// 7:PlusOne->0:Add 87713
            Single _25At;// 7:VectorFromArray-ext->3:At 87711
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 87704
            Single _27X;// 2:VectorAsArray-ext->1:X 87698
            IArray[Single] _28Unit;// 4:Array3-ext->2:Unit 87697
            Single _29Y;// 2:VectorAsArray-ext->2:Y 87699
            IArray[Single] _30Append;// 4:Array3-ext->3:Append 87696
            Single _31Z;// 2:VectorAsArray-ext->3:Z 87700
            IArray[Single] _32Append;// 4:Array3-ext->6:Append 87695
            Single _33At;// 10:VectorElement-ext->3:At 87690
            Single _42Pass-through: Single;// 0:Pass-through: Single 87641
            Single _43FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 87647
            Boolean _44LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 87646
            Single _45Abs;// 13:FloatApplyBias-ext->66:Abs 87650
            Single _46FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 87655
            Single _47FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 87658
            Single _48Add;// 13:FloatApplyBias-ext->94:Add 87657
            Single _49Constant;// 13:FloatApplyBias-ext->0:Constant 87659
            Single _50Multiply;// 13:FloatApplyBias-ext->80:Multiply 87656
            Single _51Subtract;// 13:FloatApplyBias-ext->83:Subtract 87654
            Single _52Constant;// 13:FloatApplyBias-ext->0:Constant 87660
            Single _53Constant;// 13:FloatApplyBias-ext->0:Constant 87661
            Single _54ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 87653
            Single _55LogN;// 13:FloatApplyBias-ext->99:LogN 87652
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 87663
            Single _57LogN;// 13:FloatApplyBias-ext->19:LogN 87662
            Single _58Divide;// 13:FloatApplyBias-ext->102:Divide 87651
            Single _59Pow;// 13:FloatApplyBias-ext->20:Pow 87649
            Boolean _71True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 87684
            Single _82Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 87682
            Single _83Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 87683
            Single _84Divide;// 7:FloatRescaleToLimit-ext->10:Divide 87681
            Single _86Pass-through: Single;// 0:Pass-through: Single 87633
            Single _87Constant;// 3:FloatSubtractFromOne-ext->0:Constant 87639
            Single _88Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 87638
            Single _89Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 87640
            Single _90Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 87636
            Single _91Add;// 23:FloatApplyCurvature-ext->6:Add 87635
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 87745
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 87746
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 87744
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 87741
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 87748
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 87747
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Unit = Unit(_27X);
            _29Y = Y(_26Vector3);
            _30Append = Append(_28Unit, _29Y);
            _31Z = Z(_26Vector3);
            _32Append = Append(_30Append, _31Z);
            _33At = At(_32Append, axis);
            _42Pass-through: Single = if (applyLimits)
              {
                Boolean _34True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 87684
                Single _35Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 87682
                Single _36Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 87683
                Single _37Divide;// 7:FloatRescaleToLimit-ext->10:Divide 87681
                _34True = True();
                _35Subtract = Subtract(_33At, _3Divide);
                _36Subtract = Subtract(_5Divide, _3Divide);
                _37Divide = Divide(_35Subtract, _36Subtract);
                if (_34True)
                  {
                    Single _38Constant;// 9:ClampFloatToOne->0:Constant 87678
                    Single _39Constant;// 9:ClampFloatToOne->0:Constant 87680
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 87679
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 87677
                    _38Constant = 1;
                    _39Constant = 0;
                    _40GreaterFloat = GreaterFloat(_39Constant, _37Divide);
                    _41LesserFloat = LesserFloat(_38Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    _37Divide;
                    };
                }else
              {
                _33At;
                };
            _43FloatZero = FloatZero();
            _44LessThan = LessThan(_42Pass-through: Single, _43FloatZero);
            _45Abs = Abs(_42Pass-through: Single);
            _46FloatOne = FloatOne();
            _47FloatOne = FloatOne();
            _48Add = Add(_7Divide, _47FloatOne);
            _49Constant = 0.5;
            _50Multiply = Multiply(_48Add, _49Constant);
            _51Subtract = Subtract(_46FloatOne, _50Multiply);
            _52Constant = 1E-05;
            _53Constant = 0.99999;
            _54ClampFloat = ClampFloat(_51Subtract, _52Constant, _53Constant);
            _55LogN = LogN(_54ClampFloat);
            _56Constant = 0.5;
            _57LogN = LogN(_56Constant);
            _58Divide = Divide(_55LogN, _57LogN);
            _59Pow = Pow(_45Abs, _58Divide);
            _71True = True();
            _82Subtract = Subtract(_33At, _3Divide);
            _83Subtract = Subtract(_5Divide, _3Divide);
            _84Divide = Divide(_82Subtract, _83Subtract);
            _86Pass-through: Single = if (_44LessThan)
              {
                Single _85NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 87648
                _85NegativeFloat = NegativeFloat(_59Pow);
                _85NegativeFloat;
                }else
              {
                _59Pow;
                };
            _87Constant = 1;
            _88Subtract = Subtract(_87Constant, _86Pass-through: Single);
            _89Multiply = Multiply(_86Pass-through: Single, _8FloatZero);
            _90Multiply = Multiply(_88Subtract, _89Multiply);
            _91Add = Add(_86Pass-through: Single, _90Multiply);
            _91Add;
            };
        _10Constant = 0;
        _11Vector3 = Vector3(_10Constant, _10Constant, _10Constant);
        _12Constant = 0;
        _13Vector3 = Vector3(_12Constant, _12Constant, _12Constant);
        _14Constant = 0;
        _15Vector3 = Vector3(_14Constant, _14Constant, _14Constant);
        _16Constant = 0;
        _17Vector3 = Vector3(_16Constant, _16Constant, _16Constant);
        _18X = X(_17Vector3);
        _19Y = Y(_17Vector3);
        _20Vector3 = Vector3(_18X, _19Y, amount);
        _21Constant = 1;
        _22Vector3 = Vector3(_21Constant, _21Constant, _21Constant);
        _23Constant = 1;
        _24Vector3 = Vector3(_23Constant, _23Constant, _23Constant);
        _25Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:MeshTransformVertices-ext->5:Apply1 87626
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 87590
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 87584
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 87624
            Single _4X;// 1:VectorAsArray->1:X 87620
            IArray[Single] _5Unit;// 4:Array3->2:Unit 87619
            Single _6Y;// 1:VectorAsArray->2:Y 87621
            IArray[Single] _7Append;// 4:Array3->3:Append 87618
            Single _8Z;// 1:VectorAsArray->3:Z 87622
            IArray[Single] _9Append;// 4:Array3->6:Append 87617
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 87599
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 87612
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 87603
            Single _13At;// 3:VectorFromArray-ext->1:At 87602
            Int32 _14One;// 6:PlusOne->1:One 87607
            Int32 _15Add;// 6:PlusOne->0:Add 87606
            Single _16At;// 3:VectorFromArray-ext->2:At 87604
            Int32 _17One;// 7:PlusOne->1:One 87611
            Int32 _18Add;// 7:PlusOne->0:Add 87610
            Single _19At;// 3:VectorFromArray-ext->3:At 87608
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 87601
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 87594
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 87595
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 87596
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 87593
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 87585
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 87583
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 87625
            Single _28Constant;// 8:Origin->0:Constant 87589
            Vector3 _29Vector3;// 8:Origin->1:Vector3 87588
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 87587
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 87582
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 87575
            Vector3 _33Transform;// 0:MeshTransformVertices-ext->4:Transform 87566
            _0Apply1 = Apply1(_9Pass-through: function1, x0);
            _1Lerp = Lerp(_11Vector3, _13Vector3, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_15Vector3, _20Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 87623
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_22Vector3, _24Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _64Pass-through: Matrix = if (use node transform)
          {
            Boolean _26IsValidNode;// 8:GizmoTransformInLocalSpace->35:IsValidNode 87790
            _26IsValidNode = IsValidNode(gizmo node);
            if (_26IsValidNode)
              {
                Boolean _27IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 87796
                Matrix _30InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 87800
                Matrix _31Multiply;// 32:NodeToLocalTransform->18:Multiply 87793
                _27IsValidNode = IsValidNode(gizmo node);
                _30InvertMatrix = InvertMatrix(modifierTransform);
                _31Multiply = Multiply(if (_27IsValidNode)
                    {
                      Matrix _28WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 87797
                      _28WorldTransform = WorldTransform(gizmo node);
                      _28WorldTransform;
                      }else
                    {
                      Matrix _29MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 87798
                      _29MatrixIdentity = MatrixIdentity();
                      _29MatrixIdentity;
                      }, _30InvertMatrix);
                _31Multiply;
                }else
              {
                Matrix _32MatrixIdentity;// 8:GizmoTransformInLocalSpace->40:MatrixIdentity 87801
                _32MatrixIdentity = MatrixIdentity();
                _32MatrixIdentity;
                };
            }else
          {
            Matrix _33TranslationMatrix;// 11:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 87812
            Single _34X;// 1:VectorAsArray->1:X 87848
            IArray[Single] _35Unit;// 4:Array3->2:Unit 87847
            Single _36Y;// 1:VectorAsArray->2:Y 87849
            IArray[Single] _37Append;// 4:Array3->3:Append 87846
            Single _38Z;// 1:VectorAsArray->3:Z 87850
            IArray[Single] _39Append;// 4:Array3->6:Append 87845
            Func[Single, Single] _40Pass-through: function1;// 0:Pass-through: function1 87827
            IArray[Single] _41Map;// 1:VectorMapComponents-ext->2:Map 87840
            Int32 _42Zero;// 3:VectorFromArray-ext->5:Zero 87831
            Single _43At;// 3:VectorFromArray-ext->1:At 87830
            Int32 _44One;// 6:PlusOne->1:One 87835
            Int32 _45Add;// 6:PlusOne->0:Add 87834
            Single _46At;// 3:VectorFromArray-ext->2:At 87832
            Int32 _47One;// 7:PlusOne->1:One 87839
            Int32 _48Add;// 7:PlusOne->0:Add 87838
            Single _49At;// 3:VectorFromArray-ext->3:At 87836
            Vector3 _50Vector3;// 3:VectorFromArray-ext->4:Vector3 87829
            Single _51Y;// 2:QuaternionFromVector3-ext->7:Y 87822
            Single _52X;// 2:QuaternionFromVector3-ext->6:X 87823
            Single _53Z;// 2:QuaternionFromVector3-ext->8:Z 87824
            Quaternion _54QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 87821
            Matrix _55MatrixFromQuaternion;// 11:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 87813
            Matrix _56Multiply;// 6:Multiply3-ext->3:Multiply 87811
            Single _57Constant;// 45:OnesVector-ext->0:Constant 87856
            Vector3 _58Vector3;// 45:OnesVector-ext->2:Vector3 87855
            Vector3 _59Add;// 44:Add 87853
            Single _60Constant;// 8:Origin->0:Constant 87817
            Vector3 _61Vector3;// 8:Origin->1:Vector3 87816
            Matrix _62ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 87815
            Matrix _63Multiply;// 6:Multiply3-ext->4:Multiply 87810
            _33TranslationMatrix = TranslationMatrix(deformer translation);
            _34X = X(deformer rotation);
            _35Unit = Unit(_34X);
            _36Y = Y(deformer rotation);
            _37Append = Append(_35Unit, _36Y);
            _38Z = Z(deformer rotation);
            _39Append = Append(_37Append, _38Z);
            _40Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 87851
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _41Map = Map(_39Append, _40Pass-through: function1);
            _42Zero = Zero();
            _43At = At(_41Map, _42Zero);
            _44One = One();
            _45Add = Add(_42Zero, _44One);
            _46At = At(_41Map, _45Add);
            _47One = One();
            _48Add = Add(_45Add, _47One);
            _49At = At(_41Map, _48Add);
            _50Vector3 = Vector3(_43At, _46At, _49At);
            _51Y = Y(_50Vector3);
            _52X = X(_50Vector3);
            _53Z = Z(_50Vector3);
            _54QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_51Y, _52X, _53Z);
            _55MatrixFromQuaternion = MatrixFromQuaternion(_54QuaternionFromYawPitchRoll);
            _56Multiply = Multiply(_33TranslationMatrix, _55MatrixFromQuaternion);
            _57Constant = 1;
            _58Vector3 = Vector3(_57Constant, _57Constant, _57Constant);
            _59Add = Add(deformer scale, _58Vector3);
            _60Constant = 0;
            _61Vector3 = Vector3(_60Constant, _60Constant, _60Constant);
            _62ScalingTranslationMatrix = ScalingTranslationMatrix(_59Add, _61Vector3);
            _63Multiply = Multiply(_56Multiply, _62ScalingTranslationMatrix);
            _63Multiply;
            };
        _65InvertMatrix = InvertMatrix(_64Pass-through: Matrix);
        _66ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:MeshDeformVertices-ext->11:Transform 87563
            Vector3 _1Apply1;// 0:MeshDeformVertices-ext->8:Apply1 87562
            Vector3 _2Transform;// 0:MeshDeformVertices-ext->9:Transform 87561
            _0Transform = Transform(x0, _65InvertMatrix);
            _1Apply1 = Apply1(_25Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _64Pass-through: Matrix);
            _2Transform;
            });
        _67Zero = Zero();
        _68PerVertexData = PerVertexData(mesh, _67Zero);
        _69Combine3 = Combine3(_0MeshVertices, _66ParallelMap, _68PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 87553
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _70SetMeshVertices = SetMeshVertices(mesh, _69Combine3);
        _70SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 0:MeshDeformVertices-ext->4:MeshVertices 87560
        Single _1Constant;// 22:DivideBy100-ext->0:Constant 87774
        Single _2Divide;// 22:DivideBy100-ext->2:Divide 87773
        Single _3Constant;// 46:DivideBy100-ext->0:Constant 87778
        Single _4Divide;// 46:DivideBy100-ext->2:Divide 87777
        Single _5Constant;// 17:DivideBy100Float->0:Constant 87782
        Single _6Divide;// 17:DivideBy100Float->1:Divide 87781
        Single _7FloatZero;// 16:Twist-ext->10:FloatZero 87755
        Func[Vector3, Single] _8Pass-through: function1;// 0:Pass-through: function1 87529
        Single _9Constant;// 15:Origin->0:Constant 87628
        Vector3 _10Vector3;// 15:Origin->1:Vector3 87627
        Single _11Constant;// 12:Origin->0:Constant 87757
        Vector3 _12Vector3;// 12:Origin->1:Vector3 87756
        Single _13Constant;// 16:Origin->0:Constant 87630
        Vector3 _14Vector3;// 16:Origin->1:Vector3 87629
        Single _15Constant;// 0:Origin->0:Constant 87765
        Vector3 _16Vector3;// 0:Origin->1:Vector3 87764
        Single _17X;// 1:SetZ->4:X 87762
        Single _18Y;// 1:SetZ->5:Y 87763
        Vector3 _19Vector3;// 1:SetZ->2:Vector3 87761
        Single _20Constant;// 17:OnesVector-ext->0:Constant 87632
        Vector3 _21Vector3;// 17:OnesVector-ext->2:Vector3 87631
        Single _22Constant;// 14:OnesVector-ext->0:Constant 87767
        Vector3 _23Vector3;// 14:OnesVector-ext->2:Vector3 87766
        Func[Vector3, Vector3] _24Pass-through: function1;// 0:Pass-through: function1 87535
        Matrix _63Pass-through: Matrix;// 0:Pass-through: Matrix 87515
        Matrix _64InvertMatrix;// 0:MeshDeformVertices-ext->7:InvertMatrix 87565
        IArray[Vector3] _65ParallelMap;// 0:MeshDeformVertices-ext->5:ParallelMap 87559
        TriMesh _66SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 87558
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 100;
        _2Divide = Divide(lower, _1Constant);
        _3Constant = 100;
        _4Divide = Divide(upper, _3Constant);
        _5Constant = 100;
        _6Divide = Divide(bias, _5Constant);
        _7FloatZero = FloatZero();
        _8Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 87750
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 87749
            Single _2X;// 2:VectorAsArray->1:X 87723
            IArray[Single] _3Unit;// 4:Array3->2:Unit 87722
            Single _4Y;// 2:VectorAsArray->2:Y 87724
            IArray[Single] _5Append;// 4:Array3->3:Append 87721
            Single _6Z;// 2:VectorAsArray->3:Z 87725
            IArray[Single] _7Append;// 4:Array3->6:Append 87720
            Vector3 _8BoxMax;// 9:BoundingBoxExtent-ext->1:BoxMax 87753
            Vector3 _9BoxMin;// 9:BoundingBoxExtent-ext->2:BoxMin 87754
            Vector3 _10Subtract;// 9:BoundingBoxExtent-ext->3:Subtract 87752
            Single _11X;// 4:VectorAsArray->1:X 87733
            IArray[Single] _12Unit;// 4:Array3->2:Unit 87732
            Single _13Y;// 4:VectorAsArray->2:Y 87734
            IArray[Single] _14Append;// 4:Array3->3:Append 87731
            Single _15Z;// 4:VectorAsArray->3:Z 87735
            IArray[Single] _16Append;// 4:Array3->6:Append 87730
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 87715
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 87706
            Single _19At;// 7:VectorFromArray-ext->1:At 87705
            Int32 _20One;// 6:PlusOne->1:One 87710
            Int32 _21Add;// 6:PlusOne->0:Add 87709
            Single _22At;// 7:VectorFromArray-ext->2:At 87707
            Int32 _23One;// 7:PlusOne->1:One 87714
            Int32 _24Add;// 7:PlusOne->0:Add 87713
            Single _25At;// 7:VectorFromArray-ext->3:At 87711
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 87704
            Single _27X;// 2:VectorAsArray-ext->1:X 87698
            Single _28Y;// 2:VectorAsArray-ext->2:Y 87699
            Single _29Z;// 2:VectorAsArray-ext->3:Z 87700
            Single _49Pass-through: Single;// 0:Pass-through: Single 87641
            Single _50FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 87647
            Boolean _51LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 87646
            Single _52Abs;// 13:FloatApplyBias-ext->66:Abs 87650
            Single _53FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 87655
            Single _54FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 87658
            Single _55Add;// 13:FloatApplyBias-ext->94:Add 87657
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 87659
            Single _57Multiply;// 13:FloatApplyBias-ext->80:Multiply 87656
            Single _58Subtract;// 13:FloatApplyBias-ext->83:Subtract 87654
            Single _59Constant;// 13:FloatApplyBias-ext->0:Constant 87660
            Single _60Constant;// 13:FloatApplyBias-ext->0:Constant 87661
            Single _61ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 87653
            Single _62LogN;// 13:FloatApplyBias-ext->99:LogN 87652
            Single _63Constant;// 13:FloatApplyBias-ext->0:Constant 87663
            Single _64LogN;// 13:FloatApplyBias-ext->19:LogN 87662
            Single _65Divide;// 13:FloatApplyBias-ext->102:Divide 87651
            Single _66Pow;// 13:FloatApplyBias-ext->20:Pow 87649
            Boolean _86True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 87684
            IArray[Single] _87Unit;// 4:Array3-ext->2:Unit 87697
            IArray[Single] _88Append;// 4:Array3-ext->3:Append 87696
            IArray[Single] _89Append;// 4:Array3-ext->6:Append 87695
            Single _90At;// 10:VectorElement-ext->3:At 87690
            Single _101Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 87682
            Single _102Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 87683
            Single _103Divide;// 7:FloatRescaleToLimit-ext->10:Divide 87681
            Single _105Pass-through: Single;// 0:Pass-through: Single 87633
            Single _106Constant;// 3:FloatSubtractFromOne-ext->0:Constant 87639
            Single _107Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 87638
            Single _108Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 87640
            Single _109Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 87636
            Single _110Add;// 23:FloatApplyCurvature-ext->6:Add 87635
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 87745
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 87746
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 87744
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 87741
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 87748
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 87747
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Y = Y(_26Vector3);
            _29Z = Z(_26Vector3);
            _49Pass-through: Single = if (applyLimits)
              {
                Boolean _30True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 87684
                IArray[Single] _31Unit;// 4:Array3-ext->2:Unit 87697
                IArray[Single] _32Append;// 4:Array3-ext->3:Append 87696
                IArray[Single] _33Append;// 4:Array3-ext->6:Append 87695
                Single _34At;// 10:VectorElement-ext->3:At 87690
                _30True = True();
                _31Unit = Unit(_27X);
                _32Append = Append(_31Unit, _28Y);
                _33Append = Append(_32Append, _29Z);
                _34At = At(_33Append, axis);
                if (_30True)
                  {
                    Single _35Constant;// 9:ClampFloatToOne->0:Constant 87678
                    Single _36Constant;// 9:ClampFloatToOne->0:Constant 87680
                    Single _37Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 87682
                    Single _38Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 87683
                    Single _39Divide;// 7:FloatRescaleToLimit-ext->10:Divide 87681
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 87679
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 87677
                    _35Constant = 1;
                    _36Constant = 0;
                    _37Subtract = Subtract(_34At, _2Divide);
                    _38Subtract = Subtract(_4Divide, _2Divide);
                    _39Divide = Divide(_37Subtract, _38Subtract);
                    _40GreaterFloat = GreaterFloat(_36Constant, _39Divide);
                    _41LesserFloat = LesserFloat(_35Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    Single _42Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 87682
                    Single _43Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 87683
                    Single _44Divide;// 7:FloatRescaleToLimit-ext->10:Divide 87681
                    _42Subtract = Subtract(_34At, _2Divide);
                    _43Subtract = Subtract(_4Divide, _2Divide);
                    _44Divide = Divide(_42Subtract, _43Subtract);
                    _44Divide;
                    };
                }else
              {
                IArray[Single] _45Unit;// 4:Array3-ext->2:Unit 87697
                IArray[Single] _46Append;// 4:Array3-ext->3:Append 87696
                IArray[Single] _47Append;// 4:Array3-ext->6:Append 87695
                Single _48At;// 10:VectorElement-ext->3:At 87690
                _45Unit = Unit(_27X);
                _46Append = Append(_45Unit, _28Y);
                _47Append = Append(_46Append, _29Z);
                _48At = At(_47Append, axis);
                _48At;
                };
            _50FloatZero = FloatZero();
            _51LessThan = LessThan(_49Pass-through: Single, _50FloatZero);
            _52Abs = Abs(_49Pass-through: Single);
            _53FloatOne = FloatOne();
            _54FloatOne = FloatOne();
            _55Add = Add(_6Divide, _54FloatOne);
            _56Constant = 0.5;
            _57Multiply = Multiply(_55Add, _56Constant);
            _58Subtract = Subtract(_53FloatOne, _57Multiply);
            _59Constant = 1E-05;
            _60Constant = 0.99999;
            _61ClampFloat = ClampFloat(_58Subtract, _59Constant, _60Constant);
            _62LogN = LogN(_61ClampFloat);
            _63Constant = 0.5;
            _64LogN = LogN(_63Constant);
            _65Divide = Divide(_62LogN, _64LogN);
            _66Pow = Pow(_52Abs, _65Divide);
            _86True = True();
            _87Unit = Unit(_27X);
            _88Append = Append(_87Unit, _28Y);
            _89Append = Append(_88Append, _29Z);
            _90At = At(_89Append, axis);
            _101Subtract = Subtract(_90At, _2Divide);
            _102Subtract = Subtract(_4Divide, _2Divide);
            _103Divide = Divide(_101Subtract, _102Subtract);
            _105Pass-through: Single = if (_51LessThan)
              {
                Single _104NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 87648
                _104NegativeFloat = NegativeFloat(_66Pow);
                _104NegativeFloat;
                }else
              {
                _66Pow;
                };
            _106Constant = 1;
            _107Subtract = Subtract(_106Constant, _105Pass-through: Single);
            _108Multiply = Multiply(_105Pass-through: Single, _7FloatZero);
            _109Multiply = Multiply(_107Subtract, _108Multiply);
            _110Add = Add(_105Pass-through: Single, _109Multiply);
            _110Add;
            };
        _9Constant = 0;
        _10Vector3 = Vector3(_9Constant, _9Constant, _9Constant);
        _11Constant = 0;
        _12Vector3 = Vector3(_11Constant, _11Constant, _11Constant);
        _13Constant = 0;
        _14Vector3 = Vector3(_13Constant, _13Constant, _13Constant);
        _15Constant = 0;
        _16Vector3 = Vector3(_15Constant, _15Constant, _15Constant);
        _17X = X(_16Vector3);
        _18Y = Y(_16Vector3);
        _19Vector3 = Vector3(_17X, _18Y, amount);
        _20Constant = 1;
        _21Vector3 = Vector3(_20Constant, _20Constant, _20Constant);
        _22Constant = 1;
        _23Vector3 = Vector3(_22Constant, _22Constant, _22Constant);
        _24Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:MeshTransformVertices-ext->5:Apply1 87626
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 87590
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 87584
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 87624
            Single _4X;// 1:VectorAsArray->1:X 87620
            IArray[Single] _5Unit;// 4:Array3->2:Unit 87619
            Single _6Y;// 1:VectorAsArray->2:Y 87621
            IArray[Single] _7Append;// 4:Array3->3:Append 87618
            Single _8Z;// 1:VectorAsArray->3:Z 87622
            IArray[Single] _9Append;// 4:Array3->6:Append 87617
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 87599
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 87612
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 87603
            Single _13At;// 3:VectorFromArray-ext->1:At 87602
            Int32 _14One;// 6:PlusOne->1:One 87607
            Int32 _15Add;// 6:PlusOne->0:Add 87606
            Single _16At;// 3:VectorFromArray-ext->2:At 87604
            Int32 _17One;// 7:PlusOne->1:One 87611
            Int32 _18Add;// 7:PlusOne->0:Add 87610
            Single _19At;// 3:VectorFromArray-ext->3:At 87608
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 87601
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 87594
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 87595
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 87596
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 87593
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 87585
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 87583
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 87625
            Single _28Constant;// 8:Origin->0:Constant 87589
            Vector3 _29Vector3;// 8:Origin->1:Vector3 87588
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 87587
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 87582
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 87575
            Vector3 _33Transform;// 0:MeshTransformVertices-ext->4:Transform 87566
            _0Apply1 = Apply1(_8Pass-through: function1, x0);
            _1Lerp = Lerp(_10Vector3, _12Vector3, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_14Vector3, _19Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 87623
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_21Vector3, _23Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _63Pass-through: Matrix = if (use node transform)
          {
            Boolean _25IsValidNode;// 8:GizmoTransformInLocalSpace->35:IsValidNode 87790
            _25IsValidNode = IsValidNode(gizmo node);
            if (_25IsValidNode)
              {
                Boolean _26IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 87796
                Matrix _29InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 87800
                Matrix _30Multiply;// 32:NodeToLocalTransform->18:Multiply 87793
                _26IsValidNode = IsValidNode(gizmo node);
                _29InvertMatrix = InvertMatrix(modifierTransform);
                _30Multiply = Multiply(if (_26IsValidNode)
                    {
                      Matrix _27WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 87797
                      _27WorldTransform = WorldTransform(gizmo node);
                      _27WorldTransform;
                      }else
                    {
                      Matrix _28MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 87798
                      _28MatrixIdentity = MatrixIdentity();
                      _28MatrixIdentity;
                      }, _29InvertMatrix);
                _30Multiply;
                }else
              {
                Matrix _31MatrixIdentity;// 8:GizmoTransformInLocalSpace->40:MatrixIdentity 87801
                _31MatrixIdentity = MatrixIdentity();
                _31MatrixIdentity;
                };
            }else
          {
            Matrix _32TranslationMatrix;// 11:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 87812
            Single _33X;// 1:VectorAsArray->1:X 87848
            IArray[Single] _34Unit;// 4:Array3->2:Unit 87847
            Single _35Y;// 1:VectorAsArray->2:Y 87849
            IArray[Single] _36Append;// 4:Array3->3:Append 87846
            Single _37Z;// 1:VectorAsArray->3:Z 87850
            IArray[Single] _38Append;// 4:Array3->6:Append 87845
            Func[Single, Single] _39Pass-through: function1;// 0:Pass-through: function1 87827
            IArray[Single] _40Map;// 1:VectorMapComponents-ext->2:Map 87840
            Int32 _41Zero;// 3:VectorFromArray-ext->5:Zero 87831
            Single _42At;// 3:VectorFromArray-ext->1:At 87830
            Int32 _43One;// 6:PlusOne->1:One 87835
            Int32 _44Add;// 6:PlusOne->0:Add 87834
            Single _45At;// 3:VectorFromArray-ext->2:At 87832
            Int32 _46One;// 7:PlusOne->1:One 87839
            Int32 _47Add;// 7:PlusOne->0:Add 87838
            Single _48At;// 3:VectorFromArray-ext->3:At 87836
            Vector3 _49Vector3;// 3:VectorFromArray-ext->4:Vector3 87829
            Single _50Y;// 2:QuaternionFromVector3-ext->7:Y 87822
            Single _51X;// 2:QuaternionFromVector3-ext->6:X 87823
            Single _52Z;// 2:QuaternionFromVector3-ext->8:Z 87824
            Quaternion _53QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 87821
            Matrix _54MatrixFromQuaternion;// 11:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 87813
            Matrix _55Multiply;// 6:Multiply3-ext->3:Multiply 87811
            Single _56Constant;// 45:OnesVector-ext->0:Constant 87856
            Vector3 _57Vector3;// 45:OnesVector-ext->2:Vector3 87855
            Vector3 _58Add;// 44:Add 87853
            Single _59Constant;// 8:Origin->0:Constant 87817
            Vector3 _60Vector3;// 8:Origin->1:Vector3 87816
            Matrix _61ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 87815
            Matrix _62Multiply;// 6:Multiply3-ext->4:Multiply 87810
            _32TranslationMatrix = TranslationMatrix(deformer translation);
            _33X = X(deformer rotation);
            _34Unit = Unit(_33X);
            _35Y = Y(deformer rotation);
            _36Append = Append(_34Unit, _35Y);
            _37Z = Z(deformer rotation);
            _38Append = Append(_36Append, _37Z);
            _39Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 87851
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _40Map = Map(_38Append, _39Pass-through: function1);
            _41Zero = Zero();
            _42At = At(_40Map, _41Zero);
            _43One = One();
            _44Add = Add(_41Zero, _43One);
            _45At = At(_40Map, _44Add);
            _46One = One();
            _47Add = Add(_44Add, _46One);
            _48At = At(_40Map, _47Add);
            _49Vector3 = Vector3(_42At, _45At, _48At);
            _50Y = Y(_49Vector3);
            _51X = X(_49Vector3);
            _52Z = Z(_49Vector3);
            _53QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_50Y, _51X, _52Z);
            _54MatrixFromQuaternion = MatrixFromQuaternion(_53QuaternionFromYawPitchRoll);
            _55Multiply = Multiply(_32TranslationMatrix, _54MatrixFromQuaternion);
            _56Constant = 1;
            _57Vector3 = Vector3(_56Constant, _56Constant, _56Constant);
            _58Add = Add(deformer scale, _57Vector3);
            _59Constant = 0;
            _60Vector3 = Vector3(_59Constant, _59Constant, _59Constant);
            _61ScalingTranslationMatrix = ScalingTranslationMatrix(_58Add, _60Vector3);
            _62Multiply = Multiply(_55Multiply, _61ScalingTranslationMatrix);
            _62Multiply;
            };
        _64InvertMatrix = InvertMatrix(_63Pass-through: Matrix);
        _65ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:MeshDeformVertices-ext->11:Transform 87563
            Vector3 _1Apply1;// 0:MeshDeformVertices-ext->8:Apply1 87562
            Vector3 _2Transform;// 0:MeshDeformVertices-ext->9:Transform 87561
            _0Transform = Transform(x0, _64InvertMatrix);
            _1Apply1 = Apply1(_24Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _63Pass-through: Matrix);
            _2Transform;
            });
        _66SetMeshVertices = SetMeshVertices(mesh, _65ParallelMap);
        _66SetMeshVertices;
        });
    _5IfThen;
    }