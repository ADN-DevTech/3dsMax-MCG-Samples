(InstanceState state, TriMesh mesh, Int32 numIterations, Single roughness, Int32 phase, Single frequency, Single scale, Single strengthX, Single strengthY, Single strengthZ, Int32 seed, Boolean use gizmo node, INode gizmo node, Matrix modifierTransform) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 50246
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 50248
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 50247
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 50245
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 50244
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 50240
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 50255
        IArray[Vector3] _1MeshVertices;// 2:DeformVertices-ext->4:MeshVertices 50261
        Int32 _2Constant;// 72:NoiseDeformerNoiseInit-ext->0:Constant 50701
        Int32 _3One;// 126:PlusOne->1:One 50699
        Int32 _4Add;// 126:PlusOne->0:Add 50698
        IArray[Int32] _5Range;// 72:NoiseDeformerNoiseInit-ext->93:Range 50696
        Int32 _6Constant;// 72:NoiseDeformerNoiseInit-ext->0:Constant 50723
        IArray[Int32] _7Range;// 72:NoiseDeformerNoiseInit-ext->105:Range 50722
        IArray[IArray[Single]] _8Map;// 72:NoiseDeformerNoiseInit-ext->94:Map 50695
        IArray[IArray[Single]] _9Concatenate;// 72:NoiseDeformerNoiseInit-ext->70:Concatenate 50693
        IArray[Int32] _10Indices;// 72:NoiseDeformerNoiseInit-ext->2:Indices 50747
        Int32 _11Add;// 72:NoiseDeformerNoiseInit-ext->21:Add 50750
        Int32 _12Two;// 72:NoiseDeformerNoiseInit-ext->24:Two 50753
        Int32 _13Add;// 72:NoiseDeformerNoiseInit-ext->22:Add 50749
        IArray[Int32] _14Range;// 72:NoiseDeformerNoiseInit-ext->25:Range 50748
        Int32 _15Count;// 3:LastIndex->2:Count 50779
        Int32 _16One;// 3:MinusOne->2:One 50778
        Int32 _17Subtract;// 3:MinusOne->1:Subtract 50777
        Int32 _18At;// 35:Last->0:At 50774
        IArray[Int32] _19Map;// 72:NoiseDeformerNoiseInit-ext->20:Map 50765
        IArray[Int32] _20Aggregate;// 72:NoiseDeformerNoiseInit-ext->1:Aggregate 50745
        Int32 _21Two;// 72:NoiseDeformerNoiseInit-ext->67:Two 50793
        Int32 _22Add;// 72:NoiseDeformerNoiseInit-ext->66:Add 50791
        IArray[Int32] _23Range;// 72:NoiseDeformerNoiseInit-ext->69:Range 50790
        IArray[Int32] _24Map;// 72:NoiseDeformerNoiseInit-ext->82:Map 50788
        IArray[Int32] _25Map;// 79:SelectByIndex->2:Map 50798
        IArray[Tuple[Int32, Int32]] _26Combine;// 86:ZipToTuple->0:Combine 50786
        IArray[Int32] _27SetValues;// 72:NoiseDeformerNoiseInit-ext->76:SetValues 50742
        Tuple[IArray[IArray[Single]], IArray[Int32]] _28Pair;// 72:NoiseDeformerNoiseInit-ext->87:Pair 50692
        Func[Vector3, Vector3] _29Bind2of2;// 0:Noise-ext->5:Bind2of2 50267
        Matrix _36Pass-through: Matrix;// 0:Pass-through: Matrix 50234
        Matrix _37InvertMatrix;// 2:DeformVertices-ext->7:InvertMatrix 50266
        IArray[Vector3] _38ParallelMap;// 2:DeformVertices-ext->5:ParallelMap 50260
        Int32 _39Zero;// 7:SoftSelection->2:Zero 50258
        IArray[Single] _40PerVertexData;// 7:SoftSelection->3:PerVertexData 50257
        IArray[Vector3] _41Combine3;// 1:LerpVectors-ext->10:Combine3 50253
        TriMesh _42SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 50249
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 256;
        _3One = One();
        _4Add = Add(_2Constant, _3One);
        _5Range = Range(_4Add);
        _6Constant = 3;
        _7Range = Range(_6Constant);
        _8Map = Map(_5Range, (Int32 x0) => 
          {
            Func[Int32, Single] _0Bind1of2;// 72:NoiseDeformerNoiseInit-ext->116:Bind1of2 50724
            IArray[Single] _1Map;// 72:NoiseDeformerNoiseInit-ext->108:Map 50721
            Int32 _2Zero;// 118:ArrayToVector3->2:Zero 50716
            Single _3At;// 118:ArrayToVector3->1:At 50715
            Int32 _4One;// 118:ArrayToVector3->3:One 50718
            Single _5At;// 118:ArrayToVector3->5:At 50717
            Int32 _6Two;// 118:ArrayToVector3->4:Two 50720
            Single _7At;// 118:ArrayToVector3->6:At 50719
            Vector3 _8Vector3;// 118:ArrayToVector3->7:Vector3 50714
            Vector3 _9Normalize;// 72:NoiseDeformerNoiseInit-ext->120:Normalize 50712
            Single _10X;// 117:VectorToArray->1:X 50709
            IArray[Single] _11Unit;// 4:Array3->2:Unit 50708
            Single _12Y;// 117:VectorToArray->2:Y 50710
            IArray[Single] _13Append;// 4:Array3->3:Append 50707
            Single _14Z;// 117:VectorToArray->3:Z 50711
            IArray[Single] _15Append;// 4:Array3->6:Append 50706
            _0Bind1of2 = Bind1of2((Int32 x0, Int32 x1) => 
              {
                Int32 _0Count;// 72:NoiseDeformerNoiseInit-ext->114:Count 50737
                Int32 _1Multiply;// 72:NoiseDeformerNoiseInit-ext->115:Multiply 50736
                Int32 _2Add;// 72:NoiseDeformerNoiseInit-ext->113:Add 50734
                Int32 _3RandInt;// 72:NoiseDeformerNoiseInit-ext->97:RandInt 50732
                Single _4AsFloat;// 72:NoiseDeformerNoiseInit-ext->121:AsFloat 50731
                Single _5Abs;// 72:NoiseDeformerNoiseInit-ext->123:Abs 50730
                Int32 _6AsInt;// 72:NoiseDeformerNoiseInit-ext->122:AsInt 50729
                Int32 _7Add;// 72:NoiseDeformerNoiseInit-ext->99:Add 50739
                Int32 _8Modulo;// 72:NoiseDeformerNoiseInit-ext->98:Modulo 50728
                Int32 _9Subtract;// 72:NoiseDeformerNoiseInit-ext->104:Subtract 50727
                Single _10AsFloat;// 72:NoiseDeformerNoiseInit-ext->100:AsFloat 50726
                Single _11AsFloat;// 72:NoiseDeformerNoiseInit-ext->103:AsFloat 50741
                Single _12Divide;// 72:NoiseDeformerNoiseInit-ext->101:Divide 50725
                _0Count = Count(_5Range);
                _1Multiply = Multiply(_0Count, x1);
                _2Add = Add(x0, _1Multiply);
                _3RandInt = RandInt(seed, _2Add);
                _4AsFloat = AsFloat(_3RandInt);
                _5Abs = Abs(_4AsFloat);
                _6AsInt = AsInt(_5Abs);
                _7Add = Add(_2Constant, _2Constant);
                _8Modulo = Modulo(_6AsInt, _7Add);
                _9Subtract = Subtract(_8Modulo, _2Constant);
                _10AsFloat = AsFloat(_9Subtract);
                _11AsFloat = AsFloat(_2Constant);
                _12Divide = Divide(_10AsFloat, _11AsFloat);
                _12Divide;
                }, x0);
            _1Map = Map(_7Range, _0Bind1of2);
            _2Zero = Zero();
            _3At = At(_1Map, _2Zero);
            _4One = One();
            _5At = At(_1Map, _4One);
            _6Two = Two();
            _7At = At(_1Map, _6Two);
            _8Vector3 = Vector3(_3At, _5At, _7At);
            _9Normalize = Normalize(_8Vector3);
            _10X = X(_9Normalize);
            _11Unit = Unit(_10X);
            _12Y = Y(_9Normalize);
            _13Append = Append(_11Unit, _12Y);
            _14Z = Z(_9Normalize);
            _15Append = Append(_13Append, _14Z);
            _15Append;
            });
        _9Concatenate = Concatenate(_8Map, _8Map);
        _10Indices = Indices(_8Map);
        _11Add = Add(_2Constant, _2Constant);
        _12Two = Two();
        _13Add = Add(_11Add, _12Two);
        _14Range = Range(_13Add);
        _15Count = Count(_10Indices);
        _16One = One();
        _17Subtract = Subtract(_15Count, _16One);
        _18At = At(_10Indices, _17Subtract);
        _19Map = Map(_10Indices, (Int32 x0) => 
          {
            Int32 _0Add;// 72:NoiseDeformerNoiseInit-ext->36:Add 50772
            Int32 _1RandInt;// 72:NoiseDeformerNoiseInit-ext->34:RandInt 50770
            Single _2AsFloat;// 72:NoiseDeformerNoiseInit-ext->92:AsFloat 50769
            Single _3Abs;// 72:NoiseDeformerNoiseInit-ext->90:Abs 50768
            Int32 _4AsInt;// 72:NoiseDeformerNoiseInit-ext->91:AsInt 50767
            Int32 _5Modulo;// 72:NoiseDeformerNoiseInit-ext->40:Modulo 50766
            _0Add = Add(_18At, x0);
            _1RandInt = RandInt(seed, _0Add);
            _2AsFloat = AsFloat(_1RandInt);
            _3Abs = Abs(_2AsFloat);
            _4AsInt = AsInt(_3Abs);
            _5Modulo = Modulo(_4AsInt, _2Constant);
            _5Modulo;
            });
        _20Aggregate = Aggregate(_10Indices, _14Range, (IArray[Int32] x0, Int32 x1) => 
          {
            Int32 _0At;// 72:NoiseDeformerNoiseInit-ext->52:At 50763
            Int32 _1At;// 72:NoiseDeformerNoiseInit-ext->60:At 50762
            Tuple[Int32, Int32] _2Pair;// 72:NoiseDeformerNoiseInit-ext->57:Pair 50760
            IArray[Tuple[Int32, Int32]] _3Unit;// 59:Array2->2:Unit 50759
            Int32 _4At;// 72:NoiseDeformerNoiseInit-ext->30:At 50783
            Tuple[Int32, Int32] _5Pair;// 72:NoiseDeformerNoiseInit-ext->55:Pair 50782
            IArray[Tuple[Int32, Int32]] _6Append;// 59:Array2->3:Append 50758
            IArray[Int32] _7SetValues;// 72:NoiseDeformerNoiseInit-ext->54:SetValues 50754
            _0At = At(_19Map, x1);
            _1At = At(x0, _0At);
            _2Pair = Pair(x1, _1At);
            _3Unit = Unit(_2Pair);
            _4At = At(x0, x1);
            _5Pair = Pair(_0At, _4At);
            _6Append = Append(_3Unit, _5Pair);
            _7SetValues = SetValues(x0, _6Append);
            _7SetValues;
            });
        _21Two = Two();
        _22Add = Add(_2Constant, _21Two);
        _23Range = Range(_22Add);
        _24Map = Map(_23Range, (Int32 x0) => 
          {
            Int32 _0Add;// 72:NoiseDeformerNoiseInit-ext->83:Add 50794
            _0Add = Add(x0, _2Constant);
            _0Add;
            });
        _25Map = Map(_23Range, (Int32 x0) => 
          {
            Int32 _0At;// 79:SelectByIndex->3:At 50799
            _0At = At(_20Aggregate, x0);
            _0At;
            });
        _26Combine = Combine(_24Map, _25Map, (Int32 x0, Int32 x1) => 
          {
            Tuple[Int32, Int32] _0Pair;// 86:ZipToTuple->4:Pair 50787
            _0Pair = Pair(x0, x1);
            _0Pair;
            });
        _27SetValues = SetValues(_20Aggregate, _26Combine);
        _28Pair = Pair(_9Concatenate, _27SetValues);
        _29Bind2of2 = Bind2of2((Vector3 x0, Tuple[IArray[IArray[Single]], IArray[Int32]] x1) => 
          {
            Single _0FloatOne;// 0:NoiseDeformer-ext->40:FloatOne 50683
            Single _1Divide;// 0:NoiseDeformer-ext->41:Divide 50682
            Vector3 _2MultiplyByScalar;// 0:NoiseDeformer-ext->16:MultiplyByScalar 50680
            Vector3 _3Constant;// 0:NoiseDeformer-ext->0:Constant 50684
            Vector3 _4Add;// 0:NoiseDeformer-ext->18:Add 50679
            Single _5Y;// 0:NoiseDeformer-ext->6:Y 50677
            Single _6Z;// 0:NoiseDeformer-ext->7:Z 50685
            Single _7Apply2;// 0:NoiseDeformer-ext->4:Apply2 50280
            Single _8X;// 0:NoiseDeformer-ext->5:X 50688
            Single _9Apply2;// 0:NoiseDeformer-ext->2:Apply2 50687
            Single _10Apply2;// 0:NoiseDeformer-ext->15:Apply2 50690
            Vector3 _11Vector3;// 0:NoiseDeformer-ext->14:Vector3 50278
            Vector3 _12Vector3;// 13:Vector3 50806
            Vector3 _13Multiply;// 0:NoiseDeformer-ext->22:Multiply 50277
            Vector3 _14Add;// 0:NoiseDeformer-ext->25:Add 50276
            _0FloatOne = FloatOne();
            _1Divide = Divide(_0FloatOne, scale);
            _2MultiplyByScalar = MultiplyByScalar(x0, _1Divide);
            _3Constant = new Microsoft.Xna.Framework.Vector3(0.5, 0.5, 0.5);
            _4Add = Add(_2MultiplyByScalar, _3Constant);
            _5Y = Y(_4Add);
            _6Z = Z(_4Add);
            _7Apply2 = Apply2((Single x0, Single x1) => 
              {
                Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 50301
                IArray[Single] _1Unit;// 37:Array2->2:Unit 50300
                Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 50302
                IArray[Single] _3Append;// 37:Array2->3:Append 50299
                Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 50662
                Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 50303
                Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 50317
                Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 50318
                Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 50663
                IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 50316
                Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 50665
                Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 50664
                Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 50325
                IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 50315
                Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 50670
                Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 50673
                Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 50672
                Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 50675
                Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 50676
                Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 50674
                Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 50671
                Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 50669
                Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 50666
                IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 50650
                IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 50654
                Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 50661
                IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 50296
                Int32 _27Count;// 3:LastIndex->2:Count 50295
                Int32 _28One;// 3:MinusOne->2:One 50294
                Int32 _29Subtract;// 3:MinusOne->1:Subtract 50293
                IArray[Single] _30At;// 68:Last->0:At 50290
                Int32 _31Zero;// 69:First->2:Zero 50288
                Single _32At;// 69:First->0:At 50287
                _0FloatZero = FloatZero();
                _1Unit = Unit(_0FloatZero);
                _2FloatZero = FloatZero();
                _3Append = Append(_1Unit, _2FloatZero);
                _4AsFloat = AsFloat(numIterations);
                _5AsInt = AsInt(_4AsFloat);
                _6FloatOne = FloatOne();
                _7AsInt = AsInt(_4AsFloat);
                _8Constant = 2;
                _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
                  {
                    Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 50320
                    _0Multiply = Multiply(_8Constant, x0);
                    _0Multiply;
                    });
                _10FloatOne = FloatOne();
                _11Subtract = Subtract(_10FloatOne, roughness);
                _12NegativeFloat = NegativeFloat(_11Subtract);
                _13Map = Map(_9GenerateN, (Single x0) => 
                  {
                    Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 50323
                    _0Pow = Pow(x0, _12NegativeFloat);
                    _0Pow;
                    });
                _14AsFloat = AsFloat(phase);
                _15Constant = 0.005;
                _16Multiply = Multiply(frequency, _15Constant);
                _17Constant = 1200;
                _18Constant = 4800;
                _19Divide = Divide(_17Constant, _18Constant);
                _20Multiply = Multiply(_16Multiply, _19Divide);
                _21Multiply = Multiply(_14AsFloat, _20Multiply);
                _22Vector3 = Vector3(x0, x1, _21Multiply);
                _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
                  {
                    Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 50652
                    _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                    _0MultiplyByScalar;
                    });
                _24PairItem1 = PairItem1(x1);
                _25FloatOne = FloatOne();
                _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
                  {
                    Int32 _0One;// 49:Second->2:One 50330
                    Single _1At;// 49:Second->0:At 50329
                    Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 50327
                    Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 50313
                    Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50368
                    Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 50648
                    Single _6X;// 2:VectorAsArray->1:X 50379
                    IArray[Single] _7Unit;// 4:Array3->2:Unit 50378
                    Single _8Y;// 2:VectorAsArray->2:Y 50380
                    IArray[Single] _9Append;// 4:Array3->3:Append 50377
                    Single _10Z;// 2:VectorAsArray->3:Z 50381
                    IArray[Single] _11Append;// 4:Array3->6:Append 50376
                    Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 50394
                    Single _13At;// 1:VectorComponent-ext->3:At 50371
                    Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 50367
                    Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 50366
                    Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50382
                    Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 50365
                    Int32 _18One;// 13:PlusOne->1:One 50386
                    Int32 _19Add;// 13:PlusOne->0:Add 50385
                    Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 50383
                    Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 50364
                    Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 50391
                    Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50390
                    Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50388
                    Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50393
                    Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50392
                    Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 50387
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 50363
                    Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 50360
                    Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 50359
                    IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 50655
                    Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 50405
                    Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 50404
                    Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 50403
                    Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50415
                    Single _36X;// 2:VectorAsArray->1:X 50426
                    IArray[Single] _37Unit;// 4:Array3->2:Unit 50425
                    Single _38Y;// 2:VectorAsArray->2:Y 50427
                    IArray[Single] _39Append;// 4:Array3->3:Append 50424
                    Single _40Z;// 2:VectorAsArray->3:Z 50428
                    IArray[Single] _41Append;// 4:Array3->6:Append 50423
                    Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 50441
                    Single _43At;// 1:VectorComponent-ext->3:At 50418
                    Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 50414
                    Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 50413
                    Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50429
                    Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 50412
                    Int32 _48One;// 13:PlusOne->1:One 50433
                    Int32 _49Add;// 13:PlusOne->0:Add 50432
                    Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 50430
                    Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 50411
                    Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 50438
                    Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50437
                    Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50435
                    Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50440
                    Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50439
                    Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 50434
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 50410
                    Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 50407
                    Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 50406
                    Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 50401
                    Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 50399
                    Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50451
                    Single _64X;// 2:VectorAsArray->1:X 50462
                    IArray[Single] _65Unit;// 4:Array3->2:Unit 50461
                    Single _66Y;// 2:VectorAsArray->2:Y 50463
                    IArray[Single] _67Append;// 4:Array3->3:Append 50460
                    Single _68Z;// 2:VectorAsArray->3:Z 50464
                    IArray[Single] _69Append;// 4:Array3->6:Append 50459
                    Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 50477
                    Single _71At;// 1:VectorComponent-ext->3:At 50454
                    Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 50450
                    Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 50449
                    Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50465
                    Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 50448
                    Int32 _76One;// 13:PlusOne->1:One 50469
                    Int32 _77Add;// 13:PlusOne->0:Add 50468
                    Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 50466
                    Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 50447
                    Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 50474
                    Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50473
                    Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50471
                    Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50476
                    Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50475
                    Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 50470
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 50446
                    Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 50443
                    Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 50442
                    Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 50397
                    IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 50395
                    Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 50352
                    Single _92At;// 62:NoiseDeformerAt3-ext->4:At 50351
                    Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 50350
                    Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 50479
                    Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 50478
                    Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 50355
                    Single _97At;// 62:NoiseDeformerAt3-ext->7:At 50354
                    Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 50353
                    Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 50349
                    Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 50481
                    Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 50480
                    Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 50358
                    Single _103At;// 62:NoiseDeformerAt3-ext->10:At 50357
                    Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 50356
                    Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 50348
                    Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 50497
                    Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 50505
                    Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 50504
                    Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 50502
                    Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 50501
                    Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 50499
                    IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 50498
                    Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 50490
                    Single _114At;// 66:NoiseDeformerAt3-ext->4:At 50489
                    Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 50488
                    Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 50493
                    Single _117At;// 66:NoiseDeformerAt3-ext->7:At 50492
                    Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 50491
                    Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 50487
                    Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 50496
                    Single _121At;// 66:NoiseDeformerAt3-ext->10:At 50495
                    Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 50494
                    Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 50486
                    Single _124Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50509
                    Single _125Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50511
                    Single _126Multiply;// 42:NoiseDeformerSCurve-ext->41:Multiply 50510
                    Single _127Subtract;// 42:NoiseDeformerSCurve-ext->39:Subtract 50508
                    Single _128Multiply;// 42:NoiseDeformerSCurve-ext->35:Multiply 50513
                    Single _129Multiply;// 42:NoiseDeformerSCurve-ext->37:Multiply 50507
                    Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 50343
                    Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 50535
                    Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 50534
                    Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 50533
                    Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 50531
                    IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 50530
                    Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 50523
                    Single _137At;// 72:NoiseDeformerAt3-ext->4:At 50522
                    Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 50521
                    Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 50536
                    Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 50526
                    Single _141At;// 72:NoiseDeformerAt3-ext->7:At 50525
                    Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 50524
                    Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 50520
                    Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 50529
                    Single _145At;// 72:NoiseDeformerAt3-ext->10:At 50528
                    Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 50527
                    Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 50519
                    Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 50556
                    Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 50555
                    Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 50553
                    IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 50552
                    Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 50545
                    Single _153At;// 75:NoiseDeformerAt3-ext->4:At 50544
                    Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 50543
                    Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 50548
                    Single _156At;// 75:NoiseDeformerAt3-ext->7:At 50547
                    Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 50546
                    Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 50542
                    Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 50551
                    Single _160At;// 75:NoiseDeformerAt3-ext->10:At 50550
                    Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 50549
                    Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 50541
                    Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 50514
                    Single _164Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50560
                    Single _165Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50562
                    Single _166Multiply;// 56:NoiseDeformerSCurve-ext->41:Multiply 50561
                    Single _167Subtract;// 56:NoiseDeformerSCurve-ext->39:Subtract 50559
                    Single _168Multiply;// 56:NoiseDeformerSCurve-ext->35:Multiply 50564
                    Single _169Multiply;// 56:NoiseDeformerSCurve-ext->37:Multiply 50558
                    Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 50342
                    Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 50584
                    Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 50583
                    IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 50582
                    Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 50575
                    Single _175At;// 82:NoiseDeformerAt3-ext->4:At 50574
                    Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 50573
                    Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 50578
                    Single _178At;// 82:NoiseDeformerAt3-ext->7:At 50577
                    Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 50576
                    Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 50572
                    Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 50585
                    Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 50581
                    Single _183At;// 82:NoiseDeformerAt3-ext->10:At 50580
                    Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 50579
                    Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 50571
                    Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 50602
                    IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 50601
                    Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 50594
                    Single _189At;// 86:NoiseDeformerAt3-ext->4:At 50593
                    Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 50592
                    Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 50597
                    Single _192At;// 86:NoiseDeformerAt3-ext->7:At 50596
                    Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 50595
                    Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 50591
                    Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 50600
                    Single _196At;// 86:NoiseDeformerAt3-ext->10:At 50599
                    Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 50598
                    Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 50590
                    Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 50566
                    Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 50620
                    IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 50619
                    Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 50612
                    Single _203At;// 92:NoiseDeformerAt3-ext->4:At 50611
                    Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 50610
                    Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 50615
                    Single _206At;// 92:NoiseDeformerAt3-ext->7:At 50614
                    Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 50613
                    Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 50609
                    Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 50618
                    Single _210At;// 92:NoiseDeformerAt3-ext->10:At 50617
                    Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 50616
                    Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 50608
                    Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 50637
                    IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 50636
                    Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 50629
                    Single _216At;// 96:NoiseDeformerAt3-ext->4:At 50628
                    Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 50627
                    Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 50632
                    Single _219At;// 96:NoiseDeformerAt3-ext->7:At 50631
                    Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 50630
                    Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 50626
                    Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 50635
                    Single _223At;// 96:NoiseDeformerAt3-ext->10:At 50634
                    Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 50633
                    Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 50625
                    Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 50603
                    Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 50565
                    Single _228Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50641
                    Single _229Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50643
                    Single _230Multiply;// 58:NoiseDeformerSCurve-ext->41:Multiply 50642
                    Single _231Subtract;// 58:NoiseDeformerSCurve-ext->39:Subtract 50640
                    Single _232Multiply;// 58:NoiseDeformerSCurve-ext->35:Multiply 50645
                    Single _233Multiply;// 58:NoiseDeformerSCurve-ext->37:Multiply 50639
                    Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 50341
                    Single _235NaN;// 118:FloatIsNaN->1:NaN 50339
                    Int32 _236Compare;// 118:FloatIsNaN->2:Compare 50338
                    Int32 _237Zero;// 118:FloatIsNaN->4:Zero 50340
                    Boolean _238Equal;// 118:FloatIsNaN->3:Equal 50337
                    Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 50311
                    Int32 _241Zero;// 48:First->2:Zero 50658
                    Single _242At;// 48:First->0:At 50657
                    Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 50310
                    IArray[Single] _244Unit;// 43:Array2->2:Unit 50308
                    Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 50660
                    IArray[Single] _246Append;// 43:Array2->3:Append 50307
                    _0One = One();
                    _1At = At(x0, _0One);
                    _2AsInt = AsInt(_1At);
                    _3At = At(_13Map, _2AsInt);
                    _4Constant = 4096;
                    _5At = At(_23GenerateN, _2AsInt);
                    _6X = X(_5At);
                    _7Unit = Unit(_6X);
                    _8Y = Y(_5At);
                    _9Append = Append(_7Unit, _8Y);
                    _10Z = Z(_5At);
                    _11Append = Append(_9Append, _10Z);
                    _12Zero = Zero();
                    _13At = At(_11Append, _12Zero);
                    _14Add = Add(_4Constant, _13At);
                    _15Floor = Floor(_14Add);
                    _16Constant = 255;
                    _17And = And(_15Floor, _16Constant);
                    _18One = One();
                    _19Add = Add(_17And, _18One);
                    _20And = And(_19Add, _16Constant);
                    _21Pair = Pair(_17And, _20And);
                    _22Floor = Floor(_14Add);
                    _23AsFloat = AsFloat(_22Floor);
                    _24Subtract = Subtract(_14Add, _23AsFloat);
                    _25FloatOne = FloatOne();
                    _26Subtract = Subtract(_24Subtract, _25FloatOne);
                    _27Pair = Pair(_24Subtract, _26Subtract);
                    _28Pair = Pair(_21Pair, _27Pair);
                    _29PairItem2 = PairItem2(_28Pair);
                    _30PairItem1 = PairItem1(_29PairItem2);
                    _31PairItem2 = PairItem2(x1);
                    _32PairItem1 = PairItem1(_28Pair);
                    _33PairItem1 = PairItem1(_32PairItem1);
                    _34At = At(_31PairItem2, _33PairItem1);
                    _35Constant = 4096;
                    _36X = X(_5At);
                    _37Unit = Unit(_36X);
                    _38Y = Y(_5At);
                    _39Append = Append(_37Unit, _38Y);
                    _40Z = Z(_5At);
                    _41Append = Append(_39Append, _40Z);
                    _42One = One();
                    _43At = At(_41Append, _42One);
                    _44Add = Add(_35Constant, _43At);
                    _45Floor = Floor(_44Add);
                    _46Constant = 255;
                    _47And = And(_45Floor, _46Constant);
                    _48One = One();
                    _49Add = Add(_47And, _48One);
                    _50And = And(_49Add, _46Constant);
                    _51Pair = Pair(_47And, _50And);
                    _52Floor = Floor(_44Add);
                    _53AsFloat = AsFloat(_52Floor);
                    _54Subtract = Subtract(_44Add, _53AsFloat);
                    _55FloatOne = FloatOne();
                    _56Subtract = Subtract(_54Subtract, _55FloatOne);
                    _57Pair = Pair(_54Subtract, _56Subtract);
                    _58Pair = Pair(_51Pair, _57Pair);
                    _59PairItem1 = PairItem1(_58Pair);
                    _60PairItem1 = PairItem1(_59PairItem1);
                    _61Add = Add(_34At, _60PairItem1);
                    _62At = At(_31PairItem2, _61Add);
                    _63Constant = 4096;
                    _64X = X(_5At);
                    _65Unit = Unit(_64X);
                    _66Y = Y(_5At);
                    _67Append = Append(_65Unit, _66Y);
                    _68Z = Z(_5At);
                    _69Append = Append(_67Append, _68Z);
                    _70Two = Two();
                    _71At = At(_69Append, _70Two);
                    _72Add = Add(_63Constant, _71At);
                    _73Floor = Floor(_72Add);
                    _74Constant = 255;
                    _75And = And(_73Floor, _74Constant);
                    _76One = One();
                    _77Add = Add(_75And, _76One);
                    _78And = And(_77Add, _74Constant);
                    _79Pair = Pair(_75And, _78And);
                    _80Floor = Floor(_72Add);
                    _81AsFloat = AsFloat(_80Floor);
                    _82Subtract = Subtract(_72Add, _81AsFloat);
                    _83FloatOne = FloatOne();
                    _84Subtract = Subtract(_82Subtract, _83FloatOne);
                    _85Pair = Pair(_82Subtract, _84Subtract);
                    _86Pair = Pair(_79Pair, _85Pair);
                    _87PairItem1 = PairItem1(_86Pair);
                    _88PairItem1 = PairItem1(_87PairItem1);
                    _89Add = Add(_62At, _88PairItem1);
                    _90At = At(_24PairItem1, _89Add);
                    _91Zero = Zero();
                    _92At = At(_90At, _91Zero);
                    _93Multiply = Multiply(_30PairItem1, _92At);
                    _94PairItem2 = PairItem2(_58Pair);
                    _95PairItem1 = PairItem1(_94PairItem2);
                    _96One = One();
                    _97At = At(_90At, _96One);
                    _98Multiply = Multiply(_95PairItem1, _97At);
                    _99Add = Add(_93Multiply, _98Multiply);
                    _100PairItem2 = PairItem2(_86Pair);
                    _101PairItem1 = PairItem1(_100PairItem2);
                    _102Two = Two();
                    _103At = At(_90At, _102Two);
                    _104Multiply = Multiply(_101PairItem1, _103At);
                    _105Add = Add(_99Add, _104Multiply);
                    _106PairItem2 = PairItem2(_29PairItem2);
                    _107PairItem2 = PairItem2(_32PairItem1);
                    _108At = At(_31PairItem2, _107PairItem2);
                    _109Add = Add(_108At, _60PairItem1);
                    _110At = At(_31PairItem2, _109Add);
                    _111Add = Add(_110At, _88PairItem1);
                    _112At = At(_24PairItem1, _111Add);
                    _113Zero = Zero();
                    _114At = At(_112At, _113Zero);
                    _115Multiply = Multiply(_106PairItem2, _114At);
                    _116One = One();
                    _117At = At(_112At, _116One);
                    _118Multiply = Multiply(_95PairItem1, _117At);
                    _119Add = Add(_115Multiply, _118Multiply);
                    _120Two = Two();
                    _121At = At(_112At, _120Two);
                    _122Multiply = Multiply(_101PairItem1, _121At);
                    _123Add = Add(_119Add, _122Multiply);
                    _124Constant = 3;
                    _125Constant = 2;
                    _126Multiply = Multiply(_125Constant, _30PairItem1);
                    _127Subtract = Subtract(_124Constant, _126Multiply);
                    _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                    _129Multiply = Multiply(_127Subtract, _128Multiply);
                    _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                    _131PairItem2 = PairItem2(_59PairItem1);
                    _132Add = Add(_34At, _131PairItem2);
                    _133At = At(_31PairItem2, _132Add);
                    _134Add = Add(_133At, _88PairItem1);
                    _135At = At(_24PairItem1, _134Add);
                    _136Zero = Zero();
                    _137At = At(_135At, _136Zero);
                    _138Multiply = Multiply(_30PairItem1, _137At);
                    _139PairItem2 = PairItem2(_94PairItem2);
                    _140One = One();
                    _141At = At(_135At, _140One);
                    _142Multiply = Multiply(_139PairItem2, _141At);
                    _143Add = Add(_138Multiply, _142Multiply);
                    _144Two = Two();
                    _145At = At(_135At, _144Two);
                    _146Multiply = Multiply(_101PairItem1, _145At);
                    _147Add = Add(_143Add, _146Multiply);
                    _148Add = Add(_108At, _131PairItem2);
                    _149At = At(_31PairItem2, _148Add);
                    _150Add = Add(_149At, _88PairItem1);
                    _151At = At(_24PairItem1, _150Add);
                    _152Zero = Zero();
                    _153At = At(_151At, _152Zero);
                    _154Multiply = Multiply(_106PairItem2, _153At);
                    _155One = One();
                    _156At = At(_151At, _155One);
                    _157Multiply = Multiply(_139PairItem2, _156At);
                    _158Add = Add(_154Multiply, _157Multiply);
                    _159Two = Two();
                    _160At = At(_151At, _159Two);
                    _161Multiply = Multiply(_101PairItem1, _160At);
                    _162Add = Add(_158Add, _161Multiply);
                    _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                    _164Constant = 3;
                    _165Constant = 2;
                    _166Multiply = Multiply(_165Constant, _95PairItem1);
                    _167Subtract = Subtract(_164Constant, _166Multiply);
                    _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                    _169Multiply = Multiply(_167Subtract, _168Multiply);
                    _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                    _171PairItem2 = PairItem2(_87PairItem1);
                    _172Add = Add(_62At, _171PairItem2);
                    _173At = At(_24PairItem1, _172Add);
                    _174Zero = Zero();
                    _175At = At(_173At, _174Zero);
                    _176Multiply = Multiply(_30PairItem1, _175At);
                    _177One = One();
                    _178At = At(_173At, _177One);
                    _179Multiply = Multiply(_95PairItem1, _178At);
                    _180Add = Add(_176Multiply, _179Multiply);
                    _181PairItem2 = PairItem2(_100PairItem2);
                    _182Two = Two();
                    _183At = At(_173At, _182Two);
                    _184Multiply = Multiply(_181PairItem2, _183At);
                    _185Add = Add(_180Add, _184Multiply);
                    _186Add = Add(_110At, _171PairItem2);
                    _187At = At(_24PairItem1, _186Add);
                    _188Zero = Zero();
                    _189At = At(_187At, _188Zero);
                    _190Multiply = Multiply(_106PairItem2, _189At);
                    _191One = One();
                    _192At = At(_187At, _191One);
                    _193Multiply = Multiply(_95PairItem1, _192At);
                    _194Add = Add(_190Multiply, _193Multiply);
                    _195Two = Two();
                    _196At = At(_187At, _195Two);
                    _197Multiply = Multiply(_181PairItem2, _196At);
                    _198Add = Add(_194Add, _197Multiply);
                    _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                    _200Add = Add(_133At, _171PairItem2);
                    _201At = At(_24PairItem1, _200Add);
                    _202Zero = Zero();
                    _203At = At(_201At, _202Zero);
                    _204Multiply = Multiply(_30PairItem1, _203At);
                    _205One = One();
                    _206At = At(_201At, _205One);
                    _207Multiply = Multiply(_139PairItem2, _206At);
                    _208Add = Add(_204Multiply, _207Multiply);
                    _209Two = Two();
                    _210At = At(_201At, _209Two);
                    _211Multiply = Multiply(_181PairItem2, _210At);
                    _212Add = Add(_208Add, _211Multiply);
                    _213Add = Add(_149At, _171PairItem2);
                    _214At = At(_24PairItem1, _213Add);
                    _215Zero = Zero();
                    _216At = At(_214At, _215Zero);
                    _217Multiply = Multiply(_106PairItem2, _216At);
                    _218One = One();
                    _219At = At(_214At, _218One);
                    _220Multiply = Multiply(_139PairItem2, _219At);
                    _221Add = Add(_217Multiply, _220Multiply);
                    _222Two = Two();
                    _223At = At(_214At, _222Two);
                    _224Multiply = Multiply(_181PairItem2, _223At);
                    _225Add = Add(_221Add, _224Multiply);
                    _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                    _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                    _228Constant = 3;
                    _229Constant = 2;
                    _230Multiply = Multiply(_229Constant, _101PairItem1);
                    _231Subtract = Subtract(_228Constant, _230Multiply);
                    _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                    _233Multiply = Multiply(_231Subtract, _232Multiply);
                    _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                    _235NaN = NaN();
                    _236Compare = Compare(_234FloatLerp, _235NaN);
                    _237Zero = Zero();
                    _238Equal = Equal(_236Compare, _237Zero);
                    _240Multiply = Multiply(_3At, if (_238Equal)
                        {
                          Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 50646
                          _239FloatZero = FloatZero();
                          _239FloatZero;
                          }else
                        {
                          _234FloatLerp;
                          });
                    _241Zero = Zero();
                    _242At = At(x0, _241Zero);
                    _243Add = Add(_240Multiply, _242At);
                    _244Unit = Unit(_243Add);
                    _245Add = Add(_1At, _25FloatOne);
                    _246Append = Append(_244Unit, _245Add);
                    _246Append;
                    });
                _27Count = Count(_26GenerateN);
                _28One = One();
                _29Subtract = Subtract(_27Count, _28One);
                _30At = At(_26GenerateN, _29Subtract);
                _31Zero = Zero();
                _32At = At(_30At, _31Zero);
                _32At;
                }, _5Y, _6Z);
            _8X = X(_4Add);
            _9Apply2 = Apply2((Single x0, Single x1) => 
              {
                Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 50301
                IArray[Single] _1Unit;// 37:Array2->2:Unit 50300
                Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 50302
                IArray[Single] _3Append;// 37:Array2->3:Append 50299
                Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 50662
                Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 50303
                Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 50317
                Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 50318
                Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 50663
                IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 50316
                Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 50665
                Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 50664
                Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 50325
                IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 50315
                Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 50670
                Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 50673
                Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 50672
                Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 50675
                Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 50676
                Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 50674
                Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 50671
                Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 50669
                Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 50666
                IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 50650
                IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 50654
                Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 50661
                IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 50296
                Int32 _27Count;// 3:LastIndex->2:Count 50295
                Int32 _28One;// 3:MinusOne->2:One 50294
                Int32 _29Subtract;// 3:MinusOne->1:Subtract 50293
                IArray[Single] _30At;// 68:Last->0:At 50290
                Int32 _31Zero;// 69:First->2:Zero 50288
                Single _32At;// 69:First->0:At 50287
                _0FloatZero = FloatZero();
                _1Unit = Unit(_0FloatZero);
                _2FloatZero = FloatZero();
                _3Append = Append(_1Unit, _2FloatZero);
                _4AsFloat = AsFloat(numIterations);
                _5AsInt = AsInt(_4AsFloat);
                _6FloatOne = FloatOne();
                _7AsInt = AsInt(_4AsFloat);
                _8Constant = 2;
                _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
                  {
                    Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 50320
                    _0Multiply = Multiply(_8Constant, x0);
                    _0Multiply;
                    });
                _10FloatOne = FloatOne();
                _11Subtract = Subtract(_10FloatOne, roughness);
                _12NegativeFloat = NegativeFloat(_11Subtract);
                _13Map = Map(_9GenerateN, (Single x0) => 
                  {
                    Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 50323
                    _0Pow = Pow(x0, _12NegativeFloat);
                    _0Pow;
                    });
                _14AsFloat = AsFloat(phase);
                _15Constant = 0.005;
                _16Multiply = Multiply(frequency, _15Constant);
                _17Constant = 1200;
                _18Constant = 4800;
                _19Divide = Divide(_17Constant, _18Constant);
                _20Multiply = Multiply(_16Multiply, _19Divide);
                _21Multiply = Multiply(_14AsFloat, _20Multiply);
                _22Vector3 = Vector3(x0, x1, _21Multiply);
                _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
                  {
                    Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 50652
                    _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                    _0MultiplyByScalar;
                    });
                _24PairItem1 = PairItem1(x1);
                _25FloatOne = FloatOne();
                _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
                  {
                    Int32 _0One;// 49:Second->2:One 50330
                    Single _1At;// 49:Second->0:At 50329
                    Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 50327
                    Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 50313
                    Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50368
                    Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 50648
                    Single _6X;// 2:VectorAsArray->1:X 50379
                    IArray[Single] _7Unit;// 4:Array3->2:Unit 50378
                    Single _8Y;// 2:VectorAsArray->2:Y 50380
                    IArray[Single] _9Append;// 4:Array3->3:Append 50377
                    Single _10Z;// 2:VectorAsArray->3:Z 50381
                    IArray[Single] _11Append;// 4:Array3->6:Append 50376
                    Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 50394
                    Single _13At;// 1:VectorComponent-ext->3:At 50371
                    Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 50367
                    Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 50366
                    Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50382
                    Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 50365
                    Int32 _18One;// 13:PlusOne->1:One 50386
                    Int32 _19Add;// 13:PlusOne->0:Add 50385
                    Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 50383
                    Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 50364
                    Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 50391
                    Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50390
                    Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50388
                    Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50393
                    Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50392
                    Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 50387
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 50363
                    Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 50360
                    Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 50359
                    IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 50655
                    Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 50405
                    Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 50404
                    Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 50403
                    Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50415
                    Single _36X;// 2:VectorAsArray->1:X 50426
                    IArray[Single] _37Unit;// 4:Array3->2:Unit 50425
                    Single _38Y;// 2:VectorAsArray->2:Y 50427
                    IArray[Single] _39Append;// 4:Array3->3:Append 50424
                    Single _40Z;// 2:VectorAsArray->3:Z 50428
                    IArray[Single] _41Append;// 4:Array3->6:Append 50423
                    Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 50441
                    Single _43At;// 1:VectorComponent-ext->3:At 50418
                    Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 50414
                    Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 50413
                    Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50429
                    Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 50412
                    Int32 _48One;// 13:PlusOne->1:One 50433
                    Int32 _49Add;// 13:PlusOne->0:Add 50432
                    Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 50430
                    Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 50411
                    Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 50438
                    Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50437
                    Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50435
                    Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50440
                    Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50439
                    Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 50434
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 50410
                    Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 50407
                    Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 50406
                    Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 50401
                    Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 50399
                    Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50451
                    Single _64X;// 2:VectorAsArray->1:X 50462
                    IArray[Single] _65Unit;// 4:Array3->2:Unit 50461
                    Single _66Y;// 2:VectorAsArray->2:Y 50463
                    IArray[Single] _67Append;// 4:Array3->3:Append 50460
                    Single _68Z;// 2:VectorAsArray->3:Z 50464
                    IArray[Single] _69Append;// 4:Array3->6:Append 50459
                    Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 50477
                    Single _71At;// 1:VectorComponent-ext->3:At 50454
                    Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 50450
                    Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 50449
                    Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50465
                    Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 50448
                    Int32 _76One;// 13:PlusOne->1:One 50469
                    Int32 _77Add;// 13:PlusOne->0:Add 50468
                    Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 50466
                    Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 50447
                    Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 50474
                    Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50473
                    Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50471
                    Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50476
                    Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50475
                    Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 50470
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 50446
                    Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 50443
                    Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 50442
                    Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 50397
                    IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 50395
                    Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 50352
                    Single _92At;// 62:NoiseDeformerAt3-ext->4:At 50351
                    Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 50350
                    Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 50479
                    Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 50478
                    Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 50355
                    Single _97At;// 62:NoiseDeformerAt3-ext->7:At 50354
                    Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 50353
                    Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 50349
                    Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 50481
                    Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 50480
                    Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 50358
                    Single _103At;// 62:NoiseDeformerAt3-ext->10:At 50357
                    Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 50356
                    Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 50348
                    Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 50497
                    Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 50505
                    Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 50504
                    Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 50502
                    Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 50501
                    Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 50499
                    IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 50498
                    Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 50490
                    Single _114At;// 66:NoiseDeformerAt3-ext->4:At 50489
                    Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 50488
                    Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 50493
                    Single _117At;// 66:NoiseDeformerAt3-ext->7:At 50492
                    Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 50491
                    Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 50487
                    Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 50496
                    Single _121At;// 66:NoiseDeformerAt3-ext->10:At 50495
                    Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 50494
                    Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 50486
                    Single _124Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50509
                    Single _125Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50511
                    Single _126Multiply;// 42:NoiseDeformerSCurve-ext->41:Multiply 50510
                    Single _127Subtract;// 42:NoiseDeformerSCurve-ext->39:Subtract 50508
                    Single _128Multiply;// 42:NoiseDeformerSCurve-ext->35:Multiply 50513
                    Single _129Multiply;// 42:NoiseDeformerSCurve-ext->37:Multiply 50507
                    Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 50343
                    Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 50535
                    Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 50534
                    Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 50533
                    Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 50531
                    IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 50530
                    Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 50523
                    Single _137At;// 72:NoiseDeformerAt3-ext->4:At 50522
                    Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 50521
                    Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 50536
                    Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 50526
                    Single _141At;// 72:NoiseDeformerAt3-ext->7:At 50525
                    Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 50524
                    Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 50520
                    Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 50529
                    Single _145At;// 72:NoiseDeformerAt3-ext->10:At 50528
                    Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 50527
                    Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 50519
                    Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 50556
                    Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 50555
                    Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 50553
                    IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 50552
                    Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 50545
                    Single _153At;// 75:NoiseDeformerAt3-ext->4:At 50544
                    Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 50543
                    Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 50548
                    Single _156At;// 75:NoiseDeformerAt3-ext->7:At 50547
                    Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 50546
                    Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 50542
                    Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 50551
                    Single _160At;// 75:NoiseDeformerAt3-ext->10:At 50550
                    Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 50549
                    Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 50541
                    Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 50514
                    Single _164Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50560
                    Single _165Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50562
                    Single _166Multiply;// 56:NoiseDeformerSCurve-ext->41:Multiply 50561
                    Single _167Subtract;// 56:NoiseDeformerSCurve-ext->39:Subtract 50559
                    Single _168Multiply;// 56:NoiseDeformerSCurve-ext->35:Multiply 50564
                    Single _169Multiply;// 56:NoiseDeformerSCurve-ext->37:Multiply 50558
                    Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 50342
                    Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 50584
                    Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 50583
                    IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 50582
                    Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 50575
                    Single _175At;// 82:NoiseDeformerAt3-ext->4:At 50574
                    Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 50573
                    Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 50578
                    Single _178At;// 82:NoiseDeformerAt3-ext->7:At 50577
                    Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 50576
                    Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 50572
                    Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 50585
                    Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 50581
                    Single _183At;// 82:NoiseDeformerAt3-ext->10:At 50580
                    Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 50579
                    Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 50571
                    Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 50602
                    IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 50601
                    Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 50594
                    Single _189At;// 86:NoiseDeformerAt3-ext->4:At 50593
                    Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 50592
                    Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 50597
                    Single _192At;// 86:NoiseDeformerAt3-ext->7:At 50596
                    Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 50595
                    Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 50591
                    Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 50600
                    Single _196At;// 86:NoiseDeformerAt3-ext->10:At 50599
                    Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 50598
                    Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 50590
                    Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 50566
                    Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 50620
                    IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 50619
                    Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 50612
                    Single _203At;// 92:NoiseDeformerAt3-ext->4:At 50611
                    Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 50610
                    Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 50615
                    Single _206At;// 92:NoiseDeformerAt3-ext->7:At 50614
                    Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 50613
                    Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 50609
                    Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 50618
                    Single _210At;// 92:NoiseDeformerAt3-ext->10:At 50617
                    Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 50616
                    Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 50608
                    Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 50637
                    IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 50636
                    Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 50629
                    Single _216At;// 96:NoiseDeformerAt3-ext->4:At 50628
                    Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 50627
                    Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 50632
                    Single _219At;// 96:NoiseDeformerAt3-ext->7:At 50631
                    Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 50630
                    Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 50626
                    Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 50635
                    Single _223At;// 96:NoiseDeformerAt3-ext->10:At 50634
                    Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 50633
                    Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 50625
                    Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 50603
                    Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 50565
                    Single _228Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50641
                    Single _229Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50643
                    Single _230Multiply;// 58:NoiseDeformerSCurve-ext->41:Multiply 50642
                    Single _231Subtract;// 58:NoiseDeformerSCurve-ext->39:Subtract 50640
                    Single _232Multiply;// 58:NoiseDeformerSCurve-ext->35:Multiply 50645
                    Single _233Multiply;// 58:NoiseDeformerSCurve-ext->37:Multiply 50639
                    Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 50341
                    Single _235NaN;// 118:FloatIsNaN->1:NaN 50339
                    Int32 _236Compare;// 118:FloatIsNaN->2:Compare 50338
                    Int32 _237Zero;// 118:FloatIsNaN->4:Zero 50340
                    Boolean _238Equal;// 118:FloatIsNaN->3:Equal 50337
                    Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 50311
                    Int32 _241Zero;// 48:First->2:Zero 50658
                    Single _242At;// 48:First->0:At 50657
                    Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 50310
                    IArray[Single] _244Unit;// 43:Array2->2:Unit 50308
                    Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 50660
                    IArray[Single] _246Append;// 43:Array2->3:Append 50307
                    _0One = One();
                    _1At = At(x0, _0One);
                    _2AsInt = AsInt(_1At);
                    _3At = At(_13Map, _2AsInt);
                    _4Constant = 4096;
                    _5At = At(_23GenerateN, _2AsInt);
                    _6X = X(_5At);
                    _7Unit = Unit(_6X);
                    _8Y = Y(_5At);
                    _9Append = Append(_7Unit, _8Y);
                    _10Z = Z(_5At);
                    _11Append = Append(_9Append, _10Z);
                    _12Zero = Zero();
                    _13At = At(_11Append, _12Zero);
                    _14Add = Add(_4Constant, _13At);
                    _15Floor = Floor(_14Add);
                    _16Constant = 255;
                    _17And = And(_15Floor, _16Constant);
                    _18One = One();
                    _19Add = Add(_17And, _18One);
                    _20And = And(_19Add, _16Constant);
                    _21Pair = Pair(_17And, _20And);
                    _22Floor = Floor(_14Add);
                    _23AsFloat = AsFloat(_22Floor);
                    _24Subtract = Subtract(_14Add, _23AsFloat);
                    _25FloatOne = FloatOne();
                    _26Subtract = Subtract(_24Subtract, _25FloatOne);
                    _27Pair = Pair(_24Subtract, _26Subtract);
                    _28Pair = Pair(_21Pair, _27Pair);
                    _29PairItem2 = PairItem2(_28Pair);
                    _30PairItem1 = PairItem1(_29PairItem2);
                    _31PairItem2 = PairItem2(x1);
                    _32PairItem1 = PairItem1(_28Pair);
                    _33PairItem1 = PairItem1(_32PairItem1);
                    _34At = At(_31PairItem2, _33PairItem1);
                    _35Constant = 4096;
                    _36X = X(_5At);
                    _37Unit = Unit(_36X);
                    _38Y = Y(_5At);
                    _39Append = Append(_37Unit, _38Y);
                    _40Z = Z(_5At);
                    _41Append = Append(_39Append, _40Z);
                    _42One = One();
                    _43At = At(_41Append, _42One);
                    _44Add = Add(_35Constant, _43At);
                    _45Floor = Floor(_44Add);
                    _46Constant = 255;
                    _47And = And(_45Floor, _46Constant);
                    _48One = One();
                    _49Add = Add(_47And, _48One);
                    _50And = And(_49Add, _46Constant);
                    _51Pair = Pair(_47And, _50And);
                    _52Floor = Floor(_44Add);
                    _53AsFloat = AsFloat(_52Floor);
                    _54Subtract = Subtract(_44Add, _53AsFloat);
                    _55FloatOne = FloatOne();
                    _56Subtract = Subtract(_54Subtract, _55FloatOne);
                    _57Pair = Pair(_54Subtract, _56Subtract);
                    _58Pair = Pair(_51Pair, _57Pair);
                    _59PairItem1 = PairItem1(_58Pair);
                    _60PairItem1 = PairItem1(_59PairItem1);
                    _61Add = Add(_34At, _60PairItem1);
                    _62At = At(_31PairItem2, _61Add);
                    _63Constant = 4096;
                    _64X = X(_5At);
                    _65Unit = Unit(_64X);
                    _66Y = Y(_5At);
                    _67Append = Append(_65Unit, _66Y);
                    _68Z = Z(_5At);
                    _69Append = Append(_67Append, _68Z);
                    _70Two = Two();
                    _71At = At(_69Append, _70Two);
                    _72Add = Add(_63Constant, _71At);
                    _73Floor = Floor(_72Add);
                    _74Constant = 255;
                    _75And = And(_73Floor, _74Constant);
                    _76One = One();
                    _77Add = Add(_75And, _76One);
                    _78And = And(_77Add, _74Constant);
                    _79Pair = Pair(_75And, _78And);
                    _80Floor = Floor(_72Add);
                    _81AsFloat = AsFloat(_80Floor);
                    _82Subtract = Subtract(_72Add, _81AsFloat);
                    _83FloatOne = FloatOne();
                    _84Subtract = Subtract(_82Subtract, _83FloatOne);
                    _85Pair = Pair(_82Subtract, _84Subtract);
                    _86Pair = Pair(_79Pair, _85Pair);
                    _87PairItem1 = PairItem1(_86Pair);
                    _88PairItem1 = PairItem1(_87PairItem1);
                    _89Add = Add(_62At, _88PairItem1);
                    _90At = At(_24PairItem1, _89Add);
                    _91Zero = Zero();
                    _92At = At(_90At, _91Zero);
                    _93Multiply = Multiply(_30PairItem1, _92At);
                    _94PairItem2 = PairItem2(_58Pair);
                    _95PairItem1 = PairItem1(_94PairItem2);
                    _96One = One();
                    _97At = At(_90At, _96One);
                    _98Multiply = Multiply(_95PairItem1, _97At);
                    _99Add = Add(_93Multiply, _98Multiply);
                    _100PairItem2 = PairItem2(_86Pair);
                    _101PairItem1 = PairItem1(_100PairItem2);
                    _102Two = Two();
                    _103At = At(_90At, _102Two);
                    _104Multiply = Multiply(_101PairItem1, _103At);
                    _105Add = Add(_99Add, _104Multiply);
                    _106PairItem2 = PairItem2(_29PairItem2);
                    _107PairItem2 = PairItem2(_32PairItem1);
                    _108At = At(_31PairItem2, _107PairItem2);
                    _109Add = Add(_108At, _60PairItem1);
                    _110At = At(_31PairItem2, _109Add);
                    _111Add = Add(_110At, _88PairItem1);
                    _112At = At(_24PairItem1, _111Add);
                    _113Zero = Zero();
                    _114At = At(_112At, _113Zero);
                    _115Multiply = Multiply(_106PairItem2, _114At);
                    _116One = One();
                    _117At = At(_112At, _116One);
                    _118Multiply = Multiply(_95PairItem1, _117At);
                    _119Add = Add(_115Multiply, _118Multiply);
                    _120Two = Two();
                    _121At = At(_112At, _120Two);
                    _122Multiply = Multiply(_101PairItem1, _121At);
                    _123Add = Add(_119Add, _122Multiply);
                    _124Constant = 3;
                    _125Constant = 2;
                    _126Multiply = Multiply(_125Constant, _30PairItem1);
                    _127Subtract = Subtract(_124Constant, _126Multiply);
                    _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                    _129Multiply = Multiply(_127Subtract, _128Multiply);
                    _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                    _131PairItem2 = PairItem2(_59PairItem1);
                    _132Add = Add(_34At, _131PairItem2);
                    _133At = At(_31PairItem2, _132Add);
                    _134Add = Add(_133At, _88PairItem1);
                    _135At = At(_24PairItem1, _134Add);
                    _136Zero = Zero();
                    _137At = At(_135At, _136Zero);
                    _138Multiply = Multiply(_30PairItem1, _137At);
                    _139PairItem2 = PairItem2(_94PairItem2);
                    _140One = One();
                    _141At = At(_135At, _140One);
                    _142Multiply = Multiply(_139PairItem2, _141At);
                    _143Add = Add(_138Multiply, _142Multiply);
                    _144Two = Two();
                    _145At = At(_135At, _144Two);
                    _146Multiply = Multiply(_101PairItem1, _145At);
                    _147Add = Add(_143Add, _146Multiply);
                    _148Add = Add(_108At, _131PairItem2);
                    _149At = At(_31PairItem2, _148Add);
                    _150Add = Add(_149At, _88PairItem1);
                    _151At = At(_24PairItem1, _150Add);
                    _152Zero = Zero();
                    _153At = At(_151At, _152Zero);
                    _154Multiply = Multiply(_106PairItem2, _153At);
                    _155One = One();
                    _156At = At(_151At, _155One);
                    _157Multiply = Multiply(_139PairItem2, _156At);
                    _158Add = Add(_154Multiply, _157Multiply);
                    _159Two = Two();
                    _160At = At(_151At, _159Two);
                    _161Multiply = Multiply(_101PairItem1, _160At);
                    _162Add = Add(_158Add, _161Multiply);
                    _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                    _164Constant = 3;
                    _165Constant = 2;
                    _166Multiply = Multiply(_165Constant, _95PairItem1);
                    _167Subtract = Subtract(_164Constant, _166Multiply);
                    _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                    _169Multiply = Multiply(_167Subtract, _168Multiply);
                    _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                    _171PairItem2 = PairItem2(_87PairItem1);
                    _172Add = Add(_62At, _171PairItem2);
                    _173At = At(_24PairItem1, _172Add);
                    _174Zero = Zero();
                    _175At = At(_173At, _174Zero);
                    _176Multiply = Multiply(_30PairItem1, _175At);
                    _177One = One();
                    _178At = At(_173At, _177One);
                    _179Multiply = Multiply(_95PairItem1, _178At);
                    _180Add = Add(_176Multiply, _179Multiply);
                    _181PairItem2 = PairItem2(_100PairItem2);
                    _182Two = Two();
                    _183At = At(_173At, _182Two);
                    _184Multiply = Multiply(_181PairItem2, _183At);
                    _185Add = Add(_180Add, _184Multiply);
                    _186Add = Add(_110At, _171PairItem2);
                    _187At = At(_24PairItem1, _186Add);
                    _188Zero = Zero();
                    _189At = At(_187At, _188Zero);
                    _190Multiply = Multiply(_106PairItem2, _189At);
                    _191One = One();
                    _192At = At(_187At, _191One);
                    _193Multiply = Multiply(_95PairItem1, _192At);
                    _194Add = Add(_190Multiply, _193Multiply);
                    _195Two = Two();
                    _196At = At(_187At, _195Two);
                    _197Multiply = Multiply(_181PairItem2, _196At);
                    _198Add = Add(_194Add, _197Multiply);
                    _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                    _200Add = Add(_133At, _171PairItem2);
                    _201At = At(_24PairItem1, _200Add);
                    _202Zero = Zero();
                    _203At = At(_201At, _202Zero);
                    _204Multiply = Multiply(_30PairItem1, _203At);
                    _205One = One();
                    _206At = At(_201At, _205One);
                    _207Multiply = Multiply(_139PairItem2, _206At);
                    _208Add = Add(_204Multiply, _207Multiply);
                    _209Two = Two();
                    _210At = At(_201At, _209Two);
                    _211Multiply = Multiply(_181PairItem2, _210At);
                    _212Add = Add(_208Add, _211Multiply);
                    _213Add = Add(_149At, _171PairItem2);
                    _214At = At(_24PairItem1, _213Add);
                    _215Zero = Zero();
                    _216At = At(_214At, _215Zero);
                    _217Multiply = Multiply(_106PairItem2, _216At);
                    _218One = One();
                    _219At = At(_214At, _218One);
                    _220Multiply = Multiply(_139PairItem2, _219At);
                    _221Add = Add(_217Multiply, _220Multiply);
                    _222Two = Two();
                    _223At = At(_214At, _222Two);
                    _224Multiply = Multiply(_181PairItem2, _223At);
                    _225Add = Add(_221Add, _224Multiply);
                    _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                    _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                    _228Constant = 3;
                    _229Constant = 2;
                    _230Multiply = Multiply(_229Constant, _101PairItem1);
                    _231Subtract = Subtract(_228Constant, _230Multiply);
                    _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                    _233Multiply = Multiply(_231Subtract, _232Multiply);
                    _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                    _235NaN = NaN();
                    _236Compare = Compare(_234FloatLerp, _235NaN);
                    _237Zero = Zero();
                    _238Equal = Equal(_236Compare, _237Zero);
                    _240Multiply = Multiply(_3At, if (_238Equal)
                        {
                          Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 50646
                          _239FloatZero = FloatZero();
                          _239FloatZero;
                          }else
                        {
                          _234FloatLerp;
                          });
                    _241Zero = Zero();
                    _242At = At(x0, _241Zero);
                    _243Add = Add(_240Multiply, _242At);
                    _244Unit = Unit(_243Add);
                    _245Add = Add(_1At, _25FloatOne);
                    _246Append = Append(_244Unit, _245Add);
                    _246Append;
                    });
                _27Count = Count(_26GenerateN);
                _28One = One();
                _29Subtract = Subtract(_27Count, _28One);
                _30At = At(_26GenerateN, _29Subtract);
                _31Zero = Zero();
                _32At = At(_30At, _31Zero);
                _32At;
                }, _8X, _6Z);
            _10Apply2 = Apply2((Single x0, Single x1) => 
              {
                Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 50301
                IArray[Single] _1Unit;// 37:Array2->2:Unit 50300
                Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 50302
                IArray[Single] _3Append;// 37:Array2->3:Append 50299
                Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 50662
                Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 50303
                Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 50317
                Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 50318
                Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 50663
                IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 50316
                Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 50665
                Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 50664
                Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 50325
                IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 50315
                Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 50670
                Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 50673
                Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 50672
                Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 50675
                Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 50676
                Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 50674
                Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 50671
                Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 50669
                Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 50666
                IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 50650
                IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 50654
                Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 50661
                IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 50296
                Int32 _27Count;// 3:LastIndex->2:Count 50295
                Int32 _28One;// 3:MinusOne->2:One 50294
                Int32 _29Subtract;// 3:MinusOne->1:Subtract 50293
                IArray[Single] _30At;// 68:Last->0:At 50290
                Int32 _31Zero;// 69:First->2:Zero 50288
                Single _32At;// 69:First->0:At 50287
                _0FloatZero = FloatZero();
                _1Unit = Unit(_0FloatZero);
                _2FloatZero = FloatZero();
                _3Append = Append(_1Unit, _2FloatZero);
                _4AsFloat = AsFloat(numIterations);
                _5AsInt = AsInt(_4AsFloat);
                _6FloatOne = FloatOne();
                _7AsInt = AsInt(_4AsFloat);
                _8Constant = 2;
                _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
                  {
                    Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 50320
                    _0Multiply = Multiply(_8Constant, x0);
                    _0Multiply;
                    });
                _10FloatOne = FloatOne();
                _11Subtract = Subtract(_10FloatOne, roughness);
                _12NegativeFloat = NegativeFloat(_11Subtract);
                _13Map = Map(_9GenerateN, (Single x0) => 
                  {
                    Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 50323
                    _0Pow = Pow(x0, _12NegativeFloat);
                    _0Pow;
                    });
                _14AsFloat = AsFloat(phase);
                _15Constant = 0.005;
                _16Multiply = Multiply(frequency, _15Constant);
                _17Constant = 1200;
                _18Constant = 4800;
                _19Divide = Divide(_17Constant, _18Constant);
                _20Multiply = Multiply(_16Multiply, _19Divide);
                _21Multiply = Multiply(_14AsFloat, _20Multiply);
                _22Vector3 = Vector3(x0, x1, _21Multiply);
                _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
                  {
                    Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 50652
                    _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                    _0MultiplyByScalar;
                    });
                _24PairItem1 = PairItem1(x1);
                _25FloatOne = FloatOne();
                _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
                  {
                    Int32 _0One;// 49:Second->2:One 50330
                    Single _1At;// 49:Second->0:At 50329
                    Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 50327
                    Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 50313
                    Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50368
                    Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 50648
                    Single _6X;// 2:VectorAsArray->1:X 50379
                    IArray[Single] _7Unit;// 4:Array3->2:Unit 50378
                    Single _8Y;// 2:VectorAsArray->2:Y 50380
                    IArray[Single] _9Append;// 4:Array3->3:Append 50377
                    Single _10Z;// 2:VectorAsArray->3:Z 50381
                    IArray[Single] _11Append;// 4:Array3->6:Append 50376
                    Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 50394
                    Single _13At;// 1:VectorComponent-ext->3:At 50371
                    Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 50367
                    Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 50366
                    Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50382
                    Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 50365
                    Int32 _18One;// 13:PlusOne->1:One 50386
                    Int32 _19Add;// 13:PlusOne->0:Add 50385
                    Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 50383
                    Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 50364
                    Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 50391
                    Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50390
                    Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50388
                    Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50393
                    Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50392
                    Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 50387
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 50363
                    Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 50360
                    Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 50359
                    IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 50655
                    Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 50405
                    Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 50404
                    Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 50403
                    Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50415
                    Single _36X;// 2:VectorAsArray->1:X 50426
                    IArray[Single] _37Unit;// 4:Array3->2:Unit 50425
                    Single _38Y;// 2:VectorAsArray->2:Y 50427
                    IArray[Single] _39Append;// 4:Array3->3:Append 50424
                    Single _40Z;// 2:VectorAsArray->3:Z 50428
                    IArray[Single] _41Append;// 4:Array3->6:Append 50423
                    Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 50441
                    Single _43At;// 1:VectorComponent-ext->3:At 50418
                    Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 50414
                    Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 50413
                    Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50429
                    Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 50412
                    Int32 _48One;// 13:PlusOne->1:One 50433
                    Int32 _49Add;// 13:PlusOne->0:Add 50432
                    Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 50430
                    Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 50411
                    Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 50438
                    Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50437
                    Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50435
                    Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50440
                    Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50439
                    Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 50434
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 50410
                    Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 50407
                    Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 50406
                    Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 50401
                    Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 50399
                    Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50451
                    Single _64X;// 2:VectorAsArray->1:X 50462
                    IArray[Single] _65Unit;// 4:Array3->2:Unit 50461
                    Single _66Y;// 2:VectorAsArray->2:Y 50463
                    IArray[Single] _67Append;// 4:Array3->3:Append 50460
                    Single _68Z;// 2:VectorAsArray->3:Z 50464
                    IArray[Single] _69Append;// 4:Array3->6:Append 50459
                    Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 50477
                    Single _71At;// 1:VectorComponent-ext->3:At 50454
                    Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 50450
                    Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 50449
                    Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50465
                    Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 50448
                    Int32 _76One;// 13:PlusOne->1:One 50469
                    Int32 _77Add;// 13:PlusOne->0:Add 50468
                    Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 50466
                    Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 50447
                    Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 50474
                    Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50473
                    Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50471
                    Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50476
                    Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50475
                    Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 50470
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 50446
                    Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 50443
                    Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 50442
                    Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 50397
                    IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 50395
                    Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 50352
                    Single _92At;// 62:NoiseDeformerAt3-ext->4:At 50351
                    Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 50350
                    Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 50479
                    Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 50478
                    Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 50355
                    Single _97At;// 62:NoiseDeformerAt3-ext->7:At 50354
                    Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 50353
                    Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 50349
                    Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 50481
                    Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 50480
                    Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 50358
                    Single _103At;// 62:NoiseDeformerAt3-ext->10:At 50357
                    Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 50356
                    Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 50348
                    Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 50497
                    Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 50505
                    Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 50504
                    Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 50502
                    Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 50501
                    Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 50499
                    IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 50498
                    Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 50490
                    Single _114At;// 66:NoiseDeformerAt3-ext->4:At 50489
                    Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 50488
                    Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 50493
                    Single _117At;// 66:NoiseDeformerAt3-ext->7:At 50492
                    Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 50491
                    Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 50487
                    Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 50496
                    Single _121At;// 66:NoiseDeformerAt3-ext->10:At 50495
                    Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 50494
                    Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 50486
                    Single _124Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50509
                    Single _125Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50511
                    Single _126Multiply;// 42:NoiseDeformerSCurve-ext->41:Multiply 50510
                    Single _127Subtract;// 42:NoiseDeformerSCurve-ext->39:Subtract 50508
                    Single _128Multiply;// 42:NoiseDeformerSCurve-ext->35:Multiply 50513
                    Single _129Multiply;// 42:NoiseDeformerSCurve-ext->37:Multiply 50507
                    Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 50343
                    Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 50535
                    Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 50534
                    Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 50533
                    Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 50531
                    IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 50530
                    Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 50523
                    Single _137At;// 72:NoiseDeformerAt3-ext->4:At 50522
                    Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 50521
                    Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 50536
                    Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 50526
                    Single _141At;// 72:NoiseDeformerAt3-ext->7:At 50525
                    Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 50524
                    Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 50520
                    Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 50529
                    Single _145At;// 72:NoiseDeformerAt3-ext->10:At 50528
                    Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 50527
                    Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 50519
                    Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 50556
                    Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 50555
                    Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 50553
                    IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 50552
                    Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 50545
                    Single _153At;// 75:NoiseDeformerAt3-ext->4:At 50544
                    Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 50543
                    Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 50548
                    Single _156At;// 75:NoiseDeformerAt3-ext->7:At 50547
                    Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 50546
                    Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 50542
                    Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 50551
                    Single _160At;// 75:NoiseDeformerAt3-ext->10:At 50550
                    Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 50549
                    Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 50541
                    Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 50514
                    Single _164Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50560
                    Single _165Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50562
                    Single _166Multiply;// 56:NoiseDeformerSCurve-ext->41:Multiply 50561
                    Single _167Subtract;// 56:NoiseDeformerSCurve-ext->39:Subtract 50559
                    Single _168Multiply;// 56:NoiseDeformerSCurve-ext->35:Multiply 50564
                    Single _169Multiply;// 56:NoiseDeformerSCurve-ext->37:Multiply 50558
                    Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 50342
                    Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 50584
                    Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 50583
                    IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 50582
                    Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 50575
                    Single _175At;// 82:NoiseDeformerAt3-ext->4:At 50574
                    Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 50573
                    Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 50578
                    Single _178At;// 82:NoiseDeformerAt3-ext->7:At 50577
                    Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 50576
                    Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 50572
                    Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 50585
                    Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 50581
                    Single _183At;// 82:NoiseDeformerAt3-ext->10:At 50580
                    Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 50579
                    Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 50571
                    Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 50602
                    IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 50601
                    Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 50594
                    Single _189At;// 86:NoiseDeformerAt3-ext->4:At 50593
                    Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 50592
                    Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 50597
                    Single _192At;// 86:NoiseDeformerAt3-ext->7:At 50596
                    Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 50595
                    Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 50591
                    Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 50600
                    Single _196At;// 86:NoiseDeformerAt3-ext->10:At 50599
                    Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 50598
                    Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 50590
                    Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 50566
                    Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 50620
                    IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 50619
                    Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 50612
                    Single _203At;// 92:NoiseDeformerAt3-ext->4:At 50611
                    Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 50610
                    Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 50615
                    Single _206At;// 92:NoiseDeformerAt3-ext->7:At 50614
                    Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 50613
                    Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 50609
                    Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 50618
                    Single _210At;// 92:NoiseDeformerAt3-ext->10:At 50617
                    Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 50616
                    Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 50608
                    Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 50637
                    IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 50636
                    Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 50629
                    Single _216At;// 96:NoiseDeformerAt3-ext->4:At 50628
                    Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 50627
                    Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 50632
                    Single _219At;// 96:NoiseDeformerAt3-ext->7:At 50631
                    Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 50630
                    Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 50626
                    Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 50635
                    Single _223At;// 96:NoiseDeformerAt3-ext->10:At 50634
                    Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 50633
                    Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 50625
                    Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 50603
                    Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 50565
                    Single _228Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50641
                    Single _229Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50643
                    Single _230Multiply;// 58:NoiseDeformerSCurve-ext->41:Multiply 50642
                    Single _231Subtract;// 58:NoiseDeformerSCurve-ext->39:Subtract 50640
                    Single _232Multiply;// 58:NoiseDeformerSCurve-ext->35:Multiply 50645
                    Single _233Multiply;// 58:NoiseDeformerSCurve-ext->37:Multiply 50639
                    Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 50341
                    Single _235NaN;// 118:FloatIsNaN->1:NaN 50339
                    Int32 _236Compare;// 118:FloatIsNaN->2:Compare 50338
                    Int32 _237Zero;// 118:FloatIsNaN->4:Zero 50340
                    Boolean _238Equal;// 118:FloatIsNaN->3:Equal 50337
                    Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 50311
                    Int32 _241Zero;// 48:First->2:Zero 50658
                    Single _242At;// 48:First->0:At 50657
                    Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 50310
                    IArray[Single] _244Unit;// 43:Array2->2:Unit 50308
                    Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 50660
                    IArray[Single] _246Append;// 43:Array2->3:Append 50307
                    _0One = One();
                    _1At = At(x0, _0One);
                    _2AsInt = AsInt(_1At);
                    _3At = At(_13Map, _2AsInt);
                    _4Constant = 4096;
                    _5At = At(_23GenerateN, _2AsInt);
                    _6X = X(_5At);
                    _7Unit = Unit(_6X);
                    _8Y = Y(_5At);
                    _9Append = Append(_7Unit, _8Y);
                    _10Z = Z(_5At);
                    _11Append = Append(_9Append, _10Z);
                    _12Zero = Zero();
                    _13At = At(_11Append, _12Zero);
                    _14Add = Add(_4Constant, _13At);
                    _15Floor = Floor(_14Add);
                    _16Constant = 255;
                    _17And = And(_15Floor, _16Constant);
                    _18One = One();
                    _19Add = Add(_17And, _18One);
                    _20And = And(_19Add, _16Constant);
                    _21Pair = Pair(_17And, _20And);
                    _22Floor = Floor(_14Add);
                    _23AsFloat = AsFloat(_22Floor);
                    _24Subtract = Subtract(_14Add, _23AsFloat);
                    _25FloatOne = FloatOne();
                    _26Subtract = Subtract(_24Subtract, _25FloatOne);
                    _27Pair = Pair(_24Subtract, _26Subtract);
                    _28Pair = Pair(_21Pair, _27Pair);
                    _29PairItem2 = PairItem2(_28Pair);
                    _30PairItem1 = PairItem1(_29PairItem2);
                    _31PairItem2 = PairItem2(x1);
                    _32PairItem1 = PairItem1(_28Pair);
                    _33PairItem1 = PairItem1(_32PairItem1);
                    _34At = At(_31PairItem2, _33PairItem1);
                    _35Constant = 4096;
                    _36X = X(_5At);
                    _37Unit = Unit(_36X);
                    _38Y = Y(_5At);
                    _39Append = Append(_37Unit, _38Y);
                    _40Z = Z(_5At);
                    _41Append = Append(_39Append, _40Z);
                    _42One = One();
                    _43At = At(_41Append, _42One);
                    _44Add = Add(_35Constant, _43At);
                    _45Floor = Floor(_44Add);
                    _46Constant = 255;
                    _47And = And(_45Floor, _46Constant);
                    _48One = One();
                    _49Add = Add(_47And, _48One);
                    _50And = And(_49Add, _46Constant);
                    _51Pair = Pair(_47And, _50And);
                    _52Floor = Floor(_44Add);
                    _53AsFloat = AsFloat(_52Floor);
                    _54Subtract = Subtract(_44Add, _53AsFloat);
                    _55FloatOne = FloatOne();
                    _56Subtract = Subtract(_54Subtract, _55FloatOne);
                    _57Pair = Pair(_54Subtract, _56Subtract);
                    _58Pair = Pair(_51Pair, _57Pair);
                    _59PairItem1 = PairItem1(_58Pair);
                    _60PairItem1 = PairItem1(_59PairItem1);
                    _61Add = Add(_34At, _60PairItem1);
                    _62At = At(_31PairItem2, _61Add);
                    _63Constant = 4096;
                    _64X = X(_5At);
                    _65Unit = Unit(_64X);
                    _66Y = Y(_5At);
                    _67Append = Append(_65Unit, _66Y);
                    _68Z = Z(_5At);
                    _69Append = Append(_67Append, _68Z);
                    _70Two = Two();
                    _71At = At(_69Append, _70Two);
                    _72Add = Add(_63Constant, _71At);
                    _73Floor = Floor(_72Add);
                    _74Constant = 255;
                    _75And = And(_73Floor, _74Constant);
                    _76One = One();
                    _77Add = Add(_75And, _76One);
                    _78And = And(_77Add, _74Constant);
                    _79Pair = Pair(_75And, _78And);
                    _80Floor = Floor(_72Add);
                    _81AsFloat = AsFloat(_80Floor);
                    _82Subtract = Subtract(_72Add, _81AsFloat);
                    _83FloatOne = FloatOne();
                    _84Subtract = Subtract(_82Subtract, _83FloatOne);
                    _85Pair = Pair(_82Subtract, _84Subtract);
                    _86Pair = Pair(_79Pair, _85Pair);
                    _87PairItem1 = PairItem1(_86Pair);
                    _88PairItem1 = PairItem1(_87PairItem1);
                    _89Add = Add(_62At, _88PairItem1);
                    _90At = At(_24PairItem1, _89Add);
                    _91Zero = Zero();
                    _92At = At(_90At, _91Zero);
                    _93Multiply = Multiply(_30PairItem1, _92At);
                    _94PairItem2 = PairItem2(_58Pair);
                    _95PairItem1 = PairItem1(_94PairItem2);
                    _96One = One();
                    _97At = At(_90At, _96One);
                    _98Multiply = Multiply(_95PairItem1, _97At);
                    _99Add = Add(_93Multiply, _98Multiply);
                    _100PairItem2 = PairItem2(_86Pair);
                    _101PairItem1 = PairItem1(_100PairItem2);
                    _102Two = Two();
                    _103At = At(_90At, _102Two);
                    _104Multiply = Multiply(_101PairItem1, _103At);
                    _105Add = Add(_99Add, _104Multiply);
                    _106PairItem2 = PairItem2(_29PairItem2);
                    _107PairItem2 = PairItem2(_32PairItem1);
                    _108At = At(_31PairItem2, _107PairItem2);
                    _109Add = Add(_108At, _60PairItem1);
                    _110At = At(_31PairItem2, _109Add);
                    _111Add = Add(_110At, _88PairItem1);
                    _112At = At(_24PairItem1, _111Add);
                    _113Zero = Zero();
                    _114At = At(_112At, _113Zero);
                    _115Multiply = Multiply(_106PairItem2, _114At);
                    _116One = One();
                    _117At = At(_112At, _116One);
                    _118Multiply = Multiply(_95PairItem1, _117At);
                    _119Add = Add(_115Multiply, _118Multiply);
                    _120Two = Two();
                    _121At = At(_112At, _120Two);
                    _122Multiply = Multiply(_101PairItem1, _121At);
                    _123Add = Add(_119Add, _122Multiply);
                    _124Constant = 3;
                    _125Constant = 2;
                    _126Multiply = Multiply(_125Constant, _30PairItem1);
                    _127Subtract = Subtract(_124Constant, _126Multiply);
                    _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                    _129Multiply = Multiply(_127Subtract, _128Multiply);
                    _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                    _131PairItem2 = PairItem2(_59PairItem1);
                    _132Add = Add(_34At, _131PairItem2);
                    _133At = At(_31PairItem2, _132Add);
                    _134Add = Add(_133At, _88PairItem1);
                    _135At = At(_24PairItem1, _134Add);
                    _136Zero = Zero();
                    _137At = At(_135At, _136Zero);
                    _138Multiply = Multiply(_30PairItem1, _137At);
                    _139PairItem2 = PairItem2(_94PairItem2);
                    _140One = One();
                    _141At = At(_135At, _140One);
                    _142Multiply = Multiply(_139PairItem2, _141At);
                    _143Add = Add(_138Multiply, _142Multiply);
                    _144Two = Two();
                    _145At = At(_135At, _144Two);
                    _146Multiply = Multiply(_101PairItem1, _145At);
                    _147Add = Add(_143Add, _146Multiply);
                    _148Add = Add(_108At, _131PairItem2);
                    _149At = At(_31PairItem2, _148Add);
                    _150Add = Add(_149At, _88PairItem1);
                    _151At = At(_24PairItem1, _150Add);
                    _152Zero = Zero();
                    _153At = At(_151At, _152Zero);
                    _154Multiply = Multiply(_106PairItem2, _153At);
                    _155One = One();
                    _156At = At(_151At, _155One);
                    _157Multiply = Multiply(_139PairItem2, _156At);
                    _158Add = Add(_154Multiply, _157Multiply);
                    _159Two = Two();
                    _160At = At(_151At, _159Two);
                    _161Multiply = Multiply(_101PairItem1, _160At);
                    _162Add = Add(_158Add, _161Multiply);
                    _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                    _164Constant = 3;
                    _165Constant = 2;
                    _166Multiply = Multiply(_165Constant, _95PairItem1);
                    _167Subtract = Subtract(_164Constant, _166Multiply);
                    _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                    _169Multiply = Multiply(_167Subtract, _168Multiply);
                    _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                    _171PairItem2 = PairItem2(_87PairItem1);
                    _172Add = Add(_62At, _171PairItem2);
                    _173At = At(_24PairItem1, _172Add);
                    _174Zero = Zero();
                    _175At = At(_173At, _174Zero);
                    _176Multiply = Multiply(_30PairItem1, _175At);
                    _177One = One();
                    _178At = At(_173At, _177One);
                    _179Multiply = Multiply(_95PairItem1, _178At);
                    _180Add = Add(_176Multiply, _179Multiply);
                    _181PairItem2 = PairItem2(_100PairItem2);
                    _182Two = Two();
                    _183At = At(_173At, _182Two);
                    _184Multiply = Multiply(_181PairItem2, _183At);
                    _185Add = Add(_180Add, _184Multiply);
                    _186Add = Add(_110At, _171PairItem2);
                    _187At = At(_24PairItem1, _186Add);
                    _188Zero = Zero();
                    _189At = At(_187At, _188Zero);
                    _190Multiply = Multiply(_106PairItem2, _189At);
                    _191One = One();
                    _192At = At(_187At, _191One);
                    _193Multiply = Multiply(_95PairItem1, _192At);
                    _194Add = Add(_190Multiply, _193Multiply);
                    _195Two = Two();
                    _196At = At(_187At, _195Two);
                    _197Multiply = Multiply(_181PairItem2, _196At);
                    _198Add = Add(_194Add, _197Multiply);
                    _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                    _200Add = Add(_133At, _171PairItem2);
                    _201At = At(_24PairItem1, _200Add);
                    _202Zero = Zero();
                    _203At = At(_201At, _202Zero);
                    _204Multiply = Multiply(_30PairItem1, _203At);
                    _205One = One();
                    _206At = At(_201At, _205One);
                    _207Multiply = Multiply(_139PairItem2, _206At);
                    _208Add = Add(_204Multiply, _207Multiply);
                    _209Two = Two();
                    _210At = At(_201At, _209Two);
                    _211Multiply = Multiply(_181PairItem2, _210At);
                    _212Add = Add(_208Add, _211Multiply);
                    _213Add = Add(_149At, _171PairItem2);
                    _214At = At(_24PairItem1, _213Add);
                    _215Zero = Zero();
                    _216At = At(_214At, _215Zero);
                    _217Multiply = Multiply(_106PairItem2, _216At);
                    _218One = One();
                    _219At = At(_214At, _218One);
                    _220Multiply = Multiply(_139PairItem2, _219At);
                    _221Add = Add(_217Multiply, _220Multiply);
                    _222Two = Two();
                    _223At = At(_214At, _222Two);
                    _224Multiply = Multiply(_181PairItem2, _223At);
                    _225Add = Add(_221Add, _224Multiply);
                    _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                    _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                    _228Constant = 3;
                    _229Constant = 2;
                    _230Multiply = Multiply(_229Constant, _101PairItem1);
                    _231Subtract = Subtract(_228Constant, _230Multiply);
                    _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                    _233Multiply = Multiply(_231Subtract, _232Multiply);
                    _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                    _235NaN = NaN();
                    _236Compare = Compare(_234FloatLerp, _235NaN);
                    _237Zero = Zero();
                    _238Equal = Equal(_236Compare, _237Zero);
                    _240Multiply = Multiply(_3At, if (_238Equal)
                        {
                          Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 50646
                          _239FloatZero = FloatZero();
                          _239FloatZero;
                          }else
                        {
                          _234FloatLerp;
                          });
                    _241Zero = Zero();
                    _242At = At(x0, _241Zero);
                    _243Add = Add(_240Multiply, _242At);
                    _244Unit = Unit(_243Add);
                    _245Add = Add(_1At, _25FloatOne);
                    _246Append = Append(_244Unit, _245Add);
                    _246Append;
                    });
                _27Count = Count(_26GenerateN);
                _28One = One();
                _29Subtract = Subtract(_27Count, _28One);
                _30At = At(_26GenerateN, _29Subtract);
                _31Zero = Zero();
                _32At = At(_30At, _31Zero);
                _32At;
                }, _8X, _5Y);
            _11Vector3 = Vector3(_7Apply2, _9Apply2, _10Apply2);
            _12Vector3 = Vector3(strengthX, strengthY, strengthZ);
            _13Multiply = Multiply(_11Vector3, _12Vector3);
            _14Add = Add(x0, _13Multiply);
            _14Add;
            }, _28Pair);
        _36Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _30IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 50818
            _30IsValidNode = IsValidNode(gizmo node);
            if (_30IsValidNode)
              {
                Matrix _31ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 50822
                Matrix _32InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 50823
                Matrix _33Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 50821
                _31ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _32InvertMatrix = InvertMatrix(modifierTransform);
                _33Multiply = Multiply(_31ObjectTransformBeforeWSM, _32InvertMatrix);
                _33Multiply;
                }else
              {
                Matrix _34MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 50824
                _34MatrixIdentity = MatrixIdentity();
                _34MatrixIdentity;
                };
            }else
          {
            Matrix _35MatrixIdentity;// 16:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 50825
            _35MatrixIdentity = MatrixIdentity();
            _35MatrixIdentity;
            };
        _37InvertMatrix = InvertMatrix(_36Pass-through: Matrix);
        _38ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 2:DeformVertices-ext->11:Transform 50264
            Vector3 _1Apply1;// 2:DeformVertices-ext->8:Apply1 50263
            Vector3 _2Transform;// 2:DeformVertices-ext->9:Transform 50262
            _0Transform = Transform(x0, _37InvertMatrix);
            _1Apply1 = Apply1(_29Bind2of2, _0Transform);
            _2Transform = Transform(_1Apply1, _36Pass-through: Matrix);
            _2Transform;
            });
        _39Zero = Zero();
        _40PerVertexData = PerVertexData(mesh, _39Zero);
        _41Combine3 = Combine3(_0MeshVertices, _38ParallelMap, _40PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 50254
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _42SetMeshVertices = SetMeshVertices(mesh, _41Combine3);
        _42SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformVertices-ext->4:MeshVertices 50261
        Int32 _1Constant;// 72:NoiseDeformerNoiseInit-ext->0:Constant 50701
        Int32 _2One;// 126:PlusOne->1:One 50699
        Int32 _3Add;// 126:PlusOne->0:Add 50698
        IArray[Int32] _4Range;// 72:NoiseDeformerNoiseInit-ext->93:Range 50696
        Int32 _5Constant;// 72:NoiseDeformerNoiseInit-ext->0:Constant 50723
        IArray[Int32] _6Range;// 72:NoiseDeformerNoiseInit-ext->105:Range 50722
        IArray[IArray[Single]] _7Map;// 72:NoiseDeformerNoiseInit-ext->94:Map 50695
        IArray[IArray[Single]] _8Concatenate;// 72:NoiseDeformerNoiseInit-ext->70:Concatenate 50693
        IArray[Int32] _9Indices;// 72:NoiseDeformerNoiseInit-ext->2:Indices 50747
        Int32 _10Add;// 72:NoiseDeformerNoiseInit-ext->21:Add 50750
        Int32 _11Two;// 72:NoiseDeformerNoiseInit-ext->24:Two 50753
        Int32 _12Add;// 72:NoiseDeformerNoiseInit-ext->22:Add 50749
        IArray[Int32] _13Range;// 72:NoiseDeformerNoiseInit-ext->25:Range 50748
        Int32 _14Count;// 3:LastIndex->2:Count 50779
        Int32 _15One;// 3:MinusOne->2:One 50778
        Int32 _16Subtract;// 3:MinusOne->1:Subtract 50777
        Int32 _17At;// 35:Last->0:At 50774
        IArray[Int32] _18Map;// 72:NoiseDeformerNoiseInit-ext->20:Map 50765
        IArray[Int32] _19Aggregate;// 72:NoiseDeformerNoiseInit-ext->1:Aggregate 50745
        Int32 _20Two;// 72:NoiseDeformerNoiseInit-ext->67:Two 50793
        Int32 _21Add;// 72:NoiseDeformerNoiseInit-ext->66:Add 50791
        IArray[Int32] _22Range;// 72:NoiseDeformerNoiseInit-ext->69:Range 50790
        IArray[Int32] _23Map;// 72:NoiseDeformerNoiseInit-ext->82:Map 50788
        IArray[Int32] _24Map;// 79:SelectByIndex->2:Map 50798
        IArray[Tuple[Int32, Int32]] _25Combine;// 86:ZipToTuple->0:Combine 50786
        IArray[Int32] _26SetValues;// 72:NoiseDeformerNoiseInit-ext->76:SetValues 50742
        Tuple[IArray[IArray[Single]], IArray[Int32]] _27Pair;// 72:NoiseDeformerNoiseInit-ext->87:Pair 50692
        Func[Vector3, Vector3] _28Bind2of2;// 0:Noise-ext->5:Bind2of2 50267
        Matrix _35Pass-through: Matrix;// 0:Pass-through: Matrix 50234
        Matrix _36InvertMatrix;// 2:DeformVertices-ext->7:InvertMatrix 50266
        IArray[Vector3] _37ParallelMap;// 2:DeformVertices-ext->5:ParallelMap 50260
        TriMesh _38SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 50259
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 256;
        _2One = One();
        _3Add = Add(_1Constant, _2One);
        _4Range = Range(_3Add);
        _5Constant = 3;
        _6Range = Range(_5Constant);
        _7Map = Map(_4Range, (Int32 x0) => 
          {
            Func[Int32, Single] _0Bind1of2;// 72:NoiseDeformerNoiseInit-ext->116:Bind1of2 50724
            IArray[Single] _1Map;// 72:NoiseDeformerNoiseInit-ext->108:Map 50721
            Int32 _2Zero;// 118:ArrayToVector3->2:Zero 50716
            Single _3At;// 118:ArrayToVector3->1:At 50715
            Int32 _4One;// 118:ArrayToVector3->3:One 50718
            Single _5At;// 118:ArrayToVector3->5:At 50717
            Int32 _6Two;// 118:ArrayToVector3->4:Two 50720
            Single _7At;// 118:ArrayToVector3->6:At 50719
            Vector3 _8Vector3;// 118:ArrayToVector3->7:Vector3 50714
            Vector3 _9Normalize;// 72:NoiseDeformerNoiseInit-ext->120:Normalize 50712
            Single _10X;// 117:VectorToArray->1:X 50709
            IArray[Single] _11Unit;// 4:Array3->2:Unit 50708
            Single _12Y;// 117:VectorToArray->2:Y 50710
            IArray[Single] _13Append;// 4:Array3->3:Append 50707
            Single _14Z;// 117:VectorToArray->3:Z 50711
            IArray[Single] _15Append;// 4:Array3->6:Append 50706
            _0Bind1of2 = Bind1of2((Int32 x0, Int32 x1) => 
              {
                Int32 _0Count;// 72:NoiseDeformerNoiseInit-ext->114:Count 50737
                Int32 _1Multiply;// 72:NoiseDeformerNoiseInit-ext->115:Multiply 50736
                Int32 _2Add;// 72:NoiseDeformerNoiseInit-ext->113:Add 50734
                Int32 _3RandInt;// 72:NoiseDeformerNoiseInit-ext->97:RandInt 50732
                Single _4AsFloat;// 72:NoiseDeformerNoiseInit-ext->121:AsFloat 50731
                Single _5Abs;// 72:NoiseDeformerNoiseInit-ext->123:Abs 50730
                Int32 _6AsInt;// 72:NoiseDeformerNoiseInit-ext->122:AsInt 50729
                Int32 _7Add;// 72:NoiseDeformerNoiseInit-ext->99:Add 50739
                Int32 _8Modulo;// 72:NoiseDeformerNoiseInit-ext->98:Modulo 50728
                Int32 _9Subtract;// 72:NoiseDeformerNoiseInit-ext->104:Subtract 50727
                Single _10AsFloat;// 72:NoiseDeformerNoiseInit-ext->100:AsFloat 50726
                Single _11AsFloat;// 72:NoiseDeformerNoiseInit-ext->103:AsFloat 50741
                Single _12Divide;// 72:NoiseDeformerNoiseInit-ext->101:Divide 50725
                _0Count = Count(_4Range);
                _1Multiply = Multiply(_0Count, x1);
                _2Add = Add(x0, _1Multiply);
                _3RandInt = RandInt(seed, _2Add);
                _4AsFloat = AsFloat(_3RandInt);
                _5Abs = Abs(_4AsFloat);
                _6AsInt = AsInt(_5Abs);
                _7Add = Add(_1Constant, _1Constant);
                _8Modulo = Modulo(_6AsInt, _7Add);
                _9Subtract = Subtract(_8Modulo, _1Constant);
                _10AsFloat = AsFloat(_9Subtract);
                _11AsFloat = AsFloat(_1Constant);
                _12Divide = Divide(_10AsFloat, _11AsFloat);
                _12Divide;
                }, x0);
            _1Map = Map(_6Range, _0Bind1of2);
            _2Zero = Zero();
            _3At = At(_1Map, _2Zero);
            _4One = One();
            _5At = At(_1Map, _4One);
            _6Two = Two();
            _7At = At(_1Map, _6Two);
            _8Vector3 = Vector3(_3At, _5At, _7At);
            _9Normalize = Normalize(_8Vector3);
            _10X = X(_9Normalize);
            _11Unit = Unit(_10X);
            _12Y = Y(_9Normalize);
            _13Append = Append(_11Unit, _12Y);
            _14Z = Z(_9Normalize);
            _15Append = Append(_13Append, _14Z);
            _15Append;
            });
        _8Concatenate = Concatenate(_7Map, _7Map);
        _9Indices = Indices(_7Map);
        _10Add = Add(_1Constant, _1Constant);
        _11Two = Two();
        _12Add = Add(_10Add, _11Two);
        _13Range = Range(_12Add);
        _14Count = Count(_9Indices);
        _15One = One();
        _16Subtract = Subtract(_14Count, _15One);
        _17At = At(_9Indices, _16Subtract);
        _18Map = Map(_9Indices, (Int32 x0) => 
          {
            Int32 _0Add;// 72:NoiseDeformerNoiseInit-ext->36:Add 50772
            Int32 _1RandInt;// 72:NoiseDeformerNoiseInit-ext->34:RandInt 50770
            Single _2AsFloat;// 72:NoiseDeformerNoiseInit-ext->92:AsFloat 50769
            Single _3Abs;// 72:NoiseDeformerNoiseInit-ext->90:Abs 50768
            Int32 _4AsInt;// 72:NoiseDeformerNoiseInit-ext->91:AsInt 50767
            Int32 _5Modulo;// 72:NoiseDeformerNoiseInit-ext->40:Modulo 50766
            _0Add = Add(_17At, x0);
            _1RandInt = RandInt(seed, _0Add);
            _2AsFloat = AsFloat(_1RandInt);
            _3Abs = Abs(_2AsFloat);
            _4AsInt = AsInt(_3Abs);
            _5Modulo = Modulo(_4AsInt, _1Constant);
            _5Modulo;
            });
        _19Aggregate = Aggregate(_9Indices, _13Range, (IArray[Int32] x0, Int32 x1) => 
          {
            Int32 _0At;// 72:NoiseDeformerNoiseInit-ext->52:At 50763
            Int32 _1At;// 72:NoiseDeformerNoiseInit-ext->60:At 50762
            Tuple[Int32, Int32] _2Pair;// 72:NoiseDeformerNoiseInit-ext->57:Pair 50760
            IArray[Tuple[Int32, Int32]] _3Unit;// 59:Array2->2:Unit 50759
            Int32 _4At;// 72:NoiseDeformerNoiseInit-ext->30:At 50783
            Tuple[Int32, Int32] _5Pair;// 72:NoiseDeformerNoiseInit-ext->55:Pair 50782
            IArray[Tuple[Int32, Int32]] _6Append;// 59:Array2->3:Append 50758
            IArray[Int32] _7SetValues;// 72:NoiseDeformerNoiseInit-ext->54:SetValues 50754
            _0At = At(_18Map, x1);
            _1At = At(x0, _0At);
            _2Pair = Pair(x1, _1At);
            _3Unit = Unit(_2Pair);
            _4At = At(x0, x1);
            _5Pair = Pair(_0At, _4At);
            _6Append = Append(_3Unit, _5Pair);
            _7SetValues = SetValues(x0, _6Append);
            _7SetValues;
            });
        _20Two = Two();
        _21Add = Add(_1Constant, _20Two);
        _22Range = Range(_21Add);
        _23Map = Map(_22Range, (Int32 x0) => 
          {
            Int32 _0Add;// 72:NoiseDeformerNoiseInit-ext->83:Add 50794
            _0Add = Add(x0, _1Constant);
            _0Add;
            });
        _24Map = Map(_22Range, (Int32 x0) => 
          {
            Int32 _0At;// 79:SelectByIndex->3:At 50799
            _0At = At(_19Aggregate, x0);
            _0At;
            });
        _25Combine = Combine(_23Map, _24Map, (Int32 x0, Int32 x1) => 
          {
            Tuple[Int32, Int32] _0Pair;// 86:ZipToTuple->4:Pair 50787
            _0Pair = Pair(x0, x1);
            _0Pair;
            });
        _26SetValues = SetValues(_19Aggregate, _25Combine);
        _27Pair = Pair(_8Concatenate, _26SetValues);
        _28Bind2of2 = Bind2of2((Vector3 x0, Tuple[IArray[IArray[Single]], IArray[Int32]] x1) => 
          {
            Single _0FloatOne;// 0:NoiseDeformer-ext->40:FloatOne 50683
            Single _1Divide;// 0:NoiseDeformer-ext->41:Divide 50682
            Vector3 _2MultiplyByScalar;// 0:NoiseDeformer-ext->16:MultiplyByScalar 50680
            Vector3 _3Constant;// 0:NoiseDeformer-ext->0:Constant 50684
            Vector3 _4Add;// 0:NoiseDeformer-ext->18:Add 50679
            Single _5Y;// 0:NoiseDeformer-ext->6:Y 50677
            Single _6Z;// 0:NoiseDeformer-ext->7:Z 50685
            Single _7Apply2;// 0:NoiseDeformer-ext->4:Apply2 50280
            Single _8X;// 0:NoiseDeformer-ext->5:X 50688
            Single _9Apply2;// 0:NoiseDeformer-ext->2:Apply2 50687
            Single _10Apply2;// 0:NoiseDeformer-ext->15:Apply2 50690
            Vector3 _11Vector3;// 0:NoiseDeformer-ext->14:Vector3 50278
            Vector3 _12Vector3;// 13:Vector3 50806
            Vector3 _13Multiply;// 0:NoiseDeformer-ext->22:Multiply 50277
            Vector3 _14Add;// 0:NoiseDeformer-ext->25:Add 50276
            _0FloatOne = FloatOne();
            _1Divide = Divide(_0FloatOne, scale);
            _2MultiplyByScalar = MultiplyByScalar(x0, _1Divide);
            _3Constant = new Microsoft.Xna.Framework.Vector3(0.5, 0.5, 0.5);
            _4Add = Add(_2MultiplyByScalar, _3Constant);
            _5Y = Y(_4Add);
            _6Z = Z(_4Add);
            _7Apply2 = Apply2((Single x0, Single x1) => 
              {
                Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 50301
                IArray[Single] _1Unit;// 37:Array2->2:Unit 50300
                Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 50302
                IArray[Single] _3Append;// 37:Array2->3:Append 50299
                Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 50662
                Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 50303
                Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 50317
                Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 50318
                Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 50663
                IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 50316
                Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 50665
                Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 50664
                Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 50325
                IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 50315
                Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 50670
                Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 50673
                Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 50672
                Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 50675
                Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 50676
                Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 50674
                Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 50671
                Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 50669
                Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 50666
                IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 50650
                IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 50654
                Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 50661
                IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 50296
                Int32 _27Count;// 3:LastIndex->2:Count 50295
                Int32 _28One;// 3:MinusOne->2:One 50294
                Int32 _29Subtract;// 3:MinusOne->1:Subtract 50293
                IArray[Single] _30At;// 68:Last->0:At 50290
                Int32 _31Zero;// 69:First->2:Zero 50288
                Single _32At;// 69:First->0:At 50287
                _0FloatZero = FloatZero();
                _1Unit = Unit(_0FloatZero);
                _2FloatZero = FloatZero();
                _3Append = Append(_1Unit, _2FloatZero);
                _4AsFloat = AsFloat(numIterations);
                _5AsInt = AsInt(_4AsFloat);
                _6FloatOne = FloatOne();
                _7AsInt = AsInt(_4AsFloat);
                _8Constant = 2;
                _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
                  {
                    Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 50320
                    _0Multiply = Multiply(_8Constant, x0);
                    _0Multiply;
                    });
                _10FloatOne = FloatOne();
                _11Subtract = Subtract(_10FloatOne, roughness);
                _12NegativeFloat = NegativeFloat(_11Subtract);
                _13Map = Map(_9GenerateN, (Single x0) => 
                  {
                    Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 50323
                    _0Pow = Pow(x0, _12NegativeFloat);
                    _0Pow;
                    });
                _14AsFloat = AsFloat(phase);
                _15Constant = 0.005;
                _16Multiply = Multiply(frequency, _15Constant);
                _17Constant = 1200;
                _18Constant = 4800;
                _19Divide = Divide(_17Constant, _18Constant);
                _20Multiply = Multiply(_16Multiply, _19Divide);
                _21Multiply = Multiply(_14AsFloat, _20Multiply);
                _22Vector3 = Vector3(x0, x1, _21Multiply);
                _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
                  {
                    Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 50652
                    _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                    _0MultiplyByScalar;
                    });
                _24PairItem1 = PairItem1(x1);
                _25FloatOne = FloatOne();
                _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
                  {
                    Int32 _0One;// 49:Second->2:One 50330
                    Single _1At;// 49:Second->0:At 50329
                    Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 50327
                    Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 50313
                    Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50368
                    Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 50648
                    Single _6X;// 2:VectorAsArray->1:X 50379
                    IArray[Single] _7Unit;// 4:Array3->2:Unit 50378
                    Single _8Y;// 2:VectorAsArray->2:Y 50380
                    IArray[Single] _9Append;// 4:Array3->3:Append 50377
                    Single _10Z;// 2:VectorAsArray->3:Z 50381
                    IArray[Single] _11Append;// 4:Array3->6:Append 50376
                    Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 50394
                    Single _13At;// 1:VectorComponent-ext->3:At 50371
                    Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 50367
                    Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 50366
                    Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50382
                    Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 50365
                    Int32 _18One;// 13:PlusOne->1:One 50386
                    Int32 _19Add;// 13:PlusOne->0:Add 50385
                    Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 50383
                    Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 50364
                    Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 50391
                    Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50390
                    Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50388
                    Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50393
                    Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50392
                    Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 50387
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 50363
                    Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 50360
                    Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 50359
                    IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 50655
                    Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 50405
                    Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 50404
                    Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 50403
                    Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50415
                    Single _36X;// 2:VectorAsArray->1:X 50426
                    IArray[Single] _37Unit;// 4:Array3->2:Unit 50425
                    Single _38Y;// 2:VectorAsArray->2:Y 50427
                    IArray[Single] _39Append;// 4:Array3->3:Append 50424
                    Single _40Z;// 2:VectorAsArray->3:Z 50428
                    IArray[Single] _41Append;// 4:Array3->6:Append 50423
                    Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 50441
                    Single _43At;// 1:VectorComponent-ext->3:At 50418
                    Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 50414
                    Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 50413
                    Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50429
                    Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 50412
                    Int32 _48One;// 13:PlusOne->1:One 50433
                    Int32 _49Add;// 13:PlusOne->0:Add 50432
                    Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 50430
                    Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 50411
                    Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 50438
                    Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50437
                    Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50435
                    Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50440
                    Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50439
                    Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 50434
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 50410
                    Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 50407
                    Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 50406
                    Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 50401
                    Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 50399
                    Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50451
                    Single _64X;// 2:VectorAsArray->1:X 50462
                    IArray[Single] _65Unit;// 4:Array3->2:Unit 50461
                    Single _66Y;// 2:VectorAsArray->2:Y 50463
                    IArray[Single] _67Append;// 4:Array3->3:Append 50460
                    Single _68Z;// 2:VectorAsArray->3:Z 50464
                    IArray[Single] _69Append;// 4:Array3->6:Append 50459
                    Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 50477
                    Single _71At;// 1:VectorComponent-ext->3:At 50454
                    Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 50450
                    Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 50449
                    Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50465
                    Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 50448
                    Int32 _76One;// 13:PlusOne->1:One 50469
                    Int32 _77Add;// 13:PlusOne->0:Add 50468
                    Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 50466
                    Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 50447
                    Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 50474
                    Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50473
                    Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50471
                    Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50476
                    Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50475
                    Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 50470
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 50446
                    Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 50443
                    Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 50442
                    Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 50397
                    IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 50395
                    Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 50352
                    Single _92At;// 62:NoiseDeformerAt3-ext->4:At 50351
                    Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 50350
                    Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 50479
                    Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 50478
                    Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 50355
                    Single _97At;// 62:NoiseDeformerAt3-ext->7:At 50354
                    Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 50353
                    Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 50349
                    Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 50481
                    Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 50480
                    Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 50358
                    Single _103At;// 62:NoiseDeformerAt3-ext->10:At 50357
                    Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 50356
                    Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 50348
                    Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 50497
                    Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 50505
                    Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 50504
                    Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 50502
                    Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 50501
                    Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 50499
                    IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 50498
                    Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 50490
                    Single _114At;// 66:NoiseDeformerAt3-ext->4:At 50489
                    Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 50488
                    Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 50493
                    Single _117At;// 66:NoiseDeformerAt3-ext->7:At 50492
                    Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 50491
                    Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 50487
                    Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 50496
                    Single _121At;// 66:NoiseDeformerAt3-ext->10:At 50495
                    Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 50494
                    Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 50486
                    Single _124Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50509
                    Single _125Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50511
                    Single _126Multiply;// 42:NoiseDeformerSCurve-ext->41:Multiply 50510
                    Single _127Subtract;// 42:NoiseDeformerSCurve-ext->39:Subtract 50508
                    Single _128Multiply;// 42:NoiseDeformerSCurve-ext->35:Multiply 50513
                    Single _129Multiply;// 42:NoiseDeformerSCurve-ext->37:Multiply 50507
                    Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 50343
                    Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 50535
                    Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 50534
                    Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 50533
                    Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 50531
                    IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 50530
                    Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 50523
                    Single _137At;// 72:NoiseDeformerAt3-ext->4:At 50522
                    Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 50521
                    Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 50536
                    Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 50526
                    Single _141At;// 72:NoiseDeformerAt3-ext->7:At 50525
                    Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 50524
                    Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 50520
                    Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 50529
                    Single _145At;// 72:NoiseDeformerAt3-ext->10:At 50528
                    Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 50527
                    Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 50519
                    Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 50556
                    Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 50555
                    Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 50553
                    IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 50552
                    Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 50545
                    Single _153At;// 75:NoiseDeformerAt3-ext->4:At 50544
                    Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 50543
                    Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 50548
                    Single _156At;// 75:NoiseDeformerAt3-ext->7:At 50547
                    Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 50546
                    Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 50542
                    Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 50551
                    Single _160At;// 75:NoiseDeformerAt3-ext->10:At 50550
                    Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 50549
                    Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 50541
                    Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 50514
                    Single _164Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50560
                    Single _165Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50562
                    Single _166Multiply;// 56:NoiseDeformerSCurve-ext->41:Multiply 50561
                    Single _167Subtract;// 56:NoiseDeformerSCurve-ext->39:Subtract 50559
                    Single _168Multiply;// 56:NoiseDeformerSCurve-ext->35:Multiply 50564
                    Single _169Multiply;// 56:NoiseDeformerSCurve-ext->37:Multiply 50558
                    Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 50342
                    Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 50584
                    Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 50583
                    IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 50582
                    Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 50575
                    Single _175At;// 82:NoiseDeformerAt3-ext->4:At 50574
                    Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 50573
                    Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 50578
                    Single _178At;// 82:NoiseDeformerAt3-ext->7:At 50577
                    Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 50576
                    Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 50572
                    Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 50585
                    Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 50581
                    Single _183At;// 82:NoiseDeformerAt3-ext->10:At 50580
                    Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 50579
                    Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 50571
                    Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 50602
                    IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 50601
                    Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 50594
                    Single _189At;// 86:NoiseDeformerAt3-ext->4:At 50593
                    Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 50592
                    Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 50597
                    Single _192At;// 86:NoiseDeformerAt3-ext->7:At 50596
                    Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 50595
                    Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 50591
                    Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 50600
                    Single _196At;// 86:NoiseDeformerAt3-ext->10:At 50599
                    Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 50598
                    Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 50590
                    Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 50566
                    Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 50620
                    IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 50619
                    Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 50612
                    Single _203At;// 92:NoiseDeformerAt3-ext->4:At 50611
                    Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 50610
                    Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 50615
                    Single _206At;// 92:NoiseDeformerAt3-ext->7:At 50614
                    Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 50613
                    Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 50609
                    Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 50618
                    Single _210At;// 92:NoiseDeformerAt3-ext->10:At 50617
                    Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 50616
                    Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 50608
                    Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 50637
                    IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 50636
                    Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 50629
                    Single _216At;// 96:NoiseDeformerAt3-ext->4:At 50628
                    Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 50627
                    Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 50632
                    Single _219At;// 96:NoiseDeformerAt3-ext->7:At 50631
                    Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 50630
                    Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 50626
                    Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 50635
                    Single _223At;// 96:NoiseDeformerAt3-ext->10:At 50634
                    Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 50633
                    Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 50625
                    Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 50603
                    Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 50565
                    Single _228Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50641
                    Single _229Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50643
                    Single _230Multiply;// 58:NoiseDeformerSCurve-ext->41:Multiply 50642
                    Single _231Subtract;// 58:NoiseDeformerSCurve-ext->39:Subtract 50640
                    Single _232Multiply;// 58:NoiseDeformerSCurve-ext->35:Multiply 50645
                    Single _233Multiply;// 58:NoiseDeformerSCurve-ext->37:Multiply 50639
                    Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 50341
                    Single _235NaN;// 118:FloatIsNaN->1:NaN 50339
                    Int32 _236Compare;// 118:FloatIsNaN->2:Compare 50338
                    Int32 _237Zero;// 118:FloatIsNaN->4:Zero 50340
                    Boolean _238Equal;// 118:FloatIsNaN->3:Equal 50337
                    Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 50311
                    Int32 _241Zero;// 48:First->2:Zero 50658
                    Single _242At;// 48:First->0:At 50657
                    Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 50310
                    IArray[Single] _244Unit;// 43:Array2->2:Unit 50308
                    Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 50660
                    IArray[Single] _246Append;// 43:Array2->3:Append 50307
                    _0One = One();
                    _1At = At(x0, _0One);
                    _2AsInt = AsInt(_1At);
                    _3At = At(_13Map, _2AsInt);
                    _4Constant = 4096;
                    _5At = At(_23GenerateN, _2AsInt);
                    _6X = X(_5At);
                    _7Unit = Unit(_6X);
                    _8Y = Y(_5At);
                    _9Append = Append(_7Unit, _8Y);
                    _10Z = Z(_5At);
                    _11Append = Append(_9Append, _10Z);
                    _12Zero = Zero();
                    _13At = At(_11Append, _12Zero);
                    _14Add = Add(_4Constant, _13At);
                    _15Floor = Floor(_14Add);
                    _16Constant = 255;
                    _17And = And(_15Floor, _16Constant);
                    _18One = One();
                    _19Add = Add(_17And, _18One);
                    _20And = And(_19Add, _16Constant);
                    _21Pair = Pair(_17And, _20And);
                    _22Floor = Floor(_14Add);
                    _23AsFloat = AsFloat(_22Floor);
                    _24Subtract = Subtract(_14Add, _23AsFloat);
                    _25FloatOne = FloatOne();
                    _26Subtract = Subtract(_24Subtract, _25FloatOne);
                    _27Pair = Pair(_24Subtract, _26Subtract);
                    _28Pair = Pair(_21Pair, _27Pair);
                    _29PairItem2 = PairItem2(_28Pair);
                    _30PairItem1 = PairItem1(_29PairItem2);
                    _31PairItem2 = PairItem2(x1);
                    _32PairItem1 = PairItem1(_28Pair);
                    _33PairItem1 = PairItem1(_32PairItem1);
                    _34At = At(_31PairItem2, _33PairItem1);
                    _35Constant = 4096;
                    _36X = X(_5At);
                    _37Unit = Unit(_36X);
                    _38Y = Y(_5At);
                    _39Append = Append(_37Unit, _38Y);
                    _40Z = Z(_5At);
                    _41Append = Append(_39Append, _40Z);
                    _42One = One();
                    _43At = At(_41Append, _42One);
                    _44Add = Add(_35Constant, _43At);
                    _45Floor = Floor(_44Add);
                    _46Constant = 255;
                    _47And = And(_45Floor, _46Constant);
                    _48One = One();
                    _49Add = Add(_47And, _48One);
                    _50And = And(_49Add, _46Constant);
                    _51Pair = Pair(_47And, _50And);
                    _52Floor = Floor(_44Add);
                    _53AsFloat = AsFloat(_52Floor);
                    _54Subtract = Subtract(_44Add, _53AsFloat);
                    _55FloatOne = FloatOne();
                    _56Subtract = Subtract(_54Subtract, _55FloatOne);
                    _57Pair = Pair(_54Subtract, _56Subtract);
                    _58Pair = Pair(_51Pair, _57Pair);
                    _59PairItem1 = PairItem1(_58Pair);
                    _60PairItem1 = PairItem1(_59PairItem1);
                    _61Add = Add(_34At, _60PairItem1);
                    _62At = At(_31PairItem2, _61Add);
                    _63Constant = 4096;
                    _64X = X(_5At);
                    _65Unit = Unit(_64X);
                    _66Y = Y(_5At);
                    _67Append = Append(_65Unit, _66Y);
                    _68Z = Z(_5At);
                    _69Append = Append(_67Append, _68Z);
                    _70Two = Two();
                    _71At = At(_69Append, _70Two);
                    _72Add = Add(_63Constant, _71At);
                    _73Floor = Floor(_72Add);
                    _74Constant = 255;
                    _75And = And(_73Floor, _74Constant);
                    _76One = One();
                    _77Add = Add(_75And, _76One);
                    _78And = And(_77Add, _74Constant);
                    _79Pair = Pair(_75And, _78And);
                    _80Floor = Floor(_72Add);
                    _81AsFloat = AsFloat(_80Floor);
                    _82Subtract = Subtract(_72Add, _81AsFloat);
                    _83FloatOne = FloatOne();
                    _84Subtract = Subtract(_82Subtract, _83FloatOne);
                    _85Pair = Pair(_82Subtract, _84Subtract);
                    _86Pair = Pair(_79Pair, _85Pair);
                    _87PairItem1 = PairItem1(_86Pair);
                    _88PairItem1 = PairItem1(_87PairItem1);
                    _89Add = Add(_62At, _88PairItem1);
                    _90At = At(_24PairItem1, _89Add);
                    _91Zero = Zero();
                    _92At = At(_90At, _91Zero);
                    _93Multiply = Multiply(_30PairItem1, _92At);
                    _94PairItem2 = PairItem2(_58Pair);
                    _95PairItem1 = PairItem1(_94PairItem2);
                    _96One = One();
                    _97At = At(_90At, _96One);
                    _98Multiply = Multiply(_95PairItem1, _97At);
                    _99Add = Add(_93Multiply, _98Multiply);
                    _100PairItem2 = PairItem2(_86Pair);
                    _101PairItem1 = PairItem1(_100PairItem2);
                    _102Two = Two();
                    _103At = At(_90At, _102Two);
                    _104Multiply = Multiply(_101PairItem1, _103At);
                    _105Add = Add(_99Add, _104Multiply);
                    _106PairItem2 = PairItem2(_29PairItem2);
                    _107PairItem2 = PairItem2(_32PairItem1);
                    _108At = At(_31PairItem2, _107PairItem2);
                    _109Add = Add(_108At, _60PairItem1);
                    _110At = At(_31PairItem2, _109Add);
                    _111Add = Add(_110At, _88PairItem1);
                    _112At = At(_24PairItem1, _111Add);
                    _113Zero = Zero();
                    _114At = At(_112At, _113Zero);
                    _115Multiply = Multiply(_106PairItem2, _114At);
                    _116One = One();
                    _117At = At(_112At, _116One);
                    _118Multiply = Multiply(_95PairItem1, _117At);
                    _119Add = Add(_115Multiply, _118Multiply);
                    _120Two = Two();
                    _121At = At(_112At, _120Two);
                    _122Multiply = Multiply(_101PairItem1, _121At);
                    _123Add = Add(_119Add, _122Multiply);
                    _124Constant = 3;
                    _125Constant = 2;
                    _126Multiply = Multiply(_125Constant, _30PairItem1);
                    _127Subtract = Subtract(_124Constant, _126Multiply);
                    _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                    _129Multiply = Multiply(_127Subtract, _128Multiply);
                    _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                    _131PairItem2 = PairItem2(_59PairItem1);
                    _132Add = Add(_34At, _131PairItem2);
                    _133At = At(_31PairItem2, _132Add);
                    _134Add = Add(_133At, _88PairItem1);
                    _135At = At(_24PairItem1, _134Add);
                    _136Zero = Zero();
                    _137At = At(_135At, _136Zero);
                    _138Multiply = Multiply(_30PairItem1, _137At);
                    _139PairItem2 = PairItem2(_94PairItem2);
                    _140One = One();
                    _141At = At(_135At, _140One);
                    _142Multiply = Multiply(_139PairItem2, _141At);
                    _143Add = Add(_138Multiply, _142Multiply);
                    _144Two = Two();
                    _145At = At(_135At, _144Two);
                    _146Multiply = Multiply(_101PairItem1, _145At);
                    _147Add = Add(_143Add, _146Multiply);
                    _148Add = Add(_108At, _131PairItem2);
                    _149At = At(_31PairItem2, _148Add);
                    _150Add = Add(_149At, _88PairItem1);
                    _151At = At(_24PairItem1, _150Add);
                    _152Zero = Zero();
                    _153At = At(_151At, _152Zero);
                    _154Multiply = Multiply(_106PairItem2, _153At);
                    _155One = One();
                    _156At = At(_151At, _155One);
                    _157Multiply = Multiply(_139PairItem2, _156At);
                    _158Add = Add(_154Multiply, _157Multiply);
                    _159Two = Two();
                    _160At = At(_151At, _159Two);
                    _161Multiply = Multiply(_101PairItem1, _160At);
                    _162Add = Add(_158Add, _161Multiply);
                    _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                    _164Constant = 3;
                    _165Constant = 2;
                    _166Multiply = Multiply(_165Constant, _95PairItem1);
                    _167Subtract = Subtract(_164Constant, _166Multiply);
                    _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                    _169Multiply = Multiply(_167Subtract, _168Multiply);
                    _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                    _171PairItem2 = PairItem2(_87PairItem1);
                    _172Add = Add(_62At, _171PairItem2);
                    _173At = At(_24PairItem1, _172Add);
                    _174Zero = Zero();
                    _175At = At(_173At, _174Zero);
                    _176Multiply = Multiply(_30PairItem1, _175At);
                    _177One = One();
                    _178At = At(_173At, _177One);
                    _179Multiply = Multiply(_95PairItem1, _178At);
                    _180Add = Add(_176Multiply, _179Multiply);
                    _181PairItem2 = PairItem2(_100PairItem2);
                    _182Two = Two();
                    _183At = At(_173At, _182Two);
                    _184Multiply = Multiply(_181PairItem2, _183At);
                    _185Add = Add(_180Add, _184Multiply);
                    _186Add = Add(_110At, _171PairItem2);
                    _187At = At(_24PairItem1, _186Add);
                    _188Zero = Zero();
                    _189At = At(_187At, _188Zero);
                    _190Multiply = Multiply(_106PairItem2, _189At);
                    _191One = One();
                    _192At = At(_187At, _191One);
                    _193Multiply = Multiply(_95PairItem1, _192At);
                    _194Add = Add(_190Multiply, _193Multiply);
                    _195Two = Two();
                    _196At = At(_187At, _195Two);
                    _197Multiply = Multiply(_181PairItem2, _196At);
                    _198Add = Add(_194Add, _197Multiply);
                    _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                    _200Add = Add(_133At, _171PairItem2);
                    _201At = At(_24PairItem1, _200Add);
                    _202Zero = Zero();
                    _203At = At(_201At, _202Zero);
                    _204Multiply = Multiply(_30PairItem1, _203At);
                    _205One = One();
                    _206At = At(_201At, _205One);
                    _207Multiply = Multiply(_139PairItem2, _206At);
                    _208Add = Add(_204Multiply, _207Multiply);
                    _209Two = Two();
                    _210At = At(_201At, _209Two);
                    _211Multiply = Multiply(_181PairItem2, _210At);
                    _212Add = Add(_208Add, _211Multiply);
                    _213Add = Add(_149At, _171PairItem2);
                    _214At = At(_24PairItem1, _213Add);
                    _215Zero = Zero();
                    _216At = At(_214At, _215Zero);
                    _217Multiply = Multiply(_106PairItem2, _216At);
                    _218One = One();
                    _219At = At(_214At, _218One);
                    _220Multiply = Multiply(_139PairItem2, _219At);
                    _221Add = Add(_217Multiply, _220Multiply);
                    _222Two = Two();
                    _223At = At(_214At, _222Two);
                    _224Multiply = Multiply(_181PairItem2, _223At);
                    _225Add = Add(_221Add, _224Multiply);
                    _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                    _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                    _228Constant = 3;
                    _229Constant = 2;
                    _230Multiply = Multiply(_229Constant, _101PairItem1);
                    _231Subtract = Subtract(_228Constant, _230Multiply);
                    _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                    _233Multiply = Multiply(_231Subtract, _232Multiply);
                    _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                    _235NaN = NaN();
                    _236Compare = Compare(_234FloatLerp, _235NaN);
                    _237Zero = Zero();
                    _238Equal = Equal(_236Compare, _237Zero);
                    _240Multiply = Multiply(_3At, if (_238Equal)
                        {
                          Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 50646
                          _239FloatZero = FloatZero();
                          _239FloatZero;
                          }else
                        {
                          _234FloatLerp;
                          });
                    _241Zero = Zero();
                    _242At = At(x0, _241Zero);
                    _243Add = Add(_240Multiply, _242At);
                    _244Unit = Unit(_243Add);
                    _245Add = Add(_1At, _25FloatOne);
                    _246Append = Append(_244Unit, _245Add);
                    _246Append;
                    });
                _27Count = Count(_26GenerateN);
                _28One = One();
                _29Subtract = Subtract(_27Count, _28One);
                _30At = At(_26GenerateN, _29Subtract);
                _31Zero = Zero();
                _32At = At(_30At, _31Zero);
                _32At;
                }, _5Y, _6Z);
            _8X = X(_4Add);
            _9Apply2 = Apply2((Single x0, Single x1) => 
              {
                Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 50301
                IArray[Single] _1Unit;// 37:Array2->2:Unit 50300
                Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 50302
                IArray[Single] _3Append;// 37:Array2->3:Append 50299
                Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 50662
                Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 50303
                Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 50317
                Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 50318
                Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 50663
                IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 50316
                Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 50665
                Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 50664
                Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 50325
                IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 50315
                Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 50670
                Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 50673
                Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 50672
                Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 50675
                Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 50676
                Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 50674
                Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 50671
                Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 50669
                Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 50666
                IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 50650
                IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 50654
                Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 50661
                IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 50296
                Int32 _27Count;// 3:LastIndex->2:Count 50295
                Int32 _28One;// 3:MinusOne->2:One 50294
                Int32 _29Subtract;// 3:MinusOne->1:Subtract 50293
                IArray[Single] _30At;// 68:Last->0:At 50290
                Int32 _31Zero;// 69:First->2:Zero 50288
                Single _32At;// 69:First->0:At 50287
                _0FloatZero = FloatZero();
                _1Unit = Unit(_0FloatZero);
                _2FloatZero = FloatZero();
                _3Append = Append(_1Unit, _2FloatZero);
                _4AsFloat = AsFloat(numIterations);
                _5AsInt = AsInt(_4AsFloat);
                _6FloatOne = FloatOne();
                _7AsInt = AsInt(_4AsFloat);
                _8Constant = 2;
                _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
                  {
                    Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 50320
                    _0Multiply = Multiply(_8Constant, x0);
                    _0Multiply;
                    });
                _10FloatOne = FloatOne();
                _11Subtract = Subtract(_10FloatOne, roughness);
                _12NegativeFloat = NegativeFloat(_11Subtract);
                _13Map = Map(_9GenerateN, (Single x0) => 
                  {
                    Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 50323
                    _0Pow = Pow(x0, _12NegativeFloat);
                    _0Pow;
                    });
                _14AsFloat = AsFloat(phase);
                _15Constant = 0.005;
                _16Multiply = Multiply(frequency, _15Constant);
                _17Constant = 1200;
                _18Constant = 4800;
                _19Divide = Divide(_17Constant, _18Constant);
                _20Multiply = Multiply(_16Multiply, _19Divide);
                _21Multiply = Multiply(_14AsFloat, _20Multiply);
                _22Vector3 = Vector3(x0, x1, _21Multiply);
                _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
                  {
                    Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 50652
                    _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                    _0MultiplyByScalar;
                    });
                _24PairItem1 = PairItem1(x1);
                _25FloatOne = FloatOne();
                _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
                  {
                    Int32 _0One;// 49:Second->2:One 50330
                    Single _1At;// 49:Second->0:At 50329
                    Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 50327
                    Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 50313
                    Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50368
                    Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 50648
                    Single _6X;// 2:VectorAsArray->1:X 50379
                    IArray[Single] _7Unit;// 4:Array3->2:Unit 50378
                    Single _8Y;// 2:VectorAsArray->2:Y 50380
                    IArray[Single] _9Append;// 4:Array3->3:Append 50377
                    Single _10Z;// 2:VectorAsArray->3:Z 50381
                    IArray[Single] _11Append;// 4:Array3->6:Append 50376
                    Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 50394
                    Single _13At;// 1:VectorComponent-ext->3:At 50371
                    Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 50367
                    Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 50366
                    Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50382
                    Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 50365
                    Int32 _18One;// 13:PlusOne->1:One 50386
                    Int32 _19Add;// 13:PlusOne->0:Add 50385
                    Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 50383
                    Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 50364
                    Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 50391
                    Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50390
                    Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50388
                    Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50393
                    Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50392
                    Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 50387
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 50363
                    Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 50360
                    Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 50359
                    IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 50655
                    Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 50405
                    Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 50404
                    Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 50403
                    Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50415
                    Single _36X;// 2:VectorAsArray->1:X 50426
                    IArray[Single] _37Unit;// 4:Array3->2:Unit 50425
                    Single _38Y;// 2:VectorAsArray->2:Y 50427
                    IArray[Single] _39Append;// 4:Array3->3:Append 50424
                    Single _40Z;// 2:VectorAsArray->3:Z 50428
                    IArray[Single] _41Append;// 4:Array3->6:Append 50423
                    Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 50441
                    Single _43At;// 1:VectorComponent-ext->3:At 50418
                    Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 50414
                    Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 50413
                    Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50429
                    Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 50412
                    Int32 _48One;// 13:PlusOne->1:One 50433
                    Int32 _49Add;// 13:PlusOne->0:Add 50432
                    Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 50430
                    Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 50411
                    Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 50438
                    Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50437
                    Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50435
                    Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50440
                    Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50439
                    Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 50434
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 50410
                    Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 50407
                    Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 50406
                    Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 50401
                    Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 50399
                    Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50451
                    Single _64X;// 2:VectorAsArray->1:X 50462
                    IArray[Single] _65Unit;// 4:Array3->2:Unit 50461
                    Single _66Y;// 2:VectorAsArray->2:Y 50463
                    IArray[Single] _67Append;// 4:Array3->3:Append 50460
                    Single _68Z;// 2:VectorAsArray->3:Z 50464
                    IArray[Single] _69Append;// 4:Array3->6:Append 50459
                    Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 50477
                    Single _71At;// 1:VectorComponent-ext->3:At 50454
                    Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 50450
                    Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 50449
                    Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50465
                    Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 50448
                    Int32 _76One;// 13:PlusOne->1:One 50469
                    Int32 _77Add;// 13:PlusOne->0:Add 50468
                    Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 50466
                    Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 50447
                    Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 50474
                    Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50473
                    Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50471
                    Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50476
                    Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50475
                    Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 50470
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 50446
                    Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 50443
                    Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 50442
                    Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 50397
                    IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 50395
                    Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 50352
                    Single _92At;// 62:NoiseDeformerAt3-ext->4:At 50351
                    Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 50350
                    Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 50479
                    Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 50478
                    Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 50355
                    Single _97At;// 62:NoiseDeformerAt3-ext->7:At 50354
                    Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 50353
                    Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 50349
                    Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 50481
                    Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 50480
                    Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 50358
                    Single _103At;// 62:NoiseDeformerAt3-ext->10:At 50357
                    Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 50356
                    Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 50348
                    Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 50497
                    Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 50505
                    Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 50504
                    Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 50502
                    Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 50501
                    Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 50499
                    IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 50498
                    Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 50490
                    Single _114At;// 66:NoiseDeformerAt3-ext->4:At 50489
                    Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 50488
                    Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 50493
                    Single _117At;// 66:NoiseDeformerAt3-ext->7:At 50492
                    Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 50491
                    Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 50487
                    Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 50496
                    Single _121At;// 66:NoiseDeformerAt3-ext->10:At 50495
                    Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 50494
                    Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 50486
                    Single _124Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50509
                    Single _125Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50511
                    Single _126Multiply;// 42:NoiseDeformerSCurve-ext->41:Multiply 50510
                    Single _127Subtract;// 42:NoiseDeformerSCurve-ext->39:Subtract 50508
                    Single _128Multiply;// 42:NoiseDeformerSCurve-ext->35:Multiply 50513
                    Single _129Multiply;// 42:NoiseDeformerSCurve-ext->37:Multiply 50507
                    Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 50343
                    Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 50535
                    Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 50534
                    Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 50533
                    Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 50531
                    IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 50530
                    Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 50523
                    Single _137At;// 72:NoiseDeformerAt3-ext->4:At 50522
                    Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 50521
                    Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 50536
                    Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 50526
                    Single _141At;// 72:NoiseDeformerAt3-ext->7:At 50525
                    Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 50524
                    Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 50520
                    Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 50529
                    Single _145At;// 72:NoiseDeformerAt3-ext->10:At 50528
                    Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 50527
                    Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 50519
                    Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 50556
                    Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 50555
                    Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 50553
                    IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 50552
                    Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 50545
                    Single _153At;// 75:NoiseDeformerAt3-ext->4:At 50544
                    Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 50543
                    Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 50548
                    Single _156At;// 75:NoiseDeformerAt3-ext->7:At 50547
                    Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 50546
                    Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 50542
                    Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 50551
                    Single _160At;// 75:NoiseDeformerAt3-ext->10:At 50550
                    Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 50549
                    Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 50541
                    Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 50514
                    Single _164Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50560
                    Single _165Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50562
                    Single _166Multiply;// 56:NoiseDeformerSCurve-ext->41:Multiply 50561
                    Single _167Subtract;// 56:NoiseDeformerSCurve-ext->39:Subtract 50559
                    Single _168Multiply;// 56:NoiseDeformerSCurve-ext->35:Multiply 50564
                    Single _169Multiply;// 56:NoiseDeformerSCurve-ext->37:Multiply 50558
                    Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 50342
                    Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 50584
                    Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 50583
                    IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 50582
                    Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 50575
                    Single _175At;// 82:NoiseDeformerAt3-ext->4:At 50574
                    Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 50573
                    Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 50578
                    Single _178At;// 82:NoiseDeformerAt3-ext->7:At 50577
                    Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 50576
                    Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 50572
                    Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 50585
                    Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 50581
                    Single _183At;// 82:NoiseDeformerAt3-ext->10:At 50580
                    Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 50579
                    Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 50571
                    Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 50602
                    IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 50601
                    Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 50594
                    Single _189At;// 86:NoiseDeformerAt3-ext->4:At 50593
                    Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 50592
                    Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 50597
                    Single _192At;// 86:NoiseDeformerAt3-ext->7:At 50596
                    Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 50595
                    Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 50591
                    Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 50600
                    Single _196At;// 86:NoiseDeformerAt3-ext->10:At 50599
                    Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 50598
                    Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 50590
                    Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 50566
                    Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 50620
                    IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 50619
                    Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 50612
                    Single _203At;// 92:NoiseDeformerAt3-ext->4:At 50611
                    Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 50610
                    Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 50615
                    Single _206At;// 92:NoiseDeformerAt3-ext->7:At 50614
                    Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 50613
                    Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 50609
                    Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 50618
                    Single _210At;// 92:NoiseDeformerAt3-ext->10:At 50617
                    Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 50616
                    Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 50608
                    Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 50637
                    IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 50636
                    Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 50629
                    Single _216At;// 96:NoiseDeformerAt3-ext->4:At 50628
                    Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 50627
                    Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 50632
                    Single _219At;// 96:NoiseDeformerAt3-ext->7:At 50631
                    Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 50630
                    Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 50626
                    Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 50635
                    Single _223At;// 96:NoiseDeformerAt3-ext->10:At 50634
                    Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 50633
                    Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 50625
                    Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 50603
                    Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 50565
                    Single _228Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50641
                    Single _229Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50643
                    Single _230Multiply;// 58:NoiseDeformerSCurve-ext->41:Multiply 50642
                    Single _231Subtract;// 58:NoiseDeformerSCurve-ext->39:Subtract 50640
                    Single _232Multiply;// 58:NoiseDeformerSCurve-ext->35:Multiply 50645
                    Single _233Multiply;// 58:NoiseDeformerSCurve-ext->37:Multiply 50639
                    Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 50341
                    Single _235NaN;// 118:FloatIsNaN->1:NaN 50339
                    Int32 _236Compare;// 118:FloatIsNaN->2:Compare 50338
                    Int32 _237Zero;// 118:FloatIsNaN->4:Zero 50340
                    Boolean _238Equal;// 118:FloatIsNaN->3:Equal 50337
                    Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 50311
                    Int32 _241Zero;// 48:First->2:Zero 50658
                    Single _242At;// 48:First->0:At 50657
                    Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 50310
                    IArray[Single] _244Unit;// 43:Array2->2:Unit 50308
                    Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 50660
                    IArray[Single] _246Append;// 43:Array2->3:Append 50307
                    _0One = One();
                    _1At = At(x0, _0One);
                    _2AsInt = AsInt(_1At);
                    _3At = At(_13Map, _2AsInt);
                    _4Constant = 4096;
                    _5At = At(_23GenerateN, _2AsInt);
                    _6X = X(_5At);
                    _7Unit = Unit(_6X);
                    _8Y = Y(_5At);
                    _9Append = Append(_7Unit, _8Y);
                    _10Z = Z(_5At);
                    _11Append = Append(_9Append, _10Z);
                    _12Zero = Zero();
                    _13At = At(_11Append, _12Zero);
                    _14Add = Add(_4Constant, _13At);
                    _15Floor = Floor(_14Add);
                    _16Constant = 255;
                    _17And = And(_15Floor, _16Constant);
                    _18One = One();
                    _19Add = Add(_17And, _18One);
                    _20And = And(_19Add, _16Constant);
                    _21Pair = Pair(_17And, _20And);
                    _22Floor = Floor(_14Add);
                    _23AsFloat = AsFloat(_22Floor);
                    _24Subtract = Subtract(_14Add, _23AsFloat);
                    _25FloatOne = FloatOne();
                    _26Subtract = Subtract(_24Subtract, _25FloatOne);
                    _27Pair = Pair(_24Subtract, _26Subtract);
                    _28Pair = Pair(_21Pair, _27Pair);
                    _29PairItem2 = PairItem2(_28Pair);
                    _30PairItem1 = PairItem1(_29PairItem2);
                    _31PairItem2 = PairItem2(x1);
                    _32PairItem1 = PairItem1(_28Pair);
                    _33PairItem1 = PairItem1(_32PairItem1);
                    _34At = At(_31PairItem2, _33PairItem1);
                    _35Constant = 4096;
                    _36X = X(_5At);
                    _37Unit = Unit(_36X);
                    _38Y = Y(_5At);
                    _39Append = Append(_37Unit, _38Y);
                    _40Z = Z(_5At);
                    _41Append = Append(_39Append, _40Z);
                    _42One = One();
                    _43At = At(_41Append, _42One);
                    _44Add = Add(_35Constant, _43At);
                    _45Floor = Floor(_44Add);
                    _46Constant = 255;
                    _47And = And(_45Floor, _46Constant);
                    _48One = One();
                    _49Add = Add(_47And, _48One);
                    _50And = And(_49Add, _46Constant);
                    _51Pair = Pair(_47And, _50And);
                    _52Floor = Floor(_44Add);
                    _53AsFloat = AsFloat(_52Floor);
                    _54Subtract = Subtract(_44Add, _53AsFloat);
                    _55FloatOne = FloatOne();
                    _56Subtract = Subtract(_54Subtract, _55FloatOne);
                    _57Pair = Pair(_54Subtract, _56Subtract);
                    _58Pair = Pair(_51Pair, _57Pair);
                    _59PairItem1 = PairItem1(_58Pair);
                    _60PairItem1 = PairItem1(_59PairItem1);
                    _61Add = Add(_34At, _60PairItem1);
                    _62At = At(_31PairItem2, _61Add);
                    _63Constant = 4096;
                    _64X = X(_5At);
                    _65Unit = Unit(_64X);
                    _66Y = Y(_5At);
                    _67Append = Append(_65Unit, _66Y);
                    _68Z = Z(_5At);
                    _69Append = Append(_67Append, _68Z);
                    _70Two = Two();
                    _71At = At(_69Append, _70Two);
                    _72Add = Add(_63Constant, _71At);
                    _73Floor = Floor(_72Add);
                    _74Constant = 255;
                    _75And = And(_73Floor, _74Constant);
                    _76One = One();
                    _77Add = Add(_75And, _76One);
                    _78And = And(_77Add, _74Constant);
                    _79Pair = Pair(_75And, _78And);
                    _80Floor = Floor(_72Add);
                    _81AsFloat = AsFloat(_80Floor);
                    _82Subtract = Subtract(_72Add, _81AsFloat);
                    _83FloatOne = FloatOne();
                    _84Subtract = Subtract(_82Subtract, _83FloatOne);
                    _85Pair = Pair(_82Subtract, _84Subtract);
                    _86Pair = Pair(_79Pair, _85Pair);
                    _87PairItem1 = PairItem1(_86Pair);
                    _88PairItem1 = PairItem1(_87PairItem1);
                    _89Add = Add(_62At, _88PairItem1);
                    _90At = At(_24PairItem1, _89Add);
                    _91Zero = Zero();
                    _92At = At(_90At, _91Zero);
                    _93Multiply = Multiply(_30PairItem1, _92At);
                    _94PairItem2 = PairItem2(_58Pair);
                    _95PairItem1 = PairItem1(_94PairItem2);
                    _96One = One();
                    _97At = At(_90At, _96One);
                    _98Multiply = Multiply(_95PairItem1, _97At);
                    _99Add = Add(_93Multiply, _98Multiply);
                    _100PairItem2 = PairItem2(_86Pair);
                    _101PairItem1 = PairItem1(_100PairItem2);
                    _102Two = Two();
                    _103At = At(_90At, _102Two);
                    _104Multiply = Multiply(_101PairItem1, _103At);
                    _105Add = Add(_99Add, _104Multiply);
                    _106PairItem2 = PairItem2(_29PairItem2);
                    _107PairItem2 = PairItem2(_32PairItem1);
                    _108At = At(_31PairItem2, _107PairItem2);
                    _109Add = Add(_108At, _60PairItem1);
                    _110At = At(_31PairItem2, _109Add);
                    _111Add = Add(_110At, _88PairItem1);
                    _112At = At(_24PairItem1, _111Add);
                    _113Zero = Zero();
                    _114At = At(_112At, _113Zero);
                    _115Multiply = Multiply(_106PairItem2, _114At);
                    _116One = One();
                    _117At = At(_112At, _116One);
                    _118Multiply = Multiply(_95PairItem1, _117At);
                    _119Add = Add(_115Multiply, _118Multiply);
                    _120Two = Two();
                    _121At = At(_112At, _120Two);
                    _122Multiply = Multiply(_101PairItem1, _121At);
                    _123Add = Add(_119Add, _122Multiply);
                    _124Constant = 3;
                    _125Constant = 2;
                    _126Multiply = Multiply(_125Constant, _30PairItem1);
                    _127Subtract = Subtract(_124Constant, _126Multiply);
                    _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                    _129Multiply = Multiply(_127Subtract, _128Multiply);
                    _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                    _131PairItem2 = PairItem2(_59PairItem1);
                    _132Add = Add(_34At, _131PairItem2);
                    _133At = At(_31PairItem2, _132Add);
                    _134Add = Add(_133At, _88PairItem1);
                    _135At = At(_24PairItem1, _134Add);
                    _136Zero = Zero();
                    _137At = At(_135At, _136Zero);
                    _138Multiply = Multiply(_30PairItem1, _137At);
                    _139PairItem2 = PairItem2(_94PairItem2);
                    _140One = One();
                    _141At = At(_135At, _140One);
                    _142Multiply = Multiply(_139PairItem2, _141At);
                    _143Add = Add(_138Multiply, _142Multiply);
                    _144Two = Two();
                    _145At = At(_135At, _144Two);
                    _146Multiply = Multiply(_101PairItem1, _145At);
                    _147Add = Add(_143Add, _146Multiply);
                    _148Add = Add(_108At, _131PairItem2);
                    _149At = At(_31PairItem2, _148Add);
                    _150Add = Add(_149At, _88PairItem1);
                    _151At = At(_24PairItem1, _150Add);
                    _152Zero = Zero();
                    _153At = At(_151At, _152Zero);
                    _154Multiply = Multiply(_106PairItem2, _153At);
                    _155One = One();
                    _156At = At(_151At, _155One);
                    _157Multiply = Multiply(_139PairItem2, _156At);
                    _158Add = Add(_154Multiply, _157Multiply);
                    _159Two = Two();
                    _160At = At(_151At, _159Two);
                    _161Multiply = Multiply(_101PairItem1, _160At);
                    _162Add = Add(_158Add, _161Multiply);
                    _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                    _164Constant = 3;
                    _165Constant = 2;
                    _166Multiply = Multiply(_165Constant, _95PairItem1);
                    _167Subtract = Subtract(_164Constant, _166Multiply);
                    _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                    _169Multiply = Multiply(_167Subtract, _168Multiply);
                    _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                    _171PairItem2 = PairItem2(_87PairItem1);
                    _172Add = Add(_62At, _171PairItem2);
                    _173At = At(_24PairItem1, _172Add);
                    _174Zero = Zero();
                    _175At = At(_173At, _174Zero);
                    _176Multiply = Multiply(_30PairItem1, _175At);
                    _177One = One();
                    _178At = At(_173At, _177One);
                    _179Multiply = Multiply(_95PairItem1, _178At);
                    _180Add = Add(_176Multiply, _179Multiply);
                    _181PairItem2 = PairItem2(_100PairItem2);
                    _182Two = Two();
                    _183At = At(_173At, _182Two);
                    _184Multiply = Multiply(_181PairItem2, _183At);
                    _185Add = Add(_180Add, _184Multiply);
                    _186Add = Add(_110At, _171PairItem2);
                    _187At = At(_24PairItem1, _186Add);
                    _188Zero = Zero();
                    _189At = At(_187At, _188Zero);
                    _190Multiply = Multiply(_106PairItem2, _189At);
                    _191One = One();
                    _192At = At(_187At, _191One);
                    _193Multiply = Multiply(_95PairItem1, _192At);
                    _194Add = Add(_190Multiply, _193Multiply);
                    _195Two = Two();
                    _196At = At(_187At, _195Two);
                    _197Multiply = Multiply(_181PairItem2, _196At);
                    _198Add = Add(_194Add, _197Multiply);
                    _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                    _200Add = Add(_133At, _171PairItem2);
                    _201At = At(_24PairItem1, _200Add);
                    _202Zero = Zero();
                    _203At = At(_201At, _202Zero);
                    _204Multiply = Multiply(_30PairItem1, _203At);
                    _205One = One();
                    _206At = At(_201At, _205One);
                    _207Multiply = Multiply(_139PairItem2, _206At);
                    _208Add = Add(_204Multiply, _207Multiply);
                    _209Two = Two();
                    _210At = At(_201At, _209Two);
                    _211Multiply = Multiply(_181PairItem2, _210At);
                    _212Add = Add(_208Add, _211Multiply);
                    _213Add = Add(_149At, _171PairItem2);
                    _214At = At(_24PairItem1, _213Add);
                    _215Zero = Zero();
                    _216At = At(_214At, _215Zero);
                    _217Multiply = Multiply(_106PairItem2, _216At);
                    _218One = One();
                    _219At = At(_214At, _218One);
                    _220Multiply = Multiply(_139PairItem2, _219At);
                    _221Add = Add(_217Multiply, _220Multiply);
                    _222Two = Two();
                    _223At = At(_214At, _222Two);
                    _224Multiply = Multiply(_181PairItem2, _223At);
                    _225Add = Add(_221Add, _224Multiply);
                    _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                    _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                    _228Constant = 3;
                    _229Constant = 2;
                    _230Multiply = Multiply(_229Constant, _101PairItem1);
                    _231Subtract = Subtract(_228Constant, _230Multiply);
                    _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                    _233Multiply = Multiply(_231Subtract, _232Multiply);
                    _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                    _235NaN = NaN();
                    _236Compare = Compare(_234FloatLerp, _235NaN);
                    _237Zero = Zero();
                    _238Equal = Equal(_236Compare, _237Zero);
                    _240Multiply = Multiply(_3At, if (_238Equal)
                        {
                          Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 50646
                          _239FloatZero = FloatZero();
                          _239FloatZero;
                          }else
                        {
                          _234FloatLerp;
                          });
                    _241Zero = Zero();
                    _242At = At(x0, _241Zero);
                    _243Add = Add(_240Multiply, _242At);
                    _244Unit = Unit(_243Add);
                    _245Add = Add(_1At, _25FloatOne);
                    _246Append = Append(_244Unit, _245Add);
                    _246Append;
                    });
                _27Count = Count(_26GenerateN);
                _28One = One();
                _29Subtract = Subtract(_27Count, _28One);
                _30At = At(_26GenerateN, _29Subtract);
                _31Zero = Zero();
                _32At = At(_30At, _31Zero);
                _32At;
                }, _8X, _6Z);
            _10Apply2 = Apply2((Single x0, Single x1) => 
              {
                Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 50301
                IArray[Single] _1Unit;// 37:Array2->2:Unit 50300
                Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 50302
                IArray[Single] _3Append;// 37:Array2->3:Append 50299
                Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 50662
                Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 50303
                Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 50317
                Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 50318
                Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 50663
                IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 50316
                Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 50665
                Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 50664
                Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 50325
                IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 50315
                Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 50670
                Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 50673
                Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 50672
                Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 50675
                Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 50676
                Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 50674
                Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 50671
                Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 50669
                Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 50666
                IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 50650
                IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 50654
                Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 50661
                IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 50296
                Int32 _27Count;// 3:LastIndex->2:Count 50295
                Int32 _28One;// 3:MinusOne->2:One 50294
                Int32 _29Subtract;// 3:MinusOne->1:Subtract 50293
                IArray[Single] _30At;// 68:Last->0:At 50290
                Int32 _31Zero;// 69:First->2:Zero 50288
                Single _32At;// 69:First->0:At 50287
                _0FloatZero = FloatZero();
                _1Unit = Unit(_0FloatZero);
                _2FloatZero = FloatZero();
                _3Append = Append(_1Unit, _2FloatZero);
                _4AsFloat = AsFloat(numIterations);
                _5AsInt = AsInt(_4AsFloat);
                _6FloatOne = FloatOne();
                _7AsInt = AsInt(_4AsFloat);
                _8Constant = 2;
                _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
                  {
                    Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 50320
                    _0Multiply = Multiply(_8Constant, x0);
                    _0Multiply;
                    });
                _10FloatOne = FloatOne();
                _11Subtract = Subtract(_10FloatOne, roughness);
                _12NegativeFloat = NegativeFloat(_11Subtract);
                _13Map = Map(_9GenerateN, (Single x0) => 
                  {
                    Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 50323
                    _0Pow = Pow(x0, _12NegativeFloat);
                    _0Pow;
                    });
                _14AsFloat = AsFloat(phase);
                _15Constant = 0.005;
                _16Multiply = Multiply(frequency, _15Constant);
                _17Constant = 1200;
                _18Constant = 4800;
                _19Divide = Divide(_17Constant, _18Constant);
                _20Multiply = Multiply(_16Multiply, _19Divide);
                _21Multiply = Multiply(_14AsFloat, _20Multiply);
                _22Vector3 = Vector3(x0, x1, _21Multiply);
                _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
                  {
                    Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 50652
                    _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                    _0MultiplyByScalar;
                    });
                _24PairItem1 = PairItem1(x1);
                _25FloatOne = FloatOne();
                _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
                  {
                    Int32 _0One;// 49:Second->2:One 50330
                    Single _1At;// 49:Second->0:At 50329
                    Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 50327
                    Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 50313
                    Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50368
                    Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 50648
                    Single _6X;// 2:VectorAsArray->1:X 50379
                    IArray[Single] _7Unit;// 4:Array3->2:Unit 50378
                    Single _8Y;// 2:VectorAsArray->2:Y 50380
                    IArray[Single] _9Append;// 4:Array3->3:Append 50377
                    Single _10Z;// 2:VectorAsArray->3:Z 50381
                    IArray[Single] _11Append;// 4:Array3->6:Append 50376
                    Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 50394
                    Single _13At;// 1:VectorComponent-ext->3:At 50371
                    Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 50367
                    Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 50366
                    Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 50382
                    Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 50365
                    Int32 _18One;// 13:PlusOne->1:One 50386
                    Int32 _19Add;// 13:PlusOne->0:Add 50385
                    Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 50383
                    Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 50364
                    Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 50391
                    Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50390
                    Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50388
                    Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50393
                    Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50392
                    Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 50387
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 50363
                    Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 50360
                    Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 50359
                    IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 50655
                    Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 50405
                    Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 50404
                    Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 50403
                    Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50415
                    Single _36X;// 2:VectorAsArray->1:X 50426
                    IArray[Single] _37Unit;// 4:Array3->2:Unit 50425
                    Single _38Y;// 2:VectorAsArray->2:Y 50427
                    IArray[Single] _39Append;// 4:Array3->3:Append 50424
                    Single _40Z;// 2:VectorAsArray->3:Z 50428
                    IArray[Single] _41Append;// 4:Array3->6:Append 50423
                    Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 50441
                    Single _43At;// 1:VectorComponent-ext->3:At 50418
                    Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 50414
                    Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 50413
                    Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 50429
                    Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 50412
                    Int32 _48One;// 13:PlusOne->1:One 50433
                    Int32 _49Add;// 13:PlusOne->0:Add 50432
                    Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 50430
                    Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 50411
                    Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 50438
                    Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50437
                    Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50435
                    Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50440
                    Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50439
                    Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 50434
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 50410
                    Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 50407
                    Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 50406
                    Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 50401
                    Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 50399
                    Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50451
                    Single _64X;// 2:VectorAsArray->1:X 50462
                    IArray[Single] _65Unit;// 4:Array3->2:Unit 50461
                    Single _66Y;// 2:VectorAsArray->2:Y 50463
                    IArray[Single] _67Append;// 4:Array3->3:Append 50460
                    Single _68Z;// 2:VectorAsArray->3:Z 50464
                    IArray[Single] _69Append;// 4:Array3->6:Append 50459
                    Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 50477
                    Single _71At;// 1:VectorComponent-ext->3:At 50454
                    Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 50450
                    Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 50449
                    Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 50465
                    Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 50448
                    Int32 _76One;// 13:PlusOne->1:One 50469
                    Int32 _77Add;// 13:PlusOne->0:Add 50468
                    Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 50466
                    Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 50447
                    Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 50474
                    Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 50473
                    Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 50471
                    Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 50476
                    Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 50475
                    Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 50470
                    Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 50446
                    Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 50443
                    Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 50442
                    Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 50397
                    IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 50395
                    Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 50352
                    Single _92At;// 62:NoiseDeformerAt3-ext->4:At 50351
                    Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 50350
                    Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 50479
                    Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 50478
                    Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 50355
                    Single _97At;// 62:NoiseDeformerAt3-ext->7:At 50354
                    Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 50353
                    Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 50349
                    Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 50481
                    Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 50480
                    Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 50358
                    Single _103At;// 62:NoiseDeformerAt3-ext->10:At 50357
                    Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 50356
                    Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 50348
                    Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 50497
                    Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 50505
                    Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 50504
                    Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 50502
                    Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 50501
                    Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 50499
                    IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 50498
                    Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 50490
                    Single _114At;// 66:NoiseDeformerAt3-ext->4:At 50489
                    Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 50488
                    Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 50493
                    Single _117At;// 66:NoiseDeformerAt3-ext->7:At 50492
                    Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 50491
                    Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 50487
                    Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 50496
                    Single _121At;// 66:NoiseDeformerAt3-ext->10:At 50495
                    Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 50494
                    Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 50486
                    Single _124Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50509
                    Single _125Constant;// 42:NoiseDeformerSCurve-ext->0:Constant 50511
                    Single _126Multiply;// 42:NoiseDeformerSCurve-ext->41:Multiply 50510
                    Single _127Subtract;// 42:NoiseDeformerSCurve-ext->39:Subtract 50508
                    Single _128Multiply;// 42:NoiseDeformerSCurve-ext->35:Multiply 50513
                    Single _129Multiply;// 42:NoiseDeformerSCurve-ext->37:Multiply 50507
                    Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 50343
                    Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 50535
                    Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 50534
                    Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 50533
                    Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 50531
                    IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 50530
                    Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 50523
                    Single _137At;// 72:NoiseDeformerAt3-ext->4:At 50522
                    Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 50521
                    Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 50536
                    Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 50526
                    Single _141At;// 72:NoiseDeformerAt3-ext->7:At 50525
                    Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 50524
                    Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 50520
                    Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 50529
                    Single _145At;// 72:NoiseDeformerAt3-ext->10:At 50528
                    Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 50527
                    Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 50519
                    Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 50556
                    Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 50555
                    Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 50553
                    IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 50552
                    Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 50545
                    Single _153At;// 75:NoiseDeformerAt3-ext->4:At 50544
                    Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 50543
                    Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 50548
                    Single _156At;// 75:NoiseDeformerAt3-ext->7:At 50547
                    Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 50546
                    Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 50542
                    Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 50551
                    Single _160At;// 75:NoiseDeformerAt3-ext->10:At 50550
                    Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 50549
                    Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 50541
                    Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 50514
                    Single _164Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50560
                    Single _165Constant;// 56:NoiseDeformerSCurve-ext->0:Constant 50562
                    Single _166Multiply;// 56:NoiseDeformerSCurve-ext->41:Multiply 50561
                    Single _167Subtract;// 56:NoiseDeformerSCurve-ext->39:Subtract 50559
                    Single _168Multiply;// 56:NoiseDeformerSCurve-ext->35:Multiply 50564
                    Single _169Multiply;// 56:NoiseDeformerSCurve-ext->37:Multiply 50558
                    Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 50342
                    Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 50584
                    Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 50583
                    IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 50582
                    Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 50575
                    Single _175At;// 82:NoiseDeformerAt3-ext->4:At 50574
                    Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 50573
                    Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 50578
                    Single _178At;// 82:NoiseDeformerAt3-ext->7:At 50577
                    Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 50576
                    Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 50572
                    Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 50585
                    Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 50581
                    Single _183At;// 82:NoiseDeformerAt3-ext->10:At 50580
                    Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 50579
                    Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 50571
                    Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 50602
                    IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 50601
                    Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 50594
                    Single _189At;// 86:NoiseDeformerAt3-ext->4:At 50593
                    Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 50592
                    Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 50597
                    Single _192At;// 86:NoiseDeformerAt3-ext->7:At 50596
                    Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 50595
                    Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 50591
                    Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 50600
                    Single _196At;// 86:NoiseDeformerAt3-ext->10:At 50599
                    Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 50598
                    Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 50590
                    Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 50566
                    Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 50620
                    IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 50619
                    Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 50612
                    Single _203At;// 92:NoiseDeformerAt3-ext->4:At 50611
                    Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 50610
                    Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 50615
                    Single _206At;// 92:NoiseDeformerAt3-ext->7:At 50614
                    Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 50613
                    Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 50609
                    Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 50618
                    Single _210At;// 92:NoiseDeformerAt3-ext->10:At 50617
                    Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 50616
                    Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 50608
                    Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 50637
                    IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 50636
                    Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 50629
                    Single _216At;// 96:NoiseDeformerAt3-ext->4:At 50628
                    Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 50627
                    Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 50632
                    Single _219At;// 96:NoiseDeformerAt3-ext->7:At 50631
                    Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 50630
                    Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 50626
                    Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 50635
                    Single _223At;// 96:NoiseDeformerAt3-ext->10:At 50634
                    Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 50633
                    Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 50625
                    Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 50603
                    Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 50565
                    Single _228Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50641
                    Single _229Constant;// 58:NoiseDeformerSCurve-ext->0:Constant 50643
                    Single _230Multiply;// 58:NoiseDeformerSCurve-ext->41:Multiply 50642
                    Single _231Subtract;// 58:NoiseDeformerSCurve-ext->39:Subtract 50640
                    Single _232Multiply;// 58:NoiseDeformerSCurve-ext->35:Multiply 50645
                    Single _233Multiply;// 58:NoiseDeformerSCurve-ext->37:Multiply 50639
                    Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 50341
                    Single _235NaN;// 118:FloatIsNaN->1:NaN 50339
                    Int32 _236Compare;// 118:FloatIsNaN->2:Compare 50338
                    Int32 _237Zero;// 118:FloatIsNaN->4:Zero 50340
                    Boolean _238Equal;// 118:FloatIsNaN->3:Equal 50337
                    Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 50311
                    Int32 _241Zero;// 48:First->2:Zero 50658
                    Single _242At;// 48:First->0:At 50657
                    Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 50310
                    IArray[Single] _244Unit;// 43:Array2->2:Unit 50308
                    Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 50660
                    IArray[Single] _246Append;// 43:Array2->3:Append 50307
                    _0One = One();
                    _1At = At(x0, _0One);
                    _2AsInt = AsInt(_1At);
                    _3At = At(_13Map, _2AsInt);
                    _4Constant = 4096;
                    _5At = At(_23GenerateN, _2AsInt);
                    _6X = X(_5At);
                    _7Unit = Unit(_6X);
                    _8Y = Y(_5At);
                    _9Append = Append(_7Unit, _8Y);
                    _10Z = Z(_5At);
                    _11Append = Append(_9Append, _10Z);
                    _12Zero = Zero();
                    _13At = At(_11Append, _12Zero);
                    _14Add = Add(_4Constant, _13At);
                    _15Floor = Floor(_14Add);
                    _16Constant = 255;
                    _17And = And(_15Floor, _16Constant);
                    _18One = One();
                    _19Add = Add(_17And, _18One);
                    _20And = And(_19Add, _16Constant);
                    _21Pair = Pair(_17And, _20And);
                    _22Floor = Floor(_14Add);
                    _23AsFloat = AsFloat(_22Floor);
                    _24Subtract = Subtract(_14Add, _23AsFloat);
                    _25FloatOne = FloatOne();
                    _26Subtract = Subtract(_24Subtract, _25FloatOne);
                    _27Pair = Pair(_24Subtract, _26Subtract);
                    _28Pair = Pair(_21Pair, _27Pair);
                    _29PairItem2 = PairItem2(_28Pair);
                    _30PairItem1 = PairItem1(_29PairItem2);
                    _31PairItem2 = PairItem2(x1);
                    _32PairItem1 = PairItem1(_28Pair);
                    _33PairItem1 = PairItem1(_32PairItem1);
                    _34At = At(_31PairItem2, _33PairItem1);
                    _35Constant = 4096;
                    _36X = X(_5At);
                    _37Unit = Unit(_36X);
                    _38Y = Y(_5At);
                    _39Append = Append(_37Unit, _38Y);
                    _40Z = Z(_5At);
                    _41Append = Append(_39Append, _40Z);
                    _42One = One();
                    _43At = At(_41Append, _42One);
                    _44Add = Add(_35Constant, _43At);
                    _45Floor = Floor(_44Add);
                    _46Constant = 255;
                    _47And = And(_45Floor, _46Constant);
                    _48One = One();
                    _49Add = Add(_47And, _48One);
                    _50And = And(_49Add, _46Constant);
                    _51Pair = Pair(_47And, _50And);
                    _52Floor = Floor(_44Add);
                    _53AsFloat = AsFloat(_52Floor);
                    _54Subtract = Subtract(_44Add, _53AsFloat);
                    _55FloatOne = FloatOne();
                    _56Subtract = Subtract(_54Subtract, _55FloatOne);
                    _57Pair = Pair(_54Subtract, _56Subtract);
                    _58Pair = Pair(_51Pair, _57Pair);
                    _59PairItem1 = PairItem1(_58Pair);
                    _60PairItem1 = PairItem1(_59PairItem1);
                    _61Add = Add(_34At, _60PairItem1);
                    _62At = At(_31PairItem2, _61Add);
                    _63Constant = 4096;
                    _64X = X(_5At);
                    _65Unit = Unit(_64X);
                    _66Y = Y(_5At);
                    _67Append = Append(_65Unit, _66Y);
                    _68Z = Z(_5At);
                    _69Append = Append(_67Append, _68Z);
                    _70Two = Two();
                    _71At = At(_69Append, _70Two);
                    _72Add = Add(_63Constant, _71At);
                    _73Floor = Floor(_72Add);
                    _74Constant = 255;
                    _75And = And(_73Floor, _74Constant);
                    _76One = One();
                    _77Add = Add(_75And, _76One);
                    _78And = And(_77Add, _74Constant);
                    _79Pair = Pair(_75And, _78And);
                    _80Floor = Floor(_72Add);
                    _81AsFloat = AsFloat(_80Floor);
                    _82Subtract = Subtract(_72Add, _81AsFloat);
                    _83FloatOne = FloatOne();
                    _84Subtract = Subtract(_82Subtract, _83FloatOne);
                    _85Pair = Pair(_82Subtract, _84Subtract);
                    _86Pair = Pair(_79Pair, _85Pair);
                    _87PairItem1 = PairItem1(_86Pair);
                    _88PairItem1 = PairItem1(_87PairItem1);
                    _89Add = Add(_62At, _88PairItem1);
                    _90At = At(_24PairItem1, _89Add);
                    _91Zero = Zero();
                    _92At = At(_90At, _91Zero);
                    _93Multiply = Multiply(_30PairItem1, _92At);
                    _94PairItem2 = PairItem2(_58Pair);
                    _95PairItem1 = PairItem1(_94PairItem2);
                    _96One = One();
                    _97At = At(_90At, _96One);
                    _98Multiply = Multiply(_95PairItem1, _97At);
                    _99Add = Add(_93Multiply, _98Multiply);
                    _100PairItem2 = PairItem2(_86Pair);
                    _101PairItem1 = PairItem1(_100PairItem2);
                    _102Two = Two();
                    _103At = At(_90At, _102Two);
                    _104Multiply = Multiply(_101PairItem1, _103At);
                    _105Add = Add(_99Add, _104Multiply);
                    _106PairItem2 = PairItem2(_29PairItem2);
                    _107PairItem2 = PairItem2(_32PairItem1);
                    _108At = At(_31PairItem2, _107PairItem2);
                    _109Add = Add(_108At, _60PairItem1);
                    _110At = At(_31PairItem2, _109Add);
                    _111Add = Add(_110At, _88PairItem1);
                    _112At = At(_24PairItem1, _111Add);
                    _113Zero = Zero();
                    _114At = At(_112At, _113Zero);
                    _115Multiply = Multiply(_106PairItem2, _114At);
                    _116One = One();
                    _117At = At(_112At, _116One);
                    _118Multiply = Multiply(_95PairItem1, _117At);
                    _119Add = Add(_115Multiply, _118Multiply);
                    _120Two = Two();
                    _121At = At(_112At, _120Two);
                    _122Multiply = Multiply(_101PairItem1, _121At);
                    _123Add = Add(_119Add, _122Multiply);
                    _124Constant = 3;
                    _125Constant = 2;
                    _126Multiply = Multiply(_125Constant, _30PairItem1);
                    _127Subtract = Subtract(_124Constant, _126Multiply);
                    _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                    _129Multiply = Multiply(_127Subtract, _128Multiply);
                    _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                    _131PairItem2 = PairItem2(_59PairItem1);
                    _132Add = Add(_34At, _131PairItem2);
                    _133At = At(_31PairItem2, _132Add);
                    _134Add = Add(_133At, _88PairItem1);
                    _135At = At(_24PairItem1, _134Add);
                    _136Zero = Zero();
                    _137At = At(_135At, _136Zero);
                    _138Multiply = Multiply(_30PairItem1, _137At);
                    _139PairItem2 = PairItem2(_94PairItem2);
                    _140One = One();
                    _141At = At(_135At, _140One);
                    _142Multiply = Multiply(_139PairItem2, _141At);
                    _143Add = Add(_138Multiply, _142Multiply);
                    _144Two = Two();
                    _145At = At(_135At, _144Two);
                    _146Multiply = Multiply(_101PairItem1, _145At);
                    _147Add = Add(_143Add, _146Multiply);
                    _148Add = Add(_108At, _131PairItem2);
                    _149At = At(_31PairItem2, _148Add);
                    _150Add = Add(_149At, _88PairItem1);
                    _151At = At(_24PairItem1, _150Add);
                    _152Zero = Zero();
                    _153At = At(_151At, _152Zero);
                    _154Multiply = Multiply(_106PairItem2, _153At);
                    _155One = One();
                    _156At = At(_151At, _155One);
                    _157Multiply = Multiply(_139PairItem2, _156At);
                    _158Add = Add(_154Multiply, _157Multiply);
                    _159Two = Two();
                    _160At = At(_151At, _159Two);
                    _161Multiply = Multiply(_101PairItem1, _160At);
                    _162Add = Add(_158Add, _161Multiply);
                    _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                    _164Constant = 3;
                    _165Constant = 2;
                    _166Multiply = Multiply(_165Constant, _95PairItem1);
                    _167Subtract = Subtract(_164Constant, _166Multiply);
                    _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                    _169Multiply = Multiply(_167Subtract, _168Multiply);
                    _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                    _171PairItem2 = PairItem2(_87PairItem1);
                    _172Add = Add(_62At, _171PairItem2);
                    _173At = At(_24PairItem1, _172Add);
                    _174Zero = Zero();
                    _175At = At(_173At, _174Zero);
                    _176Multiply = Multiply(_30PairItem1, _175At);
                    _177One = One();
                    _178At = At(_173At, _177One);
                    _179Multiply = Multiply(_95PairItem1, _178At);
                    _180Add = Add(_176Multiply, _179Multiply);
                    _181PairItem2 = PairItem2(_100PairItem2);
                    _182Two = Two();
                    _183At = At(_173At, _182Two);
                    _184Multiply = Multiply(_181PairItem2, _183At);
                    _185Add = Add(_180Add, _184Multiply);
                    _186Add = Add(_110At, _171PairItem2);
                    _187At = At(_24PairItem1, _186Add);
                    _188Zero = Zero();
                    _189At = At(_187At, _188Zero);
                    _190Multiply = Multiply(_106PairItem2, _189At);
                    _191One = One();
                    _192At = At(_187At, _191One);
                    _193Multiply = Multiply(_95PairItem1, _192At);
                    _194Add = Add(_190Multiply, _193Multiply);
                    _195Two = Two();
                    _196At = At(_187At, _195Two);
                    _197Multiply = Multiply(_181PairItem2, _196At);
                    _198Add = Add(_194Add, _197Multiply);
                    _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                    _200Add = Add(_133At, _171PairItem2);
                    _201At = At(_24PairItem1, _200Add);
                    _202Zero = Zero();
                    _203At = At(_201At, _202Zero);
                    _204Multiply = Multiply(_30PairItem1, _203At);
                    _205One = One();
                    _206At = At(_201At, _205One);
                    _207Multiply = Multiply(_139PairItem2, _206At);
                    _208Add = Add(_204Multiply, _207Multiply);
                    _209Two = Two();
                    _210At = At(_201At, _209Two);
                    _211Multiply = Multiply(_181PairItem2, _210At);
                    _212Add = Add(_208Add, _211Multiply);
                    _213Add = Add(_149At, _171PairItem2);
                    _214At = At(_24PairItem1, _213Add);
                    _215Zero = Zero();
                    _216At = At(_214At, _215Zero);
                    _217Multiply = Multiply(_106PairItem2, _216At);
                    _218One = One();
                    _219At = At(_214At, _218One);
                    _220Multiply = Multiply(_139PairItem2, _219At);
                    _221Add = Add(_217Multiply, _220Multiply);
                    _222Two = Two();
                    _223At = At(_214At, _222Two);
                    _224Multiply = Multiply(_181PairItem2, _223At);
                    _225Add = Add(_221Add, _224Multiply);
                    _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                    _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                    _228Constant = 3;
                    _229Constant = 2;
                    _230Multiply = Multiply(_229Constant, _101PairItem1);
                    _231Subtract = Subtract(_228Constant, _230Multiply);
                    _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                    _233Multiply = Multiply(_231Subtract, _232Multiply);
                    _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                    _235NaN = NaN();
                    _236Compare = Compare(_234FloatLerp, _235NaN);
                    _237Zero = Zero();
                    _238Equal = Equal(_236Compare, _237Zero);
                    _240Multiply = Multiply(_3At, if (_238Equal)
                        {
                          Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 50646
                          _239FloatZero = FloatZero();
                          _239FloatZero;
                          }else
                        {
                          _234FloatLerp;
                          });
                    _241Zero = Zero();
                    _242At = At(x0, _241Zero);
                    _243Add = Add(_240Multiply, _242At);
                    _244Unit = Unit(_243Add);
                    _245Add = Add(_1At, _25FloatOne);
                    _246Append = Append(_244Unit, _245Add);
                    _246Append;
                    });
                _27Count = Count(_26GenerateN);
                _28One = One();
                _29Subtract = Subtract(_27Count, _28One);
                _30At = At(_26GenerateN, _29Subtract);
                _31Zero = Zero();
                _32At = At(_30At, _31Zero);
                _32At;
                }, _8X, _5Y);
            _11Vector3 = Vector3(_7Apply2, _9Apply2, _10Apply2);
            _12Vector3 = Vector3(strengthX, strengthY, strengthZ);
            _13Multiply = Multiply(_11Vector3, _12Vector3);
            _14Add = Add(x0, _13Multiply);
            _14Add;
            }, _27Pair);
        _35Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _29IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 50818
            _29IsValidNode = IsValidNode(gizmo node);
            if (_29IsValidNode)
              {
                Matrix _30ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 50822
                Matrix _31InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 50823
                Matrix _32Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 50821
                _30ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _31InvertMatrix = InvertMatrix(modifierTransform);
                _32Multiply = Multiply(_30ObjectTransformBeforeWSM, _31InvertMatrix);
                _32Multiply;
                }else
              {
                Matrix _33MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 50824
                _33MatrixIdentity = MatrixIdentity();
                _33MatrixIdentity;
                };
            }else
          {
            Matrix _34MatrixIdentity;// 16:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 50825
            _34MatrixIdentity = MatrixIdentity();
            _34MatrixIdentity;
            };
        _36InvertMatrix = InvertMatrix(_35Pass-through: Matrix);
        _37ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 2:DeformVertices-ext->11:Transform 50264
            Vector3 _1Apply1;// 2:DeformVertices-ext->8:Apply1 50263
            Vector3 _2Transform;// 2:DeformVertices-ext->9:Transform 50262
            _0Transform = Transform(x0, _36InvertMatrix);
            _1Apply1 = Apply1(_28Bind2of2, _0Transform);
            _2Transform = Transform(_1Apply1, _35Pass-through: Matrix);
            _2Transform;
            });
        _38SetMeshVertices = SetMeshVertices(mesh, _37ParallelMap);
        _38SetMeshVertices;
        });
    _5IfThen;
    }