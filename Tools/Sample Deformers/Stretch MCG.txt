(InstanceState state, TriMesh mesh, Int32 axis, Single amount, Single amplify, Boolean use node transform, INode gizmo node, Matrix modifierTransform, Vector3 deformer translation, Vector3 deformer rotation, Vector3 deformer scale) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 95307
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 95309
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 95308
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 95306
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 95305
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 95301
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 95316
        IArray[Vector3] _1MeshVertices;// 5:MeshDeformVertices-ext->4:MeshVertices 95322
        IArray[Vector3] _2MeshVertices;// 2:MeshBoundingBox->1:MeshVertices 95469
        BoundingBox _3BoxFromPoints;// 2:MeshBoundingBox->0:BoxFromPoints 95468
        Func[Vector3, Vector3] _4Pass-through: function1;// 0:Pass-through: function1 95297
        Matrix _43Pass-through: Matrix;// 0:Pass-through: Matrix 95295
        Matrix _44InvertMatrix;// 5:MeshDeformVertices-ext->7:InvertMatrix 95327
        IArray[Vector3] _45ParallelMap;// 5:MeshDeformVertices-ext->5:ParallelMap 95321
        Int32 _46Zero;// 7:SoftSelection->2:Zero 95319
        IArray[Single] _47PerVertexData;// 7:SoftSelection->3:PerVertexData 95318
        IArray[Vector3] _48Combine3;// 1:LerpVectors-ext->10:Combine3 95314
        TriMesh _49SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 95310
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2MeshVertices = MeshVertices(mesh);
        _3BoxFromPoints = BoxFromPoints(_2MeshVertices);
        _4Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0FloatZero;// 1:StretchDeformer-ext->67:FloatZero 95337
            Vector3 _1BoxMax;// 1:StretchDeformer-ext->13:BoxMax 95353
            Single _2X;// 2:VectorAsArray->1:X 95350
            IArray[Single] _3Unit;// 4:Array3->2:Unit 95349
            Single _4Y;// 2:VectorAsArray->2:Y 95351
            IArray[Single] _5Append;// 4:Array3->3:Append 95348
            Single _6Z;// 2:VectorAsArray->3:Z 95352
            IArray[Single] _7Append;// 4:Array3->6:Append 95347
            Single _8At;// 16:VectorComponent-ext->3:At 95342
            Vector3 _9BoxMin;// 1:StretchDeformer-ext->9:BoxMin 95368
            Single _10X;// 2:VectorAsArray->1:X 95365
            IArray[Single] _11Unit;// 4:Array3->2:Unit 95364
            Single _12Y;// 2:VectorAsArray->2:Y 95366
            IArray[Single] _13Append;// 4:Array3->3:Append 95363
            Single _14Z;// 2:VectorAsArray->3:Z 95367
            IArray[Single] _15Append;// 4:Array3->6:Append 95362
            Single _16At;// 15:VectorComponent-ext->3:At 95357
            Single _17Subtract;// 1:StretchDeformer-ext->65:Subtract 95339
            Boolean _18Equal;// 1:StretchDeformer-ext->66:Equal 95336
            Single _19FloatZero;// 1:StretchDeformer-ext->71:FloatZero 95370
            Boolean _20Equal;// 1:StretchDeformer-ext->70:Equal 95369
            Boolean _21OrElse;// 1:StretchDeformer-ext->69:OrElse 95335
            _0FloatZero = FloatZero();
            _1BoxMax = BoxMax(_3BoxFromPoints);
            _2X = X(_1BoxMax);
            _3Unit = Unit(_2X);
            _4Y = Y(_1BoxMax);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1BoxMax);
            _7Append = Append(_5Append, _6Z);
            _8At = At(_7Append, axis);
            _9BoxMin = BoxMin(_3BoxFromPoints);
            _10X = X(_9BoxMin);
            _11Unit = Unit(_10X);
            _12Y = Y(_9BoxMin);
            _13Append = Append(_11Unit, _12Y);
            _14Z = Z(_9BoxMin);
            _15Append = Append(_13Append, _14Z);
            _16At = At(_15Append, axis);
            _17Subtract = Subtract(_8At, _16At);
            _18Equal = Equal(_0FloatZero, _17Subtract);
            _19FloatZero = FloatZero();
            _20Equal = Equal(_19FloatZero, amount);
            _21OrElse = OrElse(_18Equal, _20Equal);
            if (_21OrElse)
              {
                x0;
                }else
              {
                Single _22HalfPi;// 1:StretchDeformer-ext->3:HalfPi 95394
                Single _23NegativeFloat;// 1:StretchDeformer-ext->4:NegativeFloat 95393
                Matrix _24RotationYMatrix;// 1:StretchDeformer-ext->1:RotationYMatrix 95392
                Func[Matrix] _25Pass-through: any;// 0:Pass-through: any 95386
                IArray[Func[Matrix]] _26Unit;// 7:Array3->2:Unit 95391
                Matrix _27RotationXMatrix;// 1:StretchDeformer-ext->6:RotationXMatrix 95395
                Func[Matrix] _28Pass-through: any;// 0:Pass-through: any 95387
                IArray[Func[Matrix]] _29Append;// 7:Array3->3:Append 95390
                Matrix _30MatrixIdentity;// 1:StretchDeformer-ext->5:MatrixIdentity 95396
                Func[Matrix] _31Pass-through: any;// 0:Pass-through: any 95388
                IArray[Func[Matrix]] _32Append;// 7:Array3->6:Append 95389
                Func[Matrix] _33At;// 1:StretchDeformer-ext->8:At 95385
                Matrix _34Apply0;// 1:StretchDeformer-ext->74:Apply0 95384
                Vector3 _35Transform;// 1:StretchDeformer-ext->18:Transform 95381
                Single _36X;// 1:StretchDeformer-ext->40:X 95379
                Single _37Constant;// 1:StretchDeformer-ext->0:Constant 95405
                Single _38FloatOne;// 1:StretchDeformer-ext->144:FloatOne 95407
                Single _39FloatZero;// 1:StretchDeformer-ext->105:FloatZero 95411
                Boolean _40LessThan;// 1:StretchDeformer-ext->82:LessThan 95409
                Single _41FloatZero;// 1:StretchDeformer-ext->37:FloatZero 95421
                Boolean _42GreaterThanOrEqual;// 1:StretchDeformer-ext->35:GreaterThanOrEqual 95419
                Single _50Pass-through: Single;// 1:StretchDeformer-ext->29:Pass-through: Single 95417
                Single _67Subtract;// 1:StretchDeformer-ext->145:Subtract 95406
                Single _68Multiply;// 1:StretchDeformer-ext->146:Multiply 95404
                Single _69Z;// 1:StretchDeformer-ext->38:Z 95442
                Single _70Subtract;// 1:StretchDeformer-ext->93:Subtract 95441
                Single _71Divide;// 1:StretchDeformer-ext->87:Divide 95440
                Single _72Multiply;// 1:StretchDeformer-ext->138:Multiply 95403
                Single _73NegativeFloat;// 1:StretchDeformer-ext->148:NegativeFloat 95446
                Single _74Multiply;// 1:StretchDeformer-ext->147:Multiply 95445
                Single _75Add;// 1:StretchDeformer-ext->152:Add 95402
                Single _76Multiply;// 1:StretchDeformer-ext->153:Multiply 95401
                Single _77FloatOne;// 1:StretchDeformer-ext->143:FloatOne 95448
                Single _78Add;// 1:StretchDeformer-ext->154:Add 95400
                Single _79Multiply;// 1:StretchDeformer-ext->150:Multiply 95378
                Single _80Y;// 1:StretchDeformer-ext->41:Y 95451
                Single _81Multiply;// 1:StretchDeformer-ext->155:Multiply 95450
                Single _89Pass-through: Single;// 1:StretchDeformer-ext->160:Pass-through: Single 95454
                Single _90Multiply;// 1:StretchDeformer-ext->156:Multiply 95453
                Vector3 _91Vector3;// 1:StretchDeformer-ext->36:Vector3 95376
                Matrix _92InvertMatrix;// 1:StretchDeformer-ext->14:InvertMatrix 95466
                Vector3 _93Transform;// 1:StretchDeformer-ext->19:Transform 95375
                _22HalfPi = HalfPi();
                _23NegativeFloat = NegativeFloat(_22HalfPi);
                _24RotationYMatrix = RotationYMatrix(_23NegativeFloat);
                _25Pass-through: any = () => 
                  {
                    _24RotationYMatrix;
                    };
                _26Unit = Unit(_25Pass-through: any);
                _27RotationXMatrix = RotationXMatrix(_22HalfPi);
                _28Pass-through: any = () => 
                  {
                    _27RotationXMatrix;
                    };
                _29Append = Append(_26Unit, _28Pass-through: any);
                _30MatrixIdentity = MatrixIdentity();
                _31Pass-through: any = () => 
                  {
                    _30MatrixIdentity;
                    };
                _32Append = Append(_29Append, _31Pass-through: any);
                _33At = At(_32Append, axis);
                _34Apply0 = Apply0(_33At);
                _35Transform = Transform(x0, _34Apply0);
                _36X = X(_35Transform);
                _37Constant = 4;
                _38FloatOne = FloatOne();
                _39FloatZero = FloatZero();
                _40LessThan = LessThan(amount, _39FloatZero);
                _41FloatZero = FloatZero();
                _42GreaterThanOrEqual = GreaterThanOrEqual(amplify, _41FloatZero);
                _50Pass-through: Single = if (_42GreaterThanOrEqual)
                  {
                    Single _43FloatOne;// 1:StretchDeformer-ext->46:FloatOne 95424
                    Single _44Add;// 1:StretchDeformer-ext->39:Add 95422
                    _43FloatOne = FloatOne();
                    _44Add = Add(amplify, _43FloatOne);
                    _44Add;
                    }else
                  {
                    Single _45FloatOne;// 1:StretchDeformer-ext->49:FloatOne 95426
                    Single _46NegativeFloat;// 1:StretchDeformer-ext->51:NegativeFloat 95428
                    Single _47FloatOne;// 1:StretchDeformer-ext->56:FloatOne 95429
                    Single _48Add;// 1:StretchDeformer-ext->55:Add 95427
                    Single _49Divide;// 1:StretchDeformer-ext->50:Divide 95425
                    _45FloatOne = FloatOne();
                    _46NegativeFloat = NegativeFloat(amplify);
                    _47FloatOne = FloatOne();
                    _48Add = Add(_46NegativeFloat, _47FloatOne);
                    _49Divide = Divide(_45FloatOne, _48Add);
                    _49Divide;
                    };
                _67Subtract = Subtract(_38FloatOne, if (_40LessThan)
                    {
                      Single _58FloatOne;// 1:StretchDeformer-ext->98:FloatOne 95413
                      Single _59NegativeFloat;// 1:StretchDeformer-ext->99:NegativeFloat 95430
                      Single _60Multiply;// 1:StretchDeformer-ext->100:Multiply 95414
                      Single _61Add;// 1:StretchDeformer-ext->97:Add 95412
                      _58FloatOne = FloatOne();
                      _59NegativeFloat = NegativeFloat(amount);
                      _60Multiply = Multiply(_50Pass-through: Single, _59NegativeFloat);
                      _61Add = Add(_58FloatOne, _60Multiply);
                      _61Add;
                      }else
                    {
                      Single _62FloatOne;// 1:StretchDeformer-ext->113:FloatOne 95433
                      Single _63Multiply;// 1:StretchDeformer-ext->114:Multiply 95435
                      Single _64FloatOne;// 1:StretchDeformer-ext->120:FloatOne 95438
                      Single _65Add;// 1:StretchDeformer-ext->119:Add 95434
                      Single _66Divide;// 1:StretchDeformer-ext->112:Divide 95432
                      _62FloatOne = FloatOne();
                      _63Multiply = Multiply(_50Pass-through: Single, amount);
                      _64FloatOne = FloatOne();
                      _65Add = Add(_63Multiply, _64FloatOne);
                      _66Divide = Divide(_62FloatOne, _65Add);
                      _66Divide;
                      });
                _68Multiply = Multiply(_37Constant, _67Subtract);
                _69Z = Z(_35Transform);
                _70Subtract = Subtract(_69Z, _16At);
                _71Divide = Divide(_70Subtract, _17Subtract);
                _72Multiply = Multiply(_68Multiply, _71Divide);
                _73NegativeFloat = NegativeFloat(_37Constant);
                _74Multiply = Multiply(_73NegativeFloat, _67Subtract);
                _75Add = Add(_72Multiply, _74Multiply);
                _76Multiply = Multiply(_75Add, _71Divide);
                _77FloatOne = FloatOne();
                _78Add = Add(_76Multiply, _77FloatOne);
                _79Multiply = Multiply(_36X, _78Add);
                _80Y = Y(_35Transform);
                _81Multiply = Multiply(_80Y, _78Add);
                _89Pass-through: Single = if (_40LessThan)
                  {
                    Single _82FloatOne;// 1:StretchDeformer-ext->126:FloatOne 95458
                    Single _83NegativeFloat;// 1:StretchDeformer-ext->125:NegativeFloat 95457
                    Single _84FloatOne;// 1:StretchDeformer-ext->130:FloatOne 95462
                    Single _85Subtract;// 1:StretchDeformer-ext->127:Subtract 95459
                    Single _86Divide;// 1:StretchDeformer-ext->124:Divide 95456
                    _82FloatOne = FloatOne();
                    _83NegativeFloat = NegativeFloat(_82FloatOne);
                    _84FloatOne = FloatOne();
                    _85Subtract = Subtract(amount, _84FloatOne);
                    _86Divide = Divide(_83NegativeFloat, _85Subtract);
                    _86Divide;
                    }else
                  {
                    Single _87FloatOne;// 1:StretchDeformer-ext->133:FloatOne 95464
                    Single _88Add;// 1:StretchDeformer-ext->132:Add 95463
                    _87FloatOne = FloatOne();
                    _88Add = Add(_87FloatOne, amount);
                    _88Add;
                    };
                _90Multiply = Multiply(_69Z, _89Pass-through: Single);
                _91Vector3 = Vector3(_79Multiply, _81Multiply, _90Multiply);
                _92InvertMatrix = InvertMatrix(_34Apply0);
                _93Transform = Transform(_91Vector3, _92InvertMatrix);
                _93Transform;
                };
            };
        _43Pass-through: Matrix = if (use node transform)
          {
            Boolean _5IsValidNode;// 8:GizmoTransformInLocalSpace->35:IsValidNode 95479
            _5IsValidNode = IsValidNode(gizmo node);
            if (_5IsValidNode)
              {
                Boolean _6IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 95485
                Matrix _9InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 95489
                Matrix _10Multiply;// 32:NodeToLocalTransform->18:Multiply 95482
                _6IsValidNode = IsValidNode(gizmo node);
                _9InvertMatrix = InvertMatrix(modifierTransform);
                _10Multiply = Multiply(if (_6IsValidNode)
                    {
                      Matrix _7WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 95486
                      _7WorldTransform = WorldTransform(gizmo node);
                      _7WorldTransform;
                      }else
                    {
                      Matrix _8MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 95487
                      _8MatrixIdentity = MatrixIdentity();
                      _8MatrixIdentity;
                      }, _9InvertMatrix);
                _10Multiply;
                }else
              {
                Matrix _11MatrixIdentity;// 8:GizmoTransformInLocalSpace->40:MatrixIdentity 95490
                _11MatrixIdentity = MatrixIdentity();
                _11MatrixIdentity;
                };
            }else
          {
            Matrix _12TranslationMatrix;// 11:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 95501
            Single _13X;// 1:VectorAsArray->1:X 95537
            IArray[Single] _14Unit;// 4:Array3->2:Unit 95536
            Single _15Y;// 1:VectorAsArray->2:Y 95538
            IArray[Single] _16Append;// 4:Array3->3:Append 95535
            Single _17Z;// 1:VectorAsArray->3:Z 95539
            IArray[Single] _18Append;// 4:Array3->6:Append 95534
            Func[Single, Single] _19Pass-through: function1;// 0:Pass-through: function1 95516
            IArray[Single] _20Map;// 1:VectorMapComponents-ext->2:Map 95529
            Int32 _21Zero;// 3:VectorFromArray-ext->5:Zero 95520
            Single _22At;// 3:VectorFromArray-ext->1:At 95519
            Int32 _23One;// 6:PlusOne->1:One 95524
            Int32 _24Add;// 6:PlusOne->0:Add 95523
            Single _25At;// 3:VectorFromArray-ext->2:At 95521
            Int32 _26One;// 7:PlusOne->1:One 95528
            Int32 _27Add;// 7:PlusOne->0:Add 95527
            Single _28At;// 3:VectorFromArray-ext->3:At 95525
            Vector3 _29Vector3;// 3:VectorFromArray-ext->4:Vector3 95518
            Single _30Y;// 2:QuaternionFromVector3-ext->7:Y 95511
            Single _31X;// 2:QuaternionFromVector3-ext->6:X 95512
            Single _32Z;// 2:QuaternionFromVector3-ext->8:Z 95513
            Quaternion _33QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95510
            Matrix _34MatrixFromQuaternion;// 11:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 95502
            Matrix _35Multiply;// 6:Multiply3-ext->3:Multiply 95500
            Single _36Constant;// 45:OnesVector-ext->0:Constant 95545
            Vector3 _37Vector3;// 45:OnesVector-ext->2:Vector3 95544
            Vector3 _38Add;// 44:Add 95542
            Single _39Constant;// 8:Origin->0:Constant 95506
            Vector3 _40Vector3;// 8:Origin->1:Vector3 95505
            Matrix _41ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 95504
            Matrix _42Multiply;// 6:Multiply3-ext->4:Multiply 95499
            _12TranslationMatrix = TranslationMatrix(deformer translation);
            _13X = X(deformer rotation);
            _14Unit = Unit(_13X);
            _15Y = Y(deformer rotation);
            _16Append = Append(_14Unit, _15Y);
            _17Z = Z(deformer rotation);
            _18Append = Append(_16Append, _17Z);
            _19Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95540
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _20Map = Map(_18Append, _19Pass-through: function1);
            _21Zero = Zero();
            _22At = At(_20Map, _21Zero);
            _23One = One();
            _24Add = Add(_21Zero, _23One);
            _25At = At(_20Map, _24Add);
            _26One = One();
            _27Add = Add(_24Add, _26One);
            _28At = At(_20Map, _27Add);
            _29Vector3 = Vector3(_22At, _25At, _28At);
            _30Y = Y(_29Vector3);
            _31X = X(_29Vector3);
            _32Z = Z(_29Vector3);
            _33QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_30Y, _31X, _32Z);
            _34MatrixFromQuaternion = MatrixFromQuaternion(_33QuaternionFromYawPitchRoll);
            _35Multiply = Multiply(_12TranslationMatrix, _34MatrixFromQuaternion);
            _36Constant = 1;
            _37Vector3 = Vector3(_36Constant, _36Constant, _36Constant);
            _38Add = Add(deformer scale, _37Vector3);
            _39Constant = 0;
            _40Vector3 = Vector3(_39Constant, _39Constant, _39Constant);
            _41ScalingTranslationMatrix = ScalingTranslationMatrix(_38Add, _40Vector3);
            _42Multiply = Multiply(_35Multiply, _41ScalingTranslationMatrix);
            _42Multiply;
            };
        _44InvertMatrix = InvertMatrix(_43Pass-through: Matrix);
        _45ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 5:MeshDeformVertices-ext->11:Transform 95325
            Vector3 _1Apply1;// 5:MeshDeformVertices-ext->8:Apply1 95324
            Vector3 _2Transform;// 5:MeshDeformVertices-ext->9:Transform 95323
            _0Transform = Transform(x0, _44InvertMatrix);
            _1Apply1 = Apply1(_4Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _43Pass-through: Matrix);
            _2Transform;
            });
        _46Zero = Zero();
        _47PerVertexData = PerVertexData(mesh, _46Zero);
        _48Combine3 = Combine3(_0MeshVertices, _45ParallelMap, _47PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 95315
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _49SetMeshVertices = SetMeshVertices(mesh, _48Combine3);
        _49SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 5:MeshDeformVertices-ext->4:MeshVertices 95322
        IArray[Vector3] _1MeshVertices;// 2:MeshBoundingBox->1:MeshVertices 95469
        BoundingBox _2BoxFromPoints;// 2:MeshBoundingBox->0:BoxFromPoints 95468
        Func[Vector3, Vector3] _3Pass-through: function1;// 0:Pass-through: function1 95297
        Matrix _42Pass-through: Matrix;// 0:Pass-through: Matrix 95295
        Matrix _43InvertMatrix;// 5:MeshDeformVertices-ext->7:InvertMatrix 95327
        IArray[Vector3] _44ParallelMap;// 5:MeshDeformVertices-ext->5:ParallelMap 95321
        TriMesh _45SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 95320
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2BoxFromPoints = BoxFromPoints(_1MeshVertices);
        _3Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0FloatZero;// 1:StretchDeformer-ext->67:FloatZero 95337
            Vector3 _1BoxMax;// 1:StretchDeformer-ext->13:BoxMax 95353
            Single _2X;// 2:VectorAsArray->1:X 95350
            IArray[Single] _3Unit;// 4:Array3->2:Unit 95349
            Single _4Y;// 2:VectorAsArray->2:Y 95351
            IArray[Single] _5Append;// 4:Array3->3:Append 95348
            Single _6Z;// 2:VectorAsArray->3:Z 95352
            IArray[Single] _7Append;// 4:Array3->6:Append 95347
            Single _8At;// 16:VectorComponent-ext->3:At 95342
            Vector3 _9BoxMin;// 1:StretchDeformer-ext->9:BoxMin 95368
            Single _10X;// 2:VectorAsArray->1:X 95365
            IArray[Single] _11Unit;// 4:Array3->2:Unit 95364
            Single _12Y;// 2:VectorAsArray->2:Y 95366
            IArray[Single] _13Append;// 4:Array3->3:Append 95363
            Single _14Z;// 2:VectorAsArray->3:Z 95367
            IArray[Single] _15Append;// 4:Array3->6:Append 95362
            Single _16At;// 15:VectorComponent-ext->3:At 95357
            Single _17Subtract;// 1:StretchDeformer-ext->65:Subtract 95339
            Boolean _18Equal;// 1:StretchDeformer-ext->66:Equal 95336
            Single _19FloatZero;// 1:StretchDeformer-ext->71:FloatZero 95370
            Boolean _20Equal;// 1:StretchDeformer-ext->70:Equal 95369
            Boolean _21OrElse;// 1:StretchDeformer-ext->69:OrElse 95335
            _0FloatZero = FloatZero();
            _1BoxMax = BoxMax(_2BoxFromPoints);
            _2X = X(_1BoxMax);
            _3Unit = Unit(_2X);
            _4Y = Y(_1BoxMax);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1BoxMax);
            _7Append = Append(_5Append, _6Z);
            _8At = At(_7Append, axis);
            _9BoxMin = BoxMin(_2BoxFromPoints);
            _10X = X(_9BoxMin);
            _11Unit = Unit(_10X);
            _12Y = Y(_9BoxMin);
            _13Append = Append(_11Unit, _12Y);
            _14Z = Z(_9BoxMin);
            _15Append = Append(_13Append, _14Z);
            _16At = At(_15Append, axis);
            _17Subtract = Subtract(_8At, _16At);
            _18Equal = Equal(_0FloatZero, _17Subtract);
            _19FloatZero = FloatZero();
            _20Equal = Equal(_19FloatZero, amount);
            _21OrElse = OrElse(_18Equal, _20Equal);
            if (_21OrElse)
              {
                x0;
                }else
              {
                Single _22HalfPi;// 1:StretchDeformer-ext->3:HalfPi 95394
                Single _23NegativeFloat;// 1:StretchDeformer-ext->4:NegativeFloat 95393
                Matrix _24RotationYMatrix;// 1:StretchDeformer-ext->1:RotationYMatrix 95392
                Func[Matrix] _25Pass-through: any;// 0:Pass-through: any 95386
                IArray[Func[Matrix]] _26Unit;// 7:Array3->2:Unit 95391
                Matrix _27RotationXMatrix;// 1:StretchDeformer-ext->6:RotationXMatrix 95395
                Func[Matrix] _28Pass-through: any;// 0:Pass-through: any 95387
                IArray[Func[Matrix]] _29Append;// 7:Array3->3:Append 95390
                Matrix _30MatrixIdentity;// 1:StretchDeformer-ext->5:MatrixIdentity 95396
                Func[Matrix] _31Pass-through: any;// 0:Pass-through: any 95388
                IArray[Func[Matrix]] _32Append;// 7:Array3->6:Append 95389
                Func[Matrix] _33At;// 1:StretchDeformer-ext->8:At 95385
                Matrix _34Apply0;// 1:StretchDeformer-ext->74:Apply0 95384
                Vector3 _35Transform;// 1:StretchDeformer-ext->18:Transform 95381
                Single _36X;// 1:StretchDeformer-ext->40:X 95379
                Single _37Constant;// 1:StretchDeformer-ext->0:Constant 95405
                Single _38FloatOne;// 1:StretchDeformer-ext->144:FloatOne 95407
                Single _39FloatZero;// 1:StretchDeformer-ext->105:FloatZero 95411
                Boolean _40LessThan;// 1:StretchDeformer-ext->82:LessThan 95409
                Single _41FloatZero;// 1:StretchDeformer-ext->37:FloatZero 95421
                Boolean _42GreaterThanOrEqual;// 1:StretchDeformer-ext->35:GreaterThanOrEqual 95419
                Single _50Pass-through: Single;// 1:StretchDeformer-ext->29:Pass-through: Single 95417
                Single _67Subtract;// 1:StretchDeformer-ext->145:Subtract 95406
                Single _68Multiply;// 1:StretchDeformer-ext->146:Multiply 95404
                Single _69Z;// 1:StretchDeformer-ext->38:Z 95442
                Single _70Subtract;// 1:StretchDeformer-ext->93:Subtract 95441
                Single _71Divide;// 1:StretchDeformer-ext->87:Divide 95440
                Single _72Multiply;// 1:StretchDeformer-ext->138:Multiply 95403
                Single _73NegativeFloat;// 1:StretchDeformer-ext->148:NegativeFloat 95446
                Single _74Multiply;// 1:StretchDeformer-ext->147:Multiply 95445
                Single _75Add;// 1:StretchDeformer-ext->152:Add 95402
                Single _76Multiply;// 1:StretchDeformer-ext->153:Multiply 95401
                Single _77FloatOne;// 1:StretchDeformer-ext->143:FloatOne 95448
                Single _78Add;// 1:StretchDeformer-ext->154:Add 95400
                Single _79Multiply;// 1:StretchDeformer-ext->150:Multiply 95378
                Single _80Y;// 1:StretchDeformer-ext->41:Y 95451
                Single _81Multiply;// 1:StretchDeformer-ext->155:Multiply 95450
                Single _89Pass-through: Single;// 1:StretchDeformer-ext->160:Pass-through: Single 95454
                Single _90Multiply;// 1:StretchDeformer-ext->156:Multiply 95453
                Vector3 _91Vector3;// 1:StretchDeformer-ext->36:Vector3 95376
                Matrix _92InvertMatrix;// 1:StretchDeformer-ext->14:InvertMatrix 95466
                Vector3 _93Transform;// 1:StretchDeformer-ext->19:Transform 95375
                _22HalfPi = HalfPi();
                _23NegativeFloat = NegativeFloat(_22HalfPi);
                _24RotationYMatrix = RotationYMatrix(_23NegativeFloat);
                _25Pass-through: any = () => 
                  {
                    _24RotationYMatrix;
                    };
                _26Unit = Unit(_25Pass-through: any);
                _27RotationXMatrix = RotationXMatrix(_22HalfPi);
                _28Pass-through: any = () => 
                  {
                    _27RotationXMatrix;
                    };
                _29Append = Append(_26Unit, _28Pass-through: any);
                _30MatrixIdentity = MatrixIdentity();
                _31Pass-through: any = () => 
                  {
                    _30MatrixIdentity;
                    };
                _32Append = Append(_29Append, _31Pass-through: any);
                _33At = At(_32Append, axis);
                _34Apply0 = Apply0(_33At);
                _35Transform = Transform(x0, _34Apply0);
                _36X = X(_35Transform);
                _37Constant = 4;
                _38FloatOne = FloatOne();
                _39FloatZero = FloatZero();
                _40LessThan = LessThan(amount, _39FloatZero);
                _41FloatZero = FloatZero();
                _42GreaterThanOrEqual = GreaterThanOrEqual(amplify, _41FloatZero);
                _50Pass-through: Single = if (_42GreaterThanOrEqual)
                  {
                    Single _43FloatOne;// 1:StretchDeformer-ext->46:FloatOne 95424
                    Single _44Add;// 1:StretchDeformer-ext->39:Add 95422
                    _43FloatOne = FloatOne();
                    _44Add = Add(amplify, _43FloatOne);
                    _44Add;
                    }else
                  {
                    Single _45FloatOne;// 1:StretchDeformer-ext->49:FloatOne 95426
                    Single _46NegativeFloat;// 1:StretchDeformer-ext->51:NegativeFloat 95428
                    Single _47FloatOne;// 1:StretchDeformer-ext->56:FloatOne 95429
                    Single _48Add;// 1:StretchDeformer-ext->55:Add 95427
                    Single _49Divide;// 1:StretchDeformer-ext->50:Divide 95425
                    _45FloatOne = FloatOne();
                    _46NegativeFloat = NegativeFloat(amplify);
                    _47FloatOne = FloatOne();
                    _48Add = Add(_46NegativeFloat, _47FloatOne);
                    _49Divide = Divide(_45FloatOne, _48Add);
                    _49Divide;
                    };
                _67Subtract = Subtract(_38FloatOne, if (_40LessThan)
                    {
                      Single _58FloatOne;// 1:StretchDeformer-ext->98:FloatOne 95413
                      Single _59NegativeFloat;// 1:StretchDeformer-ext->99:NegativeFloat 95430
                      Single _60Multiply;// 1:StretchDeformer-ext->100:Multiply 95414
                      Single _61Add;// 1:StretchDeformer-ext->97:Add 95412
                      _58FloatOne = FloatOne();
                      _59NegativeFloat = NegativeFloat(amount);
                      _60Multiply = Multiply(_50Pass-through: Single, _59NegativeFloat);
                      _61Add = Add(_58FloatOne, _60Multiply);
                      _61Add;
                      }else
                    {
                      Single _62FloatOne;// 1:StretchDeformer-ext->113:FloatOne 95433
                      Single _63Multiply;// 1:StretchDeformer-ext->114:Multiply 95435
                      Single _64FloatOne;// 1:StretchDeformer-ext->120:FloatOne 95438
                      Single _65Add;// 1:StretchDeformer-ext->119:Add 95434
                      Single _66Divide;// 1:StretchDeformer-ext->112:Divide 95432
                      _62FloatOne = FloatOne();
                      _63Multiply = Multiply(_50Pass-through: Single, amount);
                      _64FloatOne = FloatOne();
                      _65Add = Add(_63Multiply, _64FloatOne);
                      _66Divide = Divide(_62FloatOne, _65Add);
                      _66Divide;
                      });
                _68Multiply = Multiply(_37Constant, _67Subtract);
                _69Z = Z(_35Transform);
                _70Subtract = Subtract(_69Z, _16At);
                _71Divide = Divide(_70Subtract, _17Subtract);
                _72Multiply = Multiply(_68Multiply, _71Divide);
                _73NegativeFloat = NegativeFloat(_37Constant);
                _74Multiply = Multiply(_73NegativeFloat, _67Subtract);
                _75Add = Add(_72Multiply, _74Multiply);
                _76Multiply = Multiply(_75Add, _71Divide);
                _77FloatOne = FloatOne();
                _78Add = Add(_76Multiply, _77FloatOne);
                _79Multiply = Multiply(_36X, _78Add);
                _80Y = Y(_35Transform);
                _81Multiply = Multiply(_80Y, _78Add);
                _89Pass-through: Single = if (_40LessThan)
                  {
                    Single _82FloatOne;// 1:StretchDeformer-ext->126:FloatOne 95458
                    Single _83NegativeFloat;// 1:StretchDeformer-ext->125:NegativeFloat 95457
                    Single _84FloatOne;// 1:StretchDeformer-ext->130:FloatOne 95462
                    Single _85Subtract;// 1:StretchDeformer-ext->127:Subtract 95459
                    Single _86Divide;// 1:StretchDeformer-ext->124:Divide 95456
                    _82FloatOne = FloatOne();
                    _83NegativeFloat = NegativeFloat(_82FloatOne);
                    _84FloatOne = FloatOne();
                    _85Subtract = Subtract(amount, _84FloatOne);
                    _86Divide = Divide(_83NegativeFloat, _85Subtract);
                    _86Divide;
                    }else
                  {
                    Single _87FloatOne;// 1:StretchDeformer-ext->133:FloatOne 95464
                    Single _88Add;// 1:StretchDeformer-ext->132:Add 95463
                    _87FloatOne = FloatOne();
                    _88Add = Add(_87FloatOne, amount);
                    _88Add;
                    };
                _90Multiply = Multiply(_69Z, _89Pass-through: Single);
                _91Vector3 = Vector3(_79Multiply, _81Multiply, _90Multiply);
                _92InvertMatrix = InvertMatrix(_34Apply0);
                _93Transform = Transform(_91Vector3, _92InvertMatrix);
                _93Transform;
                };
            };
        _42Pass-through: Matrix = if (use node transform)
          {
            Boolean _4IsValidNode;// 8:GizmoTransformInLocalSpace->35:IsValidNode 95479
            _4IsValidNode = IsValidNode(gizmo node);
            if (_4IsValidNode)
              {
                Boolean _5IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 95485
                Matrix _8InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 95489
                Matrix _9Multiply;// 32:NodeToLocalTransform->18:Multiply 95482
                _5IsValidNode = IsValidNode(gizmo node);
                _8InvertMatrix = InvertMatrix(modifierTransform);
                _9Multiply = Multiply(if (_5IsValidNode)
                    {
                      Matrix _6WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 95486
                      _6WorldTransform = WorldTransform(gizmo node);
                      _6WorldTransform;
                      }else
                    {
                      Matrix _7MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 95487
                      _7MatrixIdentity = MatrixIdentity();
                      _7MatrixIdentity;
                      }, _8InvertMatrix);
                _9Multiply;
                }else
              {
                Matrix _10MatrixIdentity;// 8:GizmoTransformInLocalSpace->40:MatrixIdentity 95490
                _10MatrixIdentity = MatrixIdentity();
                _10MatrixIdentity;
                };
            }else
          {
            Matrix _11TranslationMatrix;// 11:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 95501
            Single _12X;// 1:VectorAsArray->1:X 95537
            IArray[Single] _13Unit;// 4:Array3->2:Unit 95536
            Single _14Y;// 1:VectorAsArray->2:Y 95538
            IArray[Single] _15Append;// 4:Array3->3:Append 95535
            Single _16Z;// 1:VectorAsArray->3:Z 95539
            IArray[Single] _17Append;// 4:Array3->6:Append 95534
            Func[Single, Single] _18Pass-through: function1;// 0:Pass-through: function1 95516
            IArray[Single] _19Map;// 1:VectorMapComponents-ext->2:Map 95529
            Int32 _20Zero;// 3:VectorFromArray-ext->5:Zero 95520
            Single _21At;// 3:VectorFromArray-ext->1:At 95519
            Int32 _22One;// 6:PlusOne->1:One 95524
            Int32 _23Add;// 6:PlusOne->0:Add 95523
            Single _24At;// 3:VectorFromArray-ext->2:At 95521
            Int32 _25One;// 7:PlusOne->1:One 95528
            Int32 _26Add;// 7:PlusOne->0:Add 95527
            Single _27At;// 3:VectorFromArray-ext->3:At 95525
            Vector3 _28Vector3;// 3:VectorFromArray-ext->4:Vector3 95518
            Single _29Y;// 2:QuaternionFromVector3-ext->7:Y 95511
            Single _30X;// 2:QuaternionFromVector3-ext->6:X 95512
            Single _31Z;// 2:QuaternionFromVector3-ext->8:Z 95513
            Quaternion _32QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95510
            Matrix _33MatrixFromQuaternion;// 11:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 95502
            Matrix _34Multiply;// 6:Multiply3-ext->3:Multiply 95500
            Single _35Constant;// 45:OnesVector-ext->0:Constant 95545
            Vector3 _36Vector3;// 45:OnesVector-ext->2:Vector3 95544
            Vector3 _37Add;// 44:Add 95542
            Single _38Constant;// 8:Origin->0:Constant 95506
            Vector3 _39Vector3;// 8:Origin->1:Vector3 95505
            Matrix _40ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 95504
            Matrix _41Multiply;// 6:Multiply3-ext->4:Multiply 95499
            _11TranslationMatrix = TranslationMatrix(deformer translation);
            _12X = X(deformer rotation);
            _13Unit = Unit(_12X);
            _14Y = Y(deformer rotation);
            _15Append = Append(_13Unit, _14Y);
            _16Z = Z(deformer rotation);
            _17Append = Append(_15Append, _16Z);
            _18Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95540
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _19Map = Map(_17Append, _18Pass-through: function1);
            _20Zero = Zero();
            _21At = At(_19Map, _20Zero);
            _22One = One();
            _23Add = Add(_20Zero, _22One);
            _24At = At(_19Map, _23Add);
            _25One = One();
            _26Add = Add(_23Add, _25One);
            _27At = At(_19Map, _26Add);
            _28Vector3 = Vector3(_21At, _24At, _27At);
            _29Y = Y(_28Vector3);
            _30X = X(_28Vector3);
            _31Z = Z(_28Vector3);
            _32QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_29Y, _30X, _31Z);
            _33MatrixFromQuaternion = MatrixFromQuaternion(_32QuaternionFromYawPitchRoll);
            _34Multiply = Multiply(_11TranslationMatrix, _33MatrixFromQuaternion);
            _35Constant = 1;
            _36Vector3 = Vector3(_35Constant, _35Constant, _35Constant);
            _37Add = Add(deformer scale, _36Vector3);
            _38Constant = 0;
            _39Vector3 = Vector3(_38Constant, _38Constant, _38Constant);
            _40ScalingTranslationMatrix = ScalingTranslationMatrix(_37Add, _39Vector3);
            _41Multiply = Multiply(_34Multiply, _40ScalingTranslationMatrix);
            _41Multiply;
            };
        _43InvertMatrix = InvertMatrix(_42Pass-through: Matrix);
        _44ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 5:MeshDeformVertices-ext->11:Transform 95325
            Vector3 _1Apply1;// 5:MeshDeformVertices-ext->8:Apply1 95324
            Vector3 _2Transform;// 5:MeshDeformVertices-ext->9:Transform 95323
            _0Transform = Transform(x0, _43InvertMatrix);
            _1Apply1 = Apply1(_3Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _42Pass-through: Matrix);
            _2Transform;
            });
        _45SetMeshVertices = SetMeshVertices(mesh, _44ParallelMap);
        _45SetMeshVertices;
        });
    _5IfThen;
    }