(InstanceState state, TriMesh mesh, Int32 axis, Single amount, Single amplify, Boolean use gizmo node, INode gizmo node, Matrix modifierTransform) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 54828
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 54830
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 54829
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 54827
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 54826
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 54822
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 54837
        IArray[Vector3] _1MeshVertices;// 5:DeformVertices-ext->4:MeshVertices 54843
        IArray[Vector3] _2MeshVertices;// 2:MeshBoundingBox->1:MeshVertices 54990
        BoundingBox _3BoxFromPoints;// 2:MeshBoundingBox->0:BoxFromPoints 54989
        Func[Vector3, Vector3] _4Pass-through: function1;// 0:Pass-through: function1 54818
        Matrix _11Pass-through: Matrix;// 0:Pass-through: Matrix 54816
        Matrix _12InvertMatrix;// 5:DeformVertices-ext->7:InvertMatrix 54848
        IArray[Vector3] _13ParallelMap;// 5:DeformVertices-ext->5:ParallelMap 54842
        Int32 _14Zero;// 7:SoftSelection->2:Zero 54840
        IArray[Single] _15PerVertexData;// 7:SoftSelection->3:PerVertexData 54839
        IArray[Vector3] _16Combine3;// 1:LerpVectors-ext->10:Combine3 54835
        TriMesh _17SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 54831
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2MeshVertices = MeshVertices(mesh);
        _3BoxFromPoints = BoxFromPoints(_2MeshVertices);
        _4Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0FloatZero;// 1:StretchDeformer-ext->67:FloatZero 54858
            Vector3 _1BoxMax;// 1:StretchDeformer-ext->13:BoxMax 54874
            Single _2X;// 2:VectorAsArray->1:X 54871
            IArray[Single] _3Unit;// 4:Array3->2:Unit 54870
            Single _4Y;// 2:VectorAsArray->2:Y 54872
            IArray[Single] _5Append;// 4:Array3->3:Append 54869
            Single _6Z;// 2:VectorAsArray->3:Z 54873
            IArray[Single] _7Append;// 4:Array3->6:Append 54868
            Single _8At;// 16:VectorComponent-ext->3:At 54863
            Vector3 _9BoxMin;// 1:StretchDeformer-ext->9:BoxMin 54889
            Single _10X;// 2:VectorAsArray->1:X 54886
            IArray[Single] _11Unit;// 4:Array3->2:Unit 54885
            Single _12Y;// 2:VectorAsArray->2:Y 54887
            IArray[Single] _13Append;// 4:Array3->3:Append 54884
            Single _14Z;// 2:VectorAsArray->3:Z 54888
            IArray[Single] _15Append;// 4:Array3->6:Append 54883
            Single _16At;// 15:VectorComponent-ext->3:At 54878
            Single _17Subtract;// 1:StretchDeformer-ext->65:Subtract 54860
            Boolean _18Equal;// 1:StretchDeformer-ext->66:Equal 54857
            Single _19FloatZero;// 1:StretchDeformer-ext->71:FloatZero 54891
            Boolean _20Equal;// 1:StretchDeformer-ext->70:Equal 54890
            Boolean _21OrElse;// 1:StretchDeformer-ext->69:OrElse 54856
            _0FloatZero = FloatZero();
            _1BoxMax = BoxMax(_3BoxFromPoints);
            _2X = X(_1BoxMax);
            _3Unit = Unit(_2X);
            _4Y = Y(_1BoxMax);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1BoxMax);
            _7Append = Append(_5Append, _6Z);
            _8At = At(_7Append, axis);
            _9BoxMin = BoxMin(_3BoxFromPoints);
            _10X = X(_9BoxMin);
            _11Unit = Unit(_10X);
            _12Y = Y(_9BoxMin);
            _13Append = Append(_11Unit, _12Y);
            _14Z = Z(_9BoxMin);
            _15Append = Append(_13Append, _14Z);
            _16At = At(_15Append, axis);
            _17Subtract = Subtract(_8At, _16At);
            _18Equal = Equal(_0FloatZero, _17Subtract);
            _19FloatZero = FloatZero();
            _20Equal = Equal(_19FloatZero, amount);
            _21OrElse = OrElse(_18Equal, _20Equal);
            if (_21OrElse)
              {
                x0;
                }else
              {
                Single _22HalfPi;// 1:StretchDeformer-ext->3:HalfPi 54915
                Single _23NegativeFloat;// 1:StretchDeformer-ext->4:NegativeFloat 54914
                Matrix _24RotationYMatrix;// 1:StretchDeformer-ext->1:RotationYMatrix 54913
                Func[Matrix] _25Pass-through: any;// 0:Pass-through: any 54907
                IArray[Func[Matrix]] _26Unit;// 7:Array3->2:Unit 54912
                Matrix _27RotationXMatrix;// 1:StretchDeformer-ext->6:RotationXMatrix 54916
                Func[Matrix] _28Pass-through: any;// 0:Pass-through: any 54908
                IArray[Func[Matrix]] _29Append;// 7:Array3->3:Append 54911
                Matrix _30MatrixIdentity;// 1:StretchDeformer-ext->5:MatrixIdentity 54917
                Func[Matrix] _31Pass-through: any;// 0:Pass-through: any 54909
                IArray[Func[Matrix]] _32Append;// 7:Array3->6:Append 54910
                Func[Matrix] _33At;// 1:StretchDeformer-ext->8:At 54906
                Matrix _34Apply0;// 1:StretchDeformer-ext->74:Apply0 54905
                Vector3 _35Transform;// 1:StretchDeformer-ext->18:Transform 54902
                Single _36X;// 1:StretchDeformer-ext->40:X 54900
                Single _37Constant;// 1:StretchDeformer-ext->0:Constant 54926
                Single _38FloatOne;// 1:StretchDeformer-ext->144:FloatOne 54928
                Single _39FloatZero;// 1:StretchDeformer-ext->105:FloatZero 54932
                Boolean _40LessThan;// 1:StretchDeformer-ext->82:LessThan 54930
                Single _41FloatZero;// 1:StretchDeformer-ext->37:FloatZero 54942
                Boolean _42GreaterThanOrEqual;// 1:StretchDeformer-ext->35:GreaterThanOrEqual 54940
                Single _50Pass-through: Single;// 1:StretchDeformer-ext->29:Pass-through: Single 54938
                Single _67Subtract;// 1:StretchDeformer-ext->145:Subtract 54927
                Single _68Multiply;// 1:StretchDeformer-ext->146:Multiply 54925
                Single _69Z;// 1:StretchDeformer-ext->38:Z 54963
                Single _70Subtract;// 1:StretchDeformer-ext->93:Subtract 54962
                Single _71Divide;// 1:StretchDeformer-ext->87:Divide 54961
                Single _72Multiply;// 1:StretchDeformer-ext->138:Multiply 54924
                Single _73NegativeFloat;// 1:StretchDeformer-ext->148:NegativeFloat 54967
                Single _74Multiply;// 1:StretchDeformer-ext->147:Multiply 54966
                Single _75Add;// 1:StretchDeformer-ext->152:Add 54923
                Single _76Multiply;// 1:StretchDeformer-ext->153:Multiply 54922
                Single _77FloatOne;// 1:StretchDeformer-ext->143:FloatOne 54969
                Single _78Add;// 1:StretchDeformer-ext->154:Add 54921
                Single _79Multiply;// 1:StretchDeformer-ext->150:Multiply 54899
                Single _80Y;// 1:StretchDeformer-ext->41:Y 54972
                Single _81Multiply;// 1:StretchDeformer-ext->155:Multiply 54971
                Single _89Pass-through: Single;// 1:StretchDeformer-ext->160:Pass-through: Single 54975
                Single _90Multiply;// 1:StretchDeformer-ext->156:Multiply 54974
                Vector3 _91Vector3;// 1:StretchDeformer-ext->36:Vector3 54897
                Matrix _92InvertMatrix;// 1:StretchDeformer-ext->14:InvertMatrix 54987
                Vector3 _93Transform;// 1:StretchDeformer-ext->19:Transform 54896
                _22HalfPi = HalfPi();
                _23NegativeFloat = NegativeFloat(_22HalfPi);
                _24RotationYMatrix = RotationYMatrix(_23NegativeFloat);
                _25Pass-through: any = () => 
                  {
                    _24RotationYMatrix;
                    };
                _26Unit = Unit(_25Pass-through: any);
                _27RotationXMatrix = RotationXMatrix(_22HalfPi);
                _28Pass-through: any = () => 
                  {
                    _27RotationXMatrix;
                    };
                _29Append = Append(_26Unit, _28Pass-through: any);
                _30MatrixIdentity = MatrixIdentity();
                _31Pass-through: any = () => 
                  {
                    _30MatrixIdentity;
                    };
                _32Append = Append(_29Append, _31Pass-through: any);
                _33At = At(_32Append, axis);
                _34Apply0 = Apply0(_33At);
                _35Transform = Transform(x0, _34Apply0);
                _36X = X(_35Transform);
                _37Constant = 4;
                _38FloatOne = FloatOne();
                _39FloatZero = FloatZero();
                _40LessThan = LessThan(amount, _39FloatZero);
                _41FloatZero = FloatZero();
                _42GreaterThanOrEqual = GreaterThanOrEqual(amplify, _41FloatZero);
                _50Pass-through: Single = if (_42GreaterThanOrEqual)
                  {
                    Single _43FloatOne;// 1:StretchDeformer-ext->46:FloatOne 54945
                    Single _44Add;// 1:StretchDeformer-ext->39:Add 54943
                    _43FloatOne = FloatOne();
                    _44Add = Add(amplify, _43FloatOne);
                    _44Add;
                    }else
                  {
                    Single _45FloatOne;// 1:StretchDeformer-ext->49:FloatOne 54947
                    Single _46NegativeFloat;// 1:StretchDeformer-ext->51:NegativeFloat 54949
                    Single _47FloatOne;// 1:StretchDeformer-ext->56:FloatOne 54950
                    Single _48Add;// 1:StretchDeformer-ext->55:Add 54948
                    Single _49Divide;// 1:StretchDeformer-ext->50:Divide 54946
                    _45FloatOne = FloatOne();
                    _46NegativeFloat = NegativeFloat(amplify);
                    _47FloatOne = FloatOne();
                    _48Add = Add(_46NegativeFloat, _47FloatOne);
                    _49Divide = Divide(_45FloatOne, _48Add);
                    _49Divide;
                    };
                _67Subtract = Subtract(_38FloatOne, if (_40LessThan)
                    {
                      Single _58FloatOne;// 1:StretchDeformer-ext->98:FloatOne 54934
                      Single _59NegativeFloat;// 1:StretchDeformer-ext->99:NegativeFloat 54951
                      Single _60Multiply;// 1:StretchDeformer-ext->100:Multiply 54935
                      Single _61Add;// 1:StretchDeformer-ext->97:Add 54933
                      _58FloatOne = FloatOne();
                      _59NegativeFloat = NegativeFloat(amount);
                      _60Multiply = Multiply(_50Pass-through: Single, _59NegativeFloat);
                      _61Add = Add(_58FloatOne, _60Multiply);
                      _61Add;
                      }else
                    {
                      Single _62FloatOne;// 1:StretchDeformer-ext->113:FloatOne 54954
                      Single _63Multiply;// 1:StretchDeformer-ext->114:Multiply 54956
                      Single _64FloatOne;// 1:StretchDeformer-ext->120:FloatOne 54959
                      Single _65Add;// 1:StretchDeformer-ext->119:Add 54955
                      Single _66Divide;// 1:StretchDeformer-ext->112:Divide 54953
                      _62FloatOne = FloatOne();
                      _63Multiply = Multiply(_50Pass-through: Single, amount);
                      _64FloatOne = FloatOne();
                      _65Add = Add(_63Multiply, _64FloatOne);
                      _66Divide = Divide(_62FloatOne, _65Add);
                      _66Divide;
                      });
                _68Multiply = Multiply(_37Constant, _67Subtract);
                _69Z = Z(_35Transform);
                _70Subtract = Subtract(_69Z, _16At);
                _71Divide = Divide(_70Subtract, _17Subtract);
                _72Multiply = Multiply(_68Multiply, _71Divide);
                _73NegativeFloat = NegativeFloat(_37Constant);
                _74Multiply = Multiply(_73NegativeFloat, _67Subtract);
                _75Add = Add(_72Multiply, _74Multiply);
                _76Multiply = Multiply(_75Add, _71Divide);
                _77FloatOne = FloatOne();
                _78Add = Add(_76Multiply, _77FloatOne);
                _79Multiply = Multiply(_36X, _78Add);
                _80Y = Y(_35Transform);
                _81Multiply = Multiply(_80Y, _78Add);
                _89Pass-through: Single = if (_40LessThan)
                  {
                    Single _82FloatOne;// 1:StretchDeformer-ext->126:FloatOne 54979
                    Single _83NegativeFloat;// 1:StretchDeformer-ext->125:NegativeFloat 54978
                    Single _84FloatOne;// 1:StretchDeformer-ext->130:FloatOne 54983
                    Single _85Subtract;// 1:StretchDeformer-ext->127:Subtract 54980
                    Single _86Divide;// 1:StretchDeformer-ext->124:Divide 54977
                    _82FloatOne = FloatOne();
                    _83NegativeFloat = NegativeFloat(_82FloatOne);
                    _84FloatOne = FloatOne();
                    _85Subtract = Subtract(amount, _84FloatOne);
                    _86Divide = Divide(_83NegativeFloat, _85Subtract);
                    _86Divide;
                    }else
                  {
                    Single _87FloatOne;// 1:StretchDeformer-ext->133:FloatOne 54985
                    Single _88Add;// 1:StretchDeformer-ext->132:Add 54984
                    _87FloatOne = FloatOne();
                    _88Add = Add(_87FloatOne, amount);
                    _88Add;
                    };
                _90Multiply = Multiply(_69Z, _89Pass-through: Single);
                _91Vector3 = Vector3(_79Multiply, _81Multiply, _90Multiply);
                _92InvertMatrix = InvertMatrix(_34Apply0);
                _93Transform = Transform(_91Vector3, _92InvertMatrix);
                _93Transform;
                };
            };
        _11Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _5IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 55002
            _5IsValidNode = IsValidNode(gizmo node);
            if (_5IsValidNode)
              {
                Matrix _6ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 55006
                Matrix _7InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 55007
                Matrix _8Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 55005
                _6ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _7InvertMatrix = InvertMatrix(modifierTransform);
                _8Multiply = Multiply(_6ObjectTransformBeforeWSM, _7InvertMatrix);
                _8Multiply;
                }else
              {
                Matrix _9MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 55008
                _9MatrixIdentity = MatrixIdentity();
                _9MatrixIdentity;
                };
            }else
          {
            Matrix _10MatrixIdentity;// 16:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 55009
            _10MatrixIdentity = MatrixIdentity();
            _10MatrixIdentity;
            };
        _12InvertMatrix = InvertMatrix(_11Pass-through: Matrix);
        _13ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 5:DeformVertices-ext->11:Transform 54846
            Vector3 _1Apply1;// 5:DeformVertices-ext->8:Apply1 54845
            Vector3 _2Transform;// 5:DeformVertices-ext->9:Transform 54844
            _0Transform = Transform(x0, _12InvertMatrix);
            _1Apply1 = Apply1(_4Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _11Pass-through: Matrix);
            _2Transform;
            });
        _14Zero = Zero();
        _15PerVertexData = PerVertexData(mesh, _14Zero);
        _16Combine3 = Combine3(_0MeshVertices, _13ParallelMap, _15PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 54836
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _17SetMeshVertices = SetMeshVertices(mesh, _16Combine3);
        _17SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 5:DeformVertices-ext->4:MeshVertices 54843
        IArray[Vector3] _1MeshVertices;// 2:MeshBoundingBox->1:MeshVertices 54990
        BoundingBox _2BoxFromPoints;// 2:MeshBoundingBox->0:BoxFromPoints 54989
        Func[Vector3, Vector3] _3Pass-through: function1;// 0:Pass-through: function1 54818
        Matrix _10Pass-through: Matrix;// 0:Pass-through: Matrix 54816
        Matrix _11InvertMatrix;// 5:DeformVertices-ext->7:InvertMatrix 54848
        IArray[Vector3] _12ParallelMap;// 5:DeformVertices-ext->5:ParallelMap 54842
        TriMesh _13SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 54841
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2BoxFromPoints = BoxFromPoints(_1MeshVertices);
        _3Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0FloatZero;// 1:StretchDeformer-ext->67:FloatZero 54858
            Vector3 _1BoxMax;// 1:StretchDeformer-ext->13:BoxMax 54874
            Single _2X;// 2:VectorAsArray->1:X 54871
            IArray[Single] _3Unit;// 4:Array3->2:Unit 54870
            Single _4Y;// 2:VectorAsArray->2:Y 54872
            IArray[Single] _5Append;// 4:Array3->3:Append 54869
            Single _6Z;// 2:VectorAsArray->3:Z 54873
            IArray[Single] _7Append;// 4:Array3->6:Append 54868
            Single _8At;// 16:VectorComponent-ext->3:At 54863
            Vector3 _9BoxMin;// 1:StretchDeformer-ext->9:BoxMin 54889
            Single _10X;// 2:VectorAsArray->1:X 54886
            IArray[Single] _11Unit;// 4:Array3->2:Unit 54885
            Single _12Y;// 2:VectorAsArray->2:Y 54887
            IArray[Single] _13Append;// 4:Array3->3:Append 54884
            Single _14Z;// 2:VectorAsArray->3:Z 54888
            IArray[Single] _15Append;// 4:Array3->6:Append 54883
            Single _16At;// 15:VectorComponent-ext->3:At 54878
            Single _17Subtract;// 1:StretchDeformer-ext->65:Subtract 54860
            Boolean _18Equal;// 1:StretchDeformer-ext->66:Equal 54857
            Single _19FloatZero;// 1:StretchDeformer-ext->71:FloatZero 54891
            Boolean _20Equal;// 1:StretchDeformer-ext->70:Equal 54890
            Boolean _21OrElse;// 1:StretchDeformer-ext->69:OrElse 54856
            _0FloatZero = FloatZero();
            _1BoxMax = BoxMax(_2BoxFromPoints);
            _2X = X(_1BoxMax);
            _3Unit = Unit(_2X);
            _4Y = Y(_1BoxMax);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1BoxMax);
            _7Append = Append(_5Append, _6Z);
            _8At = At(_7Append, axis);
            _9BoxMin = BoxMin(_2BoxFromPoints);
            _10X = X(_9BoxMin);
            _11Unit = Unit(_10X);
            _12Y = Y(_9BoxMin);
            _13Append = Append(_11Unit, _12Y);
            _14Z = Z(_9BoxMin);
            _15Append = Append(_13Append, _14Z);
            _16At = At(_15Append, axis);
            _17Subtract = Subtract(_8At, _16At);
            _18Equal = Equal(_0FloatZero, _17Subtract);
            _19FloatZero = FloatZero();
            _20Equal = Equal(_19FloatZero, amount);
            _21OrElse = OrElse(_18Equal, _20Equal);
            if (_21OrElse)
              {
                x0;
                }else
              {
                Single _22HalfPi;// 1:StretchDeformer-ext->3:HalfPi 54915
                Single _23NegativeFloat;// 1:StretchDeformer-ext->4:NegativeFloat 54914
                Matrix _24RotationYMatrix;// 1:StretchDeformer-ext->1:RotationYMatrix 54913
                Func[Matrix] _25Pass-through: any;// 0:Pass-through: any 54907
                IArray[Func[Matrix]] _26Unit;// 7:Array3->2:Unit 54912
                Matrix _27RotationXMatrix;// 1:StretchDeformer-ext->6:RotationXMatrix 54916
                Func[Matrix] _28Pass-through: any;// 0:Pass-through: any 54908
                IArray[Func[Matrix]] _29Append;// 7:Array3->3:Append 54911
                Matrix _30MatrixIdentity;// 1:StretchDeformer-ext->5:MatrixIdentity 54917
                Func[Matrix] _31Pass-through: any;// 0:Pass-through: any 54909
                IArray[Func[Matrix]] _32Append;// 7:Array3->6:Append 54910
                Func[Matrix] _33At;// 1:StretchDeformer-ext->8:At 54906
                Matrix _34Apply0;// 1:StretchDeformer-ext->74:Apply0 54905
                Vector3 _35Transform;// 1:StretchDeformer-ext->18:Transform 54902
                Single _36X;// 1:StretchDeformer-ext->40:X 54900
                Single _37Constant;// 1:StretchDeformer-ext->0:Constant 54926
                Single _38FloatOne;// 1:StretchDeformer-ext->144:FloatOne 54928
                Single _39FloatZero;// 1:StretchDeformer-ext->105:FloatZero 54932
                Boolean _40LessThan;// 1:StretchDeformer-ext->82:LessThan 54930
                Single _41FloatZero;// 1:StretchDeformer-ext->37:FloatZero 54942
                Boolean _42GreaterThanOrEqual;// 1:StretchDeformer-ext->35:GreaterThanOrEqual 54940
                Single _50Pass-through: Single;// 1:StretchDeformer-ext->29:Pass-through: Single 54938
                Single _67Subtract;// 1:StretchDeformer-ext->145:Subtract 54927
                Single _68Multiply;// 1:StretchDeformer-ext->146:Multiply 54925
                Single _69Z;// 1:StretchDeformer-ext->38:Z 54963
                Single _70Subtract;// 1:StretchDeformer-ext->93:Subtract 54962
                Single _71Divide;// 1:StretchDeformer-ext->87:Divide 54961
                Single _72Multiply;// 1:StretchDeformer-ext->138:Multiply 54924
                Single _73NegativeFloat;// 1:StretchDeformer-ext->148:NegativeFloat 54967
                Single _74Multiply;// 1:StretchDeformer-ext->147:Multiply 54966
                Single _75Add;// 1:StretchDeformer-ext->152:Add 54923
                Single _76Multiply;// 1:StretchDeformer-ext->153:Multiply 54922
                Single _77FloatOne;// 1:StretchDeformer-ext->143:FloatOne 54969
                Single _78Add;// 1:StretchDeformer-ext->154:Add 54921
                Single _79Multiply;// 1:StretchDeformer-ext->150:Multiply 54899
                Single _80Y;// 1:StretchDeformer-ext->41:Y 54972
                Single _81Multiply;// 1:StretchDeformer-ext->155:Multiply 54971
                Single _89Pass-through: Single;// 1:StretchDeformer-ext->160:Pass-through: Single 54975
                Single _90Multiply;// 1:StretchDeformer-ext->156:Multiply 54974
                Vector3 _91Vector3;// 1:StretchDeformer-ext->36:Vector3 54897
                Matrix _92InvertMatrix;// 1:StretchDeformer-ext->14:InvertMatrix 54987
                Vector3 _93Transform;// 1:StretchDeformer-ext->19:Transform 54896
                _22HalfPi = HalfPi();
                _23NegativeFloat = NegativeFloat(_22HalfPi);
                _24RotationYMatrix = RotationYMatrix(_23NegativeFloat);
                _25Pass-through: any = () => 
                  {
                    _24RotationYMatrix;
                    };
                _26Unit = Unit(_25Pass-through: any);
                _27RotationXMatrix = RotationXMatrix(_22HalfPi);
                _28Pass-through: any = () => 
                  {
                    _27RotationXMatrix;
                    };
                _29Append = Append(_26Unit, _28Pass-through: any);
                _30MatrixIdentity = MatrixIdentity();
                _31Pass-through: any = () => 
                  {
                    _30MatrixIdentity;
                    };
                _32Append = Append(_29Append, _31Pass-through: any);
                _33At = At(_32Append, axis);
                _34Apply0 = Apply0(_33At);
                _35Transform = Transform(x0, _34Apply0);
                _36X = X(_35Transform);
                _37Constant = 4;
                _38FloatOne = FloatOne();
                _39FloatZero = FloatZero();
                _40LessThan = LessThan(amount, _39FloatZero);
                _41FloatZero = FloatZero();
                _42GreaterThanOrEqual = GreaterThanOrEqual(amplify, _41FloatZero);
                _50Pass-through: Single = if (_42GreaterThanOrEqual)
                  {
                    Single _43FloatOne;// 1:StretchDeformer-ext->46:FloatOne 54945
                    Single _44Add;// 1:StretchDeformer-ext->39:Add 54943
                    _43FloatOne = FloatOne();
                    _44Add = Add(amplify, _43FloatOne);
                    _44Add;
                    }else
                  {
                    Single _45FloatOne;// 1:StretchDeformer-ext->49:FloatOne 54947
                    Single _46NegativeFloat;// 1:StretchDeformer-ext->51:NegativeFloat 54949
                    Single _47FloatOne;// 1:StretchDeformer-ext->56:FloatOne 54950
                    Single _48Add;// 1:StretchDeformer-ext->55:Add 54948
                    Single _49Divide;// 1:StretchDeformer-ext->50:Divide 54946
                    _45FloatOne = FloatOne();
                    _46NegativeFloat = NegativeFloat(amplify);
                    _47FloatOne = FloatOne();
                    _48Add = Add(_46NegativeFloat, _47FloatOne);
                    _49Divide = Divide(_45FloatOne, _48Add);
                    _49Divide;
                    };
                _67Subtract = Subtract(_38FloatOne, if (_40LessThan)
                    {
                      Single _58FloatOne;// 1:StretchDeformer-ext->98:FloatOne 54934
                      Single _59NegativeFloat;// 1:StretchDeformer-ext->99:NegativeFloat 54951
                      Single _60Multiply;// 1:StretchDeformer-ext->100:Multiply 54935
                      Single _61Add;// 1:StretchDeformer-ext->97:Add 54933
                      _58FloatOne = FloatOne();
                      _59NegativeFloat = NegativeFloat(amount);
                      _60Multiply = Multiply(_50Pass-through: Single, _59NegativeFloat);
                      _61Add = Add(_58FloatOne, _60Multiply);
                      _61Add;
                      }else
                    {
                      Single _62FloatOne;// 1:StretchDeformer-ext->113:FloatOne 54954
                      Single _63Multiply;// 1:StretchDeformer-ext->114:Multiply 54956
                      Single _64FloatOne;// 1:StretchDeformer-ext->120:FloatOne 54959
                      Single _65Add;// 1:StretchDeformer-ext->119:Add 54955
                      Single _66Divide;// 1:StretchDeformer-ext->112:Divide 54953
                      _62FloatOne = FloatOne();
                      _63Multiply = Multiply(_50Pass-through: Single, amount);
                      _64FloatOne = FloatOne();
                      _65Add = Add(_63Multiply, _64FloatOne);
                      _66Divide = Divide(_62FloatOne, _65Add);
                      _66Divide;
                      });
                _68Multiply = Multiply(_37Constant, _67Subtract);
                _69Z = Z(_35Transform);
                _70Subtract = Subtract(_69Z, _16At);
                _71Divide = Divide(_70Subtract, _17Subtract);
                _72Multiply = Multiply(_68Multiply, _71Divide);
                _73NegativeFloat = NegativeFloat(_37Constant);
                _74Multiply = Multiply(_73NegativeFloat, _67Subtract);
                _75Add = Add(_72Multiply, _74Multiply);
                _76Multiply = Multiply(_75Add, _71Divide);
                _77FloatOne = FloatOne();
                _78Add = Add(_76Multiply, _77FloatOne);
                _79Multiply = Multiply(_36X, _78Add);
                _80Y = Y(_35Transform);
                _81Multiply = Multiply(_80Y, _78Add);
                _89Pass-through: Single = if (_40LessThan)
                  {
                    Single _82FloatOne;// 1:StretchDeformer-ext->126:FloatOne 54979
                    Single _83NegativeFloat;// 1:StretchDeformer-ext->125:NegativeFloat 54978
                    Single _84FloatOne;// 1:StretchDeformer-ext->130:FloatOne 54983
                    Single _85Subtract;// 1:StretchDeformer-ext->127:Subtract 54980
                    Single _86Divide;// 1:StretchDeformer-ext->124:Divide 54977
                    _82FloatOne = FloatOne();
                    _83NegativeFloat = NegativeFloat(_82FloatOne);
                    _84FloatOne = FloatOne();
                    _85Subtract = Subtract(amount, _84FloatOne);
                    _86Divide = Divide(_83NegativeFloat, _85Subtract);
                    _86Divide;
                    }else
                  {
                    Single _87FloatOne;// 1:StretchDeformer-ext->133:FloatOne 54985
                    Single _88Add;// 1:StretchDeformer-ext->132:Add 54984
                    _87FloatOne = FloatOne();
                    _88Add = Add(_87FloatOne, amount);
                    _88Add;
                    };
                _90Multiply = Multiply(_69Z, _89Pass-through: Single);
                _91Vector3 = Vector3(_79Multiply, _81Multiply, _90Multiply);
                _92InvertMatrix = InvertMatrix(_34Apply0);
                _93Transform = Transform(_91Vector3, _92InvertMatrix);
                _93Transform;
                };
            };
        _10Pass-through: Matrix = if (use gizmo node)
          {
            Boolean _4IsValidNode;// 4:NodeTransformInLocalSpaceOrIdentity-ext->3:IsValidNode 55002
            _4IsValidNode = IsValidNode(gizmo node);
            if (_4IsValidNode)
              {
                Matrix _5ObjectTransformBeforeWSM;// 2:NodeTMInLocalSpace-ext->3:ObjectTransformBeforeWSM 55006
                Matrix _6InvertMatrix;// 2:NodeTMInLocalSpace-ext->2:InvertMatrix 55007
                Matrix _7Multiply;// 2:NodeTMInLocalSpace-ext->4:Multiply 55005
                _5ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(gizmo node);
                _6InvertMatrix = InvertMatrix(modifierTransform);
                _7Multiply = Multiply(_5ObjectTransformBeforeWSM, _6InvertMatrix);
                _7Multiply;
                }else
              {
                Matrix _8MatrixIdentity;// 4:NodeTransformInLocalSpaceOrIdentity-ext->5:MatrixIdentity 55008
                _8MatrixIdentity = MatrixIdentity();
                _8MatrixIdentity;
                };
            }else
          {
            Matrix _9MatrixIdentity;// 16:NodeTransformInLocalSpaceConditionally-ext->5:MatrixIdentity 55009
            _9MatrixIdentity = MatrixIdentity();
            _9MatrixIdentity;
            };
        _11InvertMatrix = InvertMatrix(_10Pass-through: Matrix);
        _12ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 5:DeformVertices-ext->11:Transform 54846
            Vector3 _1Apply1;// 5:DeformVertices-ext->8:Apply1 54845
            Vector3 _2Transform;// 5:DeformVertices-ext->9:Transform 54844
            _0Transform = Transform(x0, _11InvertMatrix);
            _1Apply1 = Apply1(_3Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _10Pass-through: Matrix);
            _2Transform;
            });
        _13SetMeshVertices = SetMeshVertices(mesh, _12ParallelMap);
        _13SetMeshVertices;
        });
    _5IfThen;
    }