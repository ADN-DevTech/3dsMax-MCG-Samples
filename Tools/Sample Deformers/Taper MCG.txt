(InstanceState state, TriMesh mesh, Boolean applyLimits, BoundingBox boundingBox, Int32 axis, Single lower, Single upper, Single curvature, Single amount, Boolean use node transform, INode gizmo node, Matrix modifierTransform, Vector3 deformer translation, Vector3 deformer rotation, Vector3 deformer scale) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 95632
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 95634
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 95633
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 95631
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 95630
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 95626
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 95641
        IArray[Vector3] _1MeshVertices;// 0:MeshDeformVertices-ext->4:MeshVertices 95647
        Single _2Constant;// 22:DivideBy100-ext->0:Constant 95891
        Single _3Divide;// 22:DivideBy100-ext->2:Divide 95890
        Single _4Constant;// 46:DivideBy100-ext->0:Constant 95895
        Single _5Divide;// 46:DivideBy100-ext->2:Divide 95894
        Single _6FloatZero;// 27:Taper-ext->11:FloatZero 95842
        Func[Vector3, Single] _7Pass-through: function1;// 0:Pass-through: function1 95616
        Single _8Constant;// 15:Origin->0:Constant 95715
        Vector3 _9Vector3;// 15:Origin->1:Vector3 95714
        Single _10Constant;// 2:Origin->0:Constant 95844
        Vector3 _11Vector3;// 2:Origin->1:Vector3 95843
        Single _12Constant;// 16:Origin->0:Constant 95717
        Vector3 _13Vector3;// 16:Origin->1:Vector3 95716
        Single _14Constant;// 17:OnesVector-ext->0:Constant 95719
        Vector3 _15Vector3;// 17:OnesVector-ext->2:Vector3 95718
        Single _16Constant;// 13:DivideByTwoFloat->0:Constant 95881
        Single _17Divide;// 13:DivideByTwoFloat->2:Divide 95880
        Vector3 _18Vector3;// 26:ScalarToVector-ext->1:Vector3 95878
        Single _19Constant;// 39:OnesVector-ext->0:Constant 95883
        Vector3 _20Vector3;// 39:OnesVector-ext->2:Vector3 95882
        Vector3 _21Add;// 27:Taper-ext->40:Add 95876
        Single _22X;// 1:VectorAsArray->1:X 95873
        IArray[Single] _23Unit;// 4:Array3->2:Unit 95872
        Single _24Y;// 1:VectorAsArray->2:Y 95874
        IArray[Single] _25Append;// 4:Array3->3:Append 95871
        Single _26Z;// 1:VectorAsArray->3:Z 95875
        IArray[Single] _27Append;// 4:Array3->6:Append 95870
        Single _28FloatOne;// 27:Taper-ext->25:FloatOne 95884
        Tuple[Int32, Single] _29Pair;// 3:SetValue->1:Pair 95865
        IArray[Tuple[Int32, Single]] _30Unit;// 3:SetValue->5:Unit 95864
        IArray[Single] _31SetValues;// 3:SetValue->0:SetValues 95863
        Int32 _32Zero;// 6:VectorFromArray-ext->5:Zero 95851
        Single _33At;// 6:VectorFromArray-ext->1:At 95850
        Int32 _34One;// 6:PlusOne->1:One 95855
        Int32 _35Add;// 6:PlusOne->0:Add 95854
        Single _36At;// 6:VectorFromArray-ext->2:At 95852
        Int32 _37One;// 7:PlusOne->1:One 95859
        Int32 _38Add;// 7:PlusOne->0:Add 95858
        Single _39At;// 6:VectorFromArray-ext->3:At 95856
        Vector3 _40Vector3;// 6:VectorFromArray-ext->4:Vector3 95849
        Func[Vector3, Vector3] _41Pass-through: function1;// 0:Pass-through: function1 95622
        Matrix _80Pass-through: Matrix;// 0:Pass-through: Matrix 95602
        Matrix _81InvertMatrix;// 0:MeshDeformVertices-ext->7:InvertMatrix 95652
        IArray[Vector3] _82ParallelMap;// 0:MeshDeformVertices-ext->5:ParallelMap 95646
        Int32 _83Zero;// 7:SoftSelection->2:Zero 95644
        IArray[Single] _84PerVertexData;// 7:SoftSelection->3:PerVertexData 95643
        IArray[Vector3] _85Combine3;// 1:LerpVectors-ext->10:Combine3 95639
        TriMesh _86SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 95635
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Constant = 100;
        _3Divide = Divide(lower, _2Constant);
        _4Constant = 100;
        _5Divide = Divide(upper, _4Constant);
        _6FloatZero = FloatZero();
        _7Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 95837
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 95836
            Single _2X;// 2:VectorAsArray->1:X 95810
            IArray[Single] _3Unit;// 4:Array3->2:Unit 95809
            Single _4Y;// 2:VectorAsArray->2:Y 95811
            IArray[Single] _5Append;// 4:Array3->3:Append 95808
            Single _6Z;// 2:VectorAsArray->3:Z 95812
            IArray[Single] _7Append;// 4:Array3->6:Append 95807
            Vector3 _8BoxMax;// 9:BoundingBoxExtent-ext->1:BoxMax 95840
            Vector3 _9BoxMin;// 9:BoundingBoxExtent-ext->2:BoxMin 95841
            Vector3 _10Subtract;// 9:BoundingBoxExtent-ext->3:Subtract 95839
            Single _11X;// 4:VectorAsArray->1:X 95820
            IArray[Single] _12Unit;// 4:Array3->2:Unit 95819
            Single _13Y;// 4:VectorAsArray->2:Y 95821
            IArray[Single] _14Append;// 4:Array3->3:Append 95818
            Single _15Z;// 4:VectorAsArray->3:Z 95822
            IArray[Single] _16Append;// 4:Array3->6:Append 95817
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 95802
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 95793
            Single _19At;// 7:VectorFromArray-ext->1:At 95792
            Int32 _20One;// 6:PlusOne->1:One 95797
            Int32 _21Add;// 6:PlusOne->0:Add 95796
            Single _22At;// 7:VectorFromArray-ext->2:At 95794
            Int32 _23One;// 7:PlusOne->1:One 95801
            Int32 _24Add;// 7:PlusOne->0:Add 95800
            Single _25At;// 7:VectorFromArray-ext->3:At 95798
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 95791
            Single _27X;// 2:VectorAsArray-ext->1:X 95785
            IArray[Single] _28Unit;// 4:Array3-ext->2:Unit 95784
            Single _29Y;// 2:VectorAsArray-ext->2:Y 95786
            IArray[Single] _30Append;// 4:Array3-ext->3:Append 95783
            Single _31Z;// 2:VectorAsArray-ext->3:Z 95787
            IArray[Single] _32Append;// 4:Array3-ext->6:Append 95782
            Single _33At;// 10:VectorElement-ext->3:At 95777
            Single _42Pass-through: Single;// 0:Pass-through: Single 95728
            Single _43FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 95734
            Boolean _44LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 95733
            Single _45Abs;// 13:FloatApplyBias-ext->66:Abs 95737
            Single _46FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 95742
            Single _47FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 95745
            Single _48Add;// 13:FloatApplyBias-ext->94:Add 95744
            Single _49Constant;// 13:FloatApplyBias-ext->0:Constant 95746
            Single _50Multiply;// 13:FloatApplyBias-ext->80:Multiply 95743
            Single _51Subtract;// 13:FloatApplyBias-ext->83:Subtract 95741
            Single _52Constant;// 13:FloatApplyBias-ext->0:Constant 95747
            Single _53Constant;// 13:FloatApplyBias-ext->0:Constant 95748
            Single _54ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 95740
            Single _55LogN;// 13:FloatApplyBias-ext->99:LogN 95739
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 95750
            Single _57LogN;// 13:FloatApplyBias-ext->19:LogN 95749
            Single _58Divide;// 13:FloatApplyBias-ext->102:Divide 95738
            Single _59Pow;// 13:FloatApplyBias-ext->20:Pow 95736
            Boolean _71True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 95771
            Single _82Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 95769
            Single _83Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 95770
            Single _84Divide;// 7:FloatRescaleToLimit-ext->10:Divide 95768
            Single _86Pass-through: Single;// 0:Pass-through: Single 95720
            Single _87Constant;// 3:FloatSubtractFromOne-ext->0:Constant 95726
            Single _88Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 95725
            Single _89Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 95727
            Single _90Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 95723
            Single _91Add;// 23:FloatApplyCurvature-ext->6:Add 95722
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 95832
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 95833
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 95831
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 95828
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 95835
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 95834
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Unit = Unit(_27X);
            _29Y = Y(_26Vector3);
            _30Append = Append(_28Unit, _29Y);
            _31Z = Z(_26Vector3);
            _32Append = Append(_30Append, _31Z);
            _33At = At(_32Append, axis);
            _42Pass-through: Single = if (applyLimits)
              {
                Boolean _34True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 95771
                Single _35Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 95769
                Single _36Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 95770
                Single _37Divide;// 7:FloatRescaleToLimit-ext->10:Divide 95768
                _34True = True();
                _35Subtract = Subtract(_33At, _3Divide);
                _36Subtract = Subtract(_5Divide, _3Divide);
                _37Divide = Divide(_35Subtract, _36Subtract);
                if (_34True)
                  {
                    Single _38Constant;// 9:ClampFloatToOne->0:Constant 95765
                    Single _39Constant;// 9:ClampFloatToOne->0:Constant 95767
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 95766
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 95764
                    _38Constant = 1;
                    _39Constant = 0;
                    _40GreaterFloat = GreaterFloat(_39Constant, _37Divide);
                    _41LesserFloat = LesserFloat(_38Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    _37Divide;
                    };
                }else
              {
                _33At;
                };
            _43FloatZero = FloatZero();
            _44LessThan = LessThan(_42Pass-through: Single, _43FloatZero);
            _45Abs = Abs(_42Pass-through: Single);
            _46FloatOne = FloatOne();
            _47FloatOne = FloatOne();
            _48Add = Add(_6FloatZero, _47FloatOne);
            _49Constant = 0.5;
            _50Multiply = Multiply(_48Add, _49Constant);
            _51Subtract = Subtract(_46FloatOne, _50Multiply);
            _52Constant = 1E-05;
            _53Constant = 0.99999;
            _54ClampFloat = ClampFloat(_51Subtract, _52Constant, _53Constant);
            _55LogN = LogN(_54ClampFloat);
            _56Constant = 0.5;
            _57LogN = LogN(_56Constant);
            _58Divide = Divide(_55LogN, _57LogN);
            _59Pow = Pow(_45Abs, _58Divide);
            _71True = True();
            _82Subtract = Subtract(_33At, _3Divide);
            _83Subtract = Subtract(_5Divide, _3Divide);
            _84Divide = Divide(_82Subtract, _83Subtract);
            _86Pass-through: Single = if (_44LessThan)
              {
                Single _85NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 95735
                _85NegativeFloat = NegativeFloat(_59Pow);
                _85NegativeFloat;
                }else
              {
                _59Pow;
                };
            _87Constant = 1;
            _88Subtract = Subtract(_87Constant, _86Pass-through: Single);
            _89Multiply = Multiply(_86Pass-through: Single, curvature);
            _90Multiply = Multiply(_88Subtract, _89Multiply);
            _91Add = Add(_86Pass-through: Single, _90Multiply);
            _91Add;
            };
        _8Constant = 0;
        _9Vector3 = Vector3(_8Constant, _8Constant, _8Constant);
        _10Constant = 0;
        _11Vector3 = Vector3(_10Constant, _10Constant, _10Constant);
        _12Constant = 0;
        _13Vector3 = Vector3(_12Constant, _12Constant, _12Constant);
        _14Constant = 1;
        _15Vector3 = Vector3(_14Constant, _14Constant, _14Constant);
        _16Constant = 2;
        _17Divide = Divide(amount, _16Constant);
        _18Vector3 = Vector3(_17Divide, _17Divide, _17Divide);
        _19Constant = 1;
        _20Vector3 = Vector3(_19Constant, _19Constant, _19Constant);
        _21Add = Add(_18Vector3, _20Vector3);
        _22X = X(_21Add);
        _23Unit = Unit(_22X);
        _24Y = Y(_21Add);
        _25Append = Append(_23Unit, _24Y);
        _26Z = Z(_21Add);
        _27Append = Append(_25Append, _26Z);
        _28FloatOne = FloatOne();
        _29Pair = Pair(axis, _28FloatOne);
        _30Unit = Unit(_29Pair);
        _31SetValues = SetValues(_27Append, _30Unit);
        _32Zero = Zero();
        _33At = At(_31SetValues, _32Zero);
        _34One = One();
        _35Add = Add(_32Zero, _34One);
        _36At = At(_31SetValues, _35Add);
        _37One = One();
        _38Add = Add(_35Add, _37One);
        _39At = At(_31SetValues, _38Add);
        _40Vector3 = Vector3(_33At, _36At, _39At);
        _41Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:MeshTransformVertices-ext->5:Apply1 95713
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 95677
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 95671
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 95711
            Single _4X;// 1:VectorAsArray->1:X 95707
            IArray[Single] _5Unit;// 4:Array3->2:Unit 95706
            Single _6Y;// 1:VectorAsArray->2:Y 95708
            IArray[Single] _7Append;// 4:Array3->3:Append 95705
            Single _8Z;// 1:VectorAsArray->3:Z 95709
            IArray[Single] _9Append;// 4:Array3->6:Append 95704
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 95686
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 95699
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 95690
            Single _13At;// 3:VectorFromArray-ext->1:At 95689
            Int32 _14One;// 6:PlusOne->1:One 95694
            Int32 _15Add;// 6:PlusOne->0:Add 95693
            Single _16At;// 3:VectorFromArray-ext->2:At 95691
            Int32 _17One;// 7:PlusOne->1:One 95698
            Int32 _18Add;// 7:PlusOne->0:Add 95697
            Single _19At;// 3:VectorFromArray-ext->3:At 95695
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 95688
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 95681
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 95682
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 95683
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95680
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 95672
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 95670
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 95712
            Single _28Constant;// 8:Origin->0:Constant 95676
            Vector3 _29Vector3;// 8:Origin->1:Vector3 95675
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 95674
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 95669
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 95662
            Vector3 _33Transform;// 0:MeshTransformVertices-ext->4:Transform 95653
            _0Apply1 = Apply1(_7Pass-through: function1, x0);
            _1Lerp = Lerp(_9Vector3, _11Vector3, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_13Vector3, _11Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95710
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_15Vector3, _40Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _80Pass-through: Matrix = if (use node transform)
          {
            Boolean _42IsValidNode;// 8:GizmoTransformInLocalSpace->35:IsValidNode 95904
            _42IsValidNode = IsValidNode(gizmo node);
            if (_42IsValidNode)
              {
                Boolean _43IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 95910
                Matrix _46InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 95914
                Matrix _47Multiply;// 32:NodeToLocalTransform->18:Multiply 95907
                _43IsValidNode = IsValidNode(gizmo node);
                _46InvertMatrix = InvertMatrix(modifierTransform);
                _47Multiply = Multiply(if (_43IsValidNode)
                    {
                      Matrix _44WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 95911
                      _44WorldTransform = WorldTransform(gizmo node);
                      _44WorldTransform;
                      }else
                    {
                      Matrix _45MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 95912
                      _45MatrixIdentity = MatrixIdentity();
                      _45MatrixIdentity;
                      }, _46InvertMatrix);
                _47Multiply;
                }else
              {
                Matrix _48MatrixIdentity;// 8:GizmoTransformInLocalSpace->40:MatrixIdentity 95915
                _48MatrixIdentity = MatrixIdentity();
                _48MatrixIdentity;
                };
            }else
          {
            Matrix _49TranslationMatrix;// 11:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 95926
            Single _50X;// 1:VectorAsArray->1:X 95962
            IArray[Single] _51Unit;// 4:Array3->2:Unit 95961
            Single _52Y;// 1:VectorAsArray->2:Y 95963
            IArray[Single] _53Append;// 4:Array3->3:Append 95960
            Single _54Z;// 1:VectorAsArray->3:Z 95964
            IArray[Single] _55Append;// 4:Array3->6:Append 95959
            Func[Single, Single] _56Pass-through: function1;// 0:Pass-through: function1 95941
            IArray[Single] _57Map;// 1:VectorMapComponents-ext->2:Map 95954
            Int32 _58Zero;// 3:VectorFromArray-ext->5:Zero 95945
            Single _59At;// 3:VectorFromArray-ext->1:At 95944
            Int32 _60One;// 6:PlusOne->1:One 95949
            Int32 _61Add;// 6:PlusOne->0:Add 95948
            Single _62At;// 3:VectorFromArray-ext->2:At 95946
            Int32 _63One;// 7:PlusOne->1:One 95953
            Int32 _64Add;// 7:PlusOne->0:Add 95952
            Single _65At;// 3:VectorFromArray-ext->3:At 95950
            Vector3 _66Vector3;// 3:VectorFromArray-ext->4:Vector3 95943
            Single _67Y;// 2:QuaternionFromVector3-ext->7:Y 95936
            Single _68X;// 2:QuaternionFromVector3-ext->6:X 95937
            Single _69Z;// 2:QuaternionFromVector3-ext->8:Z 95938
            Quaternion _70QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95935
            Matrix _71MatrixFromQuaternion;// 11:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 95927
            Matrix _72Multiply;// 6:Multiply3-ext->3:Multiply 95925
            Single _73Constant;// 45:OnesVector-ext->0:Constant 95970
            Vector3 _74Vector3;// 45:OnesVector-ext->2:Vector3 95969
            Vector3 _75Add;// 44:Add 95967
            Single _76Constant;// 8:Origin->0:Constant 95931
            Vector3 _77Vector3;// 8:Origin->1:Vector3 95930
            Matrix _78ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 95929
            Matrix _79Multiply;// 6:Multiply3-ext->4:Multiply 95924
            _49TranslationMatrix = TranslationMatrix(deformer translation);
            _50X = X(deformer rotation);
            _51Unit = Unit(_50X);
            _52Y = Y(deformer rotation);
            _53Append = Append(_51Unit, _52Y);
            _54Z = Z(deformer rotation);
            _55Append = Append(_53Append, _54Z);
            _56Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95965
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _57Map = Map(_55Append, _56Pass-through: function1);
            _58Zero = Zero();
            _59At = At(_57Map, _58Zero);
            _60One = One();
            _61Add = Add(_58Zero, _60One);
            _62At = At(_57Map, _61Add);
            _63One = One();
            _64Add = Add(_61Add, _63One);
            _65At = At(_57Map, _64Add);
            _66Vector3 = Vector3(_59At, _62At, _65At);
            _67Y = Y(_66Vector3);
            _68X = X(_66Vector3);
            _69Z = Z(_66Vector3);
            _70QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_67Y, _68X, _69Z);
            _71MatrixFromQuaternion = MatrixFromQuaternion(_70QuaternionFromYawPitchRoll);
            _72Multiply = Multiply(_49TranslationMatrix, _71MatrixFromQuaternion);
            _73Constant = 1;
            _74Vector3 = Vector3(_73Constant, _73Constant, _73Constant);
            _75Add = Add(deformer scale, _74Vector3);
            _76Constant = 0;
            _77Vector3 = Vector3(_76Constant, _76Constant, _76Constant);
            _78ScalingTranslationMatrix = ScalingTranslationMatrix(_75Add, _77Vector3);
            _79Multiply = Multiply(_72Multiply, _78ScalingTranslationMatrix);
            _79Multiply;
            };
        _81InvertMatrix = InvertMatrix(_80Pass-through: Matrix);
        _82ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:MeshDeformVertices-ext->11:Transform 95650
            Vector3 _1Apply1;// 0:MeshDeformVertices-ext->8:Apply1 95649
            Vector3 _2Transform;// 0:MeshDeformVertices-ext->9:Transform 95648
            _0Transform = Transform(x0, _81InvertMatrix);
            _1Apply1 = Apply1(_41Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _80Pass-through: Matrix);
            _2Transform;
            });
        _83Zero = Zero();
        _84PerVertexData = PerVertexData(mesh, _83Zero);
        _85Combine3 = Combine3(_0MeshVertices, _82ParallelMap, _84PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 95640
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _86SetMeshVertices = SetMeshVertices(mesh, _85Combine3);
        _86SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 0:MeshDeformVertices-ext->4:MeshVertices 95647
        Single _1Constant;// 22:DivideBy100-ext->0:Constant 95891
        Single _2Divide;// 22:DivideBy100-ext->2:Divide 95890
        Single _3Constant;// 46:DivideBy100-ext->0:Constant 95895
        Single _4Divide;// 46:DivideBy100-ext->2:Divide 95894
        Single _5FloatZero;// 27:Taper-ext->11:FloatZero 95842
        Func[Vector3, Single] _6Pass-through: function1;// 0:Pass-through: function1 95616
        Single _7Constant;// 15:Origin->0:Constant 95715
        Vector3 _8Vector3;// 15:Origin->1:Vector3 95714
        Single _9Constant;// 2:Origin->0:Constant 95844
        Vector3 _10Vector3;// 2:Origin->1:Vector3 95843
        Single _11Constant;// 16:Origin->0:Constant 95717
        Vector3 _12Vector3;// 16:Origin->1:Vector3 95716
        Single _13Constant;// 17:OnesVector-ext->0:Constant 95719
        Vector3 _14Vector3;// 17:OnesVector-ext->2:Vector3 95718
        Single _15Constant;// 13:DivideByTwoFloat->0:Constant 95881
        Single _16Divide;// 13:DivideByTwoFloat->2:Divide 95880
        Vector3 _17Vector3;// 26:ScalarToVector-ext->1:Vector3 95878
        Single _18Constant;// 39:OnesVector-ext->0:Constant 95883
        Vector3 _19Vector3;// 39:OnesVector-ext->2:Vector3 95882
        Vector3 _20Add;// 27:Taper-ext->40:Add 95876
        Single _21X;// 1:VectorAsArray->1:X 95873
        IArray[Single] _22Unit;// 4:Array3->2:Unit 95872
        Single _23Y;// 1:VectorAsArray->2:Y 95874
        IArray[Single] _24Append;// 4:Array3->3:Append 95871
        Single _25Z;// 1:VectorAsArray->3:Z 95875
        IArray[Single] _26Append;// 4:Array3->6:Append 95870
        Single _27FloatOne;// 27:Taper-ext->25:FloatOne 95884
        Tuple[Int32, Single] _28Pair;// 3:SetValue->1:Pair 95865
        IArray[Tuple[Int32, Single]] _29Unit;// 3:SetValue->5:Unit 95864
        IArray[Single] _30SetValues;// 3:SetValue->0:SetValues 95863
        Int32 _31Zero;// 6:VectorFromArray-ext->5:Zero 95851
        Single _32At;// 6:VectorFromArray-ext->1:At 95850
        Int32 _33One;// 6:PlusOne->1:One 95855
        Int32 _34Add;// 6:PlusOne->0:Add 95854
        Single _35At;// 6:VectorFromArray-ext->2:At 95852
        Int32 _36One;// 7:PlusOne->1:One 95859
        Int32 _37Add;// 7:PlusOne->0:Add 95858
        Single _38At;// 6:VectorFromArray-ext->3:At 95856
        Vector3 _39Vector3;// 6:VectorFromArray-ext->4:Vector3 95849
        Func[Vector3, Vector3] _40Pass-through: function1;// 0:Pass-through: function1 95622
        Matrix _79Pass-through: Matrix;// 0:Pass-through: Matrix 95602
        Matrix _80InvertMatrix;// 0:MeshDeformVertices-ext->7:InvertMatrix 95652
        IArray[Vector3] _81ParallelMap;// 0:MeshDeformVertices-ext->5:ParallelMap 95646
        TriMesh _82SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 95645
        _0MeshVertices = MeshVertices(mesh);
        _1Constant = 100;
        _2Divide = Divide(lower, _1Constant);
        _3Constant = 100;
        _4Divide = Divide(upper, _3Constant);
        _5FloatZero = FloatZero();
        _6Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0BoxMin;// 0:PointProjectionAmountBoxAxis-ext->5:BoxMin 95837
            Vector3 _1Subtract;// 0:PointProjectionAmountBoxAxis-ext->4:Subtract 95836
            Single _2X;// 2:VectorAsArray->1:X 95810
            IArray[Single] _3Unit;// 4:Array3->2:Unit 95809
            Single _4Y;// 2:VectorAsArray->2:Y 95811
            IArray[Single] _5Append;// 4:Array3->3:Append 95808
            Single _6Z;// 2:VectorAsArray->3:Z 95812
            IArray[Single] _7Append;// 4:Array3->6:Append 95807
            Vector3 _8BoxMax;// 9:BoundingBoxExtent-ext->1:BoxMax 95840
            Vector3 _9BoxMin;// 9:BoundingBoxExtent-ext->2:BoxMin 95841
            Vector3 _10Subtract;// 9:BoundingBoxExtent-ext->3:Subtract 95839
            Single _11X;// 4:VectorAsArray->1:X 95820
            IArray[Single] _12Unit;// 4:Array3->2:Unit 95819
            Single _13Y;// 4:VectorAsArray->2:Y 95821
            IArray[Single] _14Append;// 4:Array3->3:Append 95818
            Single _15Z;// 4:VectorAsArray->3:Z 95822
            IArray[Single] _16Append;// 4:Array3->6:Append 95817
            IArray[Single] _17Combine;// 8:DivideVectorSafely-ext->5:Combine 95802
            Int32 _18Zero;// 7:VectorFromArray-ext->5:Zero 95793
            Single _19At;// 7:VectorFromArray-ext->1:At 95792
            Int32 _20One;// 6:PlusOne->1:One 95797
            Int32 _21Add;// 6:PlusOne->0:Add 95796
            Single _22At;// 7:VectorFromArray-ext->2:At 95794
            Int32 _23One;// 7:PlusOne->1:One 95801
            Int32 _24Add;// 7:PlusOne->0:Add 95800
            Single _25At;// 7:VectorFromArray-ext->3:At 95798
            Vector3 _26Vector3;// 7:VectorFromArray-ext->4:Vector3 95791
            Single _27X;// 2:VectorAsArray-ext->1:X 95785
            Single _28Y;// 2:VectorAsArray-ext->2:Y 95786
            Single _29Z;// 2:VectorAsArray-ext->3:Z 95787
            Single _49Pass-through: Single;// 0:Pass-through: Single 95728
            Single _50FloatZero;// 24:FloatNegateIfOther-ext->4:FloatZero 95734
            Boolean _51LessThan;// 24:FloatNegateIfOther-ext->3:LessThan 95733
            Single _52Abs;// 13:FloatApplyBias-ext->66:Abs 95737
            Single _53FloatOne;// 13:FloatApplyBias-ext->78:FloatOne 95742
            Single _54FloatOne;// 13:FloatApplyBias-ext->90:FloatOne 95745
            Single _55Add;// 13:FloatApplyBias-ext->94:Add 95744
            Single _56Constant;// 13:FloatApplyBias-ext->0:Constant 95746
            Single _57Multiply;// 13:FloatApplyBias-ext->80:Multiply 95743
            Single _58Subtract;// 13:FloatApplyBias-ext->83:Subtract 95741
            Single _59Constant;// 13:FloatApplyBias-ext->0:Constant 95747
            Single _60Constant;// 13:FloatApplyBias-ext->0:Constant 95748
            Single _61ClampFloat;// 13:FloatApplyBias-ext->22:ClampFloat 95740
            Single _62LogN;// 13:FloatApplyBias-ext->99:LogN 95739
            Single _63Constant;// 13:FloatApplyBias-ext->0:Constant 95750
            Single _64LogN;// 13:FloatApplyBias-ext->19:LogN 95749
            Single _65Divide;// 13:FloatApplyBias-ext->102:Divide 95738
            Single _66Pow;// 13:FloatApplyBias-ext->20:Pow 95736
            Boolean _86True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 95771
            IArray[Single] _87Unit;// 4:Array3-ext->2:Unit 95784
            IArray[Single] _88Append;// 4:Array3-ext->3:Append 95783
            IArray[Single] _89Append;// 4:Array3-ext->6:Append 95782
            Single _90At;// 10:VectorElement-ext->3:At 95777
            Single _101Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 95769
            Single _102Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 95770
            Single _103Divide;// 7:FloatRescaleToLimit-ext->10:Divide 95768
            Single _105Pass-through: Single;// 0:Pass-through: Single 95720
            Single _106Constant;// 3:FloatSubtractFromOne-ext->0:Constant 95726
            Single _107Subtract;// 3:FloatSubtractFromOne-ext->3:Subtract 95725
            Single _108Multiply;// 23:FloatApplyCurvature-ext->2:Multiply 95727
            Single _109Multiply;// 23:FloatApplyCurvature-ext->4:Multiply 95723
            Single _110Add;// 23:FloatApplyCurvature-ext->6:Add 95722
            _0BoxMin = BoxMin(boundingBox);
            _1Subtract = Subtract(x0, _0BoxMin);
            _2X = X(_1Subtract);
            _3Unit = Unit(_2X);
            _4Y = Y(_1Subtract);
            _5Append = Append(_3Unit, _4Y);
            _6Z = Z(_1Subtract);
            _7Append = Append(_5Append, _6Z);
            _8BoxMax = BoxMax(boundingBox);
            _9BoxMin = BoxMin(boundingBox);
            _10Subtract = Subtract(_8BoxMax, _9BoxMin);
            _11X = X(_10Subtract);
            _12Unit = Unit(_11X);
            _13Y = Y(_10Subtract);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(_10Subtract);
            _16Append = Append(_14Append, _15Z);
            _17Combine = Combine(_7Append, _16Append, (Single x0, Single x1) => 
              {
                Single _0Abs;// 3:FloatIsSmall-ext->4:Abs 95832
                Single _1Constant;// 2:VectorLengthEpsilon-ext->0:Constant 95833
                Boolean _2LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 95831
                Single _5IgnoreFirst;// 9:DivideDefault-ext->8:IgnoreFirst 95828
                _0Abs = Abs(x1);
                _1Constant = 1E-06;
                _2LessThanOrEqual = LessThanOrEqual(_0Abs, _1Constant);
                _5IgnoreFirst = IgnoreFirst(x0, if (_2LessThanOrEqual)
                  {
                    Single _3FloatZero;// 0:DivideDefaultToZero-ext->6:FloatZero 95835
                    _3FloatZero = FloatZero();
                    _3FloatZero;
                    }else
                  {
                    Single _4Divide;// 9:DivideDefault-ext->5:Divide 95834
                    _4Divide = Divide(x0, x1);
                    _4Divide;
                    });
                _5IgnoreFirst;
                });
            _18Zero = Zero();
            _19At = At(_17Combine, _18Zero);
            _20One = One();
            _21Add = Add(_18Zero, _20One);
            _22At = At(_17Combine, _21Add);
            _23One = One();
            _24Add = Add(_21Add, _23One);
            _25At = At(_17Combine, _24Add);
            _26Vector3 = Vector3(_19At, _22At, _25At);
            _27X = X(_26Vector3);
            _28Y = Y(_26Vector3);
            _29Z = Z(_26Vector3);
            _49Pass-through: Single = if (applyLimits)
              {
                Boolean _30True;// 48:PointProjectionAmountBoxAxisLimited-ext->8:True 95771
                IArray[Single] _31Unit;// 4:Array3-ext->2:Unit 95784
                IArray[Single] _32Append;// 4:Array3-ext->3:Append 95783
                IArray[Single] _33Append;// 4:Array3-ext->6:Append 95782
                Single _34At;// 10:VectorElement-ext->3:At 95777
                _30True = True();
                _31Unit = Unit(_27X);
                _32Append = Append(_31Unit, _28Y);
                _33Append = Append(_32Append, _29Z);
                _34At = At(_33Append, axis);
                if (_30True)
                  {
                    Single _35Constant;// 9:ClampFloatToOne->0:Constant 95765
                    Single _36Constant;// 9:ClampFloatToOne->0:Constant 95767
                    Single _37Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 95769
                    Single _38Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 95770
                    Single _39Divide;// 7:FloatRescaleToLimit-ext->10:Divide 95768
                    Single _40GreaterFloat;// 9:ClampFloatToOne->1:GreaterFloat 95766
                    Single _41LesserFloat;// 9:ClampFloatToOne->2:LesserFloat 95764
                    _35Constant = 1;
                    _36Constant = 0;
                    _37Subtract = Subtract(_34At, _2Divide);
                    _38Subtract = Subtract(_4Divide, _2Divide);
                    _39Divide = Divide(_37Subtract, _38Subtract);
                    _40GreaterFloat = GreaterFloat(_36Constant, _39Divide);
                    _41LesserFloat = LesserFloat(_35Constant, _40GreaterFloat);
                    _41LesserFloat;
                    }else
                  {
                    Single _42Subtract;// 7:FloatRescaleToLimit-ext->6:Subtract 95769
                    Single _43Subtract;// 7:FloatRescaleToLimit-ext->7:Subtract 95770
                    Single _44Divide;// 7:FloatRescaleToLimit-ext->10:Divide 95768
                    _42Subtract = Subtract(_34At, _2Divide);
                    _43Subtract = Subtract(_4Divide, _2Divide);
                    _44Divide = Divide(_42Subtract, _43Subtract);
                    _44Divide;
                    };
                }else
              {
                IArray[Single] _45Unit;// 4:Array3-ext->2:Unit 95784
                IArray[Single] _46Append;// 4:Array3-ext->3:Append 95783
                IArray[Single] _47Append;// 4:Array3-ext->6:Append 95782
                Single _48At;// 10:VectorElement-ext->3:At 95777
                _45Unit = Unit(_27X);
                _46Append = Append(_45Unit, _28Y);
                _47Append = Append(_46Append, _29Z);
                _48At = At(_47Append, axis);
                _48At;
                };
            _50FloatZero = FloatZero();
            _51LessThan = LessThan(_49Pass-through: Single, _50FloatZero);
            _52Abs = Abs(_49Pass-through: Single);
            _53FloatOne = FloatOne();
            _54FloatOne = FloatOne();
            _55Add = Add(_5FloatZero, _54FloatOne);
            _56Constant = 0.5;
            _57Multiply = Multiply(_55Add, _56Constant);
            _58Subtract = Subtract(_53FloatOne, _57Multiply);
            _59Constant = 1E-05;
            _60Constant = 0.99999;
            _61ClampFloat = ClampFloat(_58Subtract, _59Constant, _60Constant);
            _62LogN = LogN(_61ClampFloat);
            _63Constant = 0.5;
            _64LogN = LogN(_63Constant);
            _65Divide = Divide(_62LogN, _64LogN);
            _66Pow = Pow(_52Abs, _65Divide);
            _86True = True();
            _87Unit = Unit(_27X);
            _88Append = Append(_87Unit, _28Y);
            _89Append = Append(_88Append, _29Z);
            _90At = At(_89Append, axis);
            _101Subtract = Subtract(_90At, _2Divide);
            _102Subtract = Subtract(_4Divide, _2Divide);
            _103Divide = Divide(_101Subtract, _102Subtract);
            _105Pass-through: Single = if (_51LessThan)
              {
                Single _104NegativeFloat;// 24:FloatNegateIfOther-ext->7:NegativeFloat 95735
                _104NegativeFloat = NegativeFloat(_66Pow);
                _104NegativeFloat;
                }else
              {
                _66Pow;
                };
            _106Constant = 1;
            _107Subtract = Subtract(_106Constant, _105Pass-through: Single);
            _108Multiply = Multiply(_105Pass-through: Single, curvature);
            _109Multiply = Multiply(_107Subtract, _108Multiply);
            _110Add = Add(_105Pass-through: Single, _109Multiply);
            _110Add;
            };
        _7Constant = 0;
        _8Vector3 = Vector3(_7Constant, _7Constant, _7Constant);
        _9Constant = 0;
        _10Vector3 = Vector3(_9Constant, _9Constant, _9Constant);
        _11Constant = 0;
        _12Vector3 = Vector3(_11Constant, _11Constant, _11Constant);
        _13Constant = 1;
        _14Vector3 = Vector3(_13Constant, _13Constant, _13Constant);
        _15Constant = 2;
        _16Divide = Divide(amount, _15Constant);
        _17Vector3 = Vector3(_16Divide, _16Divide, _16Divide);
        _18Constant = 1;
        _19Vector3 = Vector3(_18Constant, _18Constant, _18Constant);
        _20Add = Add(_17Vector3, _19Vector3);
        _21X = X(_20Add);
        _22Unit = Unit(_21X);
        _23Y = Y(_20Add);
        _24Append = Append(_22Unit, _23Y);
        _25Z = Z(_20Add);
        _26Append = Append(_24Append, _25Z);
        _27FloatOne = FloatOne();
        _28Pair = Pair(axis, _27FloatOne);
        _29Unit = Unit(_28Pair);
        _30SetValues = SetValues(_26Append, _29Unit);
        _31Zero = Zero();
        _32At = At(_30SetValues, _31Zero);
        _33One = One();
        _34Add = Add(_31Zero, _33One);
        _35At = At(_30SetValues, _34Add);
        _36One = One();
        _37Add = Add(_34Add, _36One);
        _38At = At(_30SetValues, _37Add);
        _39Vector3 = Vector3(_32At, _35At, _38At);
        _40Pass-through: function1 = (Vector3 x0) => 
          {
            Single _0Apply1;// 0:MeshTransformVertices-ext->5:Apply1 95713
            Vector3 _1Lerp;// 10:MatrixFromPRSLerp-ext->10:Lerp 95677
            Matrix _2TranslationMatrix;// 14:MatrixFromPRS-ext->3:TranslationMatrix 95671
            Vector3 _3Lerp;// 10:MatrixFromPRSLerp-ext->9:Lerp 95711
            Single _4X;// 1:VectorAsArray->1:X 95707
            IArray[Single] _5Unit;// 4:Array3->2:Unit 95706
            Single _6Y;// 1:VectorAsArray->2:Y 95708
            IArray[Single] _7Append;// 4:Array3->3:Append 95705
            Single _8Z;// 1:VectorAsArray->3:Z 95709
            IArray[Single] _9Append;// 4:Array3->6:Append 95704
            Func[Single, Single] _10Pass-through: function1;// 0:Pass-through: function1 95686
            IArray[Single] _11Map;// 1:VectorMapComponents-ext->2:Map 95699
            Int32 _12Zero;// 3:VectorFromArray-ext->5:Zero 95690
            Single _13At;// 3:VectorFromArray-ext->1:At 95689
            Int32 _14One;// 6:PlusOne->1:One 95694
            Int32 _15Add;// 6:PlusOne->0:Add 95693
            Single _16At;// 3:VectorFromArray-ext->2:At 95691
            Int32 _17One;// 7:PlusOne->1:One 95698
            Int32 _18Add;// 7:PlusOne->0:Add 95697
            Single _19At;// 3:VectorFromArray-ext->3:At 95695
            Vector3 _20Vector3;// 3:VectorFromArray-ext->4:Vector3 95688
            Single _21Y;// 2:QuaternionFromVector3-ext->7:Y 95681
            Single _22X;// 2:QuaternionFromVector3-ext->6:X 95682
            Single _23Z;// 2:QuaternionFromVector3-ext->8:Z 95683
            Quaternion _24QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95680
            Matrix _25MatrixFromQuaternion;// 14:MatrixFromPRS-ext->4:MatrixFromQuaternion 95672
            Matrix _26Multiply;// 6:Multiply3-ext->3:Multiply 95670
            Vector3 _27Lerp;// 10:MatrixFromPRSLerp-ext->8:Lerp 95712
            Single _28Constant;// 8:Origin->0:Constant 95676
            Vector3 _29Vector3;// 8:Origin->1:Vector3 95675
            Matrix _30ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 95674
            Matrix _31Multiply;// 6:Multiply3-ext->4:Multiply 95669
            Matrix _32IgnoreFirst;// 10:MatrixFromPRSLerp-ext->12:IgnoreFirst 95662
            Vector3 _33Transform;// 0:MeshTransformVertices-ext->4:Transform 95653
            _0Apply1 = Apply1(_6Pass-through: function1, x0);
            _1Lerp = Lerp(_8Vector3, _10Vector3, _0Apply1);
            _2TranslationMatrix = TranslationMatrix(_1Lerp);
            _3Lerp = Lerp(_12Vector3, _10Vector3, _0Apply1);
            _4X = X(_3Lerp);
            _5Unit = Unit(_4X);
            _6Y = Y(_3Lerp);
            _7Append = Append(_5Unit, _6Y);
            _8Z = Z(_3Lerp);
            _9Append = Append(_7Append, _8Z);
            _10Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95710
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _11Map = Map(_9Append, _10Pass-through: function1);
            _12Zero = Zero();
            _13At = At(_11Map, _12Zero);
            _14One = One();
            _15Add = Add(_12Zero, _14One);
            _16At = At(_11Map, _15Add);
            _17One = One();
            _18Add = Add(_15Add, _17One);
            _19At = At(_11Map, _18Add);
            _20Vector3 = Vector3(_13At, _16At, _19At);
            _21Y = Y(_20Vector3);
            _22X = X(_20Vector3);
            _23Z = Z(_20Vector3);
            _24QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_21Y, _22X, _23Z);
            _25MatrixFromQuaternion = MatrixFromQuaternion(_24QuaternionFromYawPitchRoll);
            _26Multiply = Multiply(_2TranslationMatrix, _25MatrixFromQuaternion);
            _27Lerp = Lerp(_14Vector3, _39Vector3, _0Apply1);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30ScalingTranslationMatrix = ScalingTranslationMatrix(_27Lerp, _29Vector3);
            _31Multiply = Multiply(_26Multiply, _30ScalingTranslationMatrix);
            _32IgnoreFirst = IgnoreFirst(_0Apply1, _31Multiply);
            _33Transform = Transform(x0, _32IgnoreFirst);
            _33Transform;
            };
        _79Pass-through: Matrix = if (use node transform)
          {
            Boolean _41IsValidNode;// 8:GizmoTransformInLocalSpace->35:IsValidNode 95904
            _41IsValidNode = IsValidNode(gizmo node);
            if (_41IsValidNode)
              {
                Boolean _42IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 95910
                Matrix _45InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 95914
                Matrix _46Multiply;// 32:NodeToLocalTransform->18:Multiply 95907
                _42IsValidNode = IsValidNode(gizmo node);
                _45InvertMatrix = InvertMatrix(modifierTransform);
                _46Multiply = Multiply(if (_42IsValidNode)
                    {
                      Matrix _43WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 95911
                      _43WorldTransform = WorldTransform(gizmo node);
                      _43WorldTransform;
                      }else
                    {
                      Matrix _44MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 95912
                      _44MatrixIdentity = MatrixIdentity();
                      _44MatrixIdentity;
                      }, _45InvertMatrix);
                _46Multiply;
                }else
              {
                Matrix _47MatrixIdentity;// 8:GizmoTransformInLocalSpace->40:MatrixIdentity 95915
                _47MatrixIdentity = MatrixIdentity();
                _47MatrixIdentity;
                };
            }else
          {
            Matrix _48TranslationMatrix;// 11:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 95926
            Single _49X;// 1:VectorAsArray->1:X 95962
            IArray[Single] _50Unit;// 4:Array3->2:Unit 95961
            Single _51Y;// 1:VectorAsArray->2:Y 95963
            IArray[Single] _52Append;// 4:Array3->3:Append 95960
            Single _53Z;// 1:VectorAsArray->3:Z 95964
            IArray[Single] _54Append;// 4:Array3->6:Append 95959
            Func[Single, Single] _55Pass-through: function1;// 0:Pass-through: function1 95941
            IArray[Single] _56Map;// 1:VectorMapComponents-ext->2:Map 95954
            Int32 _57Zero;// 3:VectorFromArray-ext->5:Zero 95945
            Single _58At;// 3:VectorFromArray-ext->1:At 95944
            Int32 _59One;// 6:PlusOne->1:One 95949
            Int32 _60Add;// 6:PlusOne->0:Add 95948
            Single _61At;// 3:VectorFromArray-ext->2:At 95946
            Int32 _62One;// 7:PlusOne->1:One 95953
            Int32 _63Add;// 7:PlusOne->0:Add 95952
            Single _64At;// 3:VectorFromArray-ext->3:At 95950
            Vector3 _65Vector3;// 3:VectorFromArray-ext->4:Vector3 95943
            Single _66Y;// 2:QuaternionFromVector3-ext->7:Y 95936
            Single _67X;// 2:QuaternionFromVector3-ext->6:X 95937
            Single _68Z;// 2:QuaternionFromVector3-ext->8:Z 95938
            Quaternion _69QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95935
            Matrix _70MatrixFromQuaternion;// 11:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 95927
            Matrix _71Multiply;// 6:Multiply3-ext->3:Multiply 95925
            Single _72Constant;// 45:OnesVector-ext->0:Constant 95970
            Vector3 _73Vector3;// 45:OnesVector-ext->2:Vector3 95969
            Vector3 _74Add;// 44:Add 95967
            Single _75Constant;// 8:Origin->0:Constant 95931
            Vector3 _76Vector3;// 8:Origin->1:Vector3 95930
            Matrix _77ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 95929
            Matrix _78Multiply;// 6:Multiply3-ext->4:Multiply 95924
            _48TranslationMatrix = TranslationMatrix(deformer translation);
            _49X = X(deformer rotation);
            _50Unit = Unit(_49X);
            _51Y = Y(deformer rotation);
            _52Append = Append(_50Unit, _51Y);
            _53Z = Z(deformer rotation);
            _54Append = Append(_52Append, _53Z);
            _55Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95965
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _56Map = Map(_54Append, _55Pass-through: function1);
            _57Zero = Zero();
            _58At = At(_56Map, _57Zero);
            _59One = One();
            _60Add = Add(_57Zero, _59One);
            _61At = At(_56Map, _60Add);
            _62One = One();
            _63Add = Add(_60Add, _62One);
            _64At = At(_56Map, _63Add);
            _65Vector3 = Vector3(_58At, _61At, _64At);
            _66Y = Y(_65Vector3);
            _67X = X(_65Vector3);
            _68Z = Z(_65Vector3);
            _69QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_66Y, _67X, _68Z);
            _70MatrixFromQuaternion = MatrixFromQuaternion(_69QuaternionFromYawPitchRoll);
            _71Multiply = Multiply(_48TranslationMatrix, _70MatrixFromQuaternion);
            _72Constant = 1;
            _73Vector3 = Vector3(_72Constant, _72Constant, _72Constant);
            _74Add = Add(deformer scale, _73Vector3);
            _75Constant = 0;
            _76Vector3 = Vector3(_75Constant, _75Constant, _75Constant);
            _77ScalingTranslationMatrix = ScalingTranslationMatrix(_74Add, _76Vector3);
            _78Multiply = Multiply(_71Multiply, _77ScalingTranslationMatrix);
            _78Multiply;
            };
        _80InvertMatrix = InvertMatrix(_79Pass-through: Matrix);
        _81ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 0:MeshDeformVertices-ext->11:Transform 95650
            Vector3 _1Apply1;// 0:MeshDeformVertices-ext->8:Apply1 95649
            Vector3 _2Transform;// 0:MeshDeformVertices-ext->9:Transform 95648
            _0Transform = Transform(x0, _80InvertMatrix);
            _1Apply1 = Apply1(_40Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _79Pass-through: Matrix);
            _2Transform;
            });
        _82SetMeshVertices = SetMeshVertices(mesh, _81ParallelMap);
        _82SetMeshVertices;
        });
    _5IfThen;
    }