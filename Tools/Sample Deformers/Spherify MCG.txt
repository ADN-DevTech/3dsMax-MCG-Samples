(InstanceState state, TriMesh mesh, Boolean box or sphere, BoundingBox boundingBox, Single weight, Boolean use node transform, INode gizmo node, Matrix modifierTransform, Vector3 deformer translation, Vector3 deformer rotation, Vector3 deformer scale) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 95124
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 95126
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 95125
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 95123
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 95122
    TriMesh _5IfThen;// 3:MeshSetVertices-ext->10:IfThen 95118
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 3:MeshSetVertices-ext->0:MeshVertices 95133
        IArray[Vector3] _1MeshVertices;// 2:MeshDeformVertices-ext->4:MeshVertices 95139
        BoundingSphere _2SphereFromBox;// 8:MeshConformToBoundingBoxOrSphere-ext->3:SphereFromBox 95178
        Func[Vector3, Vector3] _3Pass-through: function1;// 0:Pass-through: function1 95114
        Matrix _42Pass-through: Matrix;// 0:Pass-through: Matrix 95112
        Matrix _43InvertMatrix;// 2:MeshDeformVertices-ext->7:InvertMatrix 95144
        IArray[Vector3] _44ParallelMap;// 2:MeshDeformVertices-ext->5:ParallelMap 95138
        Int32 _45Zero;// 7:SoftSelection->2:Zero 95136
        IArray[Single] _46PerVertexData;// 7:SoftSelection->3:PerVertexData 95135
        IArray[Vector3] _47Combine3;// 1:LerpVectors-ext->10:Combine3 95131
        TriMesh _48SetMeshVertices;// 3:MeshSetVertices-ext->6:SetMeshVertices 95127
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2SphereFromBox = SphereFromBox(boundingBox);
        _3Pass-through: function1 = (Vector3 x0) => 
          {
            if (box or sphere)
              {
                BoundingSphere _0SphereFromBox;// 10:BoundingBoxCenter->2:SphereFromBox 95162
                Vector3 _1SphereCenter;// 10:BoundingBoxCenter->3:SphereCenter 95161
                Vector3 _2Subtract;// 11:PointLerpToBox-ext->1:Subtract 95159
                Vector3 _3Normalize;// 5:SetVectorLength->1:Normalize 95158
                BoundingSphere _4SphereFromBox;// 4:BoundingBoxRadius->1:SphereFromBox 95165
                Single _5SphereRadius;// 4:BoundingBoxRadius->2:SphereRadius 95164
                Vector3 _6MultiplyByScalar;// 5:SetVectorLength->3:MultiplyByScalar 95157
                Vector3 _7BoxMin;// 3:BoxClamp-ext->5:BoxMin 95153
                Vector3 _8BoxMax;// 3:BoxClamp-ext->3:BoxMax 95154
                Vector3 _9Clamp;// 3:BoxClamp-ext->1:Clamp 95152
                Vector3 _10Lerp;// 11:PointLerpToBox-ext->2:Lerp 95149
                _0SphereFromBox = SphereFromBox(boundingBox);
                _1SphereCenter = SphereCenter(_0SphereFromBox);
                _2Subtract = Subtract(x0, _1SphereCenter);
                _3Normalize = Normalize(_2Subtract);
                _4SphereFromBox = SphereFromBox(boundingBox);
                _5SphereRadius = SphereRadius(_4SphereFromBox);
                _6MultiplyByScalar = MultiplyByScalar(_3Normalize, _5SphereRadius);
                _7BoxMin = BoxMin(boundingBox);
                _8BoxMax = BoxMax(boundingBox);
                _9Clamp = Clamp(_6MultiplyByScalar, _7BoxMin, _8BoxMax);
                _10Lerp = Lerp(x0, _9Clamp, weight);
                _10Lerp;
                }else
              {
                Vector3 _11SphereCenter;// 4:PointLerpToSphere-ext->11:SphereCenter 95176
                Vector3 _12Subtract;// 4:PointLerpToSphere-ext->1:Subtract 95175
                Vector3 _13Normalize;// 5:SetVectorLength->1:Normalize 95174
                Single _14SphereRadius;// 4:PointLerpToSphere-ext->9:SphereRadius 95177
                Vector3 _15MultiplyByScalar;// 5:SetVectorLength->3:MultiplyByScalar 95173
                Vector3 _16Lerp;// 4:PointLerpToSphere-ext->2:Lerp 95170
                _11SphereCenter = SphereCenter(_2SphereFromBox);
                _12Subtract = Subtract(x0, _11SphereCenter);
                _13Normalize = Normalize(_12Subtract);
                _14SphereRadius = SphereRadius(_2SphereFromBox);
                _15MultiplyByScalar = MultiplyByScalar(_13Normalize, _14SphereRadius);
                _16Lerp = Lerp(x0, _15MultiplyByScalar, weight);
                _16Lerp;
                };
            };
        _42Pass-through: Matrix = if (use node transform)
          {
            Boolean _4IsValidNode;// 9:GizmoTransformInLocalSpace->35:IsValidNode 95188
            _4IsValidNode = IsValidNode(gizmo node);
            if (_4IsValidNode)
              {
                Boolean _5IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 95194
                Matrix _8InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 95198
                Matrix _9Multiply;// 32:NodeToLocalTransform->18:Multiply 95191
                _5IsValidNode = IsValidNode(gizmo node);
                _8InvertMatrix = InvertMatrix(modifierTransform);
                _9Multiply = Multiply(if (_5IsValidNode)
                    {
                      Matrix _6WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 95195
                      _6WorldTransform = WorldTransform(gizmo node);
                      _6WorldTransform;
                      }else
                    {
                      Matrix _7MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 95196
                      _7MatrixIdentity = MatrixIdentity();
                      _7MatrixIdentity;
                      }, _8InvertMatrix);
                _9Multiply;
                }else
              {
                Matrix _10MatrixIdentity;// 9:GizmoTransformInLocalSpace->40:MatrixIdentity 95199
                _10MatrixIdentity = MatrixIdentity();
                _10MatrixIdentity;
                };
            }else
          {
            Matrix _11TranslationMatrix;// 17:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 95210
            Single _12X;// 1:VectorAsArray->1:X 95246
            IArray[Single] _13Unit;// 4:Array3->2:Unit 95245
            Single _14Y;// 1:VectorAsArray->2:Y 95247
            IArray[Single] _15Append;// 4:Array3->3:Append 95244
            Single _16Z;// 1:VectorAsArray->3:Z 95248
            IArray[Single] _17Append;// 4:Array3->6:Append 95243
            Func[Single, Single] _18Pass-through: function1;// 0:Pass-through: function1 95225
            IArray[Single] _19Map;// 1:VectorMapComponents-ext->2:Map 95238
            Int32 _20Zero;// 3:VectorFromArray-ext->5:Zero 95229
            Single _21At;// 3:VectorFromArray-ext->1:At 95228
            Int32 _22One;// 6:PlusOne->1:One 95233
            Int32 _23Add;// 6:PlusOne->0:Add 95232
            Single _24At;// 3:VectorFromArray-ext->2:At 95230
            Int32 _25One;// 7:PlusOne->1:One 95237
            Int32 _26Add;// 7:PlusOne->0:Add 95236
            Single _27At;// 3:VectorFromArray-ext->3:At 95234
            Vector3 _28Vector3;// 3:VectorFromArray-ext->4:Vector3 95227
            Single _29Y;// 2:QuaternionFromVector3-ext->7:Y 95220
            Single _30X;// 2:QuaternionFromVector3-ext->6:X 95221
            Single _31Z;// 2:QuaternionFromVector3-ext->8:Z 95222
            Quaternion _32QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95219
            Matrix _33MatrixFromQuaternion;// 17:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 95211
            Matrix _34Multiply;// 6:Multiply3-ext->3:Multiply 95209
            Single _35Constant;// 45:OnesVector-ext->0:Constant 95254
            Vector3 _36Vector3;// 45:OnesVector-ext->2:Vector3 95253
            Vector3 _37Add;// 44:Add 95251
            Single _38Constant;// 8:Origin->0:Constant 95215
            Vector3 _39Vector3;// 8:Origin->1:Vector3 95214
            Matrix _40ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 95213
            Matrix _41Multiply;// 6:Multiply3-ext->4:Multiply 95208
            _11TranslationMatrix = TranslationMatrix(deformer translation);
            _12X = X(deformer rotation);
            _13Unit = Unit(_12X);
            _14Y = Y(deformer rotation);
            _15Append = Append(_13Unit, _14Y);
            _16Z = Z(deformer rotation);
            _17Append = Append(_15Append, _16Z);
            _18Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95249
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _19Map = Map(_17Append, _18Pass-through: function1);
            _20Zero = Zero();
            _21At = At(_19Map, _20Zero);
            _22One = One();
            _23Add = Add(_20Zero, _22One);
            _24At = At(_19Map, _23Add);
            _25One = One();
            _26Add = Add(_23Add, _25One);
            _27At = At(_19Map, _26Add);
            _28Vector3 = Vector3(_21At, _24At, _27At);
            _29Y = Y(_28Vector3);
            _30X = X(_28Vector3);
            _31Z = Z(_28Vector3);
            _32QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_29Y, _30X, _31Z);
            _33MatrixFromQuaternion = MatrixFromQuaternion(_32QuaternionFromYawPitchRoll);
            _34Multiply = Multiply(_11TranslationMatrix, _33MatrixFromQuaternion);
            _35Constant = 1;
            _36Vector3 = Vector3(_35Constant, _35Constant, _35Constant);
            _37Add = Add(deformer scale, _36Vector3);
            _38Constant = 0;
            _39Vector3 = Vector3(_38Constant, _38Constant, _38Constant);
            _40ScalingTranslationMatrix = ScalingTranslationMatrix(_37Add, _39Vector3);
            _41Multiply = Multiply(_34Multiply, _40ScalingTranslationMatrix);
            _41Multiply;
            };
        _43InvertMatrix = InvertMatrix(_42Pass-through: Matrix);
        _44ParallelMap = ParallelMap(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 2:MeshDeformVertices-ext->11:Transform 95142
            Vector3 _1Apply1;// 2:MeshDeformVertices-ext->8:Apply1 95141
            Vector3 _2Transform;// 2:MeshDeformVertices-ext->9:Transform 95140
            _0Transform = Transform(x0, _43InvertMatrix);
            _1Apply1 = Apply1(_3Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _42Pass-through: Matrix);
            _2Transform;
            });
        _45Zero = Zero();
        _46PerVertexData = PerVertexData(mesh, _45Zero);
        _47Combine3 = Combine3(_0MeshVertices, _44ParallelMap, _46PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 95132
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _48SetMeshVertices = SetMeshVertices(mesh, _47Combine3);
        _48SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 2:MeshDeformVertices-ext->4:MeshVertices 95139
        BoundingSphere _1SphereFromBox;// 8:MeshConformToBoundingBoxOrSphere-ext->3:SphereFromBox 95178
        Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 95114
        Matrix _41Pass-through: Matrix;// 0:Pass-through: Matrix 95112
        Matrix _42InvertMatrix;// 2:MeshDeformVertices-ext->7:InvertMatrix 95144
        IArray[Vector3] _43ParallelMap;// 2:MeshDeformVertices-ext->5:ParallelMap 95138
        TriMesh _44SetMeshVertices;// 3:MeshSetVertices-ext->8:SetMeshVertices 95137
        _0MeshVertices = MeshVertices(mesh);
        _1SphereFromBox = SphereFromBox(boundingBox);
        _2Pass-through: function1 = (Vector3 x0) => 
          {
            if (box or sphere)
              {
                BoundingSphere _0SphereFromBox;// 10:BoundingBoxCenter->2:SphereFromBox 95162
                Vector3 _1SphereCenter;// 10:BoundingBoxCenter->3:SphereCenter 95161
                Vector3 _2Subtract;// 11:PointLerpToBox-ext->1:Subtract 95159
                Vector3 _3Normalize;// 5:SetVectorLength->1:Normalize 95158
                BoundingSphere _4SphereFromBox;// 4:BoundingBoxRadius->1:SphereFromBox 95165
                Single _5SphereRadius;// 4:BoundingBoxRadius->2:SphereRadius 95164
                Vector3 _6MultiplyByScalar;// 5:SetVectorLength->3:MultiplyByScalar 95157
                Vector3 _7BoxMin;// 3:BoxClamp-ext->5:BoxMin 95153
                Vector3 _8BoxMax;// 3:BoxClamp-ext->3:BoxMax 95154
                Vector3 _9Clamp;// 3:BoxClamp-ext->1:Clamp 95152
                Vector3 _10Lerp;// 11:PointLerpToBox-ext->2:Lerp 95149
                _0SphereFromBox = SphereFromBox(boundingBox);
                _1SphereCenter = SphereCenter(_0SphereFromBox);
                _2Subtract = Subtract(x0, _1SphereCenter);
                _3Normalize = Normalize(_2Subtract);
                _4SphereFromBox = SphereFromBox(boundingBox);
                _5SphereRadius = SphereRadius(_4SphereFromBox);
                _6MultiplyByScalar = MultiplyByScalar(_3Normalize, _5SphereRadius);
                _7BoxMin = BoxMin(boundingBox);
                _8BoxMax = BoxMax(boundingBox);
                _9Clamp = Clamp(_6MultiplyByScalar, _7BoxMin, _8BoxMax);
                _10Lerp = Lerp(x0, _9Clamp, weight);
                _10Lerp;
                }else
              {
                Vector3 _11SphereCenter;// 4:PointLerpToSphere-ext->11:SphereCenter 95176
                Vector3 _12Subtract;// 4:PointLerpToSphere-ext->1:Subtract 95175
                Vector3 _13Normalize;// 5:SetVectorLength->1:Normalize 95174
                Single _14SphereRadius;// 4:PointLerpToSphere-ext->9:SphereRadius 95177
                Vector3 _15MultiplyByScalar;// 5:SetVectorLength->3:MultiplyByScalar 95173
                Vector3 _16Lerp;// 4:PointLerpToSphere-ext->2:Lerp 95170
                _11SphereCenter = SphereCenter(_1SphereFromBox);
                _12Subtract = Subtract(x0, _11SphereCenter);
                _13Normalize = Normalize(_12Subtract);
                _14SphereRadius = SphereRadius(_1SphereFromBox);
                _15MultiplyByScalar = MultiplyByScalar(_13Normalize, _14SphereRadius);
                _16Lerp = Lerp(x0, _15MultiplyByScalar, weight);
                _16Lerp;
                };
            };
        _41Pass-through: Matrix = if (use node transform)
          {
            Boolean _3IsValidNode;// 9:GizmoTransformInLocalSpace->35:IsValidNode 95188
            _3IsValidNode = IsValidNode(gizmo node);
            if (_3IsValidNode)
              {
                Boolean _4IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 95194
                Matrix _7InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 95198
                Matrix _8Multiply;// 32:NodeToLocalTransform->18:Multiply 95191
                _4IsValidNode = IsValidNode(gizmo node);
                _7InvertMatrix = InvertMatrix(modifierTransform);
                _8Multiply = Multiply(if (_4IsValidNode)
                    {
                      Matrix _5WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 95195
                      _5WorldTransform = WorldTransform(gizmo node);
                      _5WorldTransform;
                      }else
                    {
                      Matrix _6MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 95196
                      _6MatrixIdentity = MatrixIdentity();
                      _6MatrixIdentity;
                      }, _7InvertMatrix);
                _8Multiply;
                }else
              {
                Matrix _9MatrixIdentity;// 9:GizmoTransformInLocalSpace->40:MatrixIdentity 95199
                _9MatrixIdentity = MatrixIdentity();
                _9MatrixIdentity;
                };
            }else
          {
            Matrix _10TranslationMatrix;// 17:MatrixFromPositionRotationScale-ext->3:TranslationMatrix 95210
            Single _11X;// 1:VectorAsArray->1:X 95246
            IArray[Single] _12Unit;// 4:Array3->2:Unit 95245
            Single _13Y;// 1:VectorAsArray->2:Y 95247
            IArray[Single] _14Append;// 4:Array3->3:Append 95244
            Single _15Z;// 1:VectorAsArray->3:Z 95248
            IArray[Single] _16Append;// 4:Array3->6:Append 95243
            Func[Single, Single] _17Pass-through: function1;// 0:Pass-through: function1 95225
            IArray[Single] _18Map;// 1:VectorMapComponents-ext->2:Map 95238
            Int32 _19Zero;// 3:VectorFromArray-ext->5:Zero 95229
            Single _20At;// 3:VectorFromArray-ext->1:At 95228
            Int32 _21One;// 6:PlusOne->1:One 95233
            Int32 _22Add;// 6:PlusOne->0:Add 95232
            Single _23At;// 3:VectorFromArray-ext->2:At 95230
            Int32 _24One;// 7:PlusOne->1:One 95237
            Int32 _25Add;// 7:PlusOne->0:Add 95236
            Single _26At;// 3:VectorFromArray-ext->3:At 95234
            Vector3 _27Vector3;// 3:VectorFromArray-ext->4:Vector3 95227
            Single _28Y;// 2:QuaternionFromVector3-ext->7:Y 95220
            Single _29X;// 2:QuaternionFromVector3-ext->6:X 95221
            Single _30Z;// 2:QuaternionFromVector3-ext->8:Z 95222
            Quaternion _31QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 95219
            Matrix _32MatrixFromQuaternion;// 17:MatrixFromPositionRotationScale-ext->4:MatrixFromQuaternion 95211
            Matrix _33Multiply;// 6:Multiply3-ext->3:Multiply 95209
            Single _34Constant;// 45:OnesVector-ext->0:Constant 95254
            Vector3 _35Vector3;// 45:OnesVector-ext->2:Vector3 95253
            Vector3 _36Add;// 44:Add 95251
            Single _37Constant;// 8:Origin->0:Constant 95215
            Vector3 _38Vector3;// 8:Origin->1:Vector3 95214
            Matrix _39ScalingTranslationMatrix;// 5:MatrixFromScalingVector2-ext->4:ScalingTranslationMatrix 95213
            Matrix _40Multiply;// 6:Multiply3-ext->4:Multiply 95208
            _10TranslationMatrix = TranslationMatrix(deformer translation);
            _11X = X(deformer rotation);
            _12Unit = Unit(_11X);
            _13Y = Y(deformer rotation);
            _14Append = Append(_12Unit, _13Y);
            _15Z = Z(deformer rotation);
            _16Append = Append(_14Append, _15Z);
            _17Pass-through: function1 = (Single x0) => 
              {
                Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 95249
                _0ToRadians = ToRadians(x0);
                _0ToRadians;
                };
            _18Map = Map(_16Append, _17Pass-through: function1);
            _19Zero = Zero();
            _20At = At(_18Map, _19Zero);
            _21One = One();
            _22Add = Add(_19Zero, _21One);
            _23At = At(_18Map, _22Add);
            _24One = One();
            _25Add = Add(_22Add, _24One);
            _26At = At(_18Map, _25Add);
            _27Vector3 = Vector3(_20At, _23At, _26At);
            _28Y = Y(_27Vector3);
            _29X = X(_27Vector3);
            _30Z = Z(_27Vector3);
            _31QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_28Y, _29X, _30Z);
            _32MatrixFromQuaternion = MatrixFromQuaternion(_31QuaternionFromYawPitchRoll);
            _33Multiply = Multiply(_10TranslationMatrix, _32MatrixFromQuaternion);
            _34Constant = 1;
            _35Vector3 = Vector3(_34Constant, _34Constant, _34Constant);
            _36Add = Add(deformer scale, _35Vector3);
            _37Constant = 0;
            _38Vector3 = Vector3(_37Constant, _37Constant, _37Constant);
            _39ScalingTranslationMatrix = ScalingTranslationMatrix(_36Add, _38Vector3);
            _40Multiply = Multiply(_33Multiply, _39ScalingTranslationMatrix);
            _40Multiply;
            };
        _42InvertMatrix = InvertMatrix(_41Pass-through: Matrix);
        _43ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 2:MeshDeformVertices-ext->11:Transform 95142
            Vector3 _1Apply1;// 2:MeshDeformVertices-ext->8:Apply1 95141
            Vector3 _2Transform;// 2:MeshDeformVertices-ext->9:Transform 95140
            _0Transform = Transform(x0, _42InvertMatrix);
            _1Apply1 = Apply1(_2Pass-through: function1, _0Transform);
            _2Transform = Transform(_1Apply1, _41Pass-through: Matrix);
            _2Transform;
            });
        _44SetMeshVertices = SetMeshVertices(mesh, _43ParallelMap);
        _44SetMeshVertices;
        });
    _5IfThen;
    }