(InstanceState state, TriMesh mesh, INode target, Single weight) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 1723266
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 1723268
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 1723267
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 1723265
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 1723264
    TriMesh _5IfThen;// 6:MeshSetVertices-ext->10:IfThen 1723260
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 6:MeshSetVertices-ext->0:MeshVertices 1723275
        IArray[Vector3] _1MeshVertices;// 4:MeshInterpolate-ext->7:MeshVertices 1723289
        Boolean _2IsValidNode;// 3:NodeMeshOrDefault-ext->1:IsValidNode 1723296
        TriMesh _4Pass-through: TriMesh;// 0:Pass-through: TriMesh 1723256
        IArray[Vector3] _5MeshVertices;// 4:MeshInterpolate-ext->4:MeshVertices 1723290
        Single _6Constant;// 5:DivideBy100-ext->0:Constant 1723301
        Single _7Divide;// 5:DivideBy100-ext->2:Divide 1723300
        Func[Vector3, Vector3, Vector3] _8Pass-through: function2;// 0:Pass-through: function2 1723282
        IArray[Vector3] _9Combine;// 5:ArrayCombineKeepLength-ext->0:Combine 1723288
        Int32 _10Count;// 4:ArrayConcatenateTail-ext->2:Count 1723287
        IArray[Vector3] _11Skip;// 4:ArrayConcatenateTail-ext->3:Skip 1723286
        IArray[Vector3] _12Concatenate;// 4:ArrayConcatenateTail-ext->4:Concatenate 1723285
        Int32 _13Zero;// 7:SoftSelection->2:Zero 1723278
        IArray[Single] _14PerVertexData;// 7:SoftSelection->3:PerVertexData 1723277
        IArray[Vector3] _15Combine3;// 1:LerpVectors-ext->10:Combine3 1723273
        TriMesh _16SetMeshVertices;// 6:MeshSetVertices-ext->6:SetMeshVertices 1723269
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2IsValidNode = IsValidNode(target);
        _4Pass-through: TriMesh = if (_2IsValidNode)
          {
            TriMesh _3MeshFromNode;// 3:NodeMeshOrDefault-ext->2:MeshFromNode 1723297
            _3MeshFromNode = MeshFromNode(target);
            _3MeshFromNode;
            }else
          {
            mesh;
            };
        _5MeshVertices = MeshVertices(_4Pass-through: TriMesh);
        _6Constant = 100;
        _7Divide = Divide(weight, _6Constant);
        _8Pass-through: function2 = (Vector3 x0, Vector3 x1) => 
          {
            Vector3 _0Lerp;// 4:MeshInterpolate-ext->3:Lerp 1723291
            _0Lerp = Lerp(x0, x1, _7Divide);
            _0Lerp;
            };
        _9Combine = Combine(_1MeshVertices, _5MeshVertices, _8Pass-through: function2);
        _10Count = Count(_9Combine);
        _11Skip = Skip(_1MeshVertices, _10Count);
        _12Concatenate = Concatenate(_9Combine, _11Skip);
        _13Zero = Zero();
        _14PerVertexData = PerVertexData(mesh, _13Zero);
        _15Combine3 = Combine3(_0MeshVertices, _12Concatenate, _14PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 1723274
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _16SetMeshVertices = SetMeshVertices(mesh, _15Combine3);
        _16SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 4:MeshInterpolate-ext->7:MeshVertices 1723289
        Boolean _1IsValidNode;// 3:NodeMeshOrDefault-ext->1:IsValidNode 1723296
        TriMesh _3Pass-through: TriMesh;// 0:Pass-through: TriMesh 1723256
        IArray[Vector3] _4MeshVertices;// 4:MeshInterpolate-ext->4:MeshVertices 1723290
        Single _5Constant;// 5:DivideBy100-ext->0:Constant 1723301
        Single _6Divide;// 5:DivideBy100-ext->2:Divide 1723300
        Func[Vector3, Vector3, Vector3] _7Pass-through: function2;// 0:Pass-through: function2 1723282
        IArray[Vector3] _8Combine;// 5:ArrayCombineKeepLength-ext->0:Combine 1723288
        Int32 _9Count;// 4:ArrayConcatenateTail-ext->2:Count 1723287
        IArray[Vector3] _10Skip;// 4:ArrayConcatenateTail-ext->3:Skip 1723286
        IArray[Vector3] _11Concatenate;// 4:ArrayConcatenateTail-ext->4:Concatenate 1723285
        TriMesh _12SetMeshVertices;// 6:MeshSetVertices-ext->8:SetMeshVertices 1723279
        _0MeshVertices = MeshVertices(mesh);
        _1IsValidNode = IsValidNode(target);
        _3Pass-through: TriMesh = if (_1IsValidNode)
          {
            TriMesh _2MeshFromNode;// 3:NodeMeshOrDefault-ext->2:MeshFromNode 1723297
            _2MeshFromNode = MeshFromNode(target);
            _2MeshFromNode;
            }else
          {
            mesh;
            };
        _4MeshVertices = MeshVertices(_3Pass-through: TriMesh);
        _5Constant = 100;
        _6Divide = Divide(weight, _5Constant);
        _7Pass-through: function2 = (Vector3 x0, Vector3 x1) => 
          {
            Vector3 _0Lerp;// 4:MeshInterpolate-ext->3:Lerp 1723291
            _0Lerp = Lerp(x0, x1, _6Divide);
            _0Lerp;
            };
        _8Combine = Combine(_0MeshVertices, _4MeshVertices, _7Pass-through: function2);
        _9Count = Count(_8Combine);
        _10Skip = Skip(_0MeshVertices, _9Count);
        _11Concatenate = Concatenate(_8Combine, _10Skip);
        _12SetMeshVertices = SetMeshVertices(mesh, _11Concatenate);
        _12SetMeshVertices;
        });
    _5IfThen;
    }