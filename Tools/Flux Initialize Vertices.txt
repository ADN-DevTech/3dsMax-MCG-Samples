(InstanceState state, TriMesh mesh, Int32 flux channel, INode source, Boolean position only, Int32 axis) => 
  {
    Boolean _0IsValidNode;// 14:NodeMeshOrDefault-ext->1:IsValidNode 97762
    TriMesh _2Pass-through: TriMesh;// 0:Pass-through: TriMesh 97754
    IArray[Vector3] _3MeshVertices;// 5:MeshVertexNormalsAsRays-ext->2:MeshVertices 97756
    IArray[Vector3] _4VertexNormals;// 5:MeshVertexNormalsAsRays-ext->1:VertexNormals 97757
    IArray[Ray] _5Combine;// 5:MeshVertexNormalsAsRays-ext->3:Combine 97755
    IArray[Matrix] _6Map;// 19:Map 97753
    Func[Matrix, IArray[Vector3]] _7Pass-through: function1;// 0:Pass-through: function1 97739
    IArray[IArray[Vector3]] _8Map;// 5:FlatMap->4:Map 97741
    IArray[Vector3] _9Flatten;// 5:FlatMap->3:Flatten 97740
    IArray[Int32] _10MeshIndices;// 0:MapChannelStoreMatrices-ext->0:MeshIndices 97750
    TriMesh _11SetMapChannel;// 0:MapChannelStoreMatrices-ext->7:SetMapChannel 97737
    _0IsValidNode = IsValidNode(source);
    _2Pass-through: TriMesh = if (_0IsValidNode)
      {
        TriMesh _1MeshFromNode;// 14:NodeMeshOrDefault-ext->2:MeshFromNode 97763
        _1MeshFromNode = MeshFromNode(source);
        _1MeshFromNode;
        }else
      {
        mesh;
        };
    _3MeshVertices = MeshVertices(_2Pass-through: TriMesh);
    _4VertexNormals = VertexNormals(_2Pass-through: TriMesh);
    _5Combine = Combine(_3MeshVertices, _4VertexNormals, (Vector3 x0, Vector3 x1) => 
      {
        Ray _0Ray;// 5:MeshVertexNormalsAsRays-ext->4:Ray 97758
        _0Ray = Ray(x0, x1);
        _0Ray;
        });
    _6Map = Map(_5Combine, (Ray x0) => 
      {
        Vector3 _61RayPosition;// 16:MatrixFromRay-ext->10:RayPosition 97835
        Matrix _62RotationTranslationMatrix;// 16:MatrixFromRay-ext->8:RotationTranslationMatrix 97768
        _61RayPosition = RayPosition(x0);
        _62RotationTranslationMatrix = RotationTranslationMatrix(if (position only)
          {
            Quaternion _0QuaternionIdentity;// 16:MatrixFromRay-ext->4:QuaternionIdentity 97770
            _0QuaternionIdentity = QuaternionIdentity();
            _0QuaternionIdentity;
            }else
          {
            Int32 _1Zero;// 6:AxisChoose-ext->9:Zero 97808
            Boolean _2GreaterThanOrEqual;// 6:AxisChoose-ext->8:GreaterThanOrEqual 97807
            Vector3 _3XAxis;// 6:AxisChoose-ext->3:XAxis 97816
            IArray[Vector3] _4Unit;// 2:Array3->2:Unit 97815
            Vector3 _5YAxis;// 6:AxisChoose-ext->4:YAxis 97817
            IArray[Vector3] _6Append;// 2:Array3->3:Append 97814
            Vector3 _7ZAxis;// 6:AxisChoose-ext->5:ZAxis 97818
            IArray[Vector3] _8Append;// 2:Array3->6:Append 97813
            Vector3 _15Pass-through: Vector3;// 0:Pass-through: Vector3 97771
            Vector3 _16Normalize;// 5:RotationBetweenVectorsFix-ext->4:Normalize 97803
            Vector3 _17RayDirection;// 16:MatrixFromRay-ext->7:RayDirection 97834
            Single _18Length;// 4:VectorIsSmall-ext->3:Length 97831
            Single _19Constant;// 4:VectorLengthEpsilon-ext->0:Constant 97832
            Boolean _20LessThan;// 4:VectorIsSmall-ext->5:LessThan 97830
            Vector3 _22Pass-through: Vector3;// 0:Pass-through: Vector3 97772
            Vector3 _23Normalize;// 5:RotationBetweenVectorsFix-ext->5:Normalize 97804
            Single _24Dot;// 0:RotationBetweenUnitVectors-ext->6:Dot 97779
            Single _25FloatOne;// 0:RotationBetweenUnitVectors-ext->8:FloatOne 97780
            Single _26Add;// 0:RotationBetweenUnitVectors-ext->7:Add 97778
            Single _27Constant;// 0:RotationBetweenUnitVectors-ext->0:Constant 97781
            Boolean _28LessThan;// 0:RotationBetweenUnitVectors-ext->40:LessThan 97777
            Quaternion _60QuaternionNormalize;// 0:RotationBetweenUnitVectors-ext->3:QuaternionNormalize 97775
            _1Zero = Zero();
            _2GreaterThanOrEqual = GreaterThanOrEqual(axis, _1Zero);
            _3XAxis = XAxis();
            _4Unit = Unit(_3XAxis);
            _5YAxis = YAxis();
            _6Append = Append(_4Unit, _5YAxis);
            _7ZAxis = ZAxis();
            _8Append = Append(_6Append, _7ZAxis);
            _15Pass-through: Vector3 = if (_2GreaterThanOrEqual)
              {
                Vector3 _9At;// 6:AxisChoose-ext->1:At 97809
                _9At = At(_8Append, axis);
                _9At;
                }else
              {
                Int32 _10One;// 10:PlusOne->1:One 97824
                Int32 _11Add;// 10:PlusOne->0:Add 97823
                Int32 _12Negative;// 6:AxisChoose-ext->11:Negative 97821
                Vector3 _13At;// 6:AxisChoose-ext->12:At 97820
                Vector3 _14Negate;// 6:AxisChoose-ext->13:Negate 97819
                _10One = One();
                _11Add = Add(axis, _10One);
                _12Negative = Negative(_11Add);
                _13At = At(_8Append, _12Negative);
                _14Negate = Negate(_13At);
                _14Negate;
                };
            _16Normalize = Normalize(_15Pass-through: Vector3);
            _17RayDirection = RayDirection(x0);
            _18Length = Length(_17RayDirection);
            _19Constant = 1E-06;
            _20LessThan = LessThan(_18Length, _19Constant);
            _22Pass-through: Vector3 = if (_20LessThan)
              {
                Vector3 _21ZAxis;// 11:VectorOrZAxis-ext->2:ZAxis 97833
                _21ZAxis = ZAxis();
                _21ZAxis;
                }else
              {
                _17RayDirection;
                };
            _23Normalize = Normalize(_22Pass-through: Vector3);
            _24Dot = Dot(_16Normalize, _23Normalize);
            _25FloatOne = FloatOne();
            _26Add = Add(_24Dot, _25FloatOne);
            _27Constant = 1E-07;
            _28LessThan = LessThan(_26Add, _27Constant);
            _60QuaternionNormalize = QuaternionNormalize(if (_28LessThan)
              {
                Single _35X;// 0:RotationBetweenUnitVectors-ext->12:X 97786
                Single _36Abs;// 0:RotationBetweenUnitVectors-ext->11:Abs 97785
                Single _37Z;// 0:RotationBetweenUnitVectors-ext->14:Z 97789
                Single _38Abs;// 0:RotationBetweenUnitVectors-ext->13:Abs 97788
                Boolean _39GreaterThan;// 0:RotationBetweenUnitVectors-ext->15:GreaterThan 97784
                Single _56FloatZero;// 0:RotationBetweenUnitVectors-ext->36:FloatZero 97800
                Quaternion _57QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->35:QuaternionFromVectorAndTheta 97782
                _35X = X(_16Normalize);
                _36Abs = Abs(_35X);
                _37Z = Z(_16Normalize);
                _38Abs = Abs(_37Z);
                _39GreaterThan = GreaterThan(_36Abs, _38Abs);
                _56FloatZero = FloatZero();
                _57QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_39GreaterThan)
                  {
                    Single _46Y;// 0:RotationBetweenUnitVectors-ext->29:Y 97792
                    Single _47NegativeFloat;// 0:RotationBetweenUnitVectors-ext->30:NegativeFloat 97791
                    Single _48X;// 0:RotationBetweenUnitVectors-ext->23:X 97793
                    Single _49FloatZero;// 0:RotationBetweenUnitVectors-ext->21:FloatZero 97794
                    Vector3 _50Vector3;// 0:RotationBetweenUnitVectors-ext->19:Vector3 97790
                    _46Y = Y(_16Normalize);
                    _47NegativeFloat = NegativeFloat(_46Y);
                    _48X = X(_16Normalize);
                    _49FloatZero = FloatZero();
                    _50Vector3 = Vector3(_47NegativeFloat, _48X, _49FloatZero);
                    _50Vector3;
                    }else
                  {
                    Single _51FloatZero;// 0:RotationBetweenUnitVectors-ext->22:FloatZero 97796
                    Single _52Z;// 0:RotationBetweenUnitVectors-ext->26:Z 97798
                    Single _53NegativeFloat;// 0:RotationBetweenUnitVectors-ext->25:NegativeFloat 97797
                    Single _54Y;// 0:RotationBetweenUnitVectors-ext->24:Y 97799
                    Vector3 _55Vector3;// 0:RotationBetweenUnitVectors-ext->20:Vector3 97795
                    _51FloatZero = FloatZero();
                    _52Z = Z(_16Normalize);
                    _53NegativeFloat = NegativeFloat(_52Z);
                    _54Y = Y(_16Normalize);
                    _55Vector3 = Vector3(_51FloatZero, _53NegativeFloat, _54Y);
                    _55Vector3;
                    }, _56FloatZero);
                _57QuaternionFromVectorAndTheta;
                }else
              {
                Vector3 _58Cross;// 0:RotationBetweenUnitVectors-ext->2:Cross 97802
                Quaternion _59QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->5:QuaternionFromVectorAndTheta 97801
                _58Cross = Cross(_16Normalize, _23Normalize);
                _59QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_58Cross, _26Add);
                _59QuaternionFromVectorAndTheta;
                });
            _60QuaternionNormalize;
            }, _61RayPosition);
        _62RotationTranslationMatrix;
        });
    _7Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 97745
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 97744
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 97743
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 97749
            Int32 _1Add;// 5:PlusOne->0:Add 97748
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 97746
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _8Map = Map(_6Map, _7Pass-through: function1);
    _9Flatten = Flatten(_8Map);
    _10MeshIndices = MeshIndices(mesh);
    _11SetMapChannel = SetMapChannel(mesh, flux channel, _9Flatten, _10MeshIndices);
    _11SetMapChannel;
    }