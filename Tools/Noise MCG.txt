(InstanceState state, TriMesh mesh, Boolean useGizmoXform, INode gizmo, Matrix modifierTransform, Int32 numIterations, Single roughness, Int32 phase, Single frequency, Single scale, Single strengthX, Single strengthY, Single strengthZ, Int32 seed) => 
  {
    IArray[Vector3] _0MeshVertices;// 0:NoiseMesh-ext->15:MeshVertices 104174
    Int32 _1Constant;// 72:NoiseDeformerNoiseInit-ext->0:Constant 104616
    Int32 _2One;// 126:PlusOne->1:One 104614
    Int32 _3Add;// 126:PlusOne->0:Add 104613
    IArray[Int32] _4Range;// 72:NoiseDeformerNoiseInit-ext->93:Range 104611
    Int32 _5Constant;// 72:NoiseDeformerNoiseInit-ext->0:Constant 104638
    IArray[Int32] _6Range;// 72:NoiseDeformerNoiseInit-ext->105:Range 104637
    IArray[IArray[Single]] _7Map;// 72:NoiseDeformerNoiseInit-ext->94:Map 104610
    IArray[IArray[Single]] _8Concatenate;// 72:NoiseDeformerNoiseInit-ext->70:Concatenate 104608
    IArray[Int32] _9Indices;// 72:NoiseDeformerNoiseInit-ext->2:Indices 104662
    Int32 _10Add;// 72:NoiseDeformerNoiseInit-ext->21:Add 104665
    Int32 _11Two;// 72:NoiseDeformerNoiseInit-ext->24:Two 104668
    Int32 _12Add;// 72:NoiseDeformerNoiseInit-ext->22:Add 104664
    IArray[Int32] _13Range;// 72:NoiseDeformerNoiseInit-ext->25:Range 104663
    Int32 _14Count;// 3:LastIndex->2:Count 104694
    Int32 _15One;// 3:MinusOne->2:One 104693
    Int32 _16Subtract;// 3:MinusOne->1:Subtract 104692
    Int32 _17At;// 35:Last->0:At 104689
    IArray[Int32] _18Map;// 72:NoiseDeformerNoiseInit-ext->20:Map 104680
    IArray[Int32] _19Aggregate;// 72:NoiseDeformerNoiseInit-ext->1:Aggregate 104660
    Int32 _20Two;// 72:NoiseDeformerNoiseInit-ext->67:Two 104708
    Int32 _21Add;// 72:NoiseDeformerNoiseInit-ext->66:Add 104706
    IArray[Int32] _22Range;// 72:NoiseDeformerNoiseInit-ext->69:Range 104705
    IArray[Int32] _23Map;// 72:NoiseDeformerNoiseInit-ext->82:Map 104703
    IArray[Int32] _24Map;// 79:SelectByIndex->2:Map 104713
    IArray[Tuple[Int32, Int32]] _25Combine;// 86:ZipToTuple->0:Combine 104701
    IArray[Int32] _26SetValues;// 72:NoiseDeformerNoiseInit-ext->76:SetValues 104657
    Tuple[IArray[IArray[Single]], IArray[Int32]] _27Pair;// 72:NoiseDeformerNoiseInit-ext->87:Pair 104607
    Func[Vector3, Vector3] _28Bind2of2;// 0:NoiseMesh-ext->5:Bind2of2 104175
    IArray[Vector3] _29ParallelMap;// 0:NoiseMesh-ext->11:ParallelMap 104173
    TriMesh _30SetMeshVertices;// 0:NoiseMesh-ext->18:SetMeshVertices 104171
    _0MeshVertices = MeshVertices(mesh);
    _1Constant = 256;
    _2One = One();
    _3Add = Add(_1Constant, _2One);
    _4Range = Range(_3Add);
    _5Constant = 3;
    _6Range = Range(_5Constant);
    _7Map = Map(_4Range, (Int32 x0) => 
      {
        Func[Int32, Single] _0Bind1of2;// 72:NoiseDeformerNoiseInit-ext->116:Bind1of2 104639
        IArray[Single] _1Map;// 72:NoiseDeformerNoiseInit-ext->108:Map 104636
        Int32 _2Zero;// 118:ArrayToVector3->2:Zero 104631
        Single _3At;// 118:ArrayToVector3->1:At 104630
        Int32 _4One;// 118:ArrayToVector3->3:One 104633
        Single _5At;// 118:ArrayToVector3->5:At 104632
        Int32 _6Two;// 118:ArrayToVector3->4:Two 104635
        Single _7At;// 118:ArrayToVector3->6:At 104634
        Vector3 _8Vector3;// 118:ArrayToVector3->7:Vector3 104629
        Vector3 _9Normalize;// 72:NoiseDeformerNoiseInit-ext->120:Normalize 104627
        Single _10X;// 117:VectorToArray->1:X 104624
        IArray[Single] _11Unit;// 4:Array3->2:Unit 104623
        Single _12Y;// 117:VectorToArray->2:Y 104625
        IArray[Single] _13Append;// 4:Array3->3:Append 104622
        Single _14Z;// 117:VectorToArray->3:Z 104626
        IArray[Single] _15Append;// 4:Array3->6:Append 104621
        _0Bind1of2 = Bind1of2((Int32 x0, Int32 x1) => 
          {
            Int32 _0Count;// 72:NoiseDeformerNoiseInit-ext->114:Count 104652
            Int32 _1Multiply;// 72:NoiseDeformerNoiseInit-ext->115:Multiply 104651
            Int32 _2Add;// 72:NoiseDeformerNoiseInit-ext->113:Add 104649
            Int32 _3RandInt;// 72:NoiseDeformerNoiseInit-ext->97:RandInt 104647
            Single _4AsFloat;// 72:NoiseDeformerNoiseInit-ext->121:AsFloat 104646
            Single _5Abs;// 72:NoiseDeformerNoiseInit-ext->123:Abs 104645
            Int32 _6AsInt;// 72:NoiseDeformerNoiseInit-ext->122:AsInt 104644
            Int32 _7Add;// 72:NoiseDeformerNoiseInit-ext->99:Add 104654
            Int32 _8Modulo;// 72:NoiseDeformerNoiseInit-ext->98:Modulo 104643
            Int32 _9Subtract;// 72:NoiseDeformerNoiseInit-ext->104:Subtract 104642
            Single _10AsFloat;// 72:NoiseDeformerNoiseInit-ext->100:AsFloat 104641
            Single _11AsFloat;// 72:NoiseDeformerNoiseInit-ext->103:AsFloat 104656
            Single _12Divide;// 72:NoiseDeformerNoiseInit-ext->101:Divide 104640
            _0Count = Count(_4Range);
            _1Multiply = Multiply(_0Count, x1);
            _2Add = Add(x0, _1Multiply);
            _3RandInt = RandInt(seed, _2Add);
            _4AsFloat = AsFloat(_3RandInt);
            _5Abs = Abs(_4AsFloat);
            _6AsInt = AsInt(_5Abs);
            _7Add = Add(_1Constant, _1Constant);
            _8Modulo = Modulo(_6AsInt, _7Add);
            _9Subtract = Subtract(_8Modulo, _1Constant);
            _10AsFloat = AsFloat(_9Subtract);
            _11AsFloat = AsFloat(_1Constant);
            _12Divide = Divide(_10AsFloat, _11AsFloat);
            _12Divide;
            }, x0);
        _1Map = Map(_6Range, _0Bind1of2);
        _2Zero = Zero();
        _3At = At(_1Map, _2Zero);
        _4One = One();
        _5At = At(_1Map, _4One);
        _6Two = Two();
        _7At = At(_1Map, _6Two);
        _8Vector3 = Vector3(_3At, _5At, _7At);
        _9Normalize = Normalize(_8Vector3);
        _10X = X(_9Normalize);
        _11Unit = Unit(_10X);
        _12Y = Y(_9Normalize);
        _13Append = Append(_11Unit, _12Y);
        _14Z = Z(_9Normalize);
        _15Append = Append(_13Append, _14Z);
        _15Append;
        });
    _8Concatenate = Concatenate(_7Map, _7Map);
    _9Indices = Indices(_7Map);
    _10Add = Add(_1Constant, _1Constant);
    _11Two = Two();
    _12Add = Add(_10Add, _11Two);
    _13Range = Range(_12Add);
    _14Count = Count(_9Indices);
    _15One = One();
    _16Subtract = Subtract(_14Count, _15One);
    _17At = At(_9Indices, _16Subtract);
    _18Map = Map(_9Indices, (Int32 x0) => 
      {
        Int32 _0Add;// 72:NoiseDeformerNoiseInit-ext->36:Add 104687
        Int32 _1RandInt;// 72:NoiseDeformerNoiseInit-ext->34:RandInt 104685
        Single _2AsFloat;// 72:NoiseDeformerNoiseInit-ext->92:AsFloat 104684
        Single _3Abs;// 72:NoiseDeformerNoiseInit-ext->90:Abs 104683
        Int32 _4AsInt;// 72:NoiseDeformerNoiseInit-ext->91:AsInt 104682
        Int32 _5Modulo;// 72:NoiseDeformerNoiseInit-ext->40:Modulo 104681
        _0Add = Add(_17At, x0);
        _1RandInt = RandInt(seed, _0Add);
        _2AsFloat = AsFloat(_1RandInt);
        _3Abs = Abs(_2AsFloat);
        _4AsInt = AsInt(_3Abs);
        _5Modulo = Modulo(_4AsInt, _1Constant);
        _5Modulo;
        });
    _19Aggregate = Aggregate(_9Indices, _13Range, (IArray[Int32] x0, Int32 x1) => 
      {
        Int32 _0At;// 72:NoiseDeformerNoiseInit-ext->52:At 104678
        Int32 _1At;// 72:NoiseDeformerNoiseInit-ext->60:At 104677
        Tuple[Int32, Int32] _2Pair;// 72:NoiseDeformerNoiseInit-ext->57:Pair 104675
        IArray[Tuple[Int32, Int32]] _3Unit;// 59:Array2->2:Unit 104674
        Int32 _4At;// 72:NoiseDeformerNoiseInit-ext->30:At 104698
        Tuple[Int32, Int32] _5Pair;// 72:NoiseDeformerNoiseInit-ext->55:Pair 104697
        IArray[Tuple[Int32, Int32]] _6Append;// 59:Array2->3:Append 104673
        IArray[Int32] _7SetValues;// 72:NoiseDeformerNoiseInit-ext->54:SetValues 104669
        _0At = At(_18Map, x1);
        _1At = At(x0, _0At);
        _2Pair = Pair(x1, _1At);
        _3Unit = Unit(_2Pair);
        _4At = At(x0, x1);
        _5Pair = Pair(_0At, _4At);
        _6Append = Append(_3Unit, _5Pair);
        _7SetValues = SetValues(x0, _6Append);
        _7SetValues;
        });
    _20Two = Two();
    _21Add = Add(_1Constant, _20Two);
    _22Range = Range(_21Add);
    _23Map = Map(_22Range, (Int32 x0) => 
      {
        Int32 _0Add;// 72:NoiseDeformerNoiseInit-ext->83:Add 104709
        _0Add = Add(x0, _1Constant);
        _0Add;
        });
    _24Map = Map(_22Range, (Int32 x0) => 
      {
        Int32 _0At;// 79:SelectByIndex->3:At 104714
        _0At = At(_19Aggregate, x0);
        _0At;
        });
    _25Combine = Combine(_23Map, _24Map, (Int32 x0, Int32 x1) => 
      {
        Tuple[Int32, Int32] _0Pair;// 86:ZipToTuple->4:Pair 104702
        _0Pair = Pair(x0, x1);
        _0Pair;
        });
    _26SetValues = SetValues(_19Aggregate, _25Combine);
    _27Pair = Pair(_8Concatenate, _26SetValues);
    _28Bind2of2 = Bind2of2((Vector3 x0, Tuple[IArray[IArray[Single]], IArray[Int32]] x1) => 
      {
        Matrix _8Pass-through: Matrix;// 0:Pass-through: Matrix 104163
        Matrix _9InvertMatrix;// 0:NoiseDeformer-ext->79:InvertMatrix 104190
        Vector3 _10Transform;// 0:NoiseDeformer-ext->78:Transform 104189
        Single _11FloatOne;// 0:NoiseDeformer-ext->40:FloatOne 104597
        Single _12Divide;// 0:NoiseDeformer-ext->41:Divide 104596
        Vector3 _13MultiplyByScalar;// 0:NoiseDeformer-ext->16:MultiplyByScalar 104594
        Vector3 _14Constant;// 0:NoiseDeformer-ext->0:Constant 104598
        Vector3 _15Add;// 0:NoiseDeformer-ext->18:Add 104593
        Single _16Y;// 0:NoiseDeformer-ext->6:Y 104591
        Single _17Z;// 0:NoiseDeformer-ext->7:Z 104599
        Single _18Apply2;// 0:NoiseDeformer-ext->4:Apply2 104194
        Single _19X;// 0:NoiseDeformer-ext->5:X 104602
        Single _20Apply2;// 0:NoiseDeformer-ext->2:Apply2 104601
        Single _21Apply2;// 0:NoiseDeformer-ext->15:Apply2 104604
        Vector3 _22Vector3;// 0:NoiseDeformer-ext->14:Vector3 104192
        Vector3 _23Vector3;// 13:Vector3 104741
        Vector3 _24Multiply;// 0:NoiseDeformer-ext->22:Multiply 104191
        Vector3 _25Add;// 0:NoiseDeformer-ext->25:Add 104186
        Vector3 _26Transform;// 0:NoiseDeformer-ext->83:Transform 104185
        _8Pass-through: Matrix = if (useGizmoXform)
          {
            Boolean _0IsValidNode;// 1:GizmoTransformInLocalSpace->35:IsValidNode 104721
            _0IsValidNode = IsValidNode(gizmo);
            if (_0IsValidNode)
              {
                Boolean _1IsValidNode;// 3:NodeValidateAndGetWorldTransform-ext->2:IsValidNode 104727
                Matrix _4InvertMatrix;// 37:MatrixParameterWorldToLocalTransform-ext->2:InvertMatrix 104731
                Matrix _5Multiply;// 32:NodeToLocalTransform->18:Multiply 104724
                _1IsValidNode = IsValidNode(gizmo);
                _4InvertMatrix = InvertMatrix(modifierTransform);
                _5Multiply = Multiply(if (_1IsValidNode)
                    {
                      Matrix _2WorldTransform;// 3:NodeValidateAndGetWorldTransform-ext->1:WorldTransform 104728
                      _2WorldTransform = WorldTransform(gizmo);
                      _2WorldTransform;
                      }else
                    {
                      Matrix _3MatrixIdentity;// 3:NodeValidateAndGetWorldTransform-ext->4:MatrixIdentity 104729
                      _3MatrixIdentity = MatrixIdentity();
                      _3MatrixIdentity;
                      }, _4InvertMatrix);
                _5Multiply;
                }else
              {
                Matrix _6MatrixIdentity;// 1:GizmoTransformInLocalSpace->40:MatrixIdentity 104732
                _6MatrixIdentity = MatrixIdentity();
                _6MatrixIdentity;
                };
            }else
          {
            Matrix _7MatrixIdentity;// 12:MatrixIdentity 104735
            _7MatrixIdentity = MatrixIdentity();
            _7MatrixIdentity;
            };
        _9InvertMatrix = InvertMatrix(_8Pass-through: Matrix);
        _10Transform = Transform(x0, _9InvertMatrix);
        _11FloatOne = FloatOne();
        _12Divide = Divide(_11FloatOne, scale);
        _13MultiplyByScalar = MultiplyByScalar(_10Transform, _12Divide);
        _14Constant = new Microsoft.Xna.Framework.Vector3(0.5, 0.5, 0.5);
        _15Add = Add(_13MultiplyByScalar, _14Constant);
        _16Y = Y(_15Add);
        _17Z = Z(_15Add);
        _18Apply2 = Apply2((Single x0, Single x1) => 
          {
            Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 104215
            IArray[Single] _1Unit;// 37:Array2->2:Unit 104214
            Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 104216
            IArray[Single] _3Append;// 37:Array2->3:Append 104213
            Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 104576
            Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 104217
            Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 104231
            Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 104232
            Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 104577
            IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 104230
            Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 104579
            Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 104578
            Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 104239
            IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 104229
            Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 104584
            Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 104587
            Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 104586
            Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 104589
            Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 104590
            Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 104588
            Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 104585
            Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 104583
            Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 104580
            IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 104564
            IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 104568
            Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 104575
            IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 104210
            Int32 _27Count;// 3:LastIndex->2:Count 104209
            Int32 _28One;// 3:MinusOne->2:One 104208
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 104207
            IArray[Single] _30At;// 68:Last->0:At 104204
            Int32 _31Zero;// 69:First->2:Zero 104202
            Single _32At;// 69:First->0:At 104201
            _0FloatZero = FloatZero();
            _1Unit = Unit(_0FloatZero);
            _2FloatZero = FloatZero();
            _3Append = Append(_1Unit, _2FloatZero);
            _4AsFloat = AsFloat(numIterations);
            _5AsInt = AsInt(_4AsFloat);
            _6FloatOne = FloatOne();
            _7AsInt = AsInt(_4AsFloat);
            _8Constant = 2;
            _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
              {
                Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 104234
                _0Multiply = Multiply(_8Constant, x0);
                _0Multiply;
                });
            _10FloatOne = FloatOne();
            _11Subtract = Subtract(_10FloatOne, roughness);
            _12NegativeFloat = NegativeFloat(_11Subtract);
            _13Map = Map(_9GenerateN, (Single x0) => 
              {
                Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 104237
                _0Pow = Pow(x0, _12NegativeFloat);
                _0Pow;
                });
            _14AsFloat = AsFloat(phase);
            _15Constant = 0.005;
            _16Multiply = Multiply(frequency, _15Constant);
            _17Constant = 1200;
            _18Constant = 4800;
            _19Divide = Divide(_17Constant, _18Constant);
            _20Multiply = Multiply(_16Multiply, _19Divide);
            _21Multiply = Multiply(_14AsFloat, _20Multiply);
            _22Vector3 = Vector3(x0, x1, _21Multiply);
            _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
              {
                Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 104566
                _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                _0MultiplyByScalar;
                });
            _24PairItem1 = PairItem1(x1);
            _25FloatOne = FloatOne();
            _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
              {
                Int32 _0One;// 49:Second->2:One 104244
                Single _1At;// 49:Second->0:At 104243
                Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 104241
                Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 104227
                Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 104282
                Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 104562
                Single _6X;// 2:VectorAsArray->1:X 104293
                IArray[Single] _7Unit;// 4:Array3->2:Unit 104292
                Single _8Y;// 2:VectorAsArray->2:Y 104294
                IArray[Single] _9Append;// 4:Array3->3:Append 104291
                Single _10Z;// 2:VectorAsArray->3:Z 104295
                IArray[Single] _11Append;// 4:Array3->6:Append 104290
                Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 104308
                Single _13At;// 1:VectorComponent-ext->3:At 104285
                Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 104281
                Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 104280
                Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 104296
                Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 104279
                Int32 _18One;// 13:PlusOne->1:One 104300
                Int32 _19Add;// 13:PlusOne->0:Add 104299
                Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 104297
                Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 104278
                Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 104305
                Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104304
                Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104302
                Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104307
                Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104306
                Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 104301
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 104277
                Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 104274
                Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 104273
                IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 104569
                Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 104319
                Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 104318
                Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 104317
                Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 104329
                Single _36X;// 2:VectorAsArray->1:X 104340
                IArray[Single] _37Unit;// 4:Array3->2:Unit 104339
                Single _38Y;// 2:VectorAsArray->2:Y 104341
                IArray[Single] _39Append;// 4:Array3->3:Append 104338
                Single _40Z;// 2:VectorAsArray->3:Z 104342
                IArray[Single] _41Append;// 4:Array3->6:Append 104337
                Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 104355
                Single _43At;// 1:VectorComponent-ext->3:At 104332
                Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 104328
                Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 104327
                Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 104343
                Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 104326
                Int32 _48One;// 13:PlusOne->1:One 104347
                Int32 _49Add;// 13:PlusOne->0:Add 104346
                Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 104344
                Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 104325
                Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 104352
                Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104351
                Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104349
                Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104354
                Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104353
                Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 104348
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 104324
                Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 104321
                Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 104320
                Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 104315
                Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 104313
                Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 104365
                Single _64X;// 2:VectorAsArray->1:X 104376
                IArray[Single] _65Unit;// 4:Array3->2:Unit 104375
                Single _66Y;// 2:VectorAsArray->2:Y 104377
                IArray[Single] _67Append;// 4:Array3->3:Append 104374
                Single _68Z;// 2:VectorAsArray->3:Z 104378
                IArray[Single] _69Append;// 4:Array3->6:Append 104373
                Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 104391
                Single _71At;// 1:VectorComponent-ext->3:At 104368
                Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 104364
                Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 104363
                Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 104379
                Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 104362
                Int32 _76One;// 13:PlusOne->1:One 104383
                Int32 _77Add;// 13:PlusOne->0:Add 104382
                Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 104380
                Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 104361
                Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 104388
                Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104387
                Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104385
                Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104390
                Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104389
                Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 104384
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 104360
                Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 104357
                Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 104356
                Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 104311
                IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 104309
                Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 104266
                Single _92At;// 62:NoiseDeformerAt3-ext->4:At 104265
                Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 104264
                Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 104393
                Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 104392
                Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 104269
                Single _97At;// 62:NoiseDeformerAt3-ext->7:At 104268
                Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 104267
                Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 104263
                Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 104395
                Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 104394
                Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 104272
                Single _103At;// 62:NoiseDeformerAt3-ext->10:At 104271
                Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 104270
                Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 104262
                Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 104411
                Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 104419
                Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 104418
                Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 104416
                Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 104415
                Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 104413
                IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 104412
                Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 104404
                Single _114At;// 66:NoiseDeformerAt3-ext->4:At 104403
                Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 104402
                Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 104407
                Single _117At;// 66:NoiseDeformerAt3-ext->7:At 104406
                Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 104405
                Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 104401
                Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 104410
                Single _121At;// 66:NoiseDeformerAt3-ext->10:At 104409
                Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 104408
                Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 104400
                Single _124Constant;// 42:NoiseDeformerSCurve->0:Constant 104423
                Single _125Constant;// 42:NoiseDeformerSCurve->0:Constant 104425
                Single _126Multiply;// 42:NoiseDeformerSCurve->41:Multiply 104424
                Single _127Subtract;// 42:NoiseDeformerSCurve->39:Subtract 104422
                Single _128Multiply;// 42:NoiseDeformerSCurve->35:Multiply 104427
                Single _129Multiply;// 42:NoiseDeformerSCurve->37:Multiply 104421
                Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 104257
                Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 104449
                Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 104448
                Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 104447
                Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 104445
                IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 104444
                Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 104437
                Single _137At;// 72:NoiseDeformerAt3-ext->4:At 104436
                Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 104435
                Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 104450
                Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 104440
                Single _141At;// 72:NoiseDeformerAt3-ext->7:At 104439
                Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 104438
                Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 104434
                Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 104443
                Single _145At;// 72:NoiseDeformerAt3-ext->10:At 104442
                Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 104441
                Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 104433
                Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 104470
                Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 104469
                Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 104467
                IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 104466
                Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 104459
                Single _153At;// 75:NoiseDeformerAt3-ext->4:At 104458
                Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 104457
                Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 104462
                Single _156At;// 75:NoiseDeformerAt3-ext->7:At 104461
                Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 104460
                Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 104456
                Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 104465
                Single _160At;// 75:NoiseDeformerAt3-ext->10:At 104464
                Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 104463
                Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 104455
                Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 104428
                Single _164Constant;// 56:NoiseDeformerSCurve->0:Constant 104474
                Single _165Constant;// 56:NoiseDeformerSCurve->0:Constant 104476
                Single _166Multiply;// 56:NoiseDeformerSCurve->41:Multiply 104475
                Single _167Subtract;// 56:NoiseDeformerSCurve->39:Subtract 104473
                Single _168Multiply;// 56:NoiseDeformerSCurve->35:Multiply 104478
                Single _169Multiply;// 56:NoiseDeformerSCurve->37:Multiply 104472
                Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 104256
                Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 104498
                Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 104497
                IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 104496
                Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 104489
                Single _175At;// 82:NoiseDeformerAt3-ext->4:At 104488
                Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 104487
                Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 104492
                Single _178At;// 82:NoiseDeformerAt3-ext->7:At 104491
                Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 104490
                Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 104486
                Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 104499
                Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 104495
                Single _183At;// 82:NoiseDeformerAt3-ext->10:At 104494
                Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 104493
                Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 104485
                Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 104516
                IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 104515
                Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 104508
                Single _189At;// 86:NoiseDeformerAt3-ext->4:At 104507
                Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 104506
                Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 104511
                Single _192At;// 86:NoiseDeformerAt3-ext->7:At 104510
                Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 104509
                Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 104505
                Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 104514
                Single _196At;// 86:NoiseDeformerAt3-ext->10:At 104513
                Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 104512
                Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 104504
                Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 104480
                Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 104534
                IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 104533
                Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 104526
                Single _203At;// 92:NoiseDeformerAt3-ext->4:At 104525
                Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 104524
                Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 104529
                Single _206At;// 92:NoiseDeformerAt3-ext->7:At 104528
                Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 104527
                Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 104523
                Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 104532
                Single _210At;// 92:NoiseDeformerAt3-ext->10:At 104531
                Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 104530
                Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 104522
                Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 104551
                IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 104550
                Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 104543
                Single _216At;// 96:NoiseDeformerAt3-ext->4:At 104542
                Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 104541
                Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 104546
                Single _219At;// 96:NoiseDeformerAt3-ext->7:At 104545
                Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 104544
                Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 104540
                Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 104549
                Single _223At;// 96:NoiseDeformerAt3-ext->10:At 104548
                Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 104547
                Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 104539
                Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 104517
                Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 104479
                Single _228Constant;// 58:NoiseDeformerSCurve->0:Constant 104555
                Single _229Constant;// 58:NoiseDeformerSCurve->0:Constant 104557
                Single _230Multiply;// 58:NoiseDeformerSCurve->41:Multiply 104556
                Single _231Subtract;// 58:NoiseDeformerSCurve->39:Subtract 104554
                Single _232Multiply;// 58:NoiseDeformerSCurve->35:Multiply 104559
                Single _233Multiply;// 58:NoiseDeformerSCurve->37:Multiply 104553
                Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 104255
                Single _235NaN;// 118:FloatIsNaN->1:NaN 104253
                Int32 _236Compare;// 118:FloatIsNaN->2:Compare 104252
                Int32 _237Zero;// 118:FloatIsNaN->4:Zero 104254
                Boolean _238Equal;// 118:FloatIsNaN->3:Equal 104251
                Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 104225
                Int32 _241Zero;// 48:First->2:Zero 104572
                Single _242At;// 48:First->0:At 104571
                Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 104224
                IArray[Single] _244Unit;// 43:Array2->2:Unit 104222
                Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 104574
                IArray[Single] _246Append;// 43:Array2->3:Append 104221
                _0One = One();
                _1At = At(x0, _0One);
                _2AsInt = AsInt(_1At);
                _3At = At(_13Map, _2AsInt);
                _4Constant = 4096;
                _5At = At(_23GenerateN, _2AsInt);
                _6X = X(_5At);
                _7Unit = Unit(_6X);
                _8Y = Y(_5At);
                _9Append = Append(_7Unit, _8Y);
                _10Z = Z(_5At);
                _11Append = Append(_9Append, _10Z);
                _12Zero = Zero();
                _13At = At(_11Append, _12Zero);
                _14Add = Add(_4Constant, _13At);
                _15Floor = Floor(_14Add);
                _16Constant = 255;
                _17And = And(_15Floor, _16Constant);
                _18One = One();
                _19Add = Add(_17And, _18One);
                _20And = And(_19Add, _16Constant);
                _21Pair = Pair(_17And, _20And);
                _22Floor = Floor(_14Add);
                _23AsFloat = AsFloat(_22Floor);
                _24Subtract = Subtract(_14Add, _23AsFloat);
                _25FloatOne = FloatOne();
                _26Subtract = Subtract(_24Subtract, _25FloatOne);
                _27Pair = Pair(_24Subtract, _26Subtract);
                _28Pair = Pair(_21Pair, _27Pair);
                _29PairItem2 = PairItem2(_28Pair);
                _30PairItem1 = PairItem1(_29PairItem2);
                _31PairItem2 = PairItem2(x1);
                _32PairItem1 = PairItem1(_28Pair);
                _33PairItem1 = PairItem1(_32PairItem1);
                _34At = At(_31PairItem2, _33PairItem1);
                _35Constant = 4096;
                _36X = X(_5At);
                _37Unit = Unit(_36X);
                _38Y = Y(_5At);
                _39Append = Append(_37Unit, _38Y);
                _40Z = Z(_5At);
                _41Append = Append(_39Append, _40Z);
                _42One = One();
                _43At = At(_41Append, _42One);
                _44Add = Add(_35Constant, _43At);
                _45Floor = Floor(_44Add);
                _46Constant = 255;
                _47And = And(_45Floor, _46Constant);
                _48One = One();
                _49Add = Add(_47And, _48One);
                _50And = And(_49Add, _46Constant);
                _51Pair = Pair(_47And, _50And);
                _52Floor = Floor(_44Add);
                _53AsFloat = AsFloat(_52Floor);
                _54Subtract = Subtract(_44Add, _53AsFloat);
                _55FloatOne = FloatOne();
                _56Subtract = Subtract(_54Subtract, _55FloatOne);
                _57Pair = Pair(_54Subtract, _56Subtract);
                _58Pair = Pair(_51Pair, _57Pair);
                _59PairItem1 = PairItem1(_58Pair);
                _60PairItem1 = PairItem1(_59PairItem1);
                _61Add = Add(_34At, _60PairItem1);
                _62At = At(_31PairItem2, _61Add);
                _63Constant = 4096;
                _64X = X(_5At);
                _65Unit = Unit(_64X);
                _66Y = Y(_5At);
                _67Append = Append(_65Unit, _66Y);
                _68Z = Z(_5At);
                _69Append = Append(_67Append, _68Z);
                _70Two = Two();
                _71At = At(_69Append, _70Two);
                _72Add = Add(_63Constant, _71At);
                _73Floor = Floor(_72Add);
                _74Constant = 255;
                _75And = And(_73Floor, _74Constant);
                _76One = One();
                _77Add = Add(_75And, _76One);
                _78And = And(_77Add, _74Constant);
                _79Pair = Pair(_75And, _78And);
                _80Floor = Floor(_72Add);
                _81AsFloat = AsFloat(_80Floor);
                _82Subtract = Subtract(_72Add, _81AsFloat);
                _83FloatOne = FloatOne();
                _84Subtract = Subtract(_82Subtract, _83FloatOne);
                _85Pair = Pair(_82Subtract, _84Subtract);
                _86Pair = Pair(_79Pair, _85Pair);
                _87PairItem1 = PairItem1(_86Pair);
                _88PairItem1 = PairItem1(_87PairItem1);
                _89Add = Add(_62At, _88PairItem1);
                _90At = At(_24PairItem1, _89Add);
                _91Zero = Zero();
                _92At = At(_90At, _91Zero);
                _93Multiply = Multiply(_30PairItem1, _92At);
                _94PairItem2 = PairItem2(_58Pair);
                _95PairItem1 = PairItem1(_94PairItem2);
                _96One = One();
                _97At = At(_90At, _96One);
                _98Multiply = Multiply(_95PairItem1, _97At);
                _99Add = Add(_93Multiply, _98Multiply);
                _100PairItem2 = PairItem2(_86Pair);
                _101PairItem1 = PairItem1(_100PairItem2);
                _102Two = Two();
                _103At = At(_90At, _102Two);
                _104Multiply = Multiply(_101PairItem1, _103At);
                _105Add = Add(_99Add, _104Multiply);
                _106PairItem2 = PairItem2(_29PairItem2);
                _107PairItem2 = PairItem2(_32PairItem1);
                _108At = At(_31PairItem2, _107PairItem2);
                _109Add = Add(_108At, _60PairItem1);
                _110At = At(_31PairItem2, _109Add);
                _111Add = Add(_110At, _88PairItem1);
                _112At = At(_24PairItem1, _111Add);
                _113Zero = Zero();
                _114At = At(_112At, _113Zero);
                _115Multiply = Multiply(_106PairItem2, _114At);
                _116One = One();
                _117At = At(_112At, _116One);
                _118Multiply = Multiply(_95PairItem1, _117At);
                _119Add = Add(_115Multiply, _118Multiply);
                _120Two = Two();
                _121At = At(_112At, _120Two);
                _122Multiply = Multiply(_101PairItem1, _121At);
                _123Add = Add(_119Add, _122Multiply);
                _124Constant = 3;
                _125Constant = 2;
                _126Multiply = Multiply(_125Constant, _30PairItem1);
                _127Subtract = Subtract(_124Constant, _126Multiply);
                _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                _129Multiply = Multiply(_127Subtract, _128Multiply);
                _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                _131PairItem2 = PairItem2(_59PairItem1);
                _132Add = Add(_34At, _131PairItem2);
                _133At = At(_31PairItem2, _132Add);
                _134Add = Add(_133At, _88PairItem1);
                _135At = At(_24PairItem1, _134Add);
                _136Zero = Zero();
                _137At = At(_135At, _136Zero);
                _138Multiply = Multiply(_30PairItem1, _137At);
                _139PairItem2 = PairItem2(_94PairItem2);
                _140One = One();
                _141At = At(_135At, _140One);
                _142Multiply = Multiply(_139PairItem2, _141At);
                _143Add = Add(_138Multiply, _142Multiply);
                _144Two = Two();
                _145At = At(_135At, _144Two);
                _146Multiply = Multiply(_101PairItem1, _145At);
                _147Add = Add(_143Add, _146Multiply);
                _148Add = Add(_108At, _131PairItem2);
                _149At = At(_31PairItem2, _148Add);
                _150Add = Add(_149At, _88PairItem1);
                _151At = At(_24PairItem1, _150Add);
                _152Zero = Zero();
                _153At = At(_151At, _152Zero);
                _154Multiply = Multiply(_106PairItem2, _153At);
                _155One = One();
                _156At = At(_151At, _155One);
                _157Multiply = Multiply(_139PairItem2, _156At);
                _158Add = Add(_154Multiply, _157Multiply);
                _159Two = Two();
                _160At = At(_151At, _159Two);
                _161Multiply = Multiply(_101PairItem1, _160At);
                _162Add = Add(_158Add, _161Multiply);
                _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                _164Constant = 3;
                _165Constant = 2;
                _166Multiply = Multiply(_165Constant, _95PairItem1);
                _167Subtract = Subtract(_164Constant, _166Multiply);
                _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                _169Multiply = Multiply(_167Subtract, _168Multiply);
                _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                _171PairItem2 = PairItem2(_87PairItem1);
                _172Add = Add(_62At, _171PairItem2);
                _173At = At(_24PairItem1, _172Add);
                _174Zero = Zero();
                _175At = At(_173At, _174Zero);
                _176Multiply = Multiply(_30PairItem1, _175At);
                _177One = One();
                _178At = At(_173At, _177One);
                _179Multiply = Multiply(_95PairItem1, _178At);
                _180Add = Add(_176Multiply, _179Multiply);
                _181PairItem2 = PairItem2(_100PairItem2);
                _182Two = Two();
                _183At = At(_173At, _182Two);
                _184Multiply = Multiply(_181PairItem2, _183At);
                _185Add = Add(_180Add, _184Multiply);
                _186Add = Add(_110At, _171PairItem2);
                _187At = At(_24PairItem1, _186Add);
                _188Zero = Zero();
                _189At = At(_187At, _188Zero);
                _190Multiply = Multiply(_106PairItem2, _189At);
                _191One = One();
                _192At = At(_187At, _191One);
                _193Multiply = Multiply(_95PairItem1, _192At);
                _194Add = Add(_190Multiply, _193Multiply);
                _195Two = Two();
                _196At = At(_187At, _195Two);
                _197Multiply = Multiply(_181PairItem2, _196At);
                _198Add = Add(_194Add, _197Multiply);
                _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                _200Add = Add(_133At, _171PairItem2);
                _201At = At(_24PairItem1, _200Add);
                _202Zero = Zero();
                _203At = At(_201At, _202Zero);
                _204Multiply = Multiply(_30PairItem1, _203At);
                _205One = One();
                _206At = At(_201At, _205One);
                _207Multiply = Multiply(_139PairItem2, _206At);
                _208Add = Add(_204Multiply, _207Multiply);
                _209Two = Two();
                _210At = At(_201At, _209Two);
                _211Multiply = Multiply(_181PairItem2, _210At);
                _212Add = Add(_208Add, _211Multiply);
                _213Add = Add(_149At, _171PairItem2);
                _214At = At(_24PairItem1, _213Add);
                _215Zero = Zero();
                _216At = At(_214At, _215Zero);
                _217Multiply = Multiply(_106PairItem2, _216At);
                _218One = One();
                _219At = At(_214At, _218One);
                _220Multiply = Multiply(_139PairItem2, _219At);
                _221Add = Add(_217Multiply, _220Multiply);
                _222Two = Two();
                _223At = At(_214At, _222Two);
                _224Multiply = Multiply(_181PairItem2, _223At);
                _225Add = Add(_221Add, _224Multiply);
                _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                _228Constant = 3;
                _229Constant = 2;
                _230Multiply = Multiply(_229Constant, _101PairItem1);
                _231Subtract = Subtract(_228Constant, _230Multiply);
                _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                _233Multiply = Multiply(_231Subtract, _232Multiply);
                _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                _235NaN = NaN();
                _236Compare = Compare(_234FloatLerp, _235NaN);
                _237Zero = Zero();
                _238Equal = Equal(_236Compare, _237Zero);
                _240Multiply = Multiply(_3At, if (_238Equal)
                    {
                      Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 104560
                      _239FloatZero = FloatZero();
                      _239FloatZero;
                      }else
                    {
                      _234FloatLerp;
                      });
                _241Zero = Zero();
                _242At = At(x0, _241Zero);
                _243Add = Add(_240Multiply, _242At);
                _244Unit = Unit(_243Add);
                _245Add = Add(_1At, _25FloatOne);
                _246Append = Append(_244Unit, _245Add);
                _246Append;
                });
            _27Count = Count(_26GenerateN);
            _28One = One();
            _29Subtract = Subtract(_27Count, _28One);
            _30At = At(_26GenerateN, _29Subtract);
            _31Zero = Zero();
            _32At = At(_30At, _31Zero);
            _32At;
            }, _16Y, _17Z);
        _19X = X(_15Add);
        _20Apply2 = Apply2((Single x0, Single x1) => 
          {
            Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 104215
            IArray[Single] _1Unit;// 37:Array2->2:Unit 104214
            Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 104216
            IArray[Single] _3Append;// 37:Array2->3:Append 104213
            Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 104576
            Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 104217
            Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 104231
            Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 104232
            Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 104577
            IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 104230
            Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 104579
            Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 104578
            Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 104239
            IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 104229
            Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 104584
            Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 104587
            Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 104586
            Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 104589
            Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 104590
            Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 104588
            Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 104585
            Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 104583
            Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 104580
            IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 104564
            IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 104568
            Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 104575
            IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 104210
            Int32 _27Count;// 3:LastIndex->2:Count 104209
            Int32 _28One;// 3:MinusOne->2:One 104208
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 104207
            IArray[Single] _30At;// 68:Last->0:At 104204
            Int32 _31Zero;// 69:First->2:Zero 104202
            Single _32At;// 69:First->0:At 104201
            _0FloatZero = FloatZero();
            _1Unit = Unit(_0FloatZero);
            _2FloatZero = FloatZero();
            _3Append = Append(_1Unit, _2FloatZero);
            _4AsFloat = AsFloat(numIterations);
            _5AsInt = AsInt(_4AsFloat);
            _6FloatOne = FloatOne();
            _7AsInt = AsInt(_4AsFloat);
            _8Constant = 2;
            _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
              {
                Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 104234
                _0Multiply = Multiply(_8Constant, x0);
                _0Multiply;
                });
            _10FloatOne = FloatOne();
            _11Subtract = Subtract(_10FloatOne, roughness);
            _12NegativeFloat = NegativeFloat(_11Subtract);
            _13Map = Map(_9GenerateN, (Single x0) => 
              {
                Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 104237
                _0Pow = Pow(x0, _12NegativeFloat);
                _0Pow;
                });
            _14AsFloat = AsFloat(phase);
            _15Constant = 0.005;
            _16Multiply = Multiply(frequency, _15Constant);
            _17Constant = 1200;
            _18Constant = 4800;
            _19Divide = Divide(_17Constant, _18Constant);
            _20Multiply = Multiply(_16Multiply, _19Divide);
            _21Multiply = Multiply(_14AsFloat, _20Multiply);
            _22Vector3 = Vector3(x0, x1, _21Multiply);
            _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
              {
                Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 104566
                _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                _0MultiplyByScalar;
                });
            _24PairItem1 = PairItem1(x1);
            _25FloatOne = FloatOne();
            _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
              {
                Int32 _0One;// 49:Second->2:One 104244
                Single _1At;// 49:Second->0:At 104243
                Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 104241
                Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 104227
                Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 104282
                Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 104562
                Single _6X;// 2:VectorAsArray->1:X 104293
                IArray[Single] _7Unit;// 4:Array3->2:Unit 104292
                Single _8Y;// 2:VectorAsArray->2:Y 104294
                IArray[Single] _9Append;// 4:Array3->3:Append 104291
                Single _10Z;// 2:VectorAsArray->3:Z 104295
                IArray[Single] _11Append;// 4:Array3->6:Append 104290
                Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 104308
                Single _13At;// 1:VectorComponent-ext->3:At 104285
                Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 104281
                Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 104280
                Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 104296
                Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 104279
                Int32 _18One;// 13:PlusOne->1:One 104300
                Int32 _19Add;// 13:PlusOne->0:Add 104299
                Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 104297
                Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 104278
                Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 104305
                Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104304
                Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104302
                Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104307
                Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104306
                Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 104301
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 104277
                Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 104274
                Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 104273
                IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 104569
                Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 104319
                Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 104318
                Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 104317
                Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 104329
                Single _36X;// 2:VectorAsArray->1:X 104340
                IArray[Single] _37Unit;// 4:Array3->2:Unit 104339
                Single _38Y;// 2:VectorAsArray->2:Y 104341
                IArray[Single] _39Append;// 4:Array3->3:Append 104338
                Single _40Z;// 2:VectorAsArray->3:Z 104342
                IArray[Single] _41Append;// 4:Array3->6:Append 104337
                Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 104355
                Single _43At;// 1:VectorComponent-ext->3:At 104332
                Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 104328
                Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 104327
                Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 104343
                Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 104326
                Int32 _48One;// 13:PlusOne->1:One 104347
                Int32 _49Add;// 13:PlusOne->0:Add 104346
                Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 104344
                Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 104325
                Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 104352
                Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104351
                Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104349
                Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104354
                Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104353
                Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 104348
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 104324
                Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 104321
                Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 104320
                Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 104315
                Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 104313
                Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 104365
                Single _64X;// 2:VectorAsArray->1:X 104376
                IArray[Single] _65Unit;// 4:Array3->2:Unit 104375
                Single _66Y;// 2:VectorAsArray->2:Y 104377
                IArray[Single] _67Append;// 4:Array3->3:Append 104374
                Single _68Z;// 2:VectorAsArray->3:Z 104378
                IArray[Single] _69Append;// 4:Array3->6:Append 104373
                Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 104391
                Single _71At;// 1:VectorComponent-ext->3:At 104368
                Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 104364
                Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 104363
                Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 104379
                Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 104362
                Int32 _76One;// 13:PlusOne->1:One 104383
                Int32 _77Add;// 13:PlusOne->0:Add 104382
                Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 104380
                Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 104361
                Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 104388
                Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104387
                Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104385
                Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104390
                Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104389
                Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 104384
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 104360
                Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 104357
                Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 104356
                Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 104311
                IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 104309
                Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 104266
                Single _92At;// 62:NoiseDeformerAt3-ext->4:At 104265
                Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 104264
                Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 104393
                Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 104392
                Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 104269
                Single _97At;// 62:NoiseDeformerAt3-ext->7:At 104268
                Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 104267
                Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 104263
                Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 104395
                Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 104394
                Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 104272
                Single _103At;// 62:NoiseDeformerAt3-ext->10:At 104271
                Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 104270
                Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 104262
                Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 104411
                Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 104419
                Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 104418
                Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 104416
                Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 104415
                Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 104413
                IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 104412
                Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 104404
                Single _114At;// 66:NoiseDeformerAt3-ext->4:At 104403
                Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 104402
                Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 104407
                Single _117At;// 66:NoiseDeformerAt3-ext->7:At 104406
                Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 104405
                Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 104401
                Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 104410
                Single _121At;// 66:NoiseDeformerAt3-ext->10:At 104409
                Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 104408
                Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 104400
                Single _124Constant;// 42:NoiseDeformerSCurve->0:Constant 104423
                Single _125Constant;// 42:NoiseDeformerSCurve->0:Constant 104425
                Single _126Multiply;// 42:NoiseDeformerSCurve->41:Multiply 104424
                Single _127Subtract;// 42:NoiseDeformerSCurve->39:Subtract 104422
                Single _128Multiply;// 42:NoiseDeformerSCurve->35:Multiply 104427
                Single _129Multiply;// 42:NoiseDeformerSCurve->37:Multiply 104421
                Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 104257
                Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 104449
                Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 104448
                Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 104447
                Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 104445
                IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 104444
                Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 104437
                Single _137At;// 72:NoiseDeformerAt3-ext->4:At 104436
                Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 104435
                Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 104450
                Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 104440
                Single _141At;// 72:NoiseDeformerAt3-ext->7:At 104439
                Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 104438
                Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 104434
                Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 104443
                Single _145At;// 72:NoiseDeformerAt3-ext->10:At 104442
                Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 104441
                Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 104433
                Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 104470
                Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 104469
                Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 104467
                IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 104466
                Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 104459
                Single _153At;// 75:NoiseDeformerAt3-ext->4:At 104458
                Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 104457
                Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 104462
                Single _156At;// 75:NoiseDeformerAt3-ext->7:At 104461
                Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 104460
                Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 104456
                Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 104465
                Single _160At;// 75:NoiseDeformerAt3-ext->10:At 104464
                Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 104463
                Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 104455
                Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 104428
                Single _164Constant;// 56:NoiseDeformerSCurve->0:Constant 104474
                Single _165Constant;// 56:NoiseDeformerSCurve->0:Constant 104476
                Single _166Multiply;// 56:NoiseDeformerSCurve->41:Multiply 104475
                Single _167Subtract;// 56:NoiseDeformerSCurve->39:Subtract 104473
                Single _168Multiply;// 56:NoiseDeformerSCurve->35:Multiply 104478
                Single _169Multiply;// 56:NoiseDeformerSCurve->37:Multiply 104472
                Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 104256
                Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 104498
                Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 104497
                IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 104496
                Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 104489
                Single _175At;// 82:NoiseDeformerAt3-ext->4:At 104488
                Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 104487
                Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 104492
                Single _178At;// 82:NoiseDeformerAt3-ext->7:At 104491
                Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 104490
                Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 104486
                Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 104499
                Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 104495
                Single _183At;// 82:NoiseDeformerAt3-ext->10:At 104494
                Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 104493
                Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 104485
                Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 104516
                IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 104515
                Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 104508
                Single _189At;// 86:NoiseDeformerAt3-ext->4:At 104507
                Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 104506
                Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 104511
                Single _192At;// 86:NoiseDeformerAt3-ext->7:At 104510
                Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 104509
                Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 104505
                Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 104514
                Single _196At;// 86:NoiseDeformerAt3-ext->10:At 104513
                Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 104512
                Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 104504
                Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 104480
                Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 104534
                IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 104533
                Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 104526
                Single _203At;// 92:NoiseDeformerAt3-ext->4:At 104525
                Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 104524
                Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 104529
                Single _206At;// 92:NoiseDeformerAt3-ext->7:At 104528
                Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 104527
                Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 104523
                Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 104532
                Single _210At;// 92:NoiseDeformerAt3-ext->10:At 104531
                Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 104530
                Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 104522
                Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 104551
                IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 104550
                Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 104543
                Single _216At;// 96:NoiseDeformerAt3-ext->4:At 104542
                Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 104541
                Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 104546
                Single _219At;// 96:NoiseDeformerAt3-ext->7:At 104545
                Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 104544
                Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 104540
                Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 104549
                Single _223At;// 96:NoiseDeformerAt3-ext->10:At 104548
                Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 104547
                Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 104539
                Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 104517
                Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 104479
                Single _228Constant;// 58:NoiseDeformerSCurve->0:Constant 104555
                Single _229Constant;// 58:NoiseDeformerSCurve->0:Constant 104557
                Single _230Multiply;// 58:NoiseDeformerSCurve->41:Multiply 104556
                Single _231Subtract;// 58:NoiseDeformerSCurve->39:Subtract 104554
                Single _232Multiply;// 58:NoiseDeformerSCurve->35:Multiply 104559
                Single _233Multiply;// 58:NoiseDeformerSCurve->37:Multiply 104553
                Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 104255
                Single _235NaN;// 118:FloatIsNaN->1:NaN 104253
                Int32 _236Compare;// 118:FloatIsNaN->2:Compare 104252
                Int32 _237Zero;// 118:FloatIsNaN->4:Zero 104254
                Boolean _238Equal;// 118:FloatIsNaN->3:Equal 104251
                Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 104225
                Int32 _241Zero;// 48:First->2:Zero 104572
                Single _242At;// 48:First->0:At 104571
                Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 104224
                IArray[Single] _244Unit;// 43:Array2->2:Unit 104222
                Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 104574
                IArray[Single] _246Append;// 43:Array2->3:Append 104221
                _0One = One();
                _1At = At(x0, _0One);
                _2AsInt = AsInt(_1At);
                _3At = At(_13Map, _2AsInt);
                _4Constant = 4096;
                _5At = At(_23GenerateN, _2AsInt);
                _6X = X(_5At);
                _7Unit = Unit(_6X);
                _8Y = Y(_5At);
                _9Append = Append(_7Unit, _8Y);
                _10Z = Z(_5At);
                _11Append = Append(_9Append, _10Z);
                _12Zero = Zero();
                _13At = At(_11Append, _12Zero);
                _14Add = Add(_4Constant, _13At);
                _15Floor = Floor(_14Add);
                _16Constant = 255;
                _17And = And(_15Floor, _16Constant);
                _18One = One();
                _19Add = Add(_17And, _18One);
                _20And = And(_19Add, _16Constant);
                _21Pair = Pair(_17And, _20And);
                _22Floor = Floor(_14Add);
                _23AsFloat = AsFloat(_22Floor);
                _24Subtract = Subtract(_14Add, _23AsFloat);
                _25FloatOne = FloatOne();
                _26Subtract = Subtract(_24Subtract, _25FloatOne);
                _27Pair = Pair(_24Subtract, _26Subtract);
                _28Pair = Pair(_21Pair, _27Pair);
                _29PairItem2 = PairItem2(_28Pair);
                _30PairItem1 = PairItem1(_29PairItem2);
                _31PairItem2 = PairItem2(x1);
                _32PairItem1 = PairItem1(_28Pair);
                _33PairItem1 = PairItem1(_32PairItem1);
                _34At = At(_31PairItem2, _33PairItem1);
                _35Constant = 4096;
                _36X = X(_5At);
                _37Unit = Unit(_36X);
                _38Y = Y(_5At);
                _39Append = Append(_37Unit, _38Y);
                _40Z = Z(_5At);
                _41Append = Append(_39Append, _40Z);
                _42One = One();
                _43At = At(_41Append, _42One);
                _44Add = Add(_35Constant, _43At);
                _45Floor = Floor(_44Add);
                _46Constant = 255;
                _47And = And(_45Floor, _46Constant);
                _48One = One();
                _49Add = Add(_47And, _48One);
                _50And = And(_49Add, _46Constant);
                _51Pair = Pair(_47And, _50And);
                _52Floor = Floor(_44Add);
                _53AsFloat = AsFloat(_52Floor);
                _54Subtract = Subtract(_44Add, _53AsFloat);
                _55FloatOne = FloatOne();
                _56Subtract = Subtract(_54Subtract, _55FloatOne);
                _57Pair = Pair(_54Subtract, _56Subtract);
                _58Pair = Pair(_51Pair, _57Pair);
                _59PairItem1 = PairItem1(_58Pair);
                _60PairItem1 = PairItem1(_59PairItem1);
                _61Add = Add(_34At, _60PairItem1);
                _62At = At(_31PairItem2, _61Add);
                _63Constant = 4096;
                _64X = X(_5At);
                _65Unit = Unit(_64X);
                _66Y = Y(_5At);
                _67Append = Append(_65Unit, _66Y);
                _68Z = Z(_5At);
                _69Append = Append(_67Append, _68Z);
                _70Two = Two();
                _71At = At(_69Append, _70Two);
                _72Add = Add(_63Constant, _71At);
                _73Floor = Floor(_72Add);
                _74Constant = 255;
                _75And = And(_73Floor, _74Constant);
                _76One = One();
                _77Add = Add(_75And, _76One);
                _78And = And(_77Add, _74Constant);
                _79Pair = Pair(_75And, _78And);
                _80Floor = Floor(_72Add);
                _81AsFloat = AsFloat(_80Floor);
                _82Subtract = Subtract(_72Add, _81AsFloat);
                _83FloatOne = FloatOne();
                _84Subtract = Subtract(_82Subtract, _83FloatOne);
                _85Pair = Pair(_82Subtract, _84Subtract);
                _86Pair = Pair(_79Pair, _85Pair);
                _87PairItem1 = PairItem1(_86Pair);
                _88PairItem1 = PairItem1(_87PairItem1);
                _89Add = Add(_62At, _88PairItem1);
                _90At = At(_24PairItem1, _89Add);
                _91Zero = Zero();
                _92At = At(_90At, _91Zero);
                _93Multiply = Multiply(_30PairItem1, _92At);
                _94PairItem2 = PairItem2(_58Pair);
                _95PairItem1 = PairItem1(_94PairItem2);
                _96One = One();
                _97At = At(_90At, _96One);
                _98Multiply = Multiply(_95PairItem1, _97At);
                _99Add = Add(_93Multiply, _98Multiply);
                _100PairItem2 = PairItem2(_86Pair);
                _101PairItem1 = PairItem1(_100PairItem2);
                _102Two = Two();
                _103At = At(_90At, _102Two);
                _104Multiply = Multiply(_101PairItem1, _103At);
                _105Add = Add(_99Add, _104Multiply);
                _106PairItem2 = PairItem2(_29PairItem2);
                _107PairItem2 = PairItem2(_32PairItem1);
                _108At = At(_31PairItem2, _107PairItem2);
                _109Add = Add(_108At, _60PairItem1);
                _110At = At(_31PairItem2, _109Add);
                _111Add = Add(_110At, _88PairItem1);
                _112At = At(_24PairItem1, _111Add);
                _113Zero = Zero();
                _114At = At(_112At, _113Zero);
                _115Multiply = Multiply(_106PairItem2, _114At);
                _116One = One();
                _117At = At(_112At, _116One);
                _118Multiply = Multiply(_95PairItem1, _117At);
                _119Add = Add(_115Multiply, _118Multiply);
                _120Two = Two();
                _121At = At(_112At, _120Two);
                _122Multiply = Multiply(_101PairItem1, _121At);
                _123Add = Add(_119Add, _122Multiply);
                _124Constant = 3;
                _125Constant = 2;
                _126Multiply = Multiply(_125Constant, _30PairItem1);
                _127Subtract = Subtract(_124Constant, _126Multiply);
                _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                _129Multiply = Multiply(_127Subtract, _128Multiply);
                _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                _131PairItem2 = PairItem2(_59PairItem1);
                _132Add = Add(_34At, _131PairItem2);
                _133At = At(_31PairItem2, _132Add);
                _134Add = Add(_133At, _88PairItem1);
                _135At = At(_24PairItem1, _134Add);
                _136Zero = Zero();
                _137At = At(_135At, _136Zero);
                _138Multiply = Multiply(_30PairItem1, _137At);
                _139PairItem2 = PairItem2(_94PairItem2);
                _140One = One();
                _141At = At(_135At, _140One);
                _142Multiply = Multiply(_139PairItem2, _141At);
                _143Add = Add(_138Multiply, _142Multiply);
                _144Two = Two();
                _145At = At(_135At, _144Two);
                _146Multiply = Multiply(_101PairItem1, _145At);
                _147Add = Add(_143Add, _146Multiply);
                _148Add = Add(_108At, _131PairItem2);
                _149At = At(_31PairItem2, _148Add);
                _150Add = Add(_149At, _88PairItem1);
                _151At = At(_24PairItem1, _150Add);
                _152Zero = Zero();
                _153At = At(_151At, _152Zero);
                _154Multiply = Multiply(_106PairItem2, _153At);
                _155One = One();
                _156At = At(_151At, _155One);
                _157Multiply = Multiply(_139PairItem2, _156At);
                _158Add = Add(_154Multiply, _157Multiply);
                _159Two = Two();
                _160At = At(_151At, _159Two);
                _161Multiply = Multiply(_101PairItem1, _160At);
                _162Add = Add(_158Add, _161Multiply);
                _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                _164Constant = 3;
                _165Constant = 2;
                _166Multiply = Multiply(_165Constant, _95PairItem1);
                _167Subtract = Subtract(_164Constant, _166Multiply);
                _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                _169Multiply = Multiply(_167Subtract, _168Multiply);
                _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                _171PairItem2 = PairItem2(_87PairItem1);
                _172Add = Add(_62At, _171PairItem2);
                _173At = At(_24PairItem1, _172Add);
                _174Zero = Zero();
                _175At = At(_173At, _174Zero);
                _176Multiply = Multiply(_30PairItem1, _175At);
                _177One = One();
                _178At = At(_173At, _177One);
                _179Multiply = Multiply(_95PairItem1, _178At);
                _180Add = Add(_176Multiply, _179Multiply);
                _181PairItem2 = PairItem2(_100PairItem2);
                _182Two = Two();
                _183At = At(_173At, _182Two);
                _184Multiply = Multiply(_181PairItem2, _183At);
                _185Add = Add(_180Add, _184Multiply);
                _186Add = Add(_110At, _171PairItem2);
                _187At = At(_24PairItem1, _186Add);
                _188Zero = Zero();
                _189At = At(_187At, _188Zero);
                _190Multiply = Multiply(_106PairItem2, _189At);
                _191One = One();
                _192At = At(_187At, _191One);
                _193Multiply = Multiply(_95PairItem1, _192At);
                _194Add = Add(_190Multiply, _193Multiply);
                _195Two = Two();
                _196At = At(_187At, _195Two);
                _197Multiply = Multiply(_181PairItem2, _196At);
                _198Add = Add(_194Add, _197Multiply);
                _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                _200Add = Add(_133At, _171PairItem2);
                _201At = At(_24PairItem1, _200Add);
                _202Zero = Zero();
                _203At = At(_201At, _202Zero);
                _204Multiply = Multiply(_30PairItem1, _203At);
                _205One = One();
                _206At = At(_201At, _205One);
                _207Multiply = Multiply(_139PairItem2, _206At);
                _208Add = Add(_204Multiply, _207Multiply);
                _209Two = Two();
                _210At = At(_201At, _209Two);
                _211Multiply = Multiply(_181PairItem2, _210At);
                _212Add = Add(_208Add, _211Multiply);
                _213Add = Add(_149At, _171PairItem2);
                _214At = At(_24PairItem1, _213Add);
                _215Zero = Zero();
                _216At = At(_214At, _215Zero);
                _217Multiply = Multiply(_106PairItem2, _216At);
                _218One = One();
                _219At = At(_214At, _218One);
                _220Multiply = Multiply(_139PairItem2, _219At);
                _221Add = Add(_217Multiply, _220Multiply);
                _222Two = Two();
                _223At = At(_214At, _222Two);
                _224Multiply = Multiply(_181PairItem2, _223At);
                _225Add = Add(_221Add, _224Multiply);
                _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                _228Constant = 3;
                _229Constant = 2;
                _230Multiply = Multiply(_229Constant, _101PairItem1);
                _231Subtract = Subtract(_228Constant, _230Multiply);
                _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                _233Multiply = Multiply(_231Subtract, _232Multiply);
                _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                _235NaN = NaN();
                _236Compare = Compare(_234FloatLerp, _235NaN);
                _237Zero = Zero();
                _238Equal = Equal(_236Compare, _237Zero);
                _240Multiply = Multiply(_3At, if (_238Equal)
                    {
                      Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 104560
                      _239FloatZero = FloatZero();
                      _239FloatZero;
                      }else
                    {
                      _234FloatLerp;
                      });
                _241Zero = Zero();
                _242At = At(x0, _241Zero);
                _243Add = Add(_240Multiply, _242At);
                _244Unit = Unit(_243Add);
                _245Add = Add(_1At, _25FloatOne);
                _246Append = Append(_244Unit, _245Add);
                _246Append;
                });
            _27Count = Count(_26GenerateN);
            _28One = One();
            _29Subtract = Subtract(_27Count, _28One);
            _30At = At(_26GenerateN, _29Subtract);
            _31Zero = Zero();
            _32At = At(_30At, _31Zero);
            _32At;
            }, _19X, _17Z);
        _21Apply2 = Apply2((Single x0, Single x1) => 
          {
            Single _0FloatZero;// 27:NoiseDeformerfBm1-ext->33:FloatZero 104215
            IArray[Single] _1Unit;// 37:Array2->2:Unit 104214
            Single _2FloatZero;// 27:NoiseDeformerfBm1-ext->38:FloatZero 104216
            IArray[Single] _3Append;// 37:Array2->3:Append 104213
            Single _4AsFloat;// 0:NoiseDeformer-ext->13:AsFloat 104576
            Int32 _5AsInt;// 27:NoiseDeformerfBm1-ext->21:AsInt 104217
            Single _6FloatOne;// 27:NoiseDeformerfBm1-ext->5:FloatOne 104231
            Int32 _7AsInt;// 27:NoiseDeformerfBm1-ext->8:AsInt 104232
            Single _8Constant;// 0:NoiseDeformer-ext->0:Constant 104577
            IArray[Single] _9GenerateN;// 27:NoiseDeformerfBm1-ext->7:GenerateN 104230
            Single _10FloatOne;// 0:NoiseDeformer-ext->46:FloatOne 104579
            Single _11Subtract;// 0:NoiseDeformer-ext->3:Subtract 104578
            Single _12NegativeFloat;// 27:NoiseDeformerfBm1-ext->16:NegativeFloat 104239
            IArray[Single] _13Map;// 27:NoiseDeformerfBm1-ext->14:Map 104229
            Single _14AsFloat;// 0:NoiseDeformer-ext->43:AsFloat 104584
            Single _15Constant;// 0:NoiseDeformer-ext->0:Constant 104587
            Single _16Multiply;// 0:NoiseDeformer-ext->30:Multiply 104586
            Single _17Constant;// 0:NoiseDeformer-ext->0:Constant 104589
            Single _18Constant;// 0:NoiseDeformer-ext->0:Constant 104590
            Single _19Divide;// 0:NoiseDeformer-ext->31:Divide 104588
            Single _20Multiply;// 0:NoiseDeformer-ext->39:Multiply 104585
            Single _21Multiply;// 0:NoiseDeformer-ext->38:Multiply 104583
            Vector3 _22Vector3;// 0:NoiseDeformer-ext->0:Vector3 104580
            IArray[Vector3] _23GenerateN;// 27:NoiseDeformerfBm1-ext->30:GenerateN 104564
            IArray[IArray[Single]] _24PairItem1;// 27:NoiseDeformerfBm1-ext->72:PairItem1 104568
            Single _25FloatOne;// 27:NoiseDeformerfBm1-ext->53:FloatOne 104575
            IArray[IArray[Single]] _26GenerateN;// 27:NoiseDeformerfBm1-ext->35:GenerateN 104210
            Int32 _27Count;// 3:LastIndex->2:Count 104209
            Int32 _28One;// 3:MinusOne->2:One 104208
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 104207
            IArray[Single] _30At;// 68:Last->0:At 104204
            Int32 _31Zero;// 69:First->2:Zero 104202
            Single _32At;// 69:First->0:At 104201
            _0FloatZero = FloatZero();
            _1Unit = Unit(_0FloatZero);
            _2FloatZero = FloatZero();
            _3Append = Append(_1Unit, _2FloatZero);
            _4AsFloat = AsFloat(numIterations);
            _5AsInt = AsInt(_4AsFloat);
            _6FloatOne = FloatOne();
            _7AsInt = AsInt(_4AsFloat);
            _8Constant = 2;
            _9GenerateN = GenerateN(_6FloatOne, _7AsInt, (Single x0) => 
              {
                Single _0Multiply;// 27:NoiseDeformerfBm1-ext->9:Multiply 104234
                _0Multiply = Multiply(_8Constant, x0);
                _0Multiply;
                });
            _10FloatOne = FloatOne();
            _11Subtract = Subtract(_10FloatOne, roughness);
            _12NegativeFloat = NegativeFloat(_11Subtract);
            _13Map = Map(_9GenerateN, (Single x0) => 
              {
                Single _0Pow;// 27:NoiseDeformerfBm1-ext->15:Pow 104237
                _0Pow = Pow(x0, _12NegativeFloat);
                _0Pow;
                });
            _14AsFloat = AsFloat(phase);
            _15Constant = 0.005;
            _16Multiply = Multiply(frequency, _15Constant);
            _17Constant = 1200;
            _18Constant = 4800;
            _19Divide = Divide(_17Constant, _18Constant);
            _20Multiply = Multiply(_16Multiply, _19Divide);
            _21Multiply = Multiply(_14AsFloat, _20Multiply);
            _22Vector3 = Vector3(x0, x1, _21Multiply);
            _23GenerateN = GenerateN(_22Vector3, _5AsInt, (Vector3 x0) => 
              {
                Vector3 _0MultiplyByScalar;// 27:NoiseDeformerfBm1-ext->22:MultiplyByScalar 104566
                _0MultiplyByScalar = MultiplyByScalar(x0, _8Constant);
                _0MultiplyByScalar;
                });
            _24PairItem1 = PairItem1(x1);
            _25FloatOne = FloatOne();
            _26GenerateN = GenerateN(_3Append, _5AsInt, (IArray[Single] x0) => 
              {
                Int32 _0One;// 49:Second->2:One 104244
                Single _1At;// 49:Second->0:At 104243
                Int32 _2AsInt;// 27:NoiseDeformerfBm1-ext->55:AsInt 104241
                Single _3At;// 27:NoiseDeformerfBm1-ext->60:At 104227
                Single _4Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 104282
                Vector3 _5At;// 27:NoiseDeformerfBm1-ext->54:At 104562
                Single _6X;// 2:VectorAsArray->1:X 104293
                IArray[Single] _7Unit;// 4:Array3->2:Unit 104292
                Single _8Y;// 2:VectorAsArray->2:Y 104294
                IArray[Single] _9Append;// 4:Array3->3:Append 104291
                Single _10Z;// 2:VectorAsArray->3:Z 104295
                IArray[Single] _11Append;// 4:Array3->6:Append 104290
                Int32 _12Zero;// 77:NoiseDeformerNoise3-ext->3:Zero 104308
                Single _13At;// 1:VectorComponent-ext->3:At 104285
                Single _14Add;// 25:NoiseDeformerNoiseVarSetup-ext->5:Add 104281
                Int32 _15Floor;// 25:NoiseDeformerNoiseVarSetup-ext->7:Floor 104280
                Int32 _16Constant;// 25:NoiseDeformerNoiseVarSetup-ext->0:Constant 104296
                Int32 _17And;// 25:NoiseDeformerNoiseVarSetup-ext->8:And 104279
                Int32 _18One;// 13:PlusOne->1:One 104300
                Int32 _19Add;// 13:PlusOne->0:Add 104299
                Int32 _20And;// 25:NoiseDeformerNoiseVarSetup-ext->14:And 104297
                Tuple[Int32, Int32] _21Pair;// 25:NoiseDeformerNoiseVarSetup-ext->3:Pair 104278
                Int32 _22Floor;// 25:NoiseDeformerNoiseVarSetup-ext->22:Floor 104305
                Single _23AsFloat;// 25:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104304
                Single _24Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104302
                Single _25FloatOne;// 25:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104307
                Single _26Subtract;// 25:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104306
                Tuple[Single, Single] _27Pair;// 25:NoiseDeformerNoiseVarSetup-ext->25:Pair 104301
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _28Pair;// 25:NoiseDeformerNoiseVarSetup-ext->26:Pair 104277
                Tuple[Single, Single] _29PairItem2;// 77:NoiseDeformerNoise3-ext->10:PairItem2 104274
                Single _30PairItem1;// 77:NoiseDeformerNoise3-ext->12:PairItem1 104273
                IArray[Int32] _31PairItem2;// 27:NoiseDeformerfBm1-ext->73:PairItem2 104569
                Tuple[Int32, Int32] _32PairItem1;// 77:NoiseDeformerNoise3-ext->8:PairItem1 104319
                Int32 _33PairItem1;// 77:NoiseDeformerNoise3-ext->9:PairItem1 104318
                Int32 _34At;// 77:NoiseDeformerNoise3-ext->31:At 104317
                Single _35Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 104329
                Single _36X;// 2:VectorAsArray->1:X 104340
                IArray[Single] _37Unit;// 4:Array3->2:Unit 104339
                Single _38Y;// 2:VectorAsArray->2:Y 104341
                IArray[Single] _39Append;// 4:Array3->3:Append 104338
                Single _40Z;// 2:VectorAsArray->3:Z 104342
                IArray[Single] _41Append;// 4:Array3->6:Append 104337
                Int32 _42One;// 77:NoiseDeformerNoise3-ext->4:One 104355
                Single _43At;// 1:VectorComponent-ext->3:At 104332
                Single _44Add;// 6:NoiseDeformerNoiseVarSetup-ext->5:Add 104328
                Int32 _45Floor;// 6:NoiseDeformerNoiseVarSetup-ext->7:Floor 104327
                Int32 _46Constant;// 6:NoiseDeformerNoiseVarSetup-ext->0:Constant 104343
                Int32 _47And;// 6:NoiseDeformerNoiseVarSetup-ext->8:And 104326
                Int32 _48One;// 13:PlusOne->1:One 104347
                Int32 _49Add;// 13:PlusOne->0:Add 104346
                Int32 _50And;// 6:NoiseDeformerNoiseVarSetup-ext->14:And 104344
                Tuple[Int32, Int32] _51Pair;// 6:NoiseDeformerNoiseVarSetup-ext->3:Pair 104325
                Int32 _52Floor;// 6:NoiseDeformerNoiseVarSetup-ext->22:Floor 104352
                Single _53AsFloat;// 6:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104351
                Single _54Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104349
                Single _55FloatOne;// 6:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104354
                Single _56Subtract;// 6:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104353
                Tuple[Single, Single] _57Pair;// 6:NoiseDeformerNoiseVarSetup-ext->25:Pair 104348
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _58Pair;// 6:NoiseDeformerNoiseVarSetup-ext->26:Pair 104324
                Tuple[Int32, Int32] _59PairItem1;// 77:NoiseDeformerNoise3-ext->20:PairItem1 104321
                Int32 _60PairItem1;// 77:NoiseDeformerNoise3-ext->19:PairItem1 104320
                Int32 _61Add;// 77:NoiseDeformerNoise3-ext->33:Add 104315
                Int32 _62At;// 77:NoiseDeformerNoise3-ext->107:At 104313
                Single _63Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 104365
                Single _64X;// 2:VectorAsArray->1:X 104376
                IArray[Single] _65Unit;// 4:Array3->2:Unit 104375
                Single _66Y;// 2:VectorAsArray->2:Y 104377
                IArray[Single] _67Append;// 4:Array3->3:Append 104374
                Single _68Z;// 2:VectorAsArray->3:Z 104378
                IArray[Single] _69Append;// 4:Array3->6:Append 104373
                Int32 _70Two;// 77:NoiseDeformerNoise3-ext->5:Two 104391
                Single _71At;// 1:VectorComponent-ext->3:At 104368
                Single _72Add;// 7:NoiseDeformerNoiseVarSetup-ext->5:Add 104364
                Int32 _73Floor;// 7:NoiseDeformerNoiseVarSetup-ext->7:Floor 104363
                Int32 _74Constant;// 7:NoiseDeformerNoiseVarSetup-ext->0:Constant 104379
                Int32 _75And;// 7:NoiseDeformerNoiseVarSetup-ext->8:And 104362
                Int32 _76One;// 13:PlusOne->1:One 104383
                Int32 _77Add;// 13:PlusOne->0:Add 104382
                Int32 _78And;// 7:NoiseDeformerNoiseVarSetup-ext->14:And 104380
                Tuple[Int32, Int32] _79Pair;// 7:NoiseDeformerNoiseVarSetup-ext->3:Pair 104361
                Int32 _80Floor;// 7:NoiseDeformerNoiseVarSetup-ext->22:Floor 104388
                Single _81AsFloat;// 7:NoiseDeformerNoiseVarSetup-ext->17:AsFloat 104387
                Single _82Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->16:Subtract 104385
                Single _83FloatOne;// 7:NoiseDeformerNoiseVarSetup-ext->20:FloatOne 104390
                Single _84Subtract;// 7:NoiseDeformerNoiseVarSetup-ext->19:Subtract 104389
                Tuple[Single, Single] _85Pair;// 7:NoiseDeformerNoiseVarSetup-ext->25:Pair 104384
                Tuple[Tuple[Int32, Int32], Tuple[Single, Single]] _86Pair;// 7:NoiseDeformerNoiseVarSetup-ext->26:Pair 104360
                Tuple[Int32, Int32] _87PairItem1;// 77:NoiseDeformerNoise3-ext->51:PairItem1 104357
                Int32 _88PairItem1;// 77:NoiseDeformerNoise3-ext->53:PairItem1 104356
                Int32 _89Add;// 77:NoiseDeformerNoise3-ext->61:Add 104311
                IArray[Single] _90At;// 77:NoiseDeformerNoise3-ext->60:At 104309
                Int32 _91Zero;// 62:NoiseDeformerAt3-ext->5:Zero 104266
                Single _92At;// 62:NoiseDeformerAt3-ext->4:At 104265
                Single _93Multiply;// 62:NoiseDeformerAt3-ext->11:Multiply 104264
                Tuple[Single, Single] _94PairItem2;// 77:NoiseDeformerNoise3-ext->23:PairItem2 104393
                Single _95PairItem1;// 77:NoiseDeformerNoise3-ext->18:PairItem1 104392
                Int32 _96One;// 62:NoiseDeformerAt3-ext->8:One 104269
                Single _97At;// 62:NoiseDeformerAt3-ext->7:At 104268
                Single _98Multiply;// 62:NoiseDeformerAt3-ext->12:Multiply 104267
                Single _99Add;// 62:NoiseDeformerAt3-ext->6:Add 104263
                Tuple[Single, Single] _100PairItem2;// 77:NoiseDeformerNoise3-ext->48:PairItem2 104395
                Single _101PairItem1;// 77:NoiseDeformerNoise3-ext->52:PairItem1 104394
                Int32 _102Two;// 62:NoiseDeformerAt3-ext->9:Two 104272
                Single _103At;// 62:NoiseDeformerAt3-ext->10:At 104271
                Single _104Multiply;// 62:NoiseDeformerAt3-ext->13:Multiply 104270
                Single _105Add;// 62:NoiseDeformerAt3-ext->14:Add 104262
                Single _106PairItem2;// 77:NoiseDeformerNoise3-ext->13:PairItem2 104411
                Int32 _107PairItem2;// 77:NoiseDeformerNoise3-ext->11:PairItem2 104419
                Int32 _108At;// 77:NoiseDeformerNoise3-ext->32:At 104418
                Int32 _109Add;// 77:NoiseDeformerNoise3-ext->34:Add 104416
                Int32 _110At;// 77:NoiseDeformerNoise3-ext->113:At 104415
                Int32 _111Add;// 77:NoiseDeformerNoise3-ext->65:Add 104413
                IArray[Single] _112At;// 77:NoiseDeformerNoise3-ext->64:At 104412
                Int32 _113Zero;// 66:NoiseDeformerAt3-ext->5:Zero 104404
                Single _114At;// 66:NoiseDeformerAt3-ext->4:At 104403
                Single _115Multiply;// 66:NoiseDeformerAt3-ext->11:Multiply 104402
                Int32 _116One;// 66:NoiseDeformerAt3-ext->8:One 104407
                Single _117At;// 66:NoiseDeformerAt3-ext->7:At 104406
                Single _118Multiply;// 66:NoiseDeformerAt3-ext->12:Multiply 104405
                Single _119Add;// 66:NoiseDeformerAt3-ext->6:Add 104401
                Int32 _120Two;// 66:NoiseDeformerAt3-ext->9:Two 104410
                Single _121At;// 66:NoiseDeformerAt3-ext->10:At 104409
                Single _122Multiply;// 66:NoiseDeformerAt3-ext->13:Multiply 104408
                Single _123Add;// 66:NoiseDeformerAt3-ext->14:Add 104400
                Single _124Constant;// 42:NoiseDeformerSCurve->0:Constant 104423
                Single _125Constant;// 42:NoiseDeformerSCurve->0:Constant 104425
                Single _126Multiply;// 42:NoiseDeformerSCurve->41:Multiply 104424
                Single _127Subtract;// 42:NoiseDeformerSCurve->39:Subtract 104422
                Single _128Multiply;// 42:NoiseDeformerSCurve->35:Multiply 104427
                Single _129Multiply;// 42:NoiseDeformerSCurve->37:Multiply 104421
                Single _130FloatLerp;// 77:NoiseDeformerNoise3-ext->68:FloatLerp 104257
                Int32 _131PairItem2;// 77:NoiseDeformerNoise3-ext->22:PairItem2 104449
                Int32 _132Add;// 77:NoiseDeformerNoise3-ext->38:Add 104448
                Int32 _133At;// 77:NoiseDeformerNoise3-ext->114:At 104447
                Int32 _134Add;// 77:NoiseDeformerNoise3-ext->71:Add 104445
                IArray[Single] _135At;// 77:NoiseDeformerNoise3-ext->70:At 104444
                Int32 _136Zero;// 72:NoiseDeformerAt3-ext->5:Zero 104437
                Single _137At;// 72:NoiseDeformerAt3-ext->4:At 104436
                Single _138Multiply;// 72:NoiseDeformerAt3-ext->11:Multiply 104435
                Single _139PairItem2;// 77:NoiseDeformerNoise3-ext->21:PairItem2 104450
                Int32 _140One;// 72:NoiseDeformerAt3-ext->8:One 104440
                Single _141At;// 72:NoiseDeformerAt3-ext->7:At 104439
                Single _142Multiply;// 72:NoiseDeformerAt3-ext->12:Multiply 104438
                Single _143Add;// 72:NoiseDeformerAt3-ext->6:Add 104434
                Int32 _144Two;// 72:NoiseDeformerAt3-ext->9:Two 104443
                Single _145At;// 72:NoiseDeformerAt3-ext->10:At 104442
                Single _146Multiply;// 72:NoiseDeformerAt3-ext->13:Multiply 104441
                Single _147Add;// 72:NoiseDeformerAt3-ext->14:Add 104433
                Int32 _148Add;// 77:NoiseDeformerNoise3-ext->39:Add 104470
                Int32 _149At;// 77:NoiseDeformerNoise3-ext->115:At 104469
                Int32 _150Add;// 77:NoiseDeformerNoise3-ext->74:Add 104467
                IArray[Single] _151At;// 77:NoiseDeformerNoise3-ext->76:At 104466
                Int32 _152Zero;// 75:NoiseDeformerAt3-ext->5:Zero 104459
                Single _153At;// 75:NoiseDeformerAt3-ext->4:At 104458
                Single _154Multiply;// 75:NoiseDeformerAt3-ext->11:Multiply 104457
                Int32 _155One;// 75:NoiseDeformerAt3-ext->8:One 104462
                Single _156At;// 75:NoiseDeformerAt3-ext->7:At 104461
                Single _157Multiply;// 75:NoiseDeformerAt3-ext->12:Multiply 104460
                Single _158Add;// 75:NoiseDeformerAt3-ext->6:Add 104456
                Int32 _159Two;// 75:NoiseDeformerAt3-ext->9:Two 104465
                Single _160At;// 75:NoiseDeformerAt3-ext->10:At 104464
                Single _161Multiply;// 75:NoiseDeformerAt3-ext->13:Multiply 104463
                Single _162Add;// 75:NoiseDeformerAt3-ext->14:Add 104455
                Single _163FloatLerp;// 77:NoiseDeformerNoise3-ext->78:FloatLerp 104428
                Single _164Constant;// 56:NoiseDeformerSCurve->0:Constant 104474
                Single _165Constant;// 56:NoiseDeformerSCurve->0:Constant 104476
                Single _166Multiply;// 56:NoiseDeformerSCurve->41:Multiply 104475
                Single _167Subtract;// 56:NoiseDeformerSCurve->39:Subtract 104473
                Single _168Multiply;// 56:NoiseDeformerSCurve->35:Multiply 104478
                Single _169Multiply;// 56:NoiseDeformerSCurve->37:Multiply 104472
                Single _170FloatLerp;// 77:NoiseDeformerNoise3-ext->80:FloatLerp 104256
                Int32 _171PairItem2;// 77:NoiseDeformerNoise3-ext->49:PairItem2 104498
                Int32 _172Add;// 77:NoiseDeformerNoise3-ext->84:Add 104497
                IArray[Single] _173At;// 77:NoiseDeformerNoise3-ext->83:At 104496
                Int32 _174Zero;// 82:NoiseDeformerAt3-ext->5:Zero 104489
                Single _175At;// 82:NoiseDeformerAt3-ext->4:At 104488
                Single _176Multiply;// 82:NoiseDeformerAt3-ext->11:Multiply 104487
                Int32 _177One;// 82:NoiseDeformerAt3-ext->8:One 104492
                Single _178At;// 82:NoiseDeformerAt3-ext->7:At 104491
                Single _179Multiply;// 82:NoiseDeformerAt3-ext->12:Multiply 104490
                Single _180Add;// 82:NoiseDeformerAt3-ext->6:Add 104486
                Single _181PairItem2;// 77:NoiseDeformerNoise3-ext->50:PairItem2 104499
                Int32 _182Two;// 82:NoiseDeformerAt3-ext->9:Two 104495
                Single _183At;// 82:NoiseDeformerAt3-ext->10:At 104494
                Single _184Multiply;// 82:NoiseDeformerAt3-ext->13:Multiply 104493
                Single _185Add;// 82:NoiseDeformerAt3-ext->14:Add 104485
                Int32 _186Add;// 77:NoiseDeformerNoise3-ext->88:Add 104516
                IArray[Single] _187At;// 77:NoiseDeformerNoise3-ext->87:At 104515
                Int32 _188Zero;// 86:NoiseDeformerAt3-ext->5:Zero 104508
                Single _189At;// 86:NoiseDeformerAt3-ext->4:At 104507
                Single _190Multiply;// 86:NoiseDeformerAt3-ext->11:Multiply 104506
                Int32 _191One;// 86:NoiseDeformerAt3-ext->8:One 104511
                Single _192At;// 86:NoiseDeformerAt3-ext->7:At 104510
                Single _193Multiply;// 86:NoiseDeformerAt3-ext->12:Multiply 104509
                Single _194Add;// 86:NoiseDeformerAt3-ext->6:Add 104505
                Int32 _195Two;// 86:NoiseDeformerAt3-ext->9:Two 104514
                Single _196At;// 86:NoiseDeformerAt3-ext->10:At 104513
                Single _197Multiply;// 86:NoiseDeformerAt3-ext->13:Multiply 104512
                Single _198Add;// 86:NoiseDeformerAt3-ext->14:Add 104504
                Single _199FloatLerp;// 77:NoiseDeformerNoise3-ext->90:FloatLerp 104480
                Int32 _200Add;// 77:NoiseDeformerNoise3-ext->94:Add 104534
                IArray[Single] _201At;// 77:NoiseDeformerNoise3-ext->93:At 104533
                Int32 _202Zero;// 92:NoiseDeformerAt3-ext->5:Zero 104526
                Single _203At;// 92:NoiseDeformerAt3-ext->4:At 104525
                Single _204Multiply;// 92:NoiseDeformerAt3-ext->11:Multiply 104524
                Int32 _205One;// 92:NoiseDeformerAt3-ext->8:One 104529
                Single _206At;// 92:NoiseDeformerAt3-ext->7:At 104528
                Single _207Multiply;// 92:NoiseDeformerAt3-ext->12:Multiply 104527
                Single _208Add;// 92:NoiseDeformerAt3-ext->6:Add 104523
                Int32 _209Two;// 92:NoiseDeformerAt3-ext->9:Two 104532
                Single _210At;// 92:NoiseDeformerAt3-ext->10:At 104531
                Single _211Multiply;// 92:NoiseDeformerAt3-ext->13:Multiply 104530
                Single _212Add;// 92:NoiseDeformerAt3-ext->14:Add 104522
                Int32 _213Add;// 77:NoiseDeformerNoise3-ext->97:Add 104551
                IArray[Single] _214At;// 77:NoiseDeformerNoise3-ext->98:At 104550
                Int32 _215Zero;// 96:NoiseDeformerAt3-ext->5:Zero 104543
                Single _216At;// 96:NoiseDeformerAt3-ext->4:At 104542
                Single _217Multiply;// 96:NoiseDeformerAt3-ext->11:Multiply 104541
                Int32 _218One;// 96:NoiseDeformerAt3-ext->8:One 104546
                Single _219At;// 96:NoiseDeformerAt3-ext->7:At 104545
                Single _220Multiply;// 96:NoiseDeformerAt3-ext->12:Multiply 104544
                Single _221Add;// 96:NoiseDeformerAt3-ext->6:Add 104540
                Int32 _222Two;// 96:NoiseDeformerAt3-ext->9:Two 104549
                Single _223At;// 96:NoiseDeformerAt3-ext->10:At 104548
                Single _224Multiply;// 96:NoiseDeformerAt3-ext->13:Multiply 104547
                Single _225Add;// 96:NoiseDeformerAt3-ext->14:Add 104539
                Single _226FloatLerp;// 77:NoiseDeformerNoise3-ext->100:FloatLerp 104517
                Single _227FloatLerp;// 77:NoiseDeformerNoise3-ext->102:FloatLerp 104479
                Single _228Constant;// 58:NoiseDeformerSCurve->0:Constant 104555
                Single _229Constant;// 58:NoiseDeformerSCurve->0:Constant 104557
                Single _230Multiply;// 58:NoiseDeformerSCurve->41:Multiply 104556
                Single _231Subtract;// 58:NoiseDeformerSCurve->39:Subtract 104554
                Single _232Multiply;// 58:NoiseDeformerSCurve->35:Multiply 104559
                Single _233Multiply;// 58:NoiseDeformerSCurve->37:Multiply 104553
                Single _234FloatLerp;// 77:NoiseDeformerNoise3-ext->104:FloatLerp 104255
                Single _235NaN;// 118:FloatIsNaN->1:NaN 104253
                Int32 _236Compare;// 118:FloatIsNaN->2:Compare 104252
                Int32 _237Zero;// 118:FloatIsNaN->4:Zero 104254
                Boolean _238Equal;// 118:FloatIsNaN->3:Equal 104251
                Single _240Multiply;// 27:NoiseDeformerfBm1-ext->64:Multiply 104225
                Int32 _241Zero;// 48:First->2:Zero 104572
                Single _242At;// 48:First->0:At 104571
                Single _243Add;// 27:NoiseDeformerfBm1-ext->59:Add 104224
                IArray[Single] _244Unit;// 43:Array2->2:Unit 104222
                Single _245Add;// 27:NoiseDeformerfBm1-ext->52:Add 104574
                IArray[Single] _246Append;// 43:Array2->3:Append 104221
                _0One = One();
                _1At = At(x0, _0One);
                _2AsInt = AsInt(_1At);
                _3At = At(_13Map, _2AsInt);
                _4Constant = 4096;
                _5At = At(_23GenerateN, _2AsInt);
                _6X = X(_5At);
                _7Unit = Unit(_6X);
                _8Y = Y(_5At);
                _9Append = Append(_7Unit, _8Y);
                _10Z = Z(_5At);
                _11Append = Append(_9Append, _10Z);
                _12Zero = Zero();
                _13At = At(_11Append, _12Zero);
                _14Add = Add(_4Constant, _13At);
                _15Floor = Floor(_14Add);
                _16Constant = 255;
                _17And = And(_15Floor, _16Constant);
                _18One = One();
                _19Add = Add(_17And, _18One);
                _20And = And(_19Add, _16Constant);
                _21Pair = Pair(_17And, _20And);
                _22Floor = Floor(_14Add);
                _23AsFloat = AsFloat(_22Floor);
                _24Subtract = Subtract(_14Add, _23AsFloat);
                _25FloatOne = FloatOne();
                _26Subtract = Subtract(_24Subtract, _25FloatOne);
                _27Pair = Pair(_24Subtract, _26Subtract);
                _28Pair = Pair(_21Pair, _27Pair);
                _29PairItem2 = PairItem2(_28Pair);
                _30PairItem1 = PairItem1(_29PairItem2);
                _31PairItem2 = PairItem2(x1);
                _32PairItem1 = PairItem1(_28Pair);
                _33PairItem1 = PairItem1(_32PairItem1);
                _34At = At(_31PairItem2, _33PairItem1);
                _35Constant = 4096;
                _36X = X(_5At);
                _37Unit = Unit(_36X);
                _38Y = Y(_5At);
                _39Append = Append(_37Unit, _38Y);
                _40Z = Z(_5At);
                _41Append = Append(_39Append, _40Z);
                _42One = One();
                _43At = At(_41Append, _42One);
                _44Add = Add(_35Constant, _43At);
                _45Floor = Floor(_44Add);
                _46Constant = 255;
                _47And = And(_45Floor, _46Constant);
                _48One = One();
                _49Add = Add(_47And, _48One);
                _50And = And(_49Add, _46Constant);
                _51Pair = Pair(_47And, _50And);
                _52Floor = Floor(_44Add);
                _53AsFloat = AsFloat(_52Floor);
                _54Subtract = Subtract(_44Add, _53AsFloat);
                _55FloatOne = FloatOne();
                _56Subtract = Subtract(_54Subtract, _55FloatOne);
                _57Pair = Pair(_54Subtract, _56Subtract);
                _58Pair = Pair(_51Pair, _57Pair);
                _59PairItem1 = PairItem1(_58Pair);
                _60PairItem1 = PairItem1(_59PairItem1);
                _61Add = Add(_34At, _60PairItem1);
                _62At = At(_31PairItem2, _61Add);
                _63Constant = 4096;
                _64X = X(_5At);
                _65Unit = Unit(_64X);
                _66Y = Y(_5At);
                _67Append = Append(_65Unit, _66Y);
                _68Z = Z(_5At);
                _69Append = Append(_67Append, _68Z);
                _70Two = Two();
                _71At = At(_69Append, _70Two);
                _72Add = Add(_63Constant, _71At);
                _73Floor = Floor(_72Add);
                _74Constant = 255;
                _75And = And(_73Floor, _74Constant);
                _76One = One();
                _77Add = Add(_75And, _76One);
                _78And = And(_77Add, _74Constant);
                _79Pair = Pair(_75And, _78And);
                _80Floor = Floor(_72Add);
                _81AsFloat = AsFloat(_80Floor);
                _82Subtract = Subtract(_72Add, _81AsFloat);
                _83FloatOne = FloatOne();
                _84Subtract = Subtract(_82Subtract, _83FloatOne);
                _85Pair = Pair(_82Subtract, _84Subtract);
                _86Pair = Pair(_79Pair, _85Pair);
                _87PairItem1 = PairItem1(_86Pair);
                _88PairItem1 = PairItem1(_87PairItem1);
                _89Add = Add(_62At, _88PairItem1);
                _90At = At(_24PairItem1, _89Add);
                _91Zero = Zero();
                _92At = At(_90At, _91Zero);
                _93Multiply = Multiply(_30PairItem1, _92At);
                _94PairItem2 = PairItem2(_58Pair);
                _95PairItem1 = PairItem1(_94PairItem2);
                _96One = One();
                _97At = At(_90At, _96One);
                _98Multiply = Multiply(_95PairItem1, _97At);
                _99Add = Add(_93Multiply, _98Multiply);
                _100PairItem2 = PairItem2(_86Pair);
                _101PairItem1 = PairItem1(_100PairItem2);
                _102Two = Two();
                _103At = At(_90At, _102Two);
                _104Multiply = Multiply(_101PairItem1, _103At);
                _105Add = Add(_99Add, _104Multiply);
                _106PairItem2 = PairItem2(_29PairItem2);
                _107PairItem2 = PairItem2(_32PairItem1);
                _108At = At(_31PairItem2, _107PairItem2);
                _109Add = Add(_108At, _60PairItem1);
                _110At = At(_31PairItem2, _109Add);
                _111Add = Add(_110At, _88PairItem1);
                _112At = At(_24PairItem1, _111Add);
                _113Zero = Zero();
                _114At = At(_112At, _113Zero);
                _115Multiply = Multiply(_106PairItem2, _114At);
                _116One = One();
                _117At = At(_112At, _116One);
                _118Multiply = Multiply(_95PairItem1, _117At);
                _119Add = Add(_115Multiply, _118Multiply);
                _120Two = Two();
                _121At = At(_112At, _120Two);
                _122Multiply = Multiply(_101PairItem1, _121At);
                _123Add = Add(_119Add, _122Multiply);
                _124Constant = 3;
                _125Constant = 2;
                _126Multiply = Multiply(_125Constant, _30PairItem1);
                _127Subtract = Subtract(_124Constant, _126Multiply);
                _128Multiply = Multiply(_30PairItem1, _30PairItem1);
                _129Multiply = Multiply(_127Subtract, _128Multiply);
                _130FloatLerp = FloatLerp(_105Add, _123Add, _129Multiply);
                _131PairItem2 = PairItem2(_59PairItem1);
                _132Add = Add(_34At, _131PairItem2);
                _133At = At(_31PairItem2, _132Add);
                _134Add = Add(_133At, _88PairItem1);
                _135At = At(_24PairItem1, _134Add);
                _136Zero = Zero();
                _137At = At(_135At, _136Zero);
                _138Multiply = Multiply(_30PairItem1, _137At);
                _139PairItem2 = PairItem2(_94PairItem2);
                _140One = One();
                _141At = At(_135At, _140One);
                _142Multiply = Multiply(_139PairItem2, _141At);
                _143Add = Add(_138Multiply, _142Multiply);
                _144Two = Two();
                _145At = At(_135At, _144Two);
                _146Multiply = Multiply(_101PairItem1, _145At);
                _147Add = Add(_143Add, _146Multiply);
                _148Add = Add(_108At, _131PairItem2);
                _149At = At(_31PairItem2, _148Add);
                _150Add = Add(_149At, _88PairItem1);
                _151At = At(_24PairItem1, _150Add);
                _152Zero = Zero();
                _153At = At(_151At, _152Zero);
                _154Multiply = Multiply(_106PairItem2, _153At);
                _155One = One();
                _156At = At(_151At, _155One);
                _157Multiply = Multiply(_139PairItem2, _156At);
                _158Add = Add(_154Multiply, _157Multiply);
                _159Two = Two();
                _160At = At(_151At, _159Two);
                _161Multiply = Multiply(_101PairItem1, _160At);
                _162Add = Add(_158Add, _161Multiply);
                _163FloatLerp = FloatLerp(_147Add, _162Add, _129Multiply);
                _164Constant = 3;
                _165Constant = 2;
                _166Multiply = Multiply(_165Constant, _95PairItem1);
                _167Subtract = Subtract(_164Constant, _166Multiply);
                _168Multiply = Multiply(_95PairItem1, _95PairItem1);
                _169Multiply = Multiply(_167Subtract, _168Multiply);
                _170FloatLerp = FloatLerp(_130FloatLerp, _163FloatLerp, _169Multiply);
                _171PairItem2 = PairItem2(_87PairItem1);
                _172Add = Add(_62At, _171PairItem2);
                _173At = At(_24PairItem1, _172Add);
                _174Zero = Zero();
                _175At = At(_173At, _174Zero);
                _176Multiply = Multiply(_30PairItem1, _175At);
                _177One = One();
                _178At = At(_173At, _177One);
                _179Multiply = Multiply(_95PairItem1, _178At);
                _180Add = Add(_176Multiply, _179Multiply);
                _181PairItem2 = PairItem2(_100PairItem2);
                _182Two = Two();
                _183At = At(_173At, _182Two);
                _184Multiply = Multiply(_181PairItem2, _183At);
                _185Add = Add(_180Add, _184Multiply);
                _186Add = Add(_110At, _171PairItem2);
                _187At = At(_24PairItem1, _186Add);
                _188Zero = Zero();
                _189At = At(_187At, _188Zero);
                _190Multiply = Multiply(_106PairItem2, _189At);
                _191One = One();
                _192At = At(_187At, _191One);
                _193Multiply = Multiply(_95PairItem1, _192At);
                _194Add = Add(_190Multiply, _193Multiply);
                _195Two = Two();
                _196At = At(_187At, _195Two);
                _197Multiply = Multiply(_181PairItem2, _196At);
                _198Add = Add(_194Add, _197Multiply);
                _199FloatLerp = FloatLerp(_185Add, _198Add, _129Multiply);
                _200Add = Add(_133At, _171PairItem2);
                _201At = At(_24PairItem1, _200Add);
                _202Zero = Zero();
                _203At = At(_201At, _202Zero);
                _204Multiply = Multiply(_30PairItem1, _203At);
                _205One = One();
                _206At = At(_201At, _205One);
                _207Multiply = Multiply(_139PairItem2, _206At);
                _208Add = Add(_204Multiply, _207Multiply);
                _209Two = Two();
                _210At = At(_201At, _209Two);
                _211Multiply = Multiply(_181PairItem2, _210At);
                _212Add = Add(_208Add, _211Multiply);
                _213Add = Add(_149At, _171PairItem2);
                _214At = At(_24PairItem1, _213Add);
                _215Zero = Zero();
                _216At = At(_214At, _215Zero);
                _217Multiply = Multiply(_106PairItem2, _216At);
                _218One = One();
                _219At = At(_214At, _218One);
                _220Multiply = Multiply(_139PairItem2, _219At);
                _221Add = Add(_217Multiply, _220Multiply);
                _222Two = Two();
                _223At = At(_214At, _222Two);
                _224Multiply = Multiply(_181PairItem2, _223At);
                _225Add = Add(_221Add, _224Multiply);
                _226FloatLerp = FloatLerp(_212Add, _225Add, _129Multiply);
                _227FloatLerp = FloatLerp(_199FloatLerp, _226FloatLerp, _169Multiply);
                _228Constant = 3;
                _229Constant = 2;
                _230Multiply = Multiply(_229Constant, _101PairItem1);
                _231Subtract = Subtract(_228Constant, _230Multiply);
                _232Multiply = Multiply(_101PairItem1, _101PairItem1);
                _233Multiply = Multiply(_231Subtract, _232Multiply);
                _234FloatLerp = FloatLerp(_170FloatLerp, _227FloatLerp, _233Multiply);
                _235NaN = NaN();
                _236Compare = Compare(_234FloatLerp, _235NaN);
                _237Zero = Zero();
                _238Equal = Equal(_236Compare, _237Zero);
                _240Multiply = Multiply(_3At, if (_238Equal)
                    {
                      Single _239FloatZero;// 77:NoiseDeformerNoise3-ext->117:FloatZero 104560
                      _239FloatZero = FloatZero();
                      _239FloatZero;
                      }else
                    {
                      _234FloatLerp;
                      });
                _241Zero = Zero();
                _242At = At(x0, _241Zero);
                _243Add = Add(_240Multiply, _242At);
                _244Unit = Unit(_243Add);
                _245Add = Add(_1At, _25FloatOne);
                _246Append = Append(_244Unit, _245Add);
                _246Append;
                });
            _27Count = Count(_26GenerateN);
            _28One = One();
            _29Subtract = Subtract(_27Count, _28One);
            _30At = At(_26GenerateN, _29Subtract);
            _31Zero = Zero();
            _32At = At(_30At, _31Zero);
            _32At;
            }, _19X, _16Y);
        _22Vector3 = Vector3(_18Apply2, _20Apply2, _21Apply2);
        _23Vector3 = Vector3(strengthX, strengthY, strengthZ);
        _24Multiply = Multiply(_22Vector3, _23Vector3);
        _25Add = Add(_10Transform, _24Multiply);
        _26Transform = Transform(_25Add, _8Pass-through: Matrix);
        _26Transform;
        }, _27Pair);
    _29ParallelMap = ParallelMap(_0MeshVertices, _28Bind2of2);
    _30SetMeshVertices = SetMeshVertices(mesh, _29ParallelMap);
    _30SetMeshVertices;
    }