(InstanceState state, TriMesh mesh, Int32 per vertex channel, Boolean copy to map channel, Int32 target map channel, Boolean scale, Boolean autoScale, Single min value, Single max value, Boolean color or grayscale, Boolean chromatic or hue, Boolean print stats) => 
  {
    IArray[Single] _0PerVertexData;// 11:PerVertexData 105533
    Boolean _1IsNull;// 25:IsNull 105532
    TriMesh _19Pass-through: any;// 0:Pass-through: any 105525
    String _20Constant;// 43:ArrayStatisticsString-ext->0:Constant 105749
    Int32 _21Count;// 43:ArrayStatisticsString-ext->32:Count 105768
    String _22ToString;// 43:ArrayStatisticsString-ext->33:ToString 105767
    IArray[String] _23Unit;// 4:Array3->2:Unit 105766
    IArray[Int32] _24Indices;// 2:IndexOfMinimum->1:Indices 105785
    Int32 _25Zero;// 2:IndexOfMinimum->3:Zero 105786
    Int32 _26Aggregate;// 2:IndexOfMinimum->2:Aggregate 105784
    IArray[Int32] _27Unit;// 4:Array2->2:Unit 105782
    IArray[Int32] _28Indices;// 3:IndexOfMaximum->1:Indices 105796
    Int32 _29Zero;// 3:IndexOfMaximum->3:Zero 105797
    Int32 _30Aggregate;// 3:IndexOfMaximum->2:Aggregate 105795
    IArray[Int32] _31Append;// 4:Array2->3:Append 105781
    IArray[Single] _32Map;// 2:SelectByIndex->2:Map 105776
    Int32 _33Zero;// 35:First->2:Zero 105772
    Single _34At;// 35:First->0:At 105771
    String _35ToString;// 43:ArrayStatisticsString-ext->40:ToString 105769
    IArray[String] _36Append;// 4:Array3->3:Append 105765
    Int32 _37One;// 36:Second->2:One 105808
    Single _38At;// 36:Second->0:At 105807
    String _39ToString;// 43:ArrayStatisticsString-ext->41:ToString 105805
    IArray[String] _40Append;// 4:Array3->6:Append 105764
    Single _41DefaultValueOfElement;// 21:Sum->4:DefaultValueOfElement 105812
    Single _42Aggregate;// 21:Sum->0:Aggregate 105811
    String _43ToString;// 43:ArrayStatisticsString-ext->42:ToString 105809
    IArray[String] _44Append;// 0:Array4->5:Append 105760
    Int32 _45Count;// 1:StringEllidedJoin-ext->7:Count 105819
    Int32 _46Constant;// 43:ArrayStatisticsString-ext->0:Constant 105861
    Boolean _47GreaterThan;// 1:StringEllidedJoin-ext->9:GreaterThan 105818
    String _48IfThen;// 1:StringEllidedJoin-ext->16:IfThen 105817
    IArray[String] _49Append;// 31:Array5-ext->1:Append 105755
    Int32 _50Count;// 29:StringFormat-ext->4:Count 105737
    String _51Repeat;// 29:StringFormat-ext->2:Repeat 105736
    TriMesh _53IgnoreSecond;// 45:PrintOnSignal-ext->1:IgnoreSecond 105528
    _0PerVertexData = PerVertexData(mesh, per vertex channel);
    _1IsNull = IsNull(_0PerVertexData);
    _19Pass-through: any = if (_1IsNull)
      {
        mesh;
        }else
      {
        TriMesh _18IgnoreFirst;// 3:MapChannelSetVerticesConditionally-ext->7:IgnoreFirst 105541
        _18IgnoreFirst = IgnoreFirst(mesh, if (copy to map channel)
          {
            Boolean _2Not;// 19:NormalizeFloatsConditionally-ext->3:Not 105678
            IArray[Single] _14Pass-through: array;// 0:Pass-through: array 105550
            IArray[Vector3] _15Map;// 8:FloatsToColors-ext->6:Map 105553
            IArray[Int32] _16MeshIndices;// 9:MapChannelSetVertices-ext->4:MeshIndices 105547
            TriMesh _17SetMapChannel;// 9:MapChannelSetVertices-ext->9:SetMapChannel 105546
            _2Not = Not(scale);
            _14Pass-through: array = if (_2Not)
              {
                _0PerVertexData;
                }else
              {
                Single _7Pass-through: Single;// 0:Pass-through: Single 105680
                Single _12Pass-through: Single;// 0:Pass-through: Single 105681
                IArray[Single] _13Map;// 10:NormalizeFloatsSafely-ext->5:Map 105682
                _7Pass-through: Single = if (autoScale)
                  {
                    IArray[Int32] _3Indices;// 3:IndexOfMinimum->1:Indices 105703
                    Int32 _4Zero;// 3:IndexOfMinimum->3:Zero 105704
                    Int32 _5Aggregate;// 3:IndexOfMinimum->2:Aggregate 105702
                    Single _6At;// 16:MinimumElement->0:At 105700
                    _3Indices = Indices(_0PerVertexData);
                    _4Zero = Zero();
                    _5Aggregate = Aggregate(_3Indices, _4Zero, (Int32 x0, Int32 x1) => 
                      {
                        Single _0At;// 4:IndexOfLesserElement->4:At 105710
                        Single _1At;// 4:IndexOfLesserElement->5:At 105711
                        Boolean _2LessThanOrEqual;// 4:IndexOfLesserElement->2:LessThanOrEqual 105709
                        _0At = At(_0PerVertexData, x0);
                        _1At = At(_0PerVertexData, x1);
                        _2LessThanOrEqual = LessThanOrEqual(_0At, _1At);
                        if (_2LessThanOrEqual)
                          {
                            x0;
                            }else
                          {
                            x1;
                            };
                        });
                    _6At = At(_0PerVertexData, _5Aggregate);
                    _6At;
                    }else
                  {
                    min value;
                    };
                _12Pass-through: Single = if (autoScale)
                  {
                    IArray[Int32] _8Indices;// 3:IndexOfMaximum->1:Indices 105717
                    Int32 _9Zero;// 3:IndexOfMaximum->3:Zero 105718
                    Int32 _10Aggregate;// 3:IndexOfMaximum->2:Aggregate 105716
                    Single _11At;// 18:MaximumElement->0:At 105714
                    _8Indices = Indices(_0PerVertexData);
                    _9Zero = Zero();
                    _10Aggregate = Aggregate(_8Indices, _9Zero, (Int32 x0, Int32 x1) => 
                      {
                        Single _0At;// 4:IndexOfGreaterElement->4:At 105724
                        Single _1At;// 4:IndexOfGreaterElement->5:At 105725
                        Boolean _2GreaterThanOrEqual;// 4:IndexOfGreaterElement->2:GreaterThanOrEqual 105723
                        _0At = At(_0PerVertexData, x0);
                        _1At = At(_0PerVertexData, x1);
                        _2GreaterThanOrEqual = GreaterThanOrEqual(_0At, _1At);
                        if (_2GreaterThanOrEqual)
                          {
                            x0;
                            }else
                          {
                            x1;
                            };
                        });
                    _11At = At(_0PerVertexData, _10Aggregate);
                    _11At;
                    }else
                  {
                    max value;
                    };
                _13Map = Map(_0PerVertexData, (Single x0) => 
                  {
                    Single _0Subtract;// 7:FloatNormalizeSafely-ext->2:Subtract 105696
                    Single _1Subtract;// 7:FloatNormalizeSafely-ext->3:Subtract 105697
                    Single _2Abs;// 3:FloatIsSmall-ext->4:Abs 105693
                    Single _3Constant;// 2:VectorLengthEpsilon-ext->0:Constant 105694
                    Boolean _4LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 105692
                    Single _6IgnoreFirst;// 7:DivideDefault-ext->8:IgnoreFirst 105689
                    _0Subtract = Subtract(x0, _7Pass-through: Single);
                    _1Subtract = Subtract(_12Pass-through: Single, _7Pass-through: Single);
                    _2Abs = Abs(_1Subtract);
                    _3Constant = 1E-06;
                    _4LessThanOrEqual = LessThanOrEqual(_2Abs, _3Constant);
                    _6IgnoreFirst = IgnoreFirst(_0Subtract, if (_4LessThanOrEqual)
                      {
                        x0;
                        }else
                      {
                        Single _5Divide;// 7:DivideDefault-ext->5:Divide 105695
                        _5Divide = Divide(_0Subtract, _1Subtract);
                        _5Divide;
                        });
                    _6IgnoreFirst;
                    });
                _13Map;
                };
            _15Map = Map(_14Pass-through: array, (Single x0) => 
              {
                if (color or grayscale)
                  {
                    if (chromatic or hue)
                      {
                        Vector3 _0ZAxis;// 4:Blue->1:ZAxis 105598
                        IArray[Vector3] _1Unit;// 4:Array3->2:Unit 105597
                        Single _2Constant;// 7:Cyan->0:Constant 105600
                        Single _3Constant;// 7:Cyan->0:Constant 105601
                        Vector3 _4Vector3;// 7:Cyan->0:Vector3 105599
                        IArray[Vector3] _5Append;// 4:Array3->3:Append 105596
                        Vector3 _6YAxis;// 5:Green->1:YAxis 105602
                        IArray[Vector3] _7Append;// 4:Array3->6:Append 105595
                        Single _8Constant;// 8:Yellow->0:Constant 105604
                        Single _9Constant;// 8:Yellow->0:Constant 105605
                        Vector3 _10Vector3;// 8:Yellow->0:Vector3 105603
                        IArray[Vector3] _11Append;// 3:Array4->5:Append 105591
                        Vector3 _12XAxis;// 6:Red->1:XAxis 105606
                        IArray[Vector3] _13Append;// 4:BlendChromatic->9:Append 105586
                        Int32 _14Count;// 3:LastIndex->2:Count 105569
                        Int32 _15One;// 3:MinusOne->2:One 105568
                        Int32 _16Subtract;// 3:MinusOne->1:Subtract 105567
                        Vector3 _17At;// 24:Last->0:At 105564
                        IArray[Vector3] _18Append;// 0:BlendNColors->23:Append 105562
                        Int32 _19Count;// 0:BlendNColors->11:Count 105576
                        Int32 _20One;// 14:MinusOne->2:One 105575
                        Int32 _21Subtract;// 14:MinusOne->1:Subtract 105574
                        Single _22IntAsFloat;// 0:BlendNColors->12:IntAsFloat 105572
                        Single _23FloatZero;// 0:BlendNColors->6:FloatZero 105578
                        Single _24FloatOne;// 0:BlendNColors->5:FloatOne 105579
                        Single _25ClampFloat;// 0:BlendNColors->4:ClampFloat 105577
                        Single _26Multiply;// 0:BlendNColors->13:Multiply 105571
                        Int32 _27Truncate;// 0:BlendNColors->22:Truncate 105570
                        Vector3 _28At;// 0:BlendNColors->15:At 105560
                        Int32 _29One;// 17:PlusOne->1:One 105583
                        Int32 _30Add;// 17:PlusOne->0:Add 105582
                        Vector3 _31At;// 0:BlendNColors->16:At 105580
                        Single _32TruncateAsFloat;// 0:BlendNColors->21:TruncateAsFloat 105585
                        Single _33Subtract;// 0:BlendNColors->19:Subtract 105584
                        Vector3 _34Lerp;// 0:BlendNColors->18:Lerp 105559
                        _0ZAxis = ZAxis();
                        _1Unit = Unit(_0ZAxis);
                        _2Constant = 0;
                        _3Constant = 1;
                        _4Vector3 = Vector3(_2Constant, _3Constant, _3Constant);
                        _5Append = Append(_1Unit, _4Vector3);
                        _6YAxis = YAxis();
                        _7Append = Append(_5Append, _6YAxis);
                        _8Constant = 1;
                        _9Constant = 0;
                        _10Vector3 = Vector3(_8Constant, _8Constant, _9Constant);
                        _11Append = Append(_7Append, _10Vector3);
                        _12XAxis = XAxis();
                        _13Append = Append(_11Append, _12XAxis);
                        _14Count = Count(_13Append);
                        _15One = One();
                        _16Subtract = Subtract(_14Count, _15One);
                        _17At = At(_13Append, _16Subtract);
                        _18Append = Append(_13Append, _17At);
                        _19Count = Count(_13Append);
                        _20One = One();
                        _21Subtract = Subtract(_19Count, _20One);
                        _22IntAsFloat = IntAsFloat(_21Subtract);
                        _23FloatZero = FloatZero();
                        _24FloatOne = FloatOne();
                        _25ClampFloat = ClampFloat(x0, _23FloatZero, _24FloatOne);
                        _26Multiply = Multiply(_22IntAsFloat, _25ClampFloat);
                        _27Truncate = Truncate(_26Multiply);
                        _28At = At(_18Append, _27Truncate);
                        _29One = One();
                        _30Add = Add(_27Truncate, _29One);
                        _31At = At(_18Append, _30Add);
                        _32TruncateAsFloat = TruncateAsFloat(_26Multiply);
                        _33Subtract = Subtract(_26Multiply, _32TruncateAsFloat);
                        _34Lerp = Lerp(_28At, _31At, _33Subtract);
                        _34Lerp;
                        }else
                      {
                        Single _35Constant;// 8:RGBFromHue->0:Constant 105626
                        Single _36Constant;// 3:SecondaryColorValueFromHue->0:Constant 105629
                        Single _37Constant;// 3:SecondaryColorValueFromHue->0:Constant 105634
                        Single _38Multiply;// 3:SecondaryColorValueFromHue->2:Multiply 105633
                        Single _39Constant;// 3:SecondaryColorValueFromHue->0:Constant 105635
                        Single _40Modulo;// 3:SecondaryColorValueFromHue->4:Modulo 105632
                        Single _41Subtract;// 3:SecondaryColorValueFromHue->6:Subtract 105631
                        Single _42Abs;// 3:SecondaryColorValueFromHue->8:Abs 105630
                        Single _43Subtract;// 3:SecondaryColorValueFromHue->9:Subtract 105628
                        Single _44Constant;// 1:Vector3FromXY->0:Constant 105625
                        Vector3 _45Vector3;// 1:Vector3FromXY->0:Vector3 105624
                        Func[Vector3] _46Pass-through: any;// 0:Pass-through: any 105616
                        IArray[Func[Vector3]] _47Unit;// 12:Array3->2:Unit 105621
                        Single _48Constant;// 4:Vector3FromXY->0:Constant 105639
                        Vector3 _49Vector3;// 4:Vector3FromXY->0:Vector3 105638
                        Func[Vector3] _50Pass-through: any;// 0:Pass-through: any 105617
                        IArray[Func[Vector3]] _51Append;// 12:Array3->3:Append 105620
                        Single _52Constant;// 5:Vector3FromYZ->0:Constant 105643
                        Vector3 _53Vector3;// 5:Vector3FromYZ->0:Vector3 105642
                        Func[Vector3] _54Pass-through: any;// 0:Pass-through: any 105618
                        IArray[Func[Vector3]] _55Append;// 12:Array3->6:Append 105619
                        IArray[IArray[Func[Vector3]]] _56Unit;// 14:Array2->2:Unit 105615
                        Single _57Constant;// 6:Vector3FromYZ->0:Constant 105653
                        Vector3 _58Vector3;// 6:Vector3FromYZ->0:Vector3 105652
                        Func[Vector3] _59Pass-through: any;// 0:Pass-through: any 105644
                        IArray[Func[Vector3]] _60Unit;// 13:Array3->2:Unit 105649
                        Single _61Constant;// 7:Vector3FromXZ->0:Constant 105657
                        Vector3 _62Vector3;// 7:Vector3FromXZ->0:Vector3 105656
                        Func[Vector3] _63Pass-through: any;// 0:Pass-through: any 105645
                        IArray[Func[Vector3]] _64Append;// 13:Array3->3:Append 105648
                        Single _65Constant;// 8:Vector3FromXZ->0:Constant 105661
                        Vector3 _66Vector3;// 8:Vector3FromXZ->0:Vector3 105660
                        Func[Vector3] _67Pass-through: any;// 0:Pass-through: any 105646
                        IArray[Func[Vector3]] _68Append;// 13:Array3->6:Append 105647
                        IArray[IArray[Func[Vector3]]] _69Append;// 14:Array2->3:Append 105614
                        IArray[Func[Vector3]] _70Flatten;// 8:RGBFromHue->15:Flatten 105611
                        Single _71Constant;// 8:RGBFromHue->0:Constant 105665
                        Single _72Multiply;// 8:RGBFromHue->9:Multiply 105664
                        Single _73Modulo;// 8:RGBFromHue->19:Modulo 105663
                        Int32 _74Floor;// 8:RGBFromHue->16:Floor 105662
                        Func[Vector3] _75At;// 8:RGBFromHue->17:At 105610
                        Vector3 _76Apply0;// 8:RGBFromHue->2:Apply0 105609
                        _35Constant = 1;
                        _36Constant = 1;
                        _37Constant = 6;
                        _38Multiply = Multiply(x0, _37Constant);
                        _39Constant = 2;
                        _40Modulo = Modulo(_38Multiply, _39Constant);
                        _41Subtract = Subtract(_40Modulo, _36Constant);
                        _42Abs = Abs(_41Subtract);
                        _43Subtract = Subtract(_36Constant, _42Abs);
                        _44Constant = 0;
                        _45Vector3 = Vector3(_35Constant, _43Subtract, _44Constant);
                        _46Pass-through: any = () => 
                          {
                            _45Vector3;
                            };
                        _47Unit = Unit(_46Pass-through: any);
                        _48Constant = 0;
                        _49Vector3 = Vector3(_43Subtract, _35Constant, _48Constant);
                        _50Pass-through: any = () => 
                          {
                            _49Vector3;
                            };
                        _51Append = Append(_47Unit, _50Pass-through: any);
                        _52Constant = 0;
                        _53Vector3 = Vector3(_52Constant, _35Constant, _43Subtract);
                        _54Pass-through: any = () => 
                          {
                            _53Vector3;
                            };
                        _55Append = Append(_51Append, _54Pass-through: any);
                        _56Unit = Unit(_55Append);
                        _57Constant = 0;
                        _58Vector3 = Vector3(_57Constant, _43Subtract, _35Constant);
                        _59Pass-through: any = () => 
                          {
                            _58Vector3;
                            };
                        _60Unit = Unit(_59Pass-through: any);
                        _61Constant = 0;
                        _62Vector3 = Vector3(_43Subtract, _61Constant, _35Constant);
                        _63Pass-through: any = () => 
                          {
                            _62Vector3;
                            };
                        _64Append = Append(_60Unit, _63Pass-through: any);
                        _65Constant = 0;
                        _66Vector3 = Vector3(_35Constant, _65Constant, _43Subtract);
                        _67Pass-through: any = () => 
                          {
                            _66Vector3;
                            };
                        _68Append = Append(_64Append, _67Pass-through: any);
                        _69Append = Append(_56Unit, _68Append);
                        _70Flatten = Flatten(_69Append);
                        _71Constant = 6;
                        _72Multiply = Multiply(_71Constant, x0);
                        _73Modulo = Modulo(_72Multiply, _71Constant);
                        _74Floor = Floor(_73Modulo);
                        _75At = At(_70Flatten, _74Floor);
                        _76Apply0 = Apply0(_75At);
                        _76Apply0;
                        };
                    }else
                  {
                    Single _77Constant;// 5:BlendBlackWhite-ext->0:Constant 105669
                    Vector3 _78Vector3;// 5:BlendBlackWhite-ext->5:Vector3 105668
                    Single _79Constant;// 5:BlendBlackWhite-ext->0:Constant 105671
                    Vector3 _80Vector3;// 5:BlendBlackWhite-ext->3:Vector3 105670
                    Vector3 _81Lerp;// 5:BlendBlackWhite-ext->1:Lerp 105667
                    _77Constant = 0;
                    _78Vector3 = Vector3(_77Constant, _77Constant, _77Constant);
                    _79Constant = 1;
                    _80Vector3 = Vector3(_79Constant, _79Constant, _79Constant);
                    _81Lerp = Lerp(_78Vector3, _80Vector3, x0);
                    _81Lerp;
                    };
                });
            _16MeshIndices = MeshIndices(mesh);
            _17SetMapChannel = SetMapChannel(mesh, target map channel, _15Map, _16MeshIndices);
            _17SetMapChannel;
            }else
          {
            mesh;
            });
        _18IgnoreFirst;
        };
    _20Constant = Count = {0}, Minimum = {1}, Maximum = {2}, Sum = {3}. Values = {4};
    _21Count = Count(_0PerVertexData);
    _22ToString = ToString(_21Count);
    _23Unit = Unit(_22ToString);
    _24Indices = Indices(_0PerVertexData);
    _25Zero = Zero();
    _26Aggregate = Aggregate(_24Indices, _25Zero, (Int32 x0, Int32 x1) => 
      {
        Single _0At;// 4:IndexOfLesserElement->4:At 105792
        Single _1At;// 4:IndexOfLesserElement->5:At 105793
        Boolean _2LessThanOrEqual;// 4:IndexOfLesserElement->2:LessThanOrEqual 105791
        _0At = At(_0PerVertexData, x0);
        _1At = At(_0PerVertexData, x1);
        _2LessThanOrEqual = LessThanOrEqual(_0At, _1At);
        if (_2LessThanOrEqual)
          {
            x0;
            }else
          {
            x1;
            };
        });
    _27Unit = Unit(_26Aggregate);
    _28Indices = Indices(_0PerVertexData);
    _29Zero = Zero();
    _30Aggregate = Aggregate(_28Indices, _29Zero, (Int32 x0, Int32 x1) => 
      {
        Single _0At;// 4:IndexOfGreaterElement->4:At 105803
        Single _1At;// 4:IndexOfGreaterElement->5:At 105804
        Boolean _2GreaterThanOrEqual;// 4:IndexOfGreaterElement->2:GreaterThanOrEqual 105802
        _0At = At(_0PerVertexData, x0);
        _1At = At(_0PerVertexData, x1);
        _2GreaterThanOrEqual = GreaterThanOrEqual(_0At, _1At);
        if (_2GreaterThanOrEqual)
          {
            x0;
            }else
          {
            x1;
            };
        });
    _31Append = Append(_27Unit, _30Aggregate);
    _32Map = Map(_31Append, (Int32 x0) => 
      {
        Single _0At;// 2:SelectByIndex->3:At 105777
        _0At = At(_0PerVertexData, x0);
        _0At;
        });
    _33Zero = Zero();
    _34At = At(_32Map, _33Zero);
    _35ToString = ToString(_34At);
    _36Append = Append(_23Unit, _35ToString);
    _37One = One();
    _38At = At(_32Map, _37One);
    _39ToString = ToString(_38At);
    _40Append = Append(_36Append, _39ToString);
    _41DefaultValueOfElement = DefaultValueOfElement(_0PerVertexData);
    _42Aggregate = Aggregate(_0PerVertexData, _41DefaultValueOfElement, (Single x0, Single x1) => 
      {
        Single _0Add;// 21:Sum->2:Add 105813
        _0Add = Add(x0, x1);
        _0Add;
        });
    _43ToString = ToString(_42Aggregate);
    _44Append = Append(_40Append, _43ToString);
    _45Count = Count(_0PerVertexData);
    _46Constant = 10;
    _47GreaterThan = GreaterThan(_45Count, _46Constant);
    _48IfThen = IfThen(_47GreaterThan, () => 
      {
        Int32 _0One;// 0:MinusOne->2:One 105838
        Int32 _1Subtract;// 0:MinusOne->1:Subtract 105837
        IArray[Single] _2Take;// 1:StringEllidedJoin-ext->5:Take 105835
        IArray[String] _3Map;// 6:StringJoin->7:Map 105828
        Int32 _4One;// 10:SkipOne->2:One 105827
        IArray[String] _5Skip;// 10:SkipOne->3:Skip 105826
        Int32 _6Zero;// 3:First->2:Zero 105832
        String _7At;// 3:First->0:At 105831
        String _8Constant;// 43:ArrayStatisticsString-ext->0:Constant 105862
        String _9Aggregate;// 6:StringJoin->2:Aggregate 105824
        String _10Constant;// 1:StringEllidedJoin-ext->0:Constant 105839
        String _11ConcatenateStrings;// 1:StringEllidedJoin-ext->10:ConcatenateStrings 105821
        Int32 _12Count;// 3:LastIndex->2:Count 105847
        Int32 _13One;// 3:MinusOne->2:One 105846
        Int32 _14Subtract;// 3:MinusOne->1:Subtract 105845
        Single _15At;// 14:Last->0:At 105842
        String _16ToString;// 1:StringEllidedJoin-ext->13:ToString 105840
        String _17ConcatenateStrings;// 1:StringEllidedJoin-ext->12:ConcatenateStrings 105820
        _0One = One();
        _1Subtract = Subtract(_46Constant, _0One);
        _2Take = Take(_0PerVertexData, _1Subtract);
        _3Map = Map(_2Take, (Single x0) => 
          {
            String _0ToString;// 6:StringJoin->8:ToString 105829
            _0ToString = ToString(x0);
            _0ToString;
            });
        _4One = One();
        _5Skip = Skip(_3Map, _4One);
        _6Zero = Zero();
        _7At = At(_3Map, _6Zero);
        _8Constant = , ;
        _9Aggregate = Aggregate(_5Skip, _7At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 6:StringJoin->4:ConcatenateStrings 105834
            String _1ConcatenateStrings;// 6:StringJoin->5:ConcatenateStrings 105833
            _0ConcatenateStrings = ConcatenateStrings(x0, _8Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _10Constant =  ... ;
        _11ConcatenateStrings = ConcatenateStrings(_9Aggregate, _10Constant);
        _12Count = Count(_0PerVertexData);
        _13One = One();
        _14Subtract = Subtract(_12Count, _13One);
        _15At = At(_0PerVertexData, _14Subtract);
        _16ToString = ToString(_15At);
        _17ConcatenateStrings = ConcatenateStrings(_11ConcatenateStrings, _16ToString);
        _17ConcatenateStrings;
        }, () => 
      {
        IArray[String] _0Map;// 2:StringJoin->7:Map 105854
        Int32 _1One;// 10:SkipOne->2:One 105853
        IArray[String] _2Skip;// 10:SkipOne->3:Skip 105852
        Int32 _3Zero;// 3:First->2:Zero 105858
        String _4At;// 3:First->0:At 105857
        String _5Constant;// 43:ArrayStatisticsString-ext->0:Constant 105862
        String _6Aggregate;// 2:StringJoin->2:Aggregate 105850
        _0Map = Map(_0PerVertexData, (Single x0) => 
          {
            String _0ToString;// 2:StringJoin->8:ToString 105855
            _0ToString = ToString(x0);
            _0ToString;
            });
        _1One = One();
        _2Skip = Skip(_0Map, _1One);
        _3Zero = Zero();
        _4At = At(_0Map, _3Zero);
        _5Constant = , ;
        _6Aggregate = Aggregate(_2Skip, _4At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 2:StringJoin->4:ConcatenateStrings 105860
            String _1ConcatenateStrings;// 2:StringJoin->5:ConcatenateStrings 105859
            _0ConcatenateStrings = ConcatenateStrings(x0, _5Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _6Aggregate;
        });
    _49Append = Append(_44Append, _48IfThen);
    _50Count = Count(_49Append);
    _51Repeat = Repeat(_20Constant, _50Count, (String x0, Int32 x1) => 
      {
        String _0Constant;// 29:StringFormat-ext->0:Constant 105744
        String _1ToString;// 29:StringFormat-ext->8:ToString 105745
        String _2ConcatenateStrings;// 9:StringsConcatenate3-ext->3:ConcatenateStrings 105743
        String _3Constant;// 29:StringFormat-ext->0:Constant 105747
        String _4ConcatenateStrings;// 9:StringsConcatenate3-ext->4:ConcatenateStrings 105742
        String _5At;// 29:StringFormat-ext->3:At 105748
        String _6ReplaceString;// 29:StringFormat-ext->6:ReplaceString 105738
        _0Constant = {;
        _1ToString = ToString(x1);
        _2ConcatenateStrings = ConcatenateStrings(_0Constant, _1ToString);
        _3Constant = };
        _4ConcatenateStrings = ConcatenateStrings(_2ConcatenateStrings, _3Constant);
        _5At = At(_49Append, x1);
        _6ReplaceString = ReplaceString(x0, _4ConcatenateStrings, _5At);
        _6ReplaceString;
        });
    _53IgnoreSecond = IgnoreSecond(_19Pass-through: any, if (print stats)
      {
        String _52Print;// 45:PrintOnSignal-ext->3:Print 105530
        _52Print = Print(_51Repeat);
        _52Print;
        }else
      {
        _51Repeat;
        });
    _53IgnoreSecond;
    }