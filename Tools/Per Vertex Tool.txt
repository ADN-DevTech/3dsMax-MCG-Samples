(InstanceState state, TriMesh mesh, Int32 per vertex channel, Boolean copy to map channel, Int32 target map channel, Boolean scale, Boolean autoScale, Single min value, Single max value, Boolean color or grayscale, Boolean chromatic or hue, Boolean print stats) => 
  {
    IArray[Single] _0PerVertexData;// 11:PerVertexData 103397
    Boolean _1IsNull;// 25:IsNull 103396
    TriMesh _19Pass-through: any;// 0:Pass-through: any 103389
    String _20Constant;// 43:ArrayStatisticsString-ext->0:Constant 103613
    Int32 _21Count;// 43:ArrayStatisticsString-ext->32:Count 103632
    String _22ToString;// 43:ArrayStatisticsString-ext->33:ToString 103631
    IArray[String] _23Unit;// 4:Array3->2:Unit 103630
    IArray[Int32] _24Indices;// 2:IndexOfMinimum->1:Indices 103649
    Int32 _25Zero;// 2:IndexOfMinimum->3:Zero 103650
    Int32 _26Aggregate;// 2:IndexOfMinimum->2:Aggregate 103648
    IArray[Int32] _27Unit;// 4:Array2->2:Unit 103646
    IArray[Int32] _28Indices;// 3:IndexOfMaximum->1:Indices 103660
    Int32 _29Zero;// 3:IndexOfMaximum->3:Zero 103661
    Int32 _30Aggregate;// 3:IndexOfMaximum->2:Aggregate 103659
    IArray[Int32] _31Append;// 4:Array2->3:Append 103645
    IArray[Single] _32Map;// 2:SelectByIndex->2:Map 103640
    Int32 _33Zero;// 35:First->2:Zero 103636
    Single _34At;// 35:First->0:At 103635
    String _35ToString;// 43:ArrayStatisticsString-ext->40:ToString 103633
    IArray[String] _36Append;// 4:Array3->3:Append 103629
    Int32 _37One;// 36:Second->2:One 103672
    Single _38At;// 36:Second->0:At 103671
    String _39ToString;// 43:ArrayStatisticsString-ext->41:ToString 103669
    IArray[String] _40Append;// 4:Array3->6:Append 103628
    Single _41DefaultValueOfElement;// 21:Sum->4:DefaultValueOfElement 103676
    Single _42Aggregate;// 21:Sum->0:Aggregate 103675
    String _43ToString;// 43:ArrayStatisticsString-ext->42:ToString 103673
    IArray[String] _44Append;// 0:Array4->5:Append 103624
    Int32 _45Count;// 1:StringEllidedJoin-ext->7:Count 103683
    Int32 _46Constant;// 43:ArrayStatisticsString-ext->0:Constant 103725
    Boolean _47GreaterThan;// 1:StringEllidedJoin-ext->9:GreaterThan 103682
    String _48IfThen;// 1:StringEllidedJoin-ext->16:IfThen 103681
    IArray[String] _49Append;// 31:Array5-ext->1:Append 103619
    Int32 _50Count;// 29:StringFormat-ext->4:Count 103601
    String _51Repeat;// 29:StringFormat-ext->2:Repeat 103600
    TriMesh _53IgnoreSecond;// 45:PrintOnSignal-ext->1:IgnoreSecond 103392
    _0PerVertexData = PerVertexData(mesh, per vertex channel);
    _1IsNull = IsNull(_0PerVertexData);
    _19Pass-through: any = if (_1IsNull)
      {
        mesh;
        }else
      {
        TriMesh _18IgnoreFirst;// 3:MapChannelSetVerticesConditionally-ext->7:IgnoreFirst 103405
        _18IgnoreFirst = IgnoreFirst(mesh, if (copy to map channel)
          {
            Boolean _2Not;// 19:NormalizeFloatsConditionally-ext->3:Not 103542
            IArray[Single] _14Pass-through: array;// 0:Pass-through: array 103414
            IArray[Vector3] _15Map;// 8:FloatsToColors-ext->6:Map 103417
            IArray[Int32] _16MeshIndices;// 9:MapChannelSetVertices-ext->4:MeshIndices 103411
            TriMesh _17SetMapChannel;// 9:MapChannelSetVertices-ext->9:SetMapChannel 103410
            _2Not = Not(scale);
            _14Pass-through: array = if (_2Not)
              {
                _0PerVertexData;
                }else
              {
                Single _7Pass-through: Single;// 0:Pass-through: Single 103544
                Single _12Pass-through: Single;// 0:Pass-through: Single 103545
                IArray[Single] _13Map;// 10:NormalizeFloatsSafely-ext->5:Map 103546
                _7Pass-through: Single = if (autoScale)
                  {
                    IArray[Int32] _3Indices;// 3:IndexOfMinimum->1:Indices 103567
                    Int32 _4Zero;// 3:IndexOfMinimum->3:Zero 103568
                    Int32 _5Aggregate;// 3:IndexOfMinimum->2:Aggregate 103566
                    Single _6At;// 16:MinimumElement->0:At 103564
                    _3Indices = Indices(_0PerVertexData);
                    _4Zero = Zero();
                    _5Aggregate = Aggregate(_3Indices, _4Zero, (Int32 x0, Int32 x1) => 
                      {
                        Single _0At;// 4:IndexOfLesserElement->4:At 103574
                        Single _1At;// 4:IndexOfLesserElement->5:At 103575
                        Boolean _2LessThanOrEqual;// 4:IndexOfLesserElement->2:LessThanOrEqual 103573
                        _0At = At(_0PerVertexData, x0);
                        _1At = At(_0PerVertexData, x1);
                        _2LessThanOrEqual = LessThanOrEqual(_0At, _1At);
                        if (_2LessThanOrEqual)
                          {
                            x0;
                            }else
                          {
                            x1;
                            };
                        });
                    _6At = At(_0PerVertexData, _5Aggregate);
                    _6At;
                    }else
                  {
                    min value;
                    };
                _12Pass-through: Single = if (autoScale)
                  {
                    IArray[Int32] _8Indices;// 3:IndexOfMaximum->1:Indices 103581
                    Int32 _9Zero;// 3:IndexOfMaximum->3:Zero 103582
                    Int32 _10Aggregate;// 3:IndexOfMaximum->2:Aggregate 103580
                    Single _11At;// 18:MaximumElement->0:At 103578
                    _8Indices = Indices(_0PerVertexData);
                    _9Zero = Zero();
                    _10Aggregate = Aggregate(_8Indices, _9Zero, (Int32 x0, Int32 x1) => 
                      {
                        Single _0At;// 4:IndexOfGreaterElement->4:At 103588
                        Single _1At;// 4:IndexOfGreaterElement->5:At 103589
                        Boolean _2GreaterThanOrEqual;// 4:IndexOfGreaterElement->2:GreaterThanOrEqual 103587
                        _0At = At(_0PerVertexData, x0);
                        _1At = At(_0PerVertexData, x1);
                        _2GreaterThanOrEqual = GreaterThanOrEqual(_0At, _1At);
                        if (_2GreaterThanOrEqual)
                          {
                            x0;
                            }else
                          {
                            x1;
                            };
                        });
                    _11At = At(_0PerVertexData, _10Aggregate);
                    _11At;
                    }else
                  {
                    max value;
                    };
                _13Map = Map(_0PerVertexData, (Single x0) => 
                  {
                    Single _0Subtract;// 7:FloatNormalizeSafely-ext->2:Subtract 103560
                    Single _1Subtract;// 7:FloatNormalizeSafely-ext->3:Subtract 103561
                    Single _2Abs;// 3:FloatIsSmall-ext->4:Abs 103557
                    Single _3Constant;// 2:VectorLengthEpsilon-ext->0:Constant 103558
                    Boolean _4LessThanOrEqual;// 3:FloatIsSmall-ext->1:LessThanOrEqual 103556
                    Single _6IgnoreFirst;// 7:DivideDefault-ext->8:IgnoreFirst 103553
                    _0Subtract = Subtract(x0, _7Pass-through: Single);
                    _1Subtract = Subtract(_12Pass-through: Single, _7Pass-through: Single);
                    _2Abs = Abs(_1Subtract);
                    _3Constant = 1E-06;
                    _4LessThanOrEqual = LessThanOrEqual(_2Abs, _3Constant);
                    _6IgnoreFirst = IgnoreFirst(_0Subtract, if (_4LessThanOrEqual)
                      {
                        x0;
                        }else
                      {
                        Single _5Divide;// 7:DivideDefault-ext->5:Divide 103559
                        _5Divide = Divide(_0Subtract, _1Subtract);
                        _5Divide;
                        });
                    _6IgnoreFirst;
                    });
                _13Map;
                };
            _15Map = Map(_14Pass-through: array, (Single x0) => 
              {
                if (color or grayscale)
                  {
                    if (chromatic or hue)
                      {
                        Vector3 _0ZAxis;// 4:Blue->1:ZAxis 103462
                        IArray[Vector3] _1Unit;// 4:Array3->2:Unit 103461
                        Single _2Constant;// 7:Cyan->0:Constant 103464
                        Single _3Constant;// 7:Cyan->0:Constant 103465
                        Vector3 _4Vector3;// 7:Cyan->0:Vector3 103463
                        IArray[Vector3] _5Append;// 4:Array3->3:Append 103460
                        Vector3 _6YAxis;// 5:Green->1:YAxis 103466
                        IArray[Vector3] _7Append;// 4:Array3->6:Append 103459
                        Single _8Constant;// 8:Yellow->0:Constant 103468
                        Single _9Constant;// 8:Yellow->0:Constant 103469
                        Vector3 _10Vector3;// 8:Yellow->0:Vector3 103467
                        IArray[Vector3] _11Append;// 3:Array4->5:Append 103455
                        Vector3 _12XAxis;// 6:Red->1:XAxis 103470
                        IArray[Vector3] _13Append;// 4:BlendChromatic->9:Append 103450
                        Int32 _14Count;// 3:LastIndex->2:Count 103433
                        Int32 _15One;// 3:MinusOne->2:One 103432
                        Int32 _16Subtract;// 3:MinusOne->1:Subtract 103431
                        Vector3 _17At;// 24:Last->0:At 103428
                        IArray[Vector3] _18Append;// 0:BlendNColors->23:Append 103426
                        Int32 _19Count;// 0:BlendNColors->11:Count 103440
                        Int32 _20One;// 14:MinusOne->2:One 103439
                        Int32 _21Subtract;// 14:MinusOne->1:Subtract 103438
                        Single _22IntAsFloat;// 0:BlendNColors->12:IntAsFloat 103436
                        Single _23FloatZero;// 0:BlendNColors->6:FloatZero 103442
                        Single _24FloatOne;// 0:BlendNColors->5:FloatOne 103443
                        Single _25ClampFloat;// 0:BlendNColors->4:ClampFloat 103441
                        Single _26Multiply;// 0:BlendNColors->13:Multiply 103435
                        Int32 _27Truncate;// 0:BlendNColors->22:Truncate 103434
                        Vector3 _28At;// 0:BlendNColors->15:At 103424
                        Int32 _29One;// 17:PlusOne->1:One 103447
                        Int32 _30Add;// 17:PlusOne->0:Add 103446
                        Vector3 _31At;// 0:BlendNColors->16:At 103444
                        Single _32TruncateAsFloat;// 0:BlendNColors->21:TruncateAsFloat 103449
                        Single _33Subtract;// 0:BlendNColors->19:Subtract 103448
                        Vector3 _34Lerp;// 0:BlendNColors->18:Lerp 103423
                        _0ZAxis = ZAxis();
                        _1Unit = Unit(_0ZAxis);
                        _2Constant = 0;
                        _3Constant = 1;
                        _4Vector3 = Vector3(_2Constant, _3Constant, _3Constant);
                        _5Append = Append(_1Unit, _4Vector3);
                        _6YAxis = YAxis();
                        _7Append = Append(_5Append, _6YAxis);
                        _8Constant = 1;
                        _9Constant = 0;
                        _10Vector3 = Vector3(_8Constant, _8Constant, _9Constant);
                        _11Append = Append(_7Append, _10Vector3);
                        _12XAxis = XAxis();
                        _13Append = Append(_11Append, _12XAxis);
                        _14Count = Count(_13Append);
                        _15One = One();
                        _16Subtract = Subtract(_14Count, _15One);
                        _17At = At(_13Append, _16Subtract);
                        _18Append = Append(_13Append, _17At);
                        _19Count = Count(_13Append);
                        _20One = One();
                        _21Subtract = Subtract(_19Count, _20One);
                        _22IntAsFloat = IntAsFloat(_21Subtract);
                        _23FloatZero = FloatZero();
                        _24FloatOne = FloatOne();
                        _25ClampFloat = ClampFloat(x0, _23FloatZero, _24FloatOne);
                        _26Multiply = Multiply(_22IntAsFloat, _25ClampFloat);
                        _27Truncate = Truncate(_26Multiply);
                        _28At = At(_18Append, _27Truncate);
                        _29One = One();
                        _30Add = Add(_27Truncate, _29One);
                        _31At = At(_18Append, _30Add);
                        _32TruncateAsFloat = TruncateAsFloat(_26Multiply);
                        _33Subtract = Subtract(_26Multiply, _32TruncateAsFloat);
                        _34Lerp = Lerp(_28At, _31At, _33Subtract);
                        _34Lerp;
                        }else
                      {
                        Single _35Constant;// 8:RGBFromHue->0:Constant 103490
                        Single _36Constant;// 3:SecondaryColorValueFromHue->0:Constant 103493
                        Single _37Constant;// 3:SecondaryColorValueFromHue->0:Constant 103498
                        Single _38Multiply;// 3:SecondaryColorValueFromHue->2:Multiply 103497
                        Single _39Constant;// 3:SecondaryColorValueFromHue->0:Constant 103499
                        Single _40Modulo;// 3:SecondaryColorValueFromHue->4:Modulo 103496
                        Single _41Subtract;// 3:SecondaryColorValueFromHue->6:Subtract 103495
                        Single _42Abs;// 3:SecondaryColorValueFromHue->8:Abs 103494
                        Single _43Subtract;// 3:SecondaryColorValueFromHue->9:Subtract 103492
                        Single _44Constant;// 1:Vector3FromXY->0:Constant 103489
                        Vector3 _45Vector3;// 1:Vector3FromXY->0:Vector3 103488
                        Func[Vector3] _46Pass-through: any;// 0:Pass-through: any 103480
                        IArray[Func[Vector3]] _47Unit;// 12:Array3->2:Unit 103485
                        Single _48Constant;// 4:Vector3FromXY->0:Constant 103503
                        Vector3 _49Vector3;// 4:Vector3FromXY->0:Vector3 103502
                        Func[Vector3] _50Pass-through: any;// 0:Pass-through: any 103481
                        IArray[Func[Vector3]] _51Append;// 12:Array3->3:Append 103484
                        Single _52Constant;// 5:Vector3FromYZ->0:Constant 103507
                        Vector3 _53Vector3;// 5:Vector3FromYZ->0:Vector3 103506
                        Func[Vector3] _54Pass-through: any;// 0:Pass-through: any 103482
                        IArray[Func[Vector3]] _55Append;// 12:Array3->6:Append 103483
                        IArray[IArray[Func[Vector3]]] _56Unit;// 14:Array2->2:Unit 103479
                        Single _57Constant;// 6:Vector3FromYZ->0:Constant 103517
                        Vector3 _58Vector3;// 6:Vector3FromYZ->0:Vector3 103516
                        Func[Vector3] _59Pass-through: any;// 0:Pass-through: any 103508
                        IArray[Func[Vector3]] _60Unit;// 13:Array3->2:Unit 103513
                        Single _61Constant;// 7:Vector3FromXZ->0:Constant 103521
                        Vector3 _62Vector3;// 7:Vector3FromXZ->0:Vector3 103520
                        Func[Vector3] _63Pass-through: any;// 0:Pass-through: any 103509
                        IArray[Func[Vector3]] _64Append;// 13:Array3->3:Append 103512
                        Single _65Constant;// 8:Vector3FromXZ->0:Constant 103525
                        Vector3 _66Vector3;// 8:Vector3FromXZ->0:Vector3 103524
                        Func[Vector3] _67Pass-through: any;// 0:Pass-through: any 103510
                        IArray[Func[Vector3]] _68Append;// 13:Array3->6:Append 103511
                        IArray[IArray[Func[Vector3]]] _69Append;// 14:Array2->3:Append 103478
                        IArray[Func[Vector3]] _70Flatten;// 8:RGBFromHue->15:Flatten 103475
                        Single _71Constant;// 8:RGBFromHue->0:Constant 103529
                        Single _72Multiply;// 8:RGBFromHue->9:Multiply 103528
                        Single _73Modulo;// 8:RGBFromHue->19:Modulo 103527
                        Int32 _74Floor;// 8:RGBFromHue->16:Floor 103526
                        Func[Vector3] _75At;// 8:RGBFromHue->17:At 103474
                        Vector3 _76Apply0;// 8:RGBFromHue->2:Apply0 103473
                        _35Constant = 1;
                        _36Constant = 1;
                        _37Constant = 6;
                        _38Multiply = Multiply(x0, _37Constant);
                        _39Constant = 2;
                        _40Modulo = Modulo(_38Multiply, _39Constant);
                        _41Subtract = Subtract(_40Modulo, _36Constant);
                        _42Abs = Abs(_41Subtract);
                        _43Subtract = Subtract(_36Constant, _42Abs);
                        _44Constant = 0;
                        _45Vector3 = Vector3(_35Constant, _43Subtract, _44Constant);
                        _46Pass-through: any = () => 
                          {
                            _45Vector3;
                            };
                        _47Unit = Unit(_46Pass-through: any);
                        _48Constant = 0;
                        _49Vector3 = Vector3(_43Subtract, _35Constant, _48Constant);
                        _50Pass-through: any = () => 
                          {
                            _49Vector3;
                            };
                        _51Append = Append(_47Unit, _50Pass-through: any);
                        _52Constant = 0;
                        _53Vector3 = Vector3(_52Constant, _35Constant, _43Subtract);
                        _54Pass-through: any = () => 
                          {
                            _53Vector3;
                            };
                        _55Append = Append(_51Append, _54Pass-through: any);
                        _56Unit = Unit(_55Append);
                        _57Constant = 0;
                        _58Vector3 = Vector3(_57Constant, _43Subtract, _35Constant);
                        _59Pass-through: any = () => 
                          {
                            _58Vector3;
                            };
                        _60Unit = Unit(_59Pass-through: any);
                        _61Constant = 0;
                        _62Vector3 = Vector3(_43Subtract, _61Constant, _35Constant);
                        _63Pass-through: any = () => 
                          {
                            _62Vector3;
                            };
                        _64Append = Append(_60Unit, _63Pass-through: any);
                        _65Constant = 0;
                        _66Vector3 = Vector3(_35Constant, _65Constant, _43Subtract);
                        _67Pass-through: any = () => 
                          {
                            _66Vector3;
                            };
                        _68Append = Append(_64Append, _67Pass-through: any);
                        _69Append = Append(_56Unit, _68Append);
                        _70Flatten = Flatten(_69Append);
                        _71Constant = 6;
                        _72Multiply = Multiply(_71Constant, x0);
                        _73Modulo = Modulo(_72Multiply, _71Constant);
                        _74Floor = Floor(_73Modulo);
                        _75At = At(_70Flatten, _74Floor);
                        _76Apply0 = Apply0(_75At);
                        _76Apply0;
                        };
                    }else
                  {
                    Single _77Constant;// 5:BlendBlackWhite-ext->0:Constant 103533
                    Vector3 _78Vector3;// 5:BlendBlackWhite-ext->5:Vector3 103532
                    Single _79Constant;// 5:BlendBlackWhite-ext->0:Constant 103535
                    Vector3 _80Vector3;// 5:BlendBlackWhite-ext->3:Vector3 103534
                    Vector3 _81Lerp;// 5:BlendBlackWhite-ext->1:Lerp 103531
                    _77Constant = 0;
                    _78Vector3 = Vector3(_77Constant, _77Constant, _77Constant);
                    _79Constant = 1;
                    _80Vector3 = Vector3(_79Constant, _79Constant, _79Constant);
                    _81Lerp = Lerp(_78Vector3, _80Vector3, x0);
                    _81Lerp;
                    };
                });
            _16MeshIndices = MeshIndices(mesh);
            _17SetMapChannel = SetMapChannel(mesh, target map channel, _15Map, _16MeshIndices);
            _17SetMapChannel;
            }else
          {
            mesh;
            });
        _18IgnoreFirst;
        };
    _20Constant = Count = {0}, Minimum = {1}, Maximum = {2}, Sum = {3}. Values = {4};
    _21Count = Count(_0PerVertexData);
    _22ToString = ToString(_21Count);
    _23Unit = Unit(_22ToString);
    _24Indices = Indices(_0PerVertexData);
    _25Zero = Zero();
    _26Aggregate = Aggregate(_24Indices, _25Zero, (Int32 x0, Int32 x1) => 
      {
        Single _0At;// 4:IndexOfLesserElement->4:At 103656
        Single _1At;// 4:IndexOfLesserElement->5:At 103657
        Boolean _2LessThanOrEqual;// 4:IndexOfLesserElement->2:LessThanOrEqual 103655
        _0At = At(_0PerVertexData, x0);
        _1At = At(_0PerVertexData, x1);
        _2LessThanOrEqual = LessThanOrEqual(_0At, _1At);
        if (_2LessThanOrEqual)
          {
            x0;
            }else
          {
            x1;
            };
        });
    _27Unit = Unit(_26Aggregate);
    _28Indices = Indices(_0PerVertexData);
    _29Zero = Zero();
    _30Aggregate = Aggregate(_28Indices, _29Zero, (Int32 x0, Int32 x1) => 
      {
        Single _0At;// 4:IndexOfGreaterElement->4:At 103667
        Single _1At;// 4:IndexOfGreaterElement->5:At 103668
        Boolean _2GreaterThanOrEqual;// 4:IndexOfGreaterElement->2:GreaterThanOrEqual 103666
        _0At = At(_0PerVertexData, x0);
        _1At = At(_0PerVertexData, x1);
        _2GreaterThanOrEqual = GreaterThanOrEqual(_0At, _1At);
        if (_2GreaterThanOrEqual)
          {
            x0;
            }else
          {
            x1;
            };
        });
    _31Append = Append(_27Unit, _30Aggregate);
    _32Map = Map(_31Append, (Int32 x0) => 
      {
        Single _0At;// 2:SelectByIndex->3:At 103641
        _0At = At(_0PerVertexData, x0);
        _0At;
        });
    _33Zero = Zero();
    _34At = At(_32Map, _33Zero);
    _35ToString = ToString(_34At);
    _36Append = Append(_23Unit, _35ToString);
    _37One = One();
    _38At = At(_32Map, _37One);
    _39ToString = ToString(_38At);
    _40Append = Append(_36Append, _39ToString);
    _41DefaultValueOfElement = DefaultValueOfElement(_0PerVertexData);
    _42Aggregate = Aggregate(_0PerVertexData, _41DefaultValueOfElement, (Single x0, Single x1) => 
      {
        Single _0Add;// 21:Sum->2:Add 103677
        _0Add = Add(x0, x1);
        _0Add;
        });
    _43ToString = ToString(_42Aggregate);
    _44Append = Append(_40Append, _43ToString);
    _45Count = Count(_0PerVertexData);
    _46Constant = 10;
    _47GreaterThan = GreaterThan(_45Count, _46Constant);
    _48IfThen = IfThen(_47GreaterThan, () => 
      {
        Int32 _0One;// 0:MinusOne->2:One 103702
        Int32 _1Subtract;// 0:MinusOne->1:Subtract 103701
        IArray[Single] _2Take;// 1:StringEllidedJoin-ext->5:Take 103699
        IArray[String] _3Map;// 6:StringJoin->7:Map 103692
        Int32 _4One;// 10:SkipOne->2:One 103691
        IArray[String] _5Skip;// 10:SkipOne->3:Skip 103690
        Int32 _6Zero;// 3:First->2:Zero 103696
        String _7At;// 3:First->0:At 103695
        String _8Constant;// 43:ArrayStatisticsString-ext->0:Constant 103726
        String _9Aggregate;// 6:StringJoin->2:Aggregate 103688
        String _10Constant;// 1:StringEllidedJoin-ext->0:Constant 103703
        String _11ConcatenateStrings;// 1:StringEllidedJoin-ext->10:ConcatenateStrings 103685
        Int32 _12Count;// 3:LastIndex->2:Count 103711
        Int32 _13One;// 3:MinusOne->2:One 103710
        Int32 _14Subtract;// 3:MinusOne->1:Subtract 103709
        Single _15At;// 14:Last->0:At 103706
        String _16ToString;// 1:StringEllidedJoin-ext->13:ToString 103704
        String _17ConcatenateStrings;// 1:StringEllidedJoin-ext->12:ConcatenateStrings 103684
        _0One = One();
        _1Subtract = Subtract(_46Constant, _0One);
        _2Take = Take(_0PerVertexData, _1Subtract);
        _3Map = Map(_2Take, (Single x0) => 
          {
            String _0ToString;// 6:StringJoin->8:ToString 103693
            _0ToString = ToString(x0);
            _0ToString;
            });
        _4One = One();
        _5Skip = Skip(_3Map, _4One);
        _6Zero = Zero();
        _7At = At(_3Map, _6Zero);
        _8Constant = , ;
        _9Aggregate = Aggregate(_5Skip, _7At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 6:StringJoin->4:ConcatenateStrings 103698
            String _1ConcatenateStrings;// 6:StringJoin->5:ConcatenateStrings 103697
            _0ConcatenateStrings = ConcatenateStrings(x0, _8Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _10Constant =  ... ;
        _11ConcatenateStrings = ConcatenateStrings(_9Aggregate, _10Constant);
        _12Count = Count(_0PerVertexData);
        _13One = One();
        _14Subtract = Subtract(_12Count, _13One);
        _15At = At(_0PerVertexData, _14Subtract);
        _16ToString = ToString(_15At);
        _17ConcatenateStrings = ConcatenateStrings(_11ConcatenateStrings, _16ToString);
        _17ConcatenateStrings;
        }, () => 
      {
        IArray[String] _0Map;// 2:StringJoin->7:Map 103718
        Int32 _1One;// 10:SkipOne->2:One 103717
        IArray[String] _2Skip;// 10:SkipOne->3:Skip 103716
        Int32 _3Zero;// 3:First->2:Zero 103722
        String _4At;// 3:First->0:At 103721
        String _5Constant;// 43:ArrayStatisticsString-ext->0:Constant 103726
        String _6Aggregate;// 2:StringJoin->2:Aggregate 103714
        _0Map = Map(_0PerVertexData, (Single x0) => 
          {
            String _0ToString;// 2:StringJoin->8:ToString 103719
            _0ToString = ToString(x0);
            _0ToString;
            });
        _1One = One();
        _2Skip = Skip(_0Map, _1One);
        _3Zero = Zero();
        _4At = At(_0Map, _3Zero);
        _5Constant = , ;
        _6Aggregate = Aggregate(_2Skip, _4At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 2:StringJoin->4:ConcatenateStrings 103724
            String _1ConcatenateStrings;// 2:StringJoin->5:ConcatenateStrings 103723
            _0ConcatenateStrings = ConcatenateStrings(x0, _5Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _6Aggregate;
        });
    _49Append = Append(_44Append, _48IfThen);
    _50Count = Count(_49Append);
    _51Repeat = Repeat(_20Constant, _50Count, (String x0, Int32 x1) => 
      {
        String _0Constant;// 29:StringFormat-ext->0:Constant 103608
        String _1ToString;// 29:StringFormat-ext->8:ToString 103609
        String _2ConcatenateStrings;// 9:StringsConcatenate3-ext->3:ConcatenateStrings 103607
        String _3Constant;// 29:StringFormat-ext->0:Constant 103611
        String _4ConcatenateStrings;// 9:StringsConcatenate3-ext->4:ConcatenateStrings 103606
        String _5At;// 29:StringFormat-ext->3:At 103612
        String _6ReplaceString;// 29:StringFormat-ext->6:ReplaceString 103602
        _0Constant = {;
        _1ToString = ToString(x1);
        _2ConcatenateStrings = ConcatenateStrings(_0Constant, _1ToString);
        _3Constant = };
        _4ConcatenateStrings = ConcatenateStrings(_2ConcatenateStrings, _3Constant);
        _5At = At(_49Append, x1);
        _6ReplaceString = ReplaceString(x0, _4ConcatenateStrings, _5At);
        _6ReplaceString;
        });
    _53IgnoreSecond = IgnoreSecond(_19Pass-through: any, if (print stats)
      {
        String _52Print;// 45:PrintOnSignal-ext->3:Print 103394
        _52Print = Print(_51Repeat);
        _52Print;
        }else
      {
        _51Repeat;
        });
    _53IgnoreSecond;
    }