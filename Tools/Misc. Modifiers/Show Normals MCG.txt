(InstanceState state, Boolean keep original, Boolean vertices or faces, TriMesh mesh, Single arrow length) => 
  {
    Int32 _0Constant;// 3:ArrowDefaults-ext->0:Constant 44869
    Int32 _1One;// 14:MinusOne->2:One 44852
    Int32 _2Subtract;// 14:MinusOne->1:Subtract 44851
    Int32 _3One;// 12:PlusOne->1:One 44773
    Int32 _4Add;// 12:PlusOne->0:Add 44772
    IArray[Single] _5RangeExclusiveFloat;// 11:RangeExclusiveFloatTo->0:RangeExclusiveFloat 44769
    Single _6Constant;// 1:LathePointsAroundAxis->0:Constant 44785
    Single _7ToRadians;// 2:LathePoints->9:ToRadians 44774
    IArray[Single] _8Map;// 11:RangeExclusiveFloatTo->2:Map 44768
    Int32 _9One;// 3:ArrowDefaults-ext->2:One 44870
    Int32 _10One;// 16:PlusOne->1:One 44805
    Int32 _11Add;// 16:PlusOne->0:Add 44804
    IArray[Single] _12RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 44801
    Single _13Constant;// 3:ArrowDefaults-ext->0:Constant 44871
    Single _14Constant;// 13:DivideBy100Float->0:Constant 44856
    Single _15Divide;// 13:DivideBy100Float->1:Divide 44855
    Single _16Constant;// 3:ArrowDefaults-ext->0:Constant 44872
    Single _17Constant;// 4:DivideBy100Float->0:Constant 44860
    Single _18Divide;// 4:DivideBy100Float->1:Divide 44859
    Single _19Multiply;// 0:Arrow-ext->17:Multiply 44857
    Single _20Multiply;// 0:Arrow-ext->16:Multiply 44853
    Single _21Constant;// 0:Origin->0:Constant 44812
    Vector3 _22Vector3;// 0:Origin->1:Vector3 44811
    Single _23Y;// 12:SetX->3:Y 44809
    Single _24Z;// 12:SetX->4:Z 44810
    Vector3 _25Vector3;// 12:SetX->2:Vector3 44808
    Single _26X;// 11:OffsetY->7:X 44816
    Single _27Constant;// 3:ArrowDefaults-ext->0:Constant 44873
    Single _28Constant;// 21:DivideBy100Float->0:Constant 44865
    Single _29Divide;// 21:DivideBy100Float->1:Divide 44864
    Single _30Multiply;// 0:Arrow-ext->18:Multiply 44862
    Single _31Subtract;// 0:Arrow-ext->19:Subtract 44861
    Single _32Y;// 11:OffsetY->6:Y 44818
    Single _33Add;// 11:OffsetY->3:Add 44817
    Single _34Z;// 11:OffsetY->5:Z 44819
    Vector3 _35Vector3;// 11:OffsetY->1:Vector3 44815
    Func[Single, Vector3] _36Pass-through: function1;// 0:Pass-through: function1 44799
    IArray[Vector3] _37Map;// 5:SampleLerp->3:Map 44800
    Int32 _38One;// 3:ArrowDefaults-ext->1:One 44874
    Int32 _39One;// 17:PlusOne->1:One 44830
    Int32 _40Add;// 17:PlusOne->0:Add 44829
    IArray[Single] _41RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 44826
    Single _42Y;// 7:SetX->3:Y 44834
    Single _43Z;// 7:SetX->4:Z 44835
    Vector3 _44Vector3;// 7:SetX->2:Vector3 44833
    Single _45Constant;// 0:ArrowShape->0:Constant 44841
    Single _46X;// 8:OffsetY->7:X 44845
    Single _47Y;// 8:OffsetY->6:Y 44847
    Single _48Add;// 8:OffsetY->3:Add 44846
    Single _49Z;// 8:OffsetY->5:Z 44848
    Vector3 _50Vector3;// 8:OffsetY->1:Vector3 44844
    Single _51Y;// 14:SetX->3:Y 44839
    Single _52Z;// 14:SetX->4:Z 44840
    Vector3 _53Vector3;// 14:SetX->2:Vector3 44838
    Func[Single, Vector3] _54Pass-through: function1;// 0:Pass-through: function1 44824
    IArray[Vector3] _55Map;// 5:SampleLerp->3:Map 44825
    IArray[Vector3] _56Concatenate;// 0:ArrowShape->10:Concatenate 44794
    IArray[Vector3] _57Prepend;// 0:ArrowShape->18:Prepend 44793
    Vector3 _58YAxis;// 0:Arrow->9:YAxis 44849
    Func[Single, IArray[Vector3]] _59Pass-through: function1;// 0:Pass-through: function1 44763
    IArray[IArray[Vector3]] _60Map;// 10:FlatMap->4:Map 44765
    IArray[Vector3] _61Flatten;// 10:FlatMap->3:Flatten 44764
    Boolean _62True;// 1:LathePointsAroundAxis->5:True 44786
    Boolean _63False;// 2:LathePoints->7:False 44784
    QuadMesh _64QuadMeshStrip;// 2:LathePoints->0:QuadMeshStrip 44761
    IArray[Vector3] _65QuadMeshVertices;// 11:QuadMeshToTriMesh-ext->14:QuadMeshVertices 44710
    IArray[Int32] _66QuadMeshIndices;// 11:QuadMeshToTriMesh-ext->2:QuadMeshIndices 44723
    Int32 _67Count;// 3:Slices->2:Count 44720
    Int32 _68Constant;// 11:QuadMeshToTriMesh-ext->0:Constant 44724
    Int32 _69Divide;// 3:Slices->3:Divide 44719
    IArray[Int32] _70Range;// 3:Slices->4:Range 44718
    IArray[IArray[Int32]] _71Map;// 3:Slices->5:Map 44717
    Int32 _72Constant;// 11:QuadMeshToTriMesh-ext->0:Constant 44739
    IArray[Int32] _73Range;// 11:QuadMeshToTriMesh-ext->6:Range 44738
    Int32 _74Constant;// 11:QuadMeshToTriMesh-ext->0:Constant 44740
    IArray[Int32] _75Append;// 11:QuadMeshToTriMesh-ext->11:Append 44737
    Int32 _76Constant;// 11:QuadMeshToTriMesh-ext->0:Constant 44741
    IArray[Int32] _77Append;// 11:QuadMeshToTriMesh-ext->12:Append 44736
    Int32 _78Constant;// 11:QuadMeshToTriMesh-ext->0:Constant 44742
    IArray[Int32] _79Append;// 11:QuadMeshToTriMesh-ext->17:Append 44735
    IArray[Int32] _80Map;// 23:IntArrayCheck-ext->1:Map 44733
    Func[IArray[Int32], IArray[Int32]] _81Pass-through: function1;// 0:Pass-through: function1 44712
    IArray[IArray[Int32]] _82Map;// 1:FlatMap->4:Map 44714
    IArray[Int32] _83Flatten;// 1:FlatMap->3:Flatten 44713
    TriMesh _84CreateMesh;// 11:QuadMeshToTriMesh-ext->13:CreateMesh 44709
    IArray[Int32] _85MeshIndices;// 16:HideEveryThirdEdge->2:MeshIndices 44700
    IArray[Int32] _86Indices;// 16:HideEveryThirdEdge->8:Indices 44699
    Int32 _87Constant;// 16:HideEveryThirdEdge->0:Constant 44707
    Int32 _88Constant;// 16:HideEveryThirdEdge->0:Constant 44708
    IArray[Boolean] _89Map;// 16:HideEveryThirdEdge->5:Map 44698
    TriMesh _90SetVisibleEdges;// 16:HideEveryThirdEdge->9:SetVisibleEdges 44697
    IArray[Vector3] _91MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 44693
    Vector3 _92XAxis;// 0:Arrow-ext->20:XAxis 44867
    Single _93HalfPi;// 0:Arrow-ext->12:HalfPi 44868
    Quaternion _94QuaternionFromDirectionAngle;// 0:Arrow-ext->8:QuaternionFromDirectionAngle 44866
    Func[Vector3, Vector3] _95Pass-through: function1;// 0:Pass-through: function1 44690
    IArray[Vector3] _96Map;// 2:DeformMeshPoints->1:Map 44692
    TriMesh _97SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 44691
    IArray[TriMesh] _107Pass-through: array;// 0:Pass-through: array 44651
    IArray[Vector3] _117VertexNormals;// 1:VerticesAndNormalsToMatrices->5:VertexNormals 44673
    IArray[Vector3] _118MeshVertices;// 1:VerticesAndNormalsToMatrices->1:MeshVertices 44674
    Vector3 _119ZAxis;// 1:VerticesAndNormalsToMatrices->4:ZAxis 44677
    IArray[Matrix] _120Combine;// 1:VerticesAndNormalsToMatrices->3:Combine 44672
    IArray[Face3] _121MeshFaces;// 3:FaceMatrices-ext->1:MeshFaces 44891
    Int32 _122Two;// 3:FaceMatrices-ext->4:Two 44963
    IArray[Matrix] _123Map;// 3:FaceMatrices-ext->2:Map 44890
    TriMesh _125CombineAllMeshes;// 6:CombineAllMeshes 44649
    _0Constant = 8;
    _1One = One();
    _2Subtract = Subtract(_0Constant, _1One);
    _3One = One();
    _4Add = Add(_2Subtract, _3One);
    _5RangeExclusiveFloat = RangeExclusiveFloat(_4Add);
    _6Constant = 360;
    _7ToRadians = ToRadians(_6Constant);
    _8Map = Map(_5RangeExclusiveFloat, (Single x0) => 
      {
        Single _0Multiply;// 11:RangeExclusiveFloatTo->1:Multiply 44770
        _0Multiply = Multiply(x0, _7ToRadians);
        _0Multiply;
        });
    _9One = One();
    _10One = One();
    _11Add = Add(_9One, _10One);
    _12RangeInclusiveFloat = RangeInclusiveFloat(_11Add);
    _13Constant = 25;
    _14Constant = 100;
    _15Divide = Divide(_13Constant, _14Constant);
    _16Constant = 10;
    _17Constant = 100;
    _18Divide = Divide(_16Constant, _17Constant);
    _19Multiply = Multiply(_18Divide, arrow length);
    _20Multiply = Multiply(_15Divide, _19Multiply);
    _21Constant = 0;
    _22Vector3 = Vector3(_21Constant, _21Constant, _21Constant);
    _23Y = Y(_22Vector3);
    _24Z = Z(_22Vector3);
    _25Vector3 = Vector3(_20Multiply, _23Y, _24Z);
    _26X = X(_25Vector3);
    _27Constant = 25;
    _28Constant = 100;
    _29Divide = Divide(_27Constant, _28Constant);
    _30Multiply = Multiply(arrow length, _29Divide);
    _31Subtract = Subtract(arrow length, _30Multiply);
    _32Y = Y(_25Vector3);
    _33Add = Add(_31Subtract, _32Y);
    _34Z = Z(_25Vector3);
    _35Vector3 = Vector3(_26X, _33Add, _34Z);
    _36Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0Lerp;// 9:ArrayOfLerpedVectors->3:Lerp 44802
        _0Lerp = Lerp(_25Vector3, _35Vector3, x0);
        _0Lerp;
        };
    _37Map = Map(_12RangeInclusiveFloat, _36Pass-through: function1);
    _38One = One();
    _39One = One();
    _40Add = Add(_38One, _39One);
    _41RangeInclusiveFloat = RangeInclusiveFloat(_40Add);
    _42Y = Y(_35Vector3);
    _43Z = Z(_35Vector3);
    _44Vector3 = Vector3(_19Multiply, _42Y, _43Z);
    _45Constant = 0;
    _46X = X(_44Vector3);
    _47Y = Y(_44Vector3);
    _48Add = Add(_30Multiply, _47Y);
    _49Z = Z(_44Vector3);
    _50Vector3 = Vector3(_46X, _48Add, _49Z);
    _51Y = Y(_50Vector3);
    _52Z = Z(_50Vector3);
    _53Vector3 = Vector3(_45Constant, _51Y, _52Z);
    _54Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0Lerp;// 1:ArrayOfLerpedVectors->3:Lerp 44827
        _0Lerp = Lerp(_44Vector3, _53Vector3, x0);
        _0Lerp;
        };
    _55Map = Map(_41RangeInclusiveFloat, _54Pass-through: function1);
    _56Concatenate = Concatenate(_37Map, _55Map);
    _57Prepend = Prepend(_56Concatenate, _22Vector3);
    _58YAxis = YAxis();
    _59Pass-through: function1 = (Single x0) => 
      {
        IArray[Vector3] _0Map;// 8:RotatePoints->2:Map 44778
        _0Map = Map(_57Prepend, (Vector3 x0) => 
          {
            Matrix _0MatrixFromAxisAngle;// 0:RotatePoint->1:MatrixFromAxisAngle 44783
            Vector3 _1Transform;// 0:RotatePoint->2:Transform 44782
            _0MatrixFromAxisAngle = MatrixFromAxisAngle(_58YAxis, x0);
            _1Transform = Transform(x0, _0MatrixFromAxisAngle);
            _1Transform;
            });
        _0Map;
        };
    _60Map = Map(_8Map, _59Pass-through: function1);
    _61Flatten = Flatten(_60Map);
    _62True = True();
    _63False = False();
    _64QuadMeshStrip = QuadMeshStrip(_61Flatten, _4Add, _62True, _63False);
    _65QuadMeshVertices = QuadMeshVertices(_64QuadMeshStrip);
    _66QuadMeshIndices = QuadMeshIndices(_64QuadMeshStrip);
    _67Count = Count(_66QuadMeshIndices);
    _68Constant = 4;
    _69Divide = Divide(_67Count, _68Constant);
    _70Range = Range(_69Divide);
    _71Map = Map(_70Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 3:Slices->6:Multiply 44722
        IArray[Int32] _1Slice;// 3:Slices->0:Slice 44721
        _0Multiply = Multiply(_68Constant, x0);
        _1Slice = Slice(_66QuadMeshIndices, _0Multiply, _68Constant);
        _1Slice;
        });
    _72Constant = 3;
    _73Range = Range(_72Constant);
    _74Constant = 2;
    _75Append = Append(_73Range, _74Constant);
    _76Constant = 3;
    _77Append = Append(_75Append, _76Constant);
    _78Constant = 0;
    _79Append = Append(_77Append, _78Constant);
    _80Map = Map(_79Append, (Int32 x0) => 
      {
        x0;
        });
    _81Pass-through: function1 = (IArray[Int32] x0) => 
      {
        IArray[Int32] _0Map;// 5:IntArrayCheck-ext->1:Map 44729
        IArray[Int32] _1Map;// 5:IntArrayCheck-ext->1:Map 44744
        IArray[Int32] _2Map;// 22:SelectByIndex2-ext->2:Map 44727
        _0Map = Map(_80Map, (Int32 x0) => 
          {
            x0;
            });
        _1Map = Map(x0, (Int32 x0) => 
          {
            x0;
            });
        _2Map = Map(_0Map, (Int32 x0) => 
          {
            Int32 _0At;// 22:SelectByIndex2-ext->3:At 44731
            _0At = At(_1Map, x0);
            _0At;
            });
        _2Map;
        };
    _82Map = Map(_71Map, _81Pass-through: function1);
    _83Flatten = Flatten(_82Map);
    _84CreateMesh = CreateMesh(_65QuadMeshVertices, _83Flatten);
    _85MeshIndices = MeshIndices(_84CreateMesh);
    _86Indices = Indices(_85MeshIndices);
    _87Constant = 3;
    _88Constant = 2;
    _89Map = Map(_86Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 44706
        Boolean _1Equal;// 6:ModuloEquals->4:Equal 44705
        Boolean _2Not;// 16:HideEveryThirdEdge->7:Not 44701
        _0Modulo = Modulo(x0, _87Constant);
        _1Equal = Equal(_0Modulo, _88Constant);
        _2Not = Not(_1Equal);
        _2Not;
        });
    _90SetVisibleEdges = SetVisibleEdges(_84CreateMesh, _89Map);
    _91MeshVertices = MeshVertices(_90SetVisibleEdges);
    _92XAxis = XAxis();
    _93HalfPi = HalfPi();
    _94QuaternionFromDirectionAngle = QuaternionFromDirectionAngle(_92XAxis, _93HalfPi);
    _95Pass-through: function1 = (Vector3 x0) => 
      {
        Vector3 _0Rotate;// 10:RotateMesh->3:Rotate 44694
        _0Rotate = Rotate(x0, _94QuaternionFromDirectionAngle);
        _0Rotate;
        };
    _96Map = Map(_91MeshVertices, _95Pass-through: function1);
    _97SetMeshVertices = SetMeshVertices(_90SetVisibleEdges, _96Map);
    _107Pass-through: array = if (vertices or faces)
      {
        IArray[Vector3] _98VertexNormals;// 1:VerticesAndNormalsToMatrices->5:VertexNormals 44673
        IArray[Vector3] _99MeshVertices;// 1:VerticesAndNormalsToMatrices->1:MeshVertices 44674
        Vector3 _100ZAxis;// 1:VerticesAndNormalsToMatrices->4:ZAxis 44677
        IArray[Matrix] _101Combine;// 1:VerticesAndNormalsToMatrices->3:Combine 44672
        IArray[TriMesh] _102Map;// 2:CloneMeshAtTransforms-ext->3:Map 44662
        _98VertexNormals = VertexNormals(mesh);
        _99MeshVertices = MeshVertices(mesh);
        _100ZAxis = ZAxis();
        _101Combine = Combine(_98VertexNormals, _99MeshVertices, (Vector3 x0, Vector3 x1) => 
          {
            Quaternion _0RotationBetweenVectors;// 1:VerticesAndNormalsToMatrices->0:RotationBetweenVectors 44676
            Matrix _1RotationTranslationMatrix;// 1:VerticesAndNormalsToMatrices->2:RotationTranslationMatrix 44675
            _0RotationBetweenVectors = RotationBetweenVectors(_100ZAxis, x0);
            _1RotationTranslationMatrix = RotationTranslationMatrix(_0RotationBetweenVectors, x1);
            _1RotationTranslationMatrix;
            });
        _102Map = Map(_101Combine, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 44669
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 44666
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 44668
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 44667
            _0MeshVertices = MeshVertices(_97SetMeshVertices);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 1:TransformMesh->0:Transform 44670
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_97SetMeshVertices, _2Map);
            _3SetMeshVertices;
            });
        _102Map;
        }else
      {
        IArray[Face3] _103MeshFaces;// 3:FaceMatrices-ext->1:MeshFaces 44891
        Int32 _104Two;// 3:FaceMatrices-ext->4:Two 44963
        IArray[Matrix] _105Map;// 3:FaceMatrices-ext->2:Map 44890
        IArray[TriMesh] _106Map;// 2:CloneMeshAtTransforms-ext->3:Map 44880
        _103MeshFaces = MeshFaces(mesh);
        _104Two = Two();
        _105Map = Map(_103MeshFaces, (Face3 x0) => 
          {
            Int32 _0Zero;// 3:AxisChoose-ext->9:Zero 44935
            Boolean _1GreaterThanOrEqual;// 3:AxisChoose-ext->8:GreaterThanOrEqual 44934
            Vector3 _2XAxis;// 3:AxisChoose-ext->3:XAxis 44943
            IArray[Vector3] _3Unit;// 2:Array3->2:Unit 44942
            Vector3 _4YAxis;// 3:AxisChoose-ext->4:YAxis 44944
            IArray[Vector3] _5Append;// 2:Array3->3:Append 44941
            Vector3 _6ZAxis;// 3:AxisChoose-ext->5:ZAxis 44945
            IArray[Vector3] _7Append;// 2:Array3->6:Append 44940
            Vector3 _14Pass-through: Vector3;// 0:Pass-through: Vector3 44898
            Vector3 _15Normalize;// 5:RotationBetweenVectorsFix-ext->4:Normalize 44930
            Vector3 _16FaceNormal;// 4:FaceMatrix-ext->9:FaceNormal 44961
            Single _17Length;// 4:VectorIsSmall-ext->3:Length 44958
            Single _18Constant;// 4:VectorLengthEpsilon-ext->0:Constant 44959
            Boolean _19LessThan;// 4:VectorIsSmall-ext->5:LessThan 44957
            Vector3 _21Pass-through: Vector3;// 0:Pass-through: Vector3 44899
            Vector3 _22Normalize;// 5:RotationBetweenVectorsFix-ext->5:Normalize 44931
            Single _23Dot;// 0:RotationBetweenUnitVectors-ext->6:Dot 44906
            Single _24FloatOne;// 0:RotationBetweenUnitVectors-ext->8:FloatOne 44907
            Single _25Add;// 0:RotationBetweenUnitVectors-ext->7:Add 44905
            Single _26Constant;// 0:RotationBetweenUnitVectors-ext->0:Constant 44908
            Boolean _27LessThan;// 0:RotationBetweenUnitVectors-ext->40:LessThan 44904
            Quaternion _59QuaternionNormalize;// 0:RotationBetweenUnitVectors-ext->3:QuaternionNormalize 44902
            Vector3 _60FaceMidpoint;// 3:FaceMidpointMatrix-ext->13:FaceMidpoint 44962
            Matrix _61RotationTranslationMatrix;// 4:FaceMatrix-ext->7:RotationTranslationMatrix 44897
            _0Zero = Zero();
            _1GreaterThanOrEqual = GreaterThanOrEqual(_104Two, _0Zero);
            _2XAxis = XAxis();
            _3Unit = Unit(_2XAxis);
            _4YAxis = YAxis();
            _5Append = Append(_3Unit, _4YAxis);
            _6ZAxis = ZAxis();
            _7Append = Append(_5Append, _6ZAxis);
            _14Pass-through: Vector3 = if (_1GreaterThanOrEqual)
              {
                Vector3 _8At;// 3:AxisChoose-ext->1:At 44936
                _8At = At(_7Append, _104Two);
                _8At;
                }else
              {
                Int32 _9One;// 10:PlusOne->1:One 44951
                Int32 _10Add;// 10:PlusOne->0:Add 44950
                Int32 _11Negative;// 3:AxisChoose-ext->11:Negative 44948
                Vector3 _12At;// 3:AxisChoose-ext->12:At 44947
                Vector3 _13Negate;// 3:AxisChoose-ext->13:Negate 44946
                _9One = One();
                _10Add = Add(_104Two, _9One);
                _11Negative = Negative(_10Add);
                _12At = At(_7Append, _11Negative);
                _13Negate = Negate(_12At);
                _13Negate;
                };
            _15Normalize = Normalize(_14Pass-through: Vector3);
            _16FaceNormal = FaceNormal(x0);
            _17Length = Length(_16FaceNormal);
            _18Constant = 1E-06;
            _19LessThan = LessThan(_17Length, _18Constant);
            _21Pass-through: Vector3 = if (_19LessThan)
              {
                Vector3 _20ZAxis;// 6:VectorOrZAxis-ext->2:ZAxis 44960
                _20ZAxis = ZAxis();
                _20ZAxis;
                }else
              {
                _16FaceNormal;
                };
            _22Normalize = Normalize(_21Pass-through: Vector3);
            _23Dot = Dot(_15Normalize, _22Normalize);
            _24FloatOne = FloatOne();
            _25Add = Add(_23Dot, _24FloatOne);
            _26Constant = 1E-07;
            _27LessThan = LessThan(_25Add, _26Constant);
            _59QuaternionNormalize = QuaternionNormalize(if (_27LessThan)
              {
                Single _34X;// 0:RotationBetweenUnitVectors-ext->12:X 44913
                Single _35Abs;// 0:RotationBetweenUnitVectors-ext->11:Abs 44912
                Single _36Z;// 0:RotationBetweenUnitVectors-ext->14:Z 44916
                Single _37Abs;// 0:RotationBetweenUnitVectors-ext->13:Abs 44915
                Boolean _38GreaterThan;// 0:RotationBetweenUnitVectors-ext->15:GreaterThan 44911
                Single _55FloatZero;// 0:RotationBetweenUnitVectors-ext->36:FloatZero 44927
                Quaternion _56QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->35:QuaternionFromVectorAndTheta 44909
                _34X = X(_15Normalize);
                _35Abs = Abs(_34X);
                _36Z = Z(_15Normalize);
                _37Abs = Abs(_36Z);
                _38GreaterThan = GreaterThan(_35Abs, _37Abs);
                _55FloatZero = FloatZero();
                _56QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_38GreaterThan)
                  {
                    Single _45Y;// 0:RotationBetweenUnitVectors-ext->29:Y 44919
                    Single _46NegativeFloat;// 0:RotationBetweenUnitVectors-ext->30:NegativeFloat 44918
                    Single _47X;// 0:RotationBetweenUnitVectors-ext->23:X 44920
                    Single _48FloatZero;// 0:RotationBetweenUnitVectors-ext->21:FloatZero 44921
                    Vector3 _49Vector3;// 0:RotationBetweenUnitVectors-ext->19:Vector3 44917
                    _45Y = Y(_15Normalize);
                    _46NegativeFloat = NegativeFloat(_45Y);
                    _47X = X(_15Normalize);
                    _48FloatZero = FloatZero();
                    _49Vector3 = Vector3(_46NegativeFloat, _47X, _48FloatZero);
                    _49Vector3;
                    }else
                  {
                    Single _50FloatZero;// 0:RotationBetweenUnitVectors-ext->22:FloatZero 44923
                    Single _51Z;// 0:RotationBetweenUnitVectors-ext->26:Z 44925
                    Single _52NegativeFloat;// 0:RotationBetweenUnitVectors-ext->25:NegativeFloat 44924
                    Single _53Y;// 0:RotationBetweenUnitVectors-ext->24:Y 44926
                    Vector3 _54Vector3;// 0:RotationBetweenUnitVectors-ext->20:Vector3 44922
                    _50FloatZero = FloatZero();
                    _51Z = Z(_15Normalize);
                    _52NegativeFloat = NegativeFloat(_51Z);
                    _53Y = Y(_15Normalize);
                    _54Vector3 = Vector3(_50FloatZero, _52NegativeFloat, _53Y);
                    _54Vector3;
                    }, _55FloatZero);
                _56QuaternionFromVectorAndTheta;
                }else
              {
                Vector3 _57Cross;// 0:RotationBetweenUnitVectors-ext->2:Cross 44929
                Quaternion _58QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->5:QuaternionFromVectorAndTheta 44928
                _57Cross = Cross(_15Normalize, _22Normalize);
                _58QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_57Cross, _25Add);
                _58QuaternionFromVectorAndTheta;
                });
            _60FaceMidpoint = FaceMidpoint(x0);
            _61RotationTranslationMatrix = RotationTranslationMatrix(_59QuaternionNormalize, _60FaceMidpoint);
            _61RotationTranslationMatrix;
            });
        _106Map = Map(_105Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 44887
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 44884
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 44886
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 44885
            _0MeshVertices = MeshVertices(_97SetMeshVertices);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 1:TransformMesh->0:Transform 44888
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_97SetMeshVertices, _2Map);
            _3SetMeshVertices;
            });
        _106Map;
        };
    _117VertexNormals = VertexNormals(mesh);
    _118MeshVertices = MeshVertices(mesh);
    _119ZAxis = ZAxis();
    _120Combine = Combine(_117VertexNormals, _118MeshVertices, (Vector3 x0, Vector3 x1) => 
      {
        Quaternion _0RotationBetweenVectors;// 1:VerticesAndNormalsToMatrices->0:RotationBetweenVectors 44676
        Matrix _1RotationTranslationMatrix;// 1:VerticesAndNormalsToMatrices->2:RotationTranslationMatrix 44675
        _0RotationBetweenVectors = RotationBetweenVectors(_119ZAxis, x0);
        _1RotationTranslationMatrix = RotationTranslationMatrix(_0RotationBetweenVectors, x1);
        _1RotationTranslationMatrix;
        });
    _121MeshFaces = MeshFaces(mesh);
    _122Two = Two();
    _123Map = Map(_121MeshFaces, (Face3 x0) => 
      {
        Int32 _0Zero;// 3:AxisChoose-ext->9:Zero 44935
        Boolean _1GreaterThanOrEqual;// 3:AxisChoose-ext->8:GreaterThanOrEqual 44934
        Vector3 _2XAxis;// 3:AxisChoose-ext->3:XAxis 44943
        Vector3 _3YAxis;// 3:AxisChoose-ext->4:YAxis 44944
        Vector3 _4ZAxis;// 3:AxisChoose-ext->5:ZAxis 44945
        Vector3 _17Pass-through: Vector3;// 0:Pass-through: Vector3 44898
        Vector3 _18Normalize;// 5:RotationBetweenVectorsFix-ext->4:Normalize 44930
        Vector3 _19FaceNormal;// 4:FaceMatrix-ext->9:FaceNormal 44961
        Single _20Length;// 4:VectorIsSmall-ext->3:Length 44958
        Single _21Constant;// 4:VectorLengthEpsilon-ext->0:Constant 44959
        Boolean _22LessThan;// 4:VectorIsSmall-ext->5:LessThan 44957
        Vector3 _24Pass-through: Vector3;// 0:Pass-through: Vector3 44899
        Vector3 _25Normalize;// 5:RotationBetweenVectorsFix-ext->5:Normalize 44931
        Single _26Dot;// 0:RotationBetweenUnitVectors-ext->6:Dot 44906
        Single _27FloatOne;// 0:RotationBetweenUnitVectors-ext->8:FloatOne 44907
        Single _28Add;// 0:RotationBetweenUnitVectors-ext->7:Add 44905
        Single _29Constant;// 0:RotationBetweenUnitVectors-ext->0:Constant 44908
        Boolean _30LessThan;// 0:RotationBetweenUnitVectors-ext->40:LessThan 44904
        Quaternion _74QuaternionNormalize;// 0:RotationBetweenUnitVectors-ext->3:QuaternionNormalize 44902
        Vector3 _75FaceMidpoint;// 3:FaceMidpointMatrix-ext->13:FaceMidpoint 44962
        Matrix _76RotationTranslationMatrix;// 4:FaceMatrix-ext->7:RotationTranslationMatrix 44897
        _0Zero = Zero();
        _1GreaterThanOrEqual = GreaterThanOrEqual(_122Two, _0Zero);
        _2XAxis = XAxis();
        _3YAxis = YAxis();
        _4ZAxis = ZAxis();
        _17Pass-through: Vector3 = if (_1GreaterThanOrEqual)
          {
            IArray[Vector3] _5Unit;// 2:Array3->2:Unit 44942
            IArray[Vector3] _6Append;// 2:Array3->3:Append 44941
            IArray[Vector3] _7Append;// 2:Array3->6:Append 44940
            Vector3 _8At;// 3:AxisChoose-ext->1:At 44936
            _5Unit = Unit(_2XAxis);
            _6Append = Append(_5Unit, _3YAxis);
            _7Append = Append(_6Append, _4ZAxis);
            _8At = At(_7Append, _122Two);
            _8At;
            }else
          {
            IArray[Vector3] _9Unit;// 2:Array3->2:Unit 44942
            IArray[Vector3] _10Append;// 2:Array3->3:Append 44941
            IArray[Vector3] _11Append;// 2:Array3->6:Append 44940
            Int32 _12One;// 10:PlusOne->1:One 44951
            Int32 _13Add;// 10:PlusOne->0:Add 44950
            Int32 _14Negative;// 3:AxisChoose-ext->11:Negative 44948
            Vector3 _15At;// 3:AxisChoose-ext->12:At 44947
            Vector3 _16Negate;// 3:AxisChoose-ext->13:Negate 44946
            _9Unit = Unit(_2XAxis);
            _10Append = Append(_9Unit, _3YAxis);
            _11Append = Append(_10Append, _4ZAxis);
            _12One = One();
            _13Add = Add(_122Two, _12One);
            _14Negative = Negative(_13Add);
            _15At = At(_11Append, _14Negative);
            _16Negate = Negate(_15At);
            _16Negate;
            };
        _18Normalize = Normalize(_17Pass-through: Vector3);
        _19FaceNormal = FaceNormal(x0);
        _20Length = Length(_19FaceNormal);
        _21Constant = 1E-06;
        _22LessThan = LessThan(_20Length, _21Constant);
        _24Pass-through: Vector3 = if (_22LessThan)
          {
            Vector3 _23ZAxis;// 6:VectorOrZAxis-ext->2:ZAxis 44960
            _23ZAxis = ZAxis();
            _23ZAxis;
            }else
          {
            _19FaceNormal;
            };
        _25Normalize = Normalize(_24Pass-through: Vector3);
        _26Dot = Dot(_18Normalize, _25Normalize);
        _27FloatOne = FloatOne();
        _28Add = Add(_26Dot, _27FloatOne);
        _29Constant = 1E-07;
        _30LessThan = LessThan(_28Add, _29Constant);
        _74QuaternionNormalize = QuaternionNormalize(if (_30LessThan)
          {
            Single _43X;// 0:RotationBetweenUnitVectors-ext->12:X 44913
            Single _44Abs;// 0:RotationBetweenUnitVectors-ext->11:Abs 44912
            Single _45Z;// 0:RotationBetweenUnitVectors-ext->14:Z 44916
            Single _46Abs;// 0:RotationBetweenUnitVectors-ext->13:Abs 44915
            Boolean _47GreaterThan;// 0:RotationBetweenUnitVectors-ext->15:GreaterThan 44911
            Single _70FloatZero;// 0:RotationBetweenUnitVectors-ext->36:FloatZero 44927
            Quaternion _71QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->35:QuaternionFromVectorAndTheta 44909
            _43X = X(_18Normalize);
            _44Abs = Abs(_43X);
            _45Z = Z(_18Normalize);
            _46Abs = Abs(_45Z);
            _47GreaterThan = GreaterThan(_44Abs, _46Abs);
            _70FloatZero = FloatZero();
            _71QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_47GreaterThan)
              {
                Single _60Y;// 0:RotationBetweenUnitVectors-ext->29:Y 44919
                Single _61NegativeFloat;// 0:RotationBetweenUnitVectors-ext->30:NegativeFloat 44918
                Single _62X;// 0:RotationBetweenUnitVectors-ext->23:X 44920
                Single _63FloatZero;// 0:RotationBetweenUnitVectors-ext->21:FloatZero 44921
                Vector3 _64Vector3;// 0:RotationBetweenUnitVectors-ext->19:Vector3 44917
                _60Y = Y(_18Normalize);
                _61NegativeFloat = NegativeFloat(_60Y);
                _62X = X(_18Normalize);
                _63FloatZero = FloatZero();
                _64Vector3 = Vector3(_61NegativeFloat, _62X, _63FloatZero);
                _64Vector3;
                }else
              {
                Single _65FloatZero;// 0:RotationBetweenUnitVectors-ext->22:FloatZero 44923
                Single _66Z;// 0:RotationBetweenUnitVectors-ext->26:Z 44925
                Single _67NegativeFloat;// 0:RotationBetweenUnitVectors-ext->25:NegativeFloat 44924
                Single _68Y;// 0:RotationBetweenUnitVectors-ext->24:Y 44926
                Vector3 _69Vector3;// 0:RotationBetweenUnitVectors-ext->20:Vector3 44922
                _65FloatZero = FloatZero();
                _66Z = Z(_18Normalize);
                _67NegativeFloat = NegativeFloat(_66Z);
                _68Y = Y(_18Normalize);
                _69Vector3 = Vector3(_65FloatZero, _67NegativeFloat, _68Y);
                _69Vector3;
                }, _70FloatZero);
            _71QuaternionFromVectorAndTheta;
            }else
          {
            Vector3 _72Cross;// 0:RotationBetweenUnitVectors-ext->2:Cross 44929
            Quaternion _73QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors-ext->5:QuaternionFromVectorAndTheta 44928
            _72Cross = Cross(_18Normalize, _25Normalize);
            _73QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_72Cross, _28Add);
            _73QuaternionFromVectorAndTheta;
            });
        _75FaceMidpoint = FaceMidpoint(x0);
        _76RotationTranslationMatrix = RotationTranslationMatrix(_74QuaternionNormalize, _75FaceMidpoint);
        _76RotationTranslationMatrix;
        });
    _125CombineAllMeshes = CombineAllMeshes(if (keep original)
      {
        IArray[TriMesh] _124Append;// 10:AppendIf->1:Append 44654
        _124Append = Append(_107Pass-through: array, mesh);
        _124Append;
        }else
      {
        _107Pass-through: array;
        });
    _125CombineAllMeshes;
    }