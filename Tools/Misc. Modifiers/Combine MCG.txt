(InstanceState state, IArray[INode] nodes, Single x offset, Single y offset, Single z offset, Single x rotation, Single y rotation, Single z rotation, TriMesh mesh) => 
  {
    IArray[INode] _0Filter;// 1:NodesToMeshesInWorldSpace-ext->3:Filter 1331109
    TriMesh _1EmptyMesh;// 1:NodesToMeshesInWorldSpace-ext->5:EmptyMesh 1331132
    IArray[TriMesh] _2Map;// 1:NodesToMeshesInWorldSpace-ext->2:Map 1331108
    Vector3 _3Vector3;// 11:Vector3 1331156
    Matrix _4TranslationMatrix;// 26:MatrixFromPRS-ext->3:TranslationMatrix 1331150
    Vector3 _5Vector3;// 12:Vector3 1331201
    Single _6X;// 1:VectorAsArray->1:X 1331197
    IArray[Single] _7Unit;// 4:Array3->2:Unit 1331196
    Single _8Y;// 1:VectorAsArray->2:Y 1331198
    IArray[Single] _9Append;// 4:Array3->3:Append 1331195
    Single _10Z;// 1:VectorAsArray->3:Z 1331199
    IArray[Single] _11Append;// 4:Array3->6:Append 1331194
    Func[Single, Single] _12Pass-through: function1;// 0:Pass-through: function1 1331176
    IArray[Single] _13Map;// 1:VectorMapComponents-ext->2:Map 1331189
    Int32 _14Zero;// 3:VectorFromArray-ext->5:Zero 1331180
    Single _15At;// 3:VectorFromArray-ext->1:At 1331179
    Int32 _16One;// 6:PlusOne->1:One 1331184
    Int32 _17Add;// 6:PlusOne->0:Add 1331183
    Single _18At;// 3:VectorFromArray-ext->2:At 1331181
    Int32 _19One;// 7:PlusOne->1:One 1331188
    Int32 _20Add;// 7:PlusOne->0:Add 1331187
    Single _21At;// 3:VectorFromArray-ext->3:At 1331185
    Vector3 _22Vector3;// 3:VectorFromArray-ext->4:Vector3 1331178
    Single _23X;// 1:RotationMatrixFromEuler->0:X 1331169
    Matrix _24RotationXMatrix;// 1:RotationMatrixFromEuler->4:RotationXMatrix 1331168
    Single _25Y;// 1:RotationMatrixFromEuler->2:Y 1331171
    Matrix _26RotationYMatrix;// 1:RotationMatrixFromEuler->5:RotationYMatrix 1331170
    Matrix _27Multiply;// 8:MultiplyThreeNumbers->0:Multiply 1331167
    Single _28Z;// 1:RotationMatrixFromEuler->3:Z 1331173
    Matrix _29RotationZMatrix;// 1:RotationMatrixFromEuler->6:RotationZMatrix 1331172
    Matrix _30Multiply;// 8:MultiplyThreeNumbers->1:Multiply 1331166
    Quaternion _31GetMatrixRotation;// 13:QuaternionFromEuler->4:GetMatrixRotation 1331161
    Matrix _32MatrixFromQuaternion;// 26:MatrixFromPRS-ext->4:MatrixFromQuaternion 1331151
    Matrix _33Multiply;// 6:Multiply3-ext->3:Multiply 1331149
    Single _34Constant;// 9:OnesVector-ext->0:Constant 1331206
    Vector3 _35Vector3;// 9:OnesVector-ext->2:Vector3 1331205
    Single _36Constant;// 8:Origin->0:Constant 1331155
    Vector3 _37Vector3;// 8:Origin->1:Vector3 1331154
    Matrix _38ScalingTranslationMatrix;// 8:MatrixFromScalingVector-ext->4:ScalingTranslationMatrix 1331153
    Matrix _39Multiply;// 6:Multiply3-ext->4:Multiply 1331148
    IArray[TriMesh] _40Map;// 2:Map 1331106
    IArray[TriMesh] _41Append;// 5:Append 1331105
    TriMesh _42CombineAllMeshes;// 4:CombineAllMeshes 1331104
    _0Filter = Filter(nodes, (INode x0) => 
      {
        Boolean _0CanGetMeshFromNode;// 1:NodesToMeshesInWorldSpace-ext->4:CanGetMeshFromNode 1331110
        _0CanGetMeshFromNode = CanGetMeshFromNode(x0);
        _0CanGetMeshFromNode;
        });
    _1EmptyMesh = EmptyMesh();
    _2Map = Map(_0Filter, (INode x0) => 
      {
        Boolean _0IsNull;// 4:NodeCanGetMesh-ext->7:IsNull 1331116
        Boolean _1False;// 4:NodeCanGetMesh-ext->6:False 1331117
        _0IsNull = IsNull(x0);
        _1False = False();
        if (if (_0IsNull)
          {
            _1False;
            }else
          {
            Boolean _2IsValidNode;// 4:NodeCanGetMesh-ext->0:IsValidNode 1331119
            _2IsValidNode = IsValidNode(x0);
            if (_2IsValidNode)
              {
                Boolean _3CanGetMeshFromNode;// 4:NodeCanGetMesh-ext->1:CanGetMeshFromNode 1331120
                _3CanGetMeshFromNode = CanGetMeshFromNode(x0);
                _3CanGetMeshFromNode;
                }else
              {
                _1False;
                };
            })
          {
            TriMesh _4MeshFromNode;// 7:NodeMeshInWorldSpace->2:MeshFromNode 1331130
            IArray[Vector3] _5MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 1331128
            Matrix _6ObjectTransformBeforeWSM;// 7:NodeMeshInWorldSpace->0:ObjectTransformBeforeWSM 1331131
            Func[Vector3, Vector3] _7Pass-through: function1;// 0:Pass-through: function1 1331125
            IArray[Vector3] _8Map;// 2:DeformMeshPoints->1:Map 1331127
            TriMesh _9SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 1331126
            _4MeshFromNode = MeshFromNode(x0);
            _5MeshVertices = MeshVertices(_4MeshFromNode);
            _6ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(x0);
            _7Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 3:TransformMesh->0:Transform 1331129
                _0Transform = Transform(x0, _6ObjectTransformBeforeWSM);
                _0Transform;
                };
            _8Map = Map(_5MeshVertices, _7Pass-through: function1);
            _9SetMeshVertices = SetMeshVertices(_4MeshFromNode, _8Map);
            _9SetMeshVertices;
            }else
          {
            _1EmptyMesh;
            };
        });
    _3Vector3 = Vector3(x offset, y offset, z offset);
    _4TranslationMatrix = TranslationMatrix(_3Vector3);
    _5Vector3 = Vector3(x rotation, y rotation, z rotation);
    _6X = X(_5Vector3);
    _7Unit = Unit(_6X);
    _8Y = Y(_5Vector3);
    _9Append = Append(_7Unit, _8Y);
    _10Z = Z(_5Vector3);
    _11Append = Append(_9Append, _10Z);
    _12Pass-through: function1 = (Single x0) => 
      {
        Single _0ToRadians;// 18:EulerDegreesToRadians-ext->2:ToRadians 1331200
        _0ToRadians = ToRadians(x0);
        _0ToRadians;
        };
    _13Map = Map(_11Append, _12Pass-through: function1);
    _14Zero = Zero();
    _15At = At(_13Map, _14Zero);
    _16One = One();
    _17Add = Add(_14Zero, _16One);
    _18At = At(_13Map, _17Add);
    _19One = One();
    _20Add = Add(_17Add, _19One);
    _21At = At(_13Map, _20Add);
    _22Vector3 = Vector3(_15At, _18At, _21At);
    _23X = X(_22Vector3);
    _24RotationXMatrix = RotationXMatrix(_23X);
    _25Y = Y(_22Vector3);
    _26RotationYMatrix = RotationYMatrix(_25Y);
    _27Multiply = Multiply(_24RotationXMatrix, _26RotationYMatrix);
    _28Z = Z(_22Vector3);
    _29RotationZMatrix = RotationZMatrix(_28Z);
    _30Multiply = Multiply(_27Multiply, _29RotationZMatrix);
    _31GetMatrixRotation = GetMatrixRotation(_30Multiply);
    _32MatrixFromQuaternion = MatrixFromQuaternion(_31GetMatrixRotation);
    _33Multiply = Multiply(_4TranslationMatrix, _32MatrixFromQuaternion);
    _34Constant = 1;
    _35Vector3 = Vector3(_34Constant, _34Constant, _34Constant);
    _36Constant = 0;
    _37Vector3 = Vector3(_36Constant, _36Constant, _36Constant);
    _38ScalingTranslationMatrix = ScalingTranslationMatrix(_35Vector3, _37Vector3);
    _39Multiply = Multiply(_33Multiply, _38ScalingTranslationMatrix);
    _40Map = Map(_2Map, (TriMesh x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 1331140
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 1331137
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 1331139
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 1331138
        _0MeshVertices = MeshVertices(x0);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 3:TransformMesh->0:Transform 1331141
            _0Transform = Transform(x0, _39Multiply);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(x0, _2Map);
        _3SetMeshVertices;
        });
    _41Append = Append(_40Map, mesh);
    _42CombineAllMeshes = CombineAllMeshes(_41Append);
    _42CombineAllMeshes;
    }