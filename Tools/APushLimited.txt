(InstanceState state, INode node, TriMesh mesh, Matrix modifierTransform, Boolean caching, Single amount) => 
  {
    Boolean _0IsValidNode;// 15:IsValidNode 89116
    _0IsValidNode = IsValidNode(node);
    if (_0IsValidNode)
      {
        IArray[Vector3] _1VertexNormals;// 4:VertexNormals 89122
        IArray[Vector3] _2MeshVertices;// 3:MeshVertices 89124
        Int32 _3Two;// 12:CacheValueWhileTrueWithUpdate-ext->2:Two 89149
        Cache[Tuple[RayTraceScene, Int32]] _4CreateCache;// 12:CacheValueWhileTrueWithUpdate-ext->0:CreateCache 89145
        Int32 _5Zero;// 3:ExtractCurrentValueFromCache->3:Zero 89144
        Tuple[RayTraceScene, Int32] _6CachedValue;// 3:ExtractCurrentValueFromCache->1:CachedValue 89143
        RayTraceScene _7PairItem1;// 21:RayTraceCachedScene-ext->4:PairItem1 89138
        IArray[Vector3] _8ParallelCombine;// 5:ParallelCombine 89121
        TriMesh _9SetMeshVertices;// 6:SetMeshVertices 89118
        _1VertexNormals = VertexNormals(mesh);
        _2MeshVertices = MeshVertices(mesh);
        _3Two = Two();
        _4CreateCache = CreateCache(() => 
          {
            Boolean _0False;// 21:RayTraceCachedScene-ext->3:False 89152
            Boolean _1IsNull;// 4:NodeCanGetMesh-ext->7:IsNull 89162
            Boolean _2False;// 4:NodeCanGetMesh-ext->6:False 89163
            TriMesh _17Pass-through: TriMesh;// 0:Pass-through: TriMesh 89136
            Tuple[RayTraceScene, Int32] _18Pass-through: any;// 0:Pass-through: any 89139
            _0False = False();
            _1IsNull = IsNull(node);
            _2False = False();
            _17Pass-through: TriMesh = if (if (_1IsNull)
              {
                _2False;
                }else
              {
                Boolean _3IsValidNode;// 4:NodeCanGetMesh-ext->0:IsValidNode 89165
                _3IsValidNode = IsValidNode(node);
                if (_3IsValidNode)
                  {
                    Boolean _4CanGetMeshFromNode;// 4:NodeCanGetMesh-ext->1:CanGetMeshFromNode 89166
                    _4CanGetMeshFromNode = CanGetMeshFromNode(node);
                    _4CanGetMeshFromNode;
                    }else
                  {
                    _2False;
                    };
                })
              {
                TriMesh _5MeshFromNode;// 7:NodeMeshInWorldSpace->2:MeshFromNode 89189
                IArray[Vector3] _6MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 89187
                Matrix _7ObjectTransformBeforeWSM;// 7:NodeMeshInWorldSpace->0:ObjectTransformBeforeWSM 89190
                Func[Vector3, Vector3] _8Pass-through: function1;// 0:Pass-through: function1 89184
                IArray[Vector3] _9Map;// 2:DeformMeshPoints->1:Map 89186
                TriMesh _10SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 89185
                IArray[Vector3] _11MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 89177
                Matrix _12InvertMatrix;// 2:MeshInLocalSpace->1:InvertMatrix 89179
                Func[Vector3, Vector3] _13Pass-through: function1;// 0:Pass-through: function1 89174
                IArray[Vector3] _14Map;// 2:DeformMeshPoints->1:Map 89176
                TriMesh _15SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 89175
                _5MeshFromNode = MeshFromNode(node);
                _6MeshVertices = MeshVertices(_5MeshFromNode);
                _7ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(node);
                _8Pass-through: function1 = (Vector3 x0) => 
                  {
                    Vector3 _0Transform;// 3:TransformMesh->0:Transform 89188
                    _0Transform = Transform(x0, _7ObjectTransformBeforeWSM);
                    _0Transform;
                    };
                _9Map = Map(_6MeshVertices, _8Pass-through: function1);
                _10SetMeshVertices = SetMeshVertices(_5MeshFromNode, _9Map);
                _11MeshVertices = MeshVertices(_10SetMeshVertices);
                _12InvertMatrix = InvertMatrix(modifierTransform);
                _13Pass-through: function1 = (Vector3 x0) => 
                  {
                    Vector3 _0Transform;// 3:TransformMesh->0:Transform 89178
                    _0Transform = Transform(x0, _12InvertMatrix);
                    _0Transform;
                    };
                _14Map = Map(_11MeshVertices, _13Pass-through: function1);
                _15SetMeshVertices = SetMeshVertices(_10SetMeshVertices, _14Map);
                _15SetMeshVertices;
                }else
              {
                TriMesh _16EmptyMesh;// 10:NodeMeshInLocalSpace-ext->5:EmptyMesh 89191
                _16EmptyMesh = EmptyMesh();
                _16EmptyMesh;
                };
            _18Pass-through: any = RayTraceAddGeometry(RayTraceScene(_0False), _17Pass-through: TriMesh);
            _18Pass-through: any;
            }, (Tuple[RayTraceScene, Int32] x0) => 
          {
            if (caching)
              {
                x0;
                }else
              {
                Func[Tuple[RayTraceScene, Int32], Tuple[RayTraceScene, Int32]] _0Pass-through: function1;// 0:Pass-through: function1 89141
                Tuple[RayTraceScene, Int32] _1Apply1;// 12:CacheValueWhileTrueWithUpdate-ext->9:Apply1 89148
                _0Pass-through: function1 = (Tuple[RayTraceScene, Int32] x0) => 
                  {
                    RayTraceScene _0PairItem1;// 21:RayTraceCachedScene-ext->9:PairItem1 89154
                    Int32 _1PairItem2;// 21:RayTraceCachedScene-ext->0:PairItem2 89156
                    Boolean _2IsNull;// 4:NodeCanGetMesh-ext->7:IsNull 89162
                    TriMesh _19Pass-through: TriMesh;// 0:Pass-through: TriMesh 89136
                    _0PairItem1 = PairItem1(x0);
                    _1PairItem2 = PairItem2(x0);
                    _2IsNull = IsNull(node);
                    _19Pass-through: TriMesh = if (if (_2IsNull)
                      {
                        Boolean _3False;// 4:NodeCanGetMesh-ext->6:False 89163
                        _3False = False();
                        _3False;
                        }else
                      {
                        Boolean _4IsValidNode;// 4:NodeCanGetMesh-ext->0:IsValidNode 89165
                        _4IsValidNode = IsValidNode(node);
                        if (_4IsValidNode)
                          {
                            Boolean _5CanGetMeshFromNode;// 4:NodeCanGetMesh-ext->1:CanGetMeshFromNode 89166
                            _5CanGetMeshFromNode = CanGetMeshFromNode(node);
                            _5CanGetMeshFromNode;
                            }else
                          {
                            Boolean _6False;// 4:NodeCanGetMesh-ext->6:False 89163
                            _6False = False();
                            _6False;
                            };
                        })
                      {
                        TriMesh _7MeshFromNode;// 7:NodeMeshInWorldSpace->2:MeshFromNode 89189
                        IArray[Vector3] _8MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 89187
                        Matrix _9ObjectTransformBeforeWSM;// 7:NodeMeshInWorldSpace->0:ObjectTransformBeforeWSM 89190
                        Func[Vector3, Vector3] _10Pass-through: function1;// 0:Pass-through: function1 89184
                        IArray[Vector3] _11Map;// 2:DeformMeshPoints->1:Map 89186
                        TriMesh _12SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 89185
                        IArray[Vector3] _13MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 89177
                        Matrix _14InvertMatrix;// 2:MeshInLocalSpace->1:InvertMatrix 89179
                        Func[Vector3, Vector3] _15Pass-through: function1;// 0:Pass-through: function1 89174
                        IArray[Vector3] _16Map;// 2:DeformMeshPoints->1:Map 89176
                        TriMesh _17SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 89175
                        _7MeshFromNode = MeshFromNode(node);
                        _8MeshVertices = MeshVertices(_7MeshFromNode);
                        _9ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(node);
                        _10Pass-through: function1 = (Vector3 x0) => 
                          {
                            Vector3 _0Transform;// 3:TransformMesh->0:Transform 89188
                            _0Transform = Transform(x0, _9ObjectTransformBeforeWSM);
                            _0Transform;
                            };
                        _11Map = Map(_8MeshVertices, _10Pass-through: function1);
                        _12SetMeshVertices = SetMeshVertices(_7MeshFromNode, _11Map);
                        _13MeshVertices = MeshVertices(_12SetMeshVertices);
                        _14InvertMatrix = InvertMatrix(modifierTransform);
                        _15Pass-through: function1 = (Vector3 x0) => 
                          {
                            Vector3 _0Transform;// 3:TransformMesh->0:Transform 89178
                            _0Transform = Transform(x0, _14InvertMatrix);
                            _0Transform;
                            };
                        _16Map = Map(_13MeshVertices, _15Pass-through: function1);
                        _17SetMeshVertices = SetMeshVertices(_12SetMeshVertices, _16Map);
                        _17SetMeshVertices;
                        }else
                      {
                        TriMesh _18EmptyMesh;// 10:NodeMeshInLocalSpace-ext->5:EmptyMesh 89191
                        _18EmptyMesh = EmptyMesh();
                        _18EmptyMesh;
                        };
                    RayTraceUpdateGeometry(_0PairItem1, _1PairItem2, _19Pass-through: TriMesh);
                    };
                _1Apply1 = Apply1(_0Pass-through: function1, x0);
                _1Apply1;
                };
            }, _3Two).SetId(state, 0);
        _5Zero = Zero();
        _6CachedValue = CachedValue(_4CreateCache, _5Zero);
        _7PairItem1 = PairItem1(_6CachedValue);
        _8ParallelCombine = ParallelCombine(_1VertexNormals, _2MeshVertices, (Vector3 x0, Vector3 x1) => 
          {
            Ray _0Ray;// 20:PointPushVertexLimited-ext->2:Ray 89133
            Boolean _1RayTraceHit;// 20:PointPushVertexLimited-ext->1:RayTraceHit 89131
            Vector3 _4MultiplyByScalar;// 20:PointPushVertexLimited-ext->3:MultiplyByScalar 89129
            _0Ray = Ray(x1, x0);
            _1RayTraceHit = RayTraceHit(RayTraceFaceIntersection(_7PairItem1, _0Ray));
            _4MultiplyByScalar = MultiplyByScalar(x0, if (_1RayTraceHit)
              {
                Single _2RayTraceDistance;// 20:PointPushVertexLimited-ext->11:RayTraceDistance 89135
                Single _3LesserFloat;// 20:PointPushVertexLimited-ext->10:LesserFloat 89134
                _2RayTraceDistance = RayTraceDistance(RayTraceFaceIntersection(_7PairItem1, _0Ray));
                _3LesserFloat = LesserFloat(amount, _2RayTraceDistance);
                _3LesserFloat;
                }else
              {
                amount;
                });
            _4MultiplyByScalar;
            });
        _9SetMeshVertices = SetMeshVertices(mesh, _8ParallelCombine);
        _9SetMeshVertices;
        }else
      {
        mesh;
        };
    }