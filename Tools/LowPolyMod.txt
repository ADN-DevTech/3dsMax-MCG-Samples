(InstanceState state, Boolean Keep Vertices, TriMesh mesh, Single Noise X %, Single Noise Y %, Single Noise Z %, Int32 seed) => 
  {
    Int32 _0Zero;// 5:Zero 103430
    Int32 _1FaceCount;// 3:FaceCount 103431
    IArray[Int32] _2ArrayOf;// 4:ArrayOf 103429
    TriMesh _3SetSmoothingGroups;// 2:SetSmoothingGroups 103426
    IArray[Vector3] _4MeshVertices;// 10:MeshVertices 103433
    Random _5RandomNumberGenerator;// 14:RandomNumberGenerator 103455
    Func[Vector3, Vector3] _6Bind2of2;// 45:Bind2of2 103434
    IArray[Vector3] _7Map;// 12:Map 103432
    TriMesh _8SetMeshVertices;// 11:SetMeshVertices 103423
    Int32 _9FaceCount;// 47:FaceCount 103460
    IArray[Int32] _10Range;// 48:Range 103459
    Single _11FloatOne;// 59:FloatOne 103475
    Single _12NegativeFloat;// 60:NegativeFloat 103474
    Vector3 _13ZAxis;// 56:ZAxis 103481
    IArray[IArray[Vector3]] _14Map;// 49:Map 103458
    IArray[Vector3] _15Flatten;// 66:Flatten 103457
    TriMesh _16SetVertexColorMapChannel;// 46:SetVertexColorMapChannel 103421
    _0Zero = Zero();
    _1FaceCount = FaceCount(mesh);
    _2ArrayOf = ArrayOf(_0Zero, _1FaceCount);
    _3SetSmoothingGroups = SetSmoothingGroups(mesh, _2ArrayOf);
    _4MeshVertices = MeshVertices(_3SetSmoothingGroups);
    _5RandomNumberGenerator = RandomNumberGenerator(seed);
    _6Bind2of2 = Bind2of2((Vector3 x0, Random x1) => 
      {
        Vector3 _0Vector3;// 34:Vector3 103440
        Single _1Constant;// 0:Constant 103446
        Vector3 _2Vector3;// 36:Vector3 103445
        Vector3 _3Subtract;// 38:Subtract 103439
        Vector3 _4Normalize;// 41:Normalize 103438
        Single _5Constant;// 0:Constant 103450
        Single _6Divide;// 23:Divide 103448
        Single _7Divide;// 26:Divide 103451
        Single _8Divide;// 29:Divide 103453
        Vector3 _9Vector3;// 22:Vector3 103447
        Vector3 _10Multiply;// 42:Multiply 103437
        Vector3 _11Add;// 43:Add 103435
        _0Vector3 = Vector3(PseudoRandomFloat(x1), PseudoRandomFloat(x1), PseudoRandomFloat(x1));
        _1Constant = 0.5;
        _2Vector3 = Vector3(_1Constant, _1Constant, _1Constant);
        _3Subtract = Subtract(_0Vector3, _2Vector3);
        _4Normalize = Normalize(_3Subtract);
        _5Constant = 100;
        _6Divide = Divide(Noise X %, _5Constant);
        _7Divide = Divide(Noise Y %, _5Constant);
        _8Divide = Divide(Noise Z %, _5Constant);
        _9Vector3 = Vector3(_6Divide, _7Divide, _8Divide);
        _10Multiply = Multiply(_4Normalize, _9Vector3);
        _11Add = Add(x0, _10Multiply);
        _11Add;
        }, _5RandomNumberGenerator);
    _7Map = Map(_4MeshVertices, _6Bind2of2);
    _8SetMeshVertices = SetMeshVertices(_3SetSmoothingGroups, _7Map);
    _9FaceCount = FaceCount(_8SetMeshVertices);
    _10Range = Range(_9FaceCount);
    _11FloatOne = FloatOne();
    _12NegativeFloat = NegativeFloat(_11FloatOne);
    _13ZAxis = ZAxis();
    _14Map = Map(_10Range, (Int32 x0) => 
      {
        Face3 _0MeshFace;// 50:MeshFace 103479
        Vector3 _1FaceNormal;// 53:FaceNormal 103478
        Vector3 _2Normalize;// 54:Normalize 103477
        Single _3Dot;// 55:Dot 103476
        Single _4Subtract;// 58:InverseFloatLerp->5:Subtract 103472
        Single _5Subtract;// 58:InverseFloatLerp->4:Subtract 103473
        Single _6Divide;// 58:InverseFloatLerp->6:Divide 103471
        Vector3 _7Vector3;// 62:Vector3 103467
        IArray[Vector3] _8Unit;// 64:Array3-ext->2:Unit 103466
        IArray[Vector3] _9Append;// 64:Array3-ext->3:Append 103465
        IArray[Vector3] _10Append;// 64:Array3-ext->6:Append 103464
        _0MeshFace = MeshFace(_8SetMeshVertices, x0);
        _1FaceNormal = FaceNormal(_0MeshFace);
        _2Normalize = Normalize(_1FaceNormal);
        _3Dot = Dot(_2Normalize, _13ZAxis);
        _4Subtract = Subtract(_12NegativeFloat, _3Dot);
        _5Subtract = Subtract(_12NegativeFloat, _11FloatOne);
        _6Divide = Divide(_4Subtract, _5Subtract);
        _7Vector3 = Vector3(_6Divide, _6Divide, _6Divide);
        _8Unit = Unit(_7Vector3);
        _9Append = Append(_8Unit, _7Vector3);
        _10Append = Append(_9Append, _7Vector3);
        _10Append;
        });
    _15Flatten = Flatten(_14Map);
    _16SetVertexColorMapChannel = SetVertexColorMapChannel(_8SetMeshVertices, _15Flatten);
    if (Keep Vertices)
      {
        IArray[Vector3] _17MeshVertices;// 73:MeshVertices 103482
        TriMesh _18SetMeshVertices;// 69:SetMeshVertices 103419
        _17MeshVertices = MeshVertices(mesh);
        _18SetMeshVertices = SetMeshVertices(_16SetVertexColorMapChannel, _17MeshVertices);
        _18SetMeshVertices;
        }else
      {
        _16SetVertexColorMapChannel;
        };
    }