(InstanceState state, TriMesh mesh, Boolean keep custom channels, Boolean include original, Boolean create nodes, Boolean use children, Boolean randomize children, INode clone target, Int32 channel id, Int32 randomize seed, Matrix modifierTransform) => 
  {
    IArray[TriMesh] _0IfThen;// 12:ClonerTransformChildMeshes-ext->21:IfThen 54862
    TriMesh _2CombineAllMeshes;// 29:ClonerClone-ext->45:CombineAllMeshes 54849
    TriMesh _10IgnoreFirst;// 29:ClonerClone-ext->9:IgnoreFirst 54796
    _0IfThen = IfThen(create nodes, () => 
      {
        MapChannel _0GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 54942
        IArray[Vector3] _1MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 54941
        Int32 _2Count;// 2:Slices->2:Count 54938
        Int32 _3Constant;// 34:MatricesFromMapChannel-ext->0:Constant 54943
        Int32 _4Divide;// 2:Slices->3:Divide 54937
        IArray[Int32] _5Range;// 2:Slices->4:Range 54936
        IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 54935
        IArray[Matrix] _7Map;// 34:MatricesFromMapChannel-ext->5:Map 54932
        Int32 _8Count;// 17:ClonerChildNodes-ext->9:Count 54913
        IArray[INode] _23Map;// 12:ClonerTransformChildMeshes-ext->10:Map 54865
        Matrix _24InvertMatrix;// 12:ClonerTransformChildMeshes-ext->18:InvertMatrix 54918
        IArray[Matrix] _25Map;// 12:ClonerTransformChildMeshes-ext->9:Map 54916
        IArray[INode] _26Combine;// 12:ClonerTransformChildMeshes-ext->8:Combine 54864
        IArray[TriMesh] _45Combine;// 12:ClonerTransformChildMeshes-ext->12:Combine 54920
        IArray[TriMesh] _46IgnoreFirst;// 12:ClonerTransformChildMeshes-ext->3:IgnoreFirst 54863
        _0GetMapChannel = GetMapChannel(mesh, channel id);
        _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
        _2Count = Count(_1MapChannelVertexBuffer);
        _3Constant = 4;
        _4Divide = Divide(_2Count, _3Constant);
        _5Range = Range(_4Divide);
        _6Map = Map(_5Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 54940
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 54939
            _0Multiply = Multiply(_3Constant, x0);
            _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
            _1Slice;
            });
        _7Map = Map(_6Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 54952
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 54953
            Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 54957
            Vector3 _3At;// 6:MatrixFromRows-ext->3:At 54956
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 54951
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 54954
            Int32 _6One;// 8:PlusOne->1:One 54961
            Int32 _7Add;// 8:PlusOne->0:Add 54960
            Vector3 _8At;// 6:MatrixFromRows-ext->4:At 54958
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 54950
            Int32 _10Constant;// 25:Three->0:Constant 54955
            Int32 _11One;// 9:PlusOne->1:One 54965
            Int32 _12Add;// 9:PlusOne->0:Add 54964
            Vector3 _13At;// 6:MatrixFromRows-ext->5:At 54962
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 54949
            Int32 _15One;// 10:PlusOne->1:One 54969
            Int32 _16Add;// 10:PlusOne->0:Add 54968
            Vector3 _17At;// 6:MatrixFromRows-ext->6:At 54966
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 54945
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _8Count = Count(_7Map);
        _23Map = Map(if (use children)
          {
            IArray[INode] _9ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 54878
            IArray[Int32] _10Range;// 2:MapRange->2:Range 54902
            Func[Int32, INode] _11Pass-through: function1;// 0:Pass-through: function1 54900
            IArray[INode] _12Map;// 2:MapRange->3:Map 54901
            _9ChildNodes = ChildNodes(clone target);
            _10Range = Range(_8Count);
            _11Pass-through: function1 = (Int32 x0) => 
              {
                Int32 _0Count;// 7:AtModulo-ext->6:Count 54911
                Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 54910
                Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 54909
                Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 54908
                INode _5At;// 7:AtModulo-ext->3:At 54905
                _0Count = Count(_9ChildNodes);
                _1Modulo = Modulo(x0, _0Count);
                _2Zero = Zero();
                _3LessThan = LessThan(_1Modulo, _2Zero);
                _5At = At(_9ChildNodes, if (_3LessThan)
                  {
                    Int32 _4Add;// 7:AtModulo-ext->8:Add 54912
                    _4Add = Add(_1Modulo, _0Count);
                    _4Add;
                    }else
                  {
                    _1Modulo;
                    });
                _5At;
                };
            _12Map = Map(_10Range, _11Pass-through: function1);
            if (randomize children)
              {
                Int32 _13Count;// 17:ClonerChildNodes-ext->5:Count 54877
                Int32 _14Zero;// 11:GreaterThanZero->1:Zero 54876
                Boolean _15GreaterThan;// 11:GreaterThanZero->3:GreaterThan 54875
                _13Count = Count(_9ChildNodes);
                _14Zero = Zero();
                _15GreaterThan = GreaterThan(_13Count, _14Zero);
                if (_15GreaterThan)
                  {
                    Func[Random, Int32] _16Pass-through: function1;// 0:Pass-through: function1 54888
                    Random _17RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 54895
                    Func[Int32] _18Bind;// 0:RandomArray-ext->4:Bind 54892
                    Int32 _19Count;// 10:RandomizeArray-ext->4:Count 54896
                    IArray[Int32] _20ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 54891
                    IArray[INode] _21Map;// 5:SelectByIndex->2:Map 54883
                    _16Pass-through: function1 = (Random x0) => 
                      {
                        Int32 _0Count;// 1:ArrayRandomIndices-ext->4:Count 54894
                        _0Count = Count(_12Map);
                        PseudoRandomInt(x0, _0Count);
                        };
                    _17RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _18Bind = Bind(_16Pass-through: function1, _17RandomNumberGenerator);
                    _19Count = Count(_12Map);
                    _20ArrayOfFunction = ArrayOfFunction(_18Bind, _19Count);
                    _21Map = Map(_20ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 54884
                        _0At = At(_12Map, x0);
                        _0At;
                        });
                    _21Map;
                    }else
                  {
                    _9ChildNodes;
                    };
                }else
              {
                _12Map;
                };
            }else
          {
            IArray[INode] _22ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 54914
            _22ArrayOf = ArrayOf(clone target, _8Count);
            _22ArrayOf;
            }, (INode x0) => 
          {
            INode _0CloneAsInstance;// 12:ClonerTransformChildMeshes-ext->14:CloneAsInstance 54915
            _0CloneAsInstance = CloneAsInstance(x0);
            _0CloneAsInstance;
            });
        _24InvertMatrix = InvertMatrix(modifierTransform);
        _25Map = Map(_7Map, (Matrix x0) => 
          {
            Matrix _0Multiply;// 12:ClonerTransformChildMeshes-ext->19:Multiply 54917
            _0Multiply = Multiply(x0, _24InvertMatrix);
            _0Multiply;
            });
        _26Combine = Combine(_23Map, _25Map, (INode x0, Matrix x1) => 
          {
            INode _0SetNodeTransform;// 12:ClonerTransformChildMeshes-ext->5:SetNodeTransform 54919
            _0SetNodeTransform = SetNodeTransform(x0, x1);
            _0SetNodeTransform;
            });
        _45Combine = Combine(if (use children)
          {
            if (randomize children)
              {
                IArray[INode] _27ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 54878
                Int32 _28Count;// 17:ClonerChildNodes-ext->5:Count 54877
                Int32 _29Zero;// 11:GreaterThanZero->1:Zero 54876
                Boolean _30GreaterThan;// 11:GreaterThanZero->3:GreaterThan 54875
                _27ChildNodes = ChildNodes(clone target);
                _28Count = Count(_27ChildNodes);
                _29Zero = Zero();
                _30GreaterThan = GreaterThan(_28Count, _29Zero);
                if (_30GreaterThan)
                  {
                    Func[Random, Int32] _31Pass-through: function1;// 0:Pass-through: function1 54888
                    Random _32RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 54895
                    Func[Int32] _33Bind;// 0:RandomArray-ext->4:Bind 54892
                    IArray[Int32] _34Range;// 2:MapRange->2:Range 54902
                    Func[Int32, INode] _35Pass-through: function1;// 0:Pass-through: function1 54900
                    IArray[INode] _36Map;// 2:MapRange->3:Map 54901
                    Int32 _37Count;// 10:RandomizeArray-ext->4:Count 54896
                    IArray[Int32] _38ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 54891
                    IArray[INode] _39Map;// 5:SelectByIndex->2:Map 54883
                    _31Pass-through: function1 = (Random x0) => 
                      {
                        IArray[Int32] _0Range;// 2:MapRange->2:Range 54902
                        Func[Int32, INode] _1Pass-through: function1;// 0:Pass-through: function1 54900
                        IArray[INode] _2Map;// 2:MapRange->3:Map 54901
                        Int32 _3Count;// 1:ArrayRandomIndices-ext->4:Count 54894
                        _0Range = Range(_8Count);
                        _1Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Count;// 7:AtModulo-ext->6:Count 54911
                            Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 54910
                            Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 54909
                            Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 54908
                            INode _5At;// 7:AtModulo-ext->3:At 54905
                            _0Count = Count(_27ChildNodes);
                            _1Modulo = Modulo(x0, _0Count);
                            _2Zero = Zero();
                            _3LessThan = LessThan(_1Modulo, _2Zero);
                            _5At = At(_27ChildNodes, if (_3LessThan)
                              {
                                Int32 _4Add;// 7:AtModulo-ext->8:Add 54912
                                _4Add = Add(_1Modulo, _0Count);
                                _4Add;
                                }else
                              {
                                _1Modulo;
                                });
                            _5At;
                            };
                        _2Map = Map(_0Range, _1Pass-through: function1);
                        _3Count = Count(_2Map);
                        PseudoRandomInt(x0, _3Count);
                        };
                    _32RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _33Bind = Bind(_31Pass-through: function1, _32RandomNumberGenerator);
                    _34Range = Range(_8Count);
                    _35Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Count;// 7:AtModulo-ext->6:Count 54911
                        Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 54910
                        Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 54909
                        Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 54908
                        INode _5At;// 7:AtModulo-ext->3:At 54905
                        _0Count = Count(_27ChildNodes);
                        _1Modulo = Modulo(x0, _0Count);
                        _2Zero = Zero();
                        _3LessThan = LessThan(_1Modulo, _2Zero);
                        _5At = At(_27ChildNodes, if (_3LessThan)
                          {
                            Int32 _4Add;// 7:AtModulo-ext->8:Add 54912
                            _4Add = Add(_1Modulo, _0Count);
                            _4Add;
                            }else
                          {
                            _1Modulo;
                            });
                        _5At;
                        };
                    _36Map = Map(_34Range, _35Pass-through: function1);
                    _37Count = Count(_36Map);
                    _38ArrayOfFunction = ArrayOfFunction(_33Bind, _37Count);
                    _39Map = Map(_38ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 54884
                        _0At = At(_36Map, x0);
                        _0At;
                        });
                    _39Map;
                    }else
                  {
                    _27ChildNodes;
                    };
                }else
              {
                IArray[Int32] _40Range;// 2:MapRange->2:Range 54902
                IArray[INode] _41ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 54878
                Func[Int32, INode] _42Pass-through: function1;// 0:Pass-through: function1 54900
                IArray[INode] _43Map;// 2:MapRange->3:Map 54901
                _40Range = Range(_8Count);
                _41ChildNodes = ChildNodes(clone target);
                _42Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Count;// 7:AtModulo-ext->6:Count 54911
                    Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 54910
                    Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 54909
                    Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 54908
                    INode _5At;// 7:AtModulo-ext->3:At 54905
                    _0Count = Count(_41ChildNodes);
                    _1Modulo = Modulo(x0, _0Count);
                    _2Zero = Zero();
                    _3LessThan = LessThan(_1Modulo, _2Zero);
                    _5At = At(_41ChildNodes, if (_3LessThan)
                      {
                        Int32 _4Add;// 7:AtModulo-ext->8:Add 54912
                        _4Add = Add(_1Modulo, _0Count);
                        _4Add;
                        }else
                      {
                        _1Modulo;
                        });
                    _5At;
                    };
                _43Map = Map(_40Range, _42Pass-through: function1);
                _43Map;
                };
            }else
          {
            IArray[INode] _44ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 54914
            _44ArrayOf = ArrayOf(clone target, _8Count);
            _44ArrayOf;
            }, _7Map, (INode x0, Matrix x1) => 
          {
            TriMesh _0MeshFromNode;// 12:ClonerTransformChildMeshes-ext->0:MeshFromNode 54929
            IArray[Vector3] _1MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 54927
            Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 54924
            IArray[Vector3] _3Map;// 2:DeformMeshPoints->1:Map 54926
            TriMesh _4SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 54925
            _0MeshFromNode = MeshFromNode(x0);
            _1MeshVertices = MeshVertices(_0MeshFromNode);
            _2Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 13:TransformMesh->0:Transform 54928
                _0Transform = Transform(x0, x1);
                _0Transform;
                };
            _3Map = Map(_1MeshVertices, _2Pass-through: function1);
            _4SetMeshVertices = SetMeshVertices(_0MeshFromNode, _3Map);
            _4SetMeshVertices;
            });
        _46IgnoreFirst = IgnoreFirst(_26Combine, _45Combine);
        _46IgnoreFirst;
        }, () => 
      {
        MapChannel _0GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 54942
        IArray[Vector3] _1MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 54941
        Int32 _2Count;// 2:Slices->2:Count 54938
        Int32 _3Constant;// 34:MatricesFromMapChannel-ext->0:Constant 54943
        Int32 _4Divide;// 2:Slices->3:Divide 54937
        IArray[Int32] _5Range;// 2:Slices->4:Range 54936
        IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 54935
        IArray[Matrix] _7Map;// 34:MatricesFromMapChannel-ext->5:Map 54932
        IArray[TriMesh] _28Combine;// 12:ClonerTransformChildMeshes-ext->12:Combine 54920
        _0GetMapChannel = GetMapChannel(mesh, channel id);
        _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
        _2Count = Count(_1MapChannelVertexBuffer);
        _3Constant = 4;
        _4Divide = Divide(_2Count, _3Constant);
        _5Range = Range(_4Divide);
        _6Map = Map(_5Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 54940
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 54939
            _0Multiply = Multiply(_3Constant, x0);
            _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
            _1Slice;
            });
        _7Map = Map(_6Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 54952
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 54953
            Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 54957
            Vector3 _3At;// 6:MatrixFromRows-ext->3:At 54956
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 54951
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 54954
            Int32 _6One;// 8:PlusOne->1:One 54961
            Int32 _7Add;// 8:PlusOne->0:Add 54960
            Vector3 _8At;// 6:MatrixFromRows-ext->4:At 54958
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 54950
            Int32 _10Constant;// 25:Three->0:Constant 54955
            Int32 _11One;// 9:PlusOne->1:One 54965
            Int32 _12Add;// 9:PlusOne->0:Add 54964
            Vector3 _13At;// 6:MatrixFromRows-ext->5:At 54962
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 54949
            Int32 _15One;// 10:PlusOne->1:One 54969
            Int32 _16Add;// 10:PlusOne->0:Add 54968
            Vector3 _17At;// 6:MatrixFromRows-ext->6:At 54966
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 54945
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _28Combine = Combine(if (use children)
          {
            Int32 _8Count;// 17:ClonerChildNodes-ext->9:Count 54913
            _8Count = Count(_7Map);
            if (randomize children)
              {
                IArray[INode] _9ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 54878
                Int32 _10Count;// 17:ClonerChildNodes-ext->5:Count 54877
                Int32 _11Zero;// 11:GreaterThanZero->1:Zero 54876
                Boolean _12GreaterThan;// 11:GreaterThanZero->3:GreaterThan 54875
                _9ChildNodes = ChildNodes(clone target);
                _10Count = Count(_9ChildNodes);
                _11Zero = Zero();
                _12GreaterThan = GreaterThan(_10Count, _11Zero);
                if (_12GreaterThan)
                  {
                    Func[Random, Int32] _13Pass-through: function1;// 0:Pass-through: function1 54888
                    Random _14RandomNumberGenerator;// 10:RandomizeArray-ext->2:RandomNumberGenerator 54895
                    Func[Int32] _15Bind;// 0:RandomArray-ext->4:Bind 54892
                    IArray[Int32] _16Range;// 2:MapRange->2:Range 54902
                    Func[Int32, INode] _17Pass-through: function1;// 0:Pass-through: function1 54900
                    IArray[INode] _18Map;// 2:MapRange->3:Map 54901
                    Int32 _19Count;// 10:RandomizeArray-ext->4:Count 54896
                    IArray[Int32] _20ArrayOfFunction;// 0:RandomArray-ext->5:ArrayOfFunction 54891
                    IArray[INode] _21Map;// 5:SelectByIndex->2:Map 54883
                    _13Pass-through: function1 = (Random x0) => 
                      {
                        IArray[Int32] _0Range;// 2:MapRange->2:Range 54902
                        Func[Int32, INode] _1Pass-through: function1;// 0:Pass-through: function1 54900
                        IArray[INode] _2Map;// 2:MapRange->3:Map 54901
                        Int32 _3Count;// 1:ArrayRandomIndices-ext->4:Count 54894
                        _0Range = Range(_8Count);
                        _1Pass-through: function1 = (Int32 x0) => 
                          {
                            Int32 _0Count;// 7:AtModulo-ext->6:Count 54911
                            Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 54910
                            Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 54909
                            Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 54908
                            INode _5At;// 7:AtModulo-ext->3:At 54905
                            _0Count = Count(_9ChildNodes);
                            _1Modulo = Modulo(x0, _0Count);
                            _2Zero = Zero();
                            _3LessThan = LessThan(_1Modulo, _2Zero);
                            _5At = At(_9ChildNodes, if (_3LessThan)
                              {
                                Int32 _4Add;// 7:AtModulo-ext->8:Add 54912
                                _4Add = Add(_1Modulo, _0Count);
                                _4Add;
                                }else
                              {
                                _1Modulo;
                                });
                            _5At;
                            };
                        _2Map = Map(_0Range, _1Pass-through: function1);
                        _3Count = Count(_2Map);
                        PseudoRandomInt(x0, _3Count);
                        };
                    _14RandomNumberGenerator = RandomNumberGenerator(randomize seed);
                    _15Bind = Bind(_13Pass-through: function1, _14RandomNumberGenerator);
                    _16Range = Range(_8Count);
                    _17Pass-through: function1 = (Int32 x0) => 
                      {
                        Int32 _0Count;// 7:AtModulo-ext->6:Count 54911
                        Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 54910
                        Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 54909
                        Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 54908
                        INode _5At;// 7:AtModulo-ext->3:At 54905
                        _0Count = Count(_9ChildNodes);
                        _1Modulo = Modulo(x0, _0Count);
                        _2Zero = Zero();
                        _3LessThan = LessThan(_1Modulo, _2Zero);
                        _5At = At(_9ChildNodes, if (_3LessThan)
                          {
                            Int32 _4Add;// 7:AtModulo-ext->8:Add 54912
                            _4Add = Add(_1Modulo, _0Count);
                            _4Add;
                            }else
                          {
                            _1Modulo;
                            });
                        _5At;
                        };
                    _18Map = Map(_16Range, _17Pass-through: function1);
                    _19Count = Count(_18Map);
                    _20ArrayOfFunction = ArrayOfFunction(_15Bind, _19Count);
                    _21Map = Map(_20ArrayOfFunction, (Int32 x0) => 
                      {
                        INode _0At;// 5:SelectByIndex->3:At 54884
                        _0At = At(_18Map, x0);
                        _0At;
                        });
                    _21Map;
                    }else
                  {
                    _9ChildNodes;
                    };
                }else
              {
                IArray[Int32] _22Range;// 2:MapRange->2:Range 54902
                IArray[INode] _23ChildNodes;// 17:ClonerChildNodes-ext->17:ChildNodes 54878
                Func[Int32, INode] _24Pass-through: function1;// 0:Pass-through: function1 54900
                IArray[INode] _25Map;// 2:MapRange->3:Map 54901
                _22Range = Range(_8Count);
                _23ChildNodes = ChildNodes(clone target);
                _24Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Count;// 7:AtModulo-ext->6:Count 54911
                    Int32 _1Modulo;// 7:AtModulo-ext->5:Modulo 54910
                    Int32 _2Zero;// 7:LessThanZero-ext->2:Zero 54909
                    Boolean _3LessThan;// 7:LessThanZero-ext->1:LessThan 54908
                    INode _5At;// 7:AtModulo-ext->3:At 54905
                    _0Count = Count(_23ChildNodes);
                    _1Modulo = Modulo(x0, _0Count);
                    _2Zero = Zero();
                    _3LessThan = LessThan(_1Modulo, _2Zero);
                    _5At = At(_23ChildNodes, if (_3LessThan)
                      {
                        Int32 _4Add;// 7:AtModulo-ext->8:Add 54912
                        _4Add = Add(_1Modulo, _0Count);
                        _4Add;
                        }else
                      {
                        _1Modulo;
                        });
                    _5At;
                    };
                _25Map = Map(_22Range, _24Pass-through: function1);
                _25Map;
                };
            }else
          {
            Int32 _26Count;// 17:ClonerChildNodes-ext->9:Count 54913
            IArray[INode] _27ArrayOf;// 17:ClonerChildNodes-ext->3:ArrayOf 54914
            _26Count = Count(_7Map);
            _27ArrayOf = ArrayOf(clone target, _26Count);
            _27ArrayOf;
            }, _7Map, (INode x0, Matrix x1) => 
          {
            TriMesh _0MeshFromNode;// 12:ClonerTransformChildMeshes-ext->0:MeshFromNode 54929
            IArray[Vector3] _1MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 54927
            Func[Vector3, Vector3] _2Pass-through: function1;// 0:Pass-through: function1 54924
            IArray[Vector3] _3Map;// 2:DeformMeshPoints->1:Map 54926
            TriMesh _4SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 54925
            _0MeshFromNode = MeshFromNode(x0);
            _1MeshVertices = MeshVertices(_0MeshFromNode);
            _2Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 13:TransformMesh->0:Transform 54928
                _0Transform = Transform(x0, x1);
                _0Transform;
                };
            _3Map = Map(_1MeshVertices, _2Pass-through: function1);
            _4SetMeshVertices = SetMeshVertices(_0MeshFromNode, _3Map);
            _4SetMeshVertices;
            });
        _28Combine;
        });
    _2CombineAllMeshes = CombineAllMeshes(if (include original)
      {
        IArray[TriMesh] _1Append;// 39:AppendIf->1:Append 54854
        _1Append = Append(_0IfThen, mesh);
        _1Append;
        }else
      {
        _0IfThen;
        });
    _10IgnoreFirst = IgnoreFirst(mesh, if (keep custom channels)
      {
        Int32 _4Constant;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->0:Constant 54804
        IArray[Int32] _5Range;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->1:Range 54803
        Int32 _6Two;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->4:Two 54805
        IArray[Int32] _7Skip;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->3:Skip 54802
        IArray[Int32] _8Filter;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->13:Filter 54801
        TriMesh _9Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->6:Aggregate 54800
        _4Constant = 100;
        _5Range = Range(_4Constant);
        _6Two = Two();
        _7Skip = Skip(_5Range, _6Two);
        _8Filter = Filter(_7Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 54818
            Boolean _1Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 54817
            MapChannel _4Pass-through: any;// 0:Pass-through: any 54809
            Object _5Null;// 6:IsNullFix2-ext->3:Null 54813
            Object _6As;// 6:IsNullFix2-ext->23:As 54811
            Boolean _7Equal;// 6:IsNullFix2-ext->1:Equal 54810
            Boolean _8Not;// 12:MapChannelExists-ext->4:Not 54808
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _4Pass-through: any = if (_1Equal)
              {
                MapChannel _2TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 54819
                _2TopologyChannel = TopologyChannel(mesh);
                _2TopologyChannel;
                }else
              {
                MapChannel _3GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 54820
                _3GetMapChannel = GetMapChannel(mesh, x0);
                _3GetMapChannel;
                };
            _5Null = Null();
            _6As = As(_4Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 54812
                _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                _0IgnoreFirst;
                });
            _7Equal = Equal(_6As, _5Null);
            _8Not = Not(_7Equal);
            _8Not;
            });
        _9Aggregate = Aggregate(_8Filter, _2CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer-ext->10:TryCatch 54824
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->7:IgnoreFirst 54846
                Int32 _1Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 54838
                Boolean _2Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 54837
                MapChannel _5Pass-through: any;// 0:Pass-through: any 54829
                Object _6Null;// 6:IsNullFix2-ext->3:Null 54833
                Object _7As;// 6:IsNullFix2-ext->23:As 54831
                Boolean _8Equal;// 6:IsNullFix2-ext->1:Equal 54830
                Boolean _9Not;// 5:MapChannelExists-ext->4:Not 54828
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _5Pass-through: any = if (_2Equal)
                  {
                    MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 54839
                    _3TopologyChannel = TopologyChannel(mesh);
                    _3TopologyChannel;
                    }else
                  {
                    MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 54840
                    _4GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _4GetMapChannel;
                    };
                _6Null = Null();
                _7As = As(_5Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 54832
                    _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                    _0IgnoreFirst;
                    });
                _8Equal = Equal(_7As, _6Null);
                _9Not = Not(_8Equal);
                if (_9Not)
                  {
                    MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->1:GetMapChannel 54843
                    IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer-ext->8:MapChannelVertexBuffer 54842
                    IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer-ext->0:MeshIndices 54844
                    TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->7:SetMapChannel 54841
                    _10GetMapChannel = GetMapChannel(mesh, _0IgnoreFirst);
                    _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                    _12MeshIndices = MeshIndices(x0);
                    _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                    _13SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer-ext->11:IgnoreFirst 54845
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _9Aggregate;
        }else
      {
        _2CombineAllMeshes;
        });
    _10IgnoreFirst;
    }