(InstanceState state, TriMesh mesh, Single scale, Single noiseMultiplier, Int32 octaves, Single frequency, Single lacunarity, Single H, Single offset, Single power) => 
  {
    IArray[Vector3] _0MeshVertices;// 7:MeshVertices 102113
    BoundingBox _1BoxFromPoints;// 5:VectorsNormalizeFromBoundingBoxSafely-ext->6:BoxFromPoints 102126
    IArray[Vector3] _2Map;// 5:VectorsNormalizeFromBoundingBoxSafely-ext->3:Map 102116
    IArray[Single] _3Map;// 6:Map 102114
    IArray[Vector3] _4Combine;// 17:Combine 102112
    TriMesh _5SetMeshVertices;// 14:SetMeshVertices 102110
    _0MeshVertices = MeshVertices(mesh);
    _1BoxFromPoints = BoxFromPoints(_0MeshVertices);
    _2Map = Map(_0MeshVertices, (Vector3 x0) => 
      {
        Vector3 _0BoxMin;// 9:NormalizeFromBoundingBox->3:BoxMin 102121
        Vector3 _1Subtract;// 9:NormalizeFromBoundingBox->4:Subtract 102120
        Vector3 _2BoxMax;// 5:BoundingBoxExtent->1:BoxMax 102124
        Vector3 _3BoxMin;// 5:BoundingBoxExtent->2:BoxMin 102125
        Vector3 _4Subtract;// 5:BoundingBoxExtent->3:Subtract 102123
        Vector3 _5Divide;// 9:NormalizeFromBoundingBox->6:Divide 102119
        _0BoxMin = BoxMin(_1BoxFromPoints);
        _1Subtract = Subtract(x0, _0BoxMin);
        _2BoxMax = BoxMax(_1BoxFromPoints);
        _3BoxMin = BoxMin(_1BoxFromPoints);
        _4Subtract = Subtract(_2BoxMax, _3BoxMin);
        _5Divide = Divide(_1Subtract, _4Subtract);
        _5Divide;
        });
    _3Map = Map(_2Map, (Vector3 x0) => 
      {
        Func[Vector3, Single] _0Pass-through: function1;// 0:Pass-through: function1 102127
        Single _1Apply1;// 0:NoiseHeteroTerrain-ext->10:Apply1 102136
        Single _2Repeat;// 0:NoiseHeteroTerrain-ext->9:Repeat 102135
        _0Pass-through: function1 = (Vector3 x0) => 
          {
            Cache[IArray[Int32]] _0CreateStaticCache;// 2:CacheValue-ext->17:CreateStaticCache 102571
            Int32 _1Zero;// 2:CacheValue-ext->7:Zero 102572
            IArray[Int32] _2CachedValue;// 2:CacheValue-ext->4:CachedValue 102570
            Vector3 _3MultiplyByScalar;// 23:MultiplyByScalar 102665
            Single _4X;// 2:X 102664
            Int32 _5Floor;// 0:NoisePerlin-ext->0:Floor 102589
            Int32 _6Constant;// 0:NoisePerlin-ext->0:Constant 102590
            Int32 _7And;// 0:NoisePerlin-ext->16:And 102588
            Int32 _8At;// 0:NoisePerlin-ext->17:At 102587
            Single _9Y;// 4:Y 102668
            Int32 _10Floor;// 0:NoisePerlin-ext->1:Floor 102592
            Int32 _11And;// 0:NoisePerlin-ext->4:And 102591
            Int32 _12Add;// 0:NoisePerlin-ext->21:Add 102586
            Int32 _13At;// 0:NoisePerlin-ext->27:At 102585
            Single _14FloatZero;// 1:NoiseOp->3:FloatZero 102663
            Int32 _15Floor;// 0:NoisePerlin-ext->2:Floor 102594
            Int32 _16And;// 0:NoisePerlin-ext->6:And 102593
            Int32 _17Add;// 0:NoisePerlin-ext->29:Add 102584
            Int32 _18At;// 19:NoisePerlinBlendCorners-ext->12:At 102230
            Int32 _19Constant;// 20:NoisePerlinGrad-ext->0:Constant 102206
            Int32 _20And;// 20:NoisePerlinGrad-ext->5:And 102205
            Int32 _21One;// 20:NoisePerlinGrad-ext->21:One 102207
            Int32 _22And;// 3:BitsSet-ext->4:And 102203
            Int32 _23Zero;// 2:GreaterThanZero->1:Zero 102202
            Boolean _24GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102201
            Int32 _25Constant;// 20:NoisePerlinGrad-ext->0:Constant 102211
            Boolean _26LessThan;// 20:NoisePerlinGrad-ext->7:LessThan 102210
            Single _31FloorAsFloat;// 46:FloatFractionalPart-ext->4:FloorAsFloat 102597
            Single _32Subtract;// 46:FloatFractionalPart-ext->6:Subtract 102596
            Single _33FloorAsFloat;// 47:FloatFractionalPart-ext->4:FloorAsFloat 102600
            Single _34Subtract;// 47:FloatFractionalPart-ext->6:Subtract 102599
            Int32 _36Two;// 20:NoisePerlinGrad-ext->29:Two 102219
            Int32 _37And;// 22:BitsSet-ext->4:And 102218
            Int32 _38Zero;// 2:GreaterThanZero->1:Zero 102217
            Boolean _39GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102216
            Int32 _40Constant;// 20:NoisePerlinGrad-ext->0:Constant 102223
            Boolean _41LessThan;// 20:NoisePerlinGrad-ext->12:LessThan 102222
            Int32 _49Constant;// 20:NoisePerlinGrad-ext->0:Constant 102227
            Boolean _50Equal;// 20:NoisePerlinGrad-ext->16:Equal 102226
            Int32 _51Constant;// 20:NoisePerlinGrad-ext->0:Constant 102229
            Boolean _52Equal;// 20:NoisePerlinGrad-ext->19:Equal 102228
            Boolean _53OrElse;// 20:NoisePerlinGrad-ext->18:OrElse 102225
            Single _56FloorAsFloat;// 48:FloatFractionalPart-ext->4:FloorAsFloat 102603
            Single _57Subtract;// 48:FloatFractionalPart-ext->6:Subtract 102602
            Single _59Add;// 20:NoisePerlinGrad-ext->33:Add 102196
            Int32 _60One;// 23:PlusOne->1:One 102610
            Int32 _61Add;// 23:PlusOne->0:Add 102609
            Int32 _62At;// 0:NoisePerlin-ext->24:At 102607
            Int32 _63Add;// 0:NoisePerlin-ext->25:Add 102606
            Int32 _64At;// 0:NoisePerlin-ext->28:At 102605
            Int32 _65Add;// 0:NoisePerlin-ext->30:Add 102604
            Int32 _66At;// 19:NoisePerlinBlendCorners-ext->13:At 102273
            Int32 _67Constant;// 23:NoisePerlinGrad-ext->0:Constant 102249
            Int32 _68And;// 23:NoisePerlinGrad-ext->5:And 102248
            Int32 _69One;// 23:NoisePerlinGrad-ext->21:One 102250
            Int32 _70And;// 3:BitsSet-ext->4:And 102246
            Int32 _71Zero;// 2:GreaterThanZero->1:Zero 102245
            Boolean _72GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102244
            Int32 _73Constant;// 23:NoisePerlinGrad-ext->0:Constant 102254
            Boolean _74LessThan;// 23:NoisePerlinGrad-ext->7:LessThan 102253
            Single _77FloatOne;// 24:MinusOneFloat-ext->3:FloatOne 102276
            Single _78Subtract;// 24:MinusOneFloat-ext->2:Subtract 102275
            Int32 _80Two;// 23:NoisePerlinGrad-ext->29:Two 102262
            Int32 _81And;// 22:BitsSet-ext->4:And 102261
            Int32 _82Zero;// 2:GreaterThanZero->1:Zero 102260
            Boolean _83GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102259
            Int32 _84Constant;// 23:NoisePerlinGrad-ext->0:Constant 102266
            Boolean _85LessThan;// 23:NoisePerlinGrad-ext->12:LessThan 102265
            Int32 _91Constant;// 23:NoisePerlinGrad-ext->0:Constant 102270
            Boolean _92Equal;// 23:NoisePerlinGrad-ext->16:Equal 102269
            Int32 _93Constant;// 23:NoisePerlinGrad-ext->0:Constant 102272
            Boolean _94Equal;// 23:NoisePerlinGrad-ext->19:Equal 102271
            Boolean _95OrElse;// 23:NoisePerlinGrad-ext->18:OrElse 102268
            Single _97Add;// 23:NoisePerlinGrad-ext->33:Add 102239
            Single _98FloorAsFloat;// 3:FloatFractionalPart-ext->4:FloorAsFloat 102624
            Single _99Subtract;// 3:FloatFractionalPart-ext->6:Subtract 102623
            Single _100Multiply;// 12:NoisePerlinFade-ext->8:Multiply 102614
            Single _101Multiply;// 12:NoisePerlinFade-ext->9:Multiply 102613
            Single _102Constant;// 12:NoisePerlinFade-ext->0:Constant 102619
            Single _103Multiply;// 12:NoisePerlinFade-ext->1:Multiply 102618
            Single _104Constant;// 12:NoisePerlinFade-ext->0:Constant 102620
            Single _105Subtract;// 12:NoisePerlinFade-ext->5:Subtract 102617
            Single _106Multiply;// 12:NoisePerlinFade-ext->3:Multiply 102616
            Single _107Constant;// 12:NoisePerlinFade-ext->0:Constant 102621
            Single _108Add;// 12:NoisePerlinFade-ext->6:Add 102615
            Single _109Multiply;// 12:NoisePerlinFade-ext->10:Multiply 102612
            Single _110FloatLerp;// 19:NoisePerlinBlendCorners-ext->25:FloatLerp 102191
            Int32 _111One;// 42:PlusOne->1:One 102629
            Int32 _112Add;// 42:PlusOne->0:Add 102628
            Int32 _113At;// 0:NoisePerlin-ext->33:At 102626
            Int32 _114Add;// 0:NoisePerlin-ext->34:Add 102625
            Int32 _115At;// 19:NoisePerlinBlendCorners-ext->47:At 102317
            Int32 _116Constant;// 38:NoisePerlinGrad-ext->0:Constant 102293
            Int32 _117And;// 38:NoisePerlinGrad-ext->5:And 102292
            Int32 _118One;// 38:NoisePerlinGrad-ext->21:One 102294
            Int32 _119And;// 3:BitsSet-ext->4:And 102290
            Int32 _120Zero;// 2:GreaterThanZero->1:Zero 102289
            Boolean _121GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102288
            Int32 _122Constant;// 38:NoisePerlinGrad-ext->0:Constant 102298
            Boolean _123LessThan;// 38:NoisePerlinGrad-ext->7:LessThan 102297
            Single _126FloatOne;// 87:MinusOneFloat-ext->3:FloatOne 102322
            Single _127Subtract;// 87:MinusOneFloat-ext->2:Subtract 102321
            Int32 _129Two;// 38:NoisePerlinGrad-ext->29:Two 102306
            Int32 _130And;// 22:BitsSet-ext->4:And 102305
            Int32 _131Zero;// 2:GreaterThanZero->1:Zero 102304
            Boolean _132GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102303
            Int32 _133Constant;// 38:NoisePerlinGrad-ext->0:Constant 102310
            Boolean _134LessThan;// 38:NoisePerlinGrad-ext->12:LessThan 102309
            Int32 _140Constant;// 38:NoisePerlinGrad-ext->0:Constant 102314
            Boolean _141Equal;// 38:NoisePerlinGrad-ext->16:Equal 102313
            Int32 _142Constant;// 38:NoisePerlinGrad-ext->0:Constant 102316
            Boolean _143Equal;// 38:NoisePerlinGrad-ext->19:Equal 102315
            Boolean _144OrElse;// 38:NoisePerlinGrad-ext->18:OrElse 102312
            Single _146Add;// 38:NoisePerlinGrad-ext->33:Add 102283
            Int32 _147One;// 41:PlusOne->1:One 102634
            Int32 _148Add;// 41:PlusOne->0:Add 102633
            Int32 _149At;// 0:NoisePerlin-ext->37:At 102631
            Int32 _150Add;// 0:NoisePerlin-ext->38:Add 102630
            Int32 _151At;// 19:NoisePerlinBlendCorners-ext->37:At 102363
            Int32 _152Constant;// 42:NoisePerlinGrad-ext->0:Constant 102339
            Int32 _153And;// 42:NoisePerlinGrad-ext->5:And 102338
            Int32 _154One;// 42:NoisePerlinGrad-ext->21:One 102340
            Int32 _155And;// 3:BitsSet-ext->4:And 102336
            Int32 _156Zero;// 2:GreaterThanZero->1:Zero 102335
            Boolean _157GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102334
            Int32 _158Constant;// 42:NoisePerlinGrad-ext->0:Constant 102344
            Boolean _159LessThan;// 42:NoisePerlinGrad-ext->7:LessThan 102343
            Single _162FloatOne;// 44:MinusOneFloat-ext->3:FloatOne 102366
            Single _163Subtract;// 44:MinusOneFloat-ext->2:Subtract 102365
            Int32 _165Two;// 42:NoisePerlinGrad-ext->29:Two 102352
            Int32 _166And;// 22:BitsSet-ext->4:And 102351
            Int32 _167Zero;// 2:GreaterThanZero->1:Zero 102350
            Boolean _168GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102349
            Int32 _169Constant;// 42:NoisePerlinGrad-ext->0:Constant 102356
            Boolean _170LessThan;// 42:NoisePerlinGrad-ext->12:LessThan 102355
            Int32 _176Constant;// 42:NoisePerlinGrad-ext->0:Constant 102360
            Boolean _177Equal;// 42:NoisePerlinGrad-ext->16:Equal 102359
            Int32 _178Constant;// 42:NoisePerlinGrad-ext->0:Constant 102362
            Boolean _179Equal;// 42:NoisePerlinGrad-ext->19:Equal 102361
            Boolean _180OrElse;// 42:NoisePerlinGrad-ext->18:OrElse 102358
            Single _182Add;// 42:NoisePerlinGrad-ext->33:Add 102329
            Single _183FloatLerp;// 19:NoisePerlinBlendCorners-ext->45:FloatLerp 102278
            Single _184FloorAsFloat;// 7:FloatFractionalPart-ext->4:FloorAsFloat 102648
            Single _185Subtract;// 7:FloatFractionalPart-ext->6:Subtract 102647
            Single _186Multiply;// 13:NoisePerlinFade-ext->8:Multiply 102638
            Single _187Multiply;// 13:NoisePerlinFade-ext->9:Multiply 102637
            Single _188Constant;// 13:NoisePerlinFade-ext->0:Constant 102643
            Single _189Multiply;// 13:NoisePerlinFade-ext->1:Multiply 102642
            Single _190Constant;// 13:NoisePerlinFade-ext->0:Constant 102644
            Single _191Subtract;// 13:NoisePerlinFade-ext->5:Subtract 102641
            Single _192Multiply;// 13:NoisePerlinFade-ext->3:Multiply 102640
            Single _193Constant;// 13:NoisePerlinFade-ext->0:Constant 102645
            Single _194Add;// 13:NoisePerlinFade-ext->6:Add 102639
            Single _195Multiply;// 13:NoisePerlinFade-ext->10:Multiply 102636
            Single _196FloatLerp;// 19:NoisePerlinBlendCorners-ext->88:FloatLerp 102190
            Int32 _197One;// 8:PlusOne->1:One 102412
            Int32 _198Add;// 8:PlusOne->0:Add 102411
            Int32 _199At;// 19:NoisePerlinBlendCorners-ext->59:At 102408
            Int32 _200Constant;// 16:NoisePerlinGrad-ext->0:Constant 102384
            Int32 _201And;// 16:NoisePerlinGrad-ext->5:And 102383
            Int32 _202One;// 16:NoisePerlinGrad-ext->21:One 102385
            Int32 _203And;// 3:BitsSet-ext->4:And 102381
            Int32 _204Zero;// 2:GreaterThanZero->1:Zero 102380
            Boolean _205GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102379
            Int32 _206Constant;// 16:NoisePerlinGrad-ext->0:Constant 102389
            Boolean _207LessThan;// 16:NoisePerlinGrad-ext->7:LessThan 102388
            Int32 _209Two;// 16:NoisePerlinGrad-ext->29:Two 102397
            Int32 _210And;// 22:BitsSet-ext->4:And 102396
            Int32 _211Zero;// 2:GreaterThanZero->1:Zero 102395
            Boolean _212GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102394
            Int32 _213Constant;// 16:NoisePerlinGrad-ext->0:Constant 102401
            Boolean _214LessThan;// 16:NoisePerlinGrad-ext->12:LessThan 102400
            Int32 _222Constant;// 16:NoisePerlinGrad-ext->0:Constant 102405
            Boolean _223Equal;// 16:NoisePerlinGrad-ext->16:Equal 102404
            Int32 _224Constant;// 16:NoisePerlinGrad-ext->0:Constant 102407
            Boolean _225Equal;// 16:NoisePerlinGrad-ext->19:Equal 102406
            Boolean _226OrElse;// 16:NoisePerlinGrad-ext->18:OrElse 102403
            Single _229FloatOne;// 86:MinusOneFloat-ext->3:FloatOne 102417
            Single _230Subtract;// 86:MinusOneFloat-ext->2:Subtract 102416
            Single _232Add;// 16:NoisePerlinGrad-ext->33:Add 102374
            Int32 _233One;// 10:PlusOne->1:One 102460
            Int32 _234Add;// 10:PlusOne->0:Add 102459
            Int32 _235At;// 19:NoisePerlinBlendCorners-ext->15:At 102457
            Int32 _236Constant;// 54:NoisePerlinGrad-ext->0:Constant 102433
            Int32 _237And;// 54:NoisePerlinGrad-ext->5:And 102432
            Int32 _238One;// 54:NoisePerlinGrad-ext->21:One 102434
            Int32 _239And;// 3:BitsSet-ext->4:And 102430
            Int32 _240Zero;// 2:GreaterThanZero->1:Zero 102429
            Boolean _241GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102428
            Int32 _242Constant;// 54:NoisePerlinGrad-ext->0:Constant 102438
            Boolean _243LessThan;// 54:NoisePerlinGrad-ext->7:LessThan 102437
            Single _246FloatOne;// 56:MinusOneFloat-ext->3:FloatOne 102463
            Single _247Subtract;// 56:MinusOneFloat-ext->2:Subtract 102462
            Int32 _249Two;// 54:NoisePerlinGrad-ext->29:Two 102446
            Int32 _250And;// 22:BitsSet-ext->4:And 102445
            Int32 _251Zero;// 2:GreaterThanZero->1:Zero 102444
            Boolean _252GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102443
            Int32 _253Constant;// 54:NoisePerlinGrad-ext->0:Constant 102450
            Boolean _254LessThan;// 54:NoisePerlinGrad-ext->12:LessThan 102449
            Int32 _262Constant;// 54:NoisePerlinGrad-ext->0:Constant 102454
            Boolean _263Equal;// 54:NoisePerlinGrad-ext->16:Equal 102453
            Int32 _264Constant;// 54:NoisePerlinGrad-ext->0:Constant 102456
            Boolean _265Equal;// 54:NoisePerlinGrad-ext->19:Equal 102455
            Boolean _266OrElse;// 54:NoisePerlinGrad-ext->18:OrElse 102452
            Single _269FloatOne;// 85:MinusOneFloat-ext->3:FloatOne 102466
            Single _270Subtract;// 85:MinusOneFloat-ext->2:Subtract 102465
            Single _272Add;// 54:NoisePerlinGrad-ext->33:Add 102423
            Single _273FloatLerp;// 19:NoisePerlinBlendCorners-ext->57:FloatLerp 102369
            Int32 _274One;// 9:PlusOne->1:One 102511
            Int32 _275Add;// 9:PlusOne->0:Add 102510
            Int32 _276At;// 19:NoisePerlinBlendCorners-ext->76:At 102507
            Int32 _277Constant;// 67:NoisePerlinGrad-ext->0:Constant 102483
            Int32 _278And;// 67:NoisePerlinGrad-ext->5:And 102482
            Int32 _279One;// 67:NoisePerlinGrad-ext->21:One 102484
            Int32 _280And;// 3:BitsSet-ext->4:And 102480
            Int32 _281Zero;// 2:GreaterThanZero->1:Zero 102479
            Boolean _282GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102478
            Int32 _283Constant;// 67:NoisePerlinGrad-ext->0:Constant 102488
            Boolean _284LessThan;// 67:NoisePerlinGrad-ext->7:LessThan 102487
            Single _287FloatOne;// 84:MinusOneFloat-ext->3:FloatOne 102515
            Single _288Subtract;// 84:MinusOneFloat-ext->2:Subtract 102514
            Int32 _290Two;// 67:NoisePerlinGrad-ext->29:Two 102496
            Int32 _291And;// 22:BitsSet-ext->4:And 102495
            Int32 _292Zero;// 2:GreaterThanZero->1:Zero 102494
            Boolean _293GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102493
            Int32 _294Constant;// 67:NoisePerlinGrad-ext->0:Constant 102500
            Boolean _295LessThan;// 67:NoisePerlinGrad-ext->12:LessThan 102499
            Int32 _303Constant;// 67:NoisePerlinGrad-ext->0:Constant 102504
            Boolean _304Equal;// 67:NoisePerlinGrad-ext->16:Equal 102503
            Int32 _305Constant;// 67:NoisePerlinGrad-ext->0:Constant 102506
            Boolean _306Equal;// 67:NoisePerlinGrad-ext->19:Equal 102505
            Boolean _307OrElse;// 67:NoisePerlinGrad-ext->18:OrElse 102502
            Single _310FloatOne;// 83:MinusOneFloat-ext->3:FloatOne 102519
            Single _311Subtract;// 83:MinusOneFloat-ext->2:Subtract 102518
            Single _313Add;// 67:NoisePerlinGrad-ext->33:Add 102473
            Int32 _314One;// 11:PlusOne->1:One 102562
            Int32 _315Add;// 11:PlusOne->0:Add 102561
            Int32 _316At;// 19:NoisePerlinBlendCorners-ext->66:At 102559
            Int32 _317Constant;// 71:NoisePerlinGrad-ext->0:Constant 102535
            Int32 _318And;// 71:NoisePerlinGrad-ext->5:And 102534
            Int32 _319One;// 71:NoisePerlinGrad-ext->21:One 102536
            Int32 _320And;// 3:BitsSet-ext->4:And 102532
            Int32 _321Zero;// 2:GreaterThanZero->1:Zero 102531
            Boolean _322GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102530
            Int32 _323Constant;// 71:NoisePerlinGrad-ext->0:Constant 102540
            Boolean _324LessThan;// 71:NoisePerlinGrad-ext->7:LessThan 102539
            Single _327FloatOne;// 73:MinusOneFloat-ext->3:FloatOne 102565
            Single _328Subtract;// 73:MinusOneFloat-ext->2:Subtract 102564
            Int32 _330Two;// 71:NoisePerlinGrad-ext->29:Two 102548
            Int32 _331And;// 22:BitsSet-ext->4:And 102547
            Int32 _332Zero;// 2:GreaterThanZero->1:Zero 102546
            Boolean _333GreaterThan;// 2:GreaterThanZero->3:GreaterThan 102545
            Int32 _334Constant;// 71:NoisePerlinGrad-ext->0:Constant 102552
            Boolean _335LessThan;// 71:NoisePerlinGrad-ext->12:LessThan 102551
            Int32 _341Constant;// 71:NoisePerlinGrad-ext->0:Constant 102556
            Boolean _342Equal;// 71:NoisePerlinGrad-ext->16:Equal 102555
            Int32 _343Constant;// 71:NoisePerlinGrad-ext->0:Constant 102558
            Boolean _344Equal;// 71:NoisePerlinGrad-ext->19:Equal 102557
            Boolean _345OrElse;// 71:NoisePerlinGrad-ext->18:OrElse 102554
            Single _347Add;// 71:NoisePerlinGrad-ext->33:Add 102525
            Single _348FloatLerp;// 19:NoisePerlinBlendCorners-ext->74:FloatLerp 102468
            Single _349FloatLerp;// 19:NoisePerlinBlendCorners-ext->89:FloatLerp 102368
            Single _350FloorAsFloat;// 11:FloatFractionalPart-ext->4:FloorAsFloat 102662
            Single _351Subtract;// 11:FloatFractionalPart-ext->6:Subtract 102661
            Single _352Multiply;// 14:NoisePerlinFade-ext->8:Multiply 102652
            Single _353Multiply;// 14:NoisePerlinFade-ext->9:Multiply 102651
            Single _354Constant;// 14:NoisePerlinFade-ext->0:Constant 102657
            Single _355Multiply;// 14:NoisePerlinFade-ext->1:Multiply 102656
            Single _356Constant;// 14:NoisePerlinFade-ext->0:Constant 102658
            Single _357Subtract;// 14:NoisePerlinFade-ext->5:Subtract 102655
            Single _358Multiply;// 14:NoisePerlinFade-ext->3:Multiply 102654
            Single _359Constant;// 14:NoisePerlinFade-ext->0:Constant 102659
            Single _360Add;// 14:NoisePerlinFade-ext->6:Add 102653
            Single _361Multiply;// 14:NoisePerlinFade-ext->10:Multiply 102650
            Single _362FloatLerp;// 19:NoisePerlinBlendCorners-ext->98:FloatLerp 102189
            Single _363Multiply;// 19:Multiply 102172
            _0CreateStaticCache = CreateStaticCache(() => 
              {
                String _0Constant;// 44:NoisePerlinPermutationTable-ext->0:Constant 102583
                String _1Constant;// 1:StringToInts-ext->0:Constant 102579
                Regex _2Regex;// 1:StringToInts-ext->40:Regex 102578
                IArray[String] _3RegexMatches;// 1:StringToInts-ext->43:RegexMatches 102577
                String _4Constant;// 1:StringToInts-ext->0:Constant 102581
                IArray[String] _5Filter;// 1:StringToInts-ext->4:Filter 102576
                IArray[Int32] _6Map;// 1:StringToInts-ext->0:Map 102575
                IArray[Int32] _7Concatenate;// 44:NoisePerlinPermutationTable-ext->4:Concatenate 102573
                _0Constant = 151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180;
                _1Constant = -?\d*;
                _2Regex = Regex(_1Constant);
                _3RegexMatches = RegexMatches(_0Constant, _2Regex);
                _4Constant = ;
                _5Filter = Filter(_3RegexMatches, (String x0) => 
                  {
                    Boolean _0NotEqual;// 1:StringToInts-ext->11:NotEqual 102580
                    _0NotEqual = NotEqual(x0, _4Constant);
                    _0NotEqual;
                    });
                _6Map = Map(_5Filter, (String x0) => 
                  {
                    Int32 _0AsInt;// 1:StringToInts-ext->5:AsInt 102582
                    _0AsInt = AsInt(x0);
                    _0AsInt;
                    });
                _7Concatenate = Concatenate(_6Map, _6Map);
                _7Concatenate;
                }).SetId(state, 0);
            _1Zero = Zero();
            _2CachedValue = CachedValue(_0CreateStaticCache, _1Zero);
            _3MultiplyByScalar = MultiplyByScalar(x0, scale);
            _4X = X(_3MultiplyByScalar);
            _5Floor = Floor(_4X);
            _6Constant = 255;
            _7And = And(_5Floor, _6Constant);
            _8At = At(_2CachedValue, _7And);
            _9Y = Y(_3MultiplyByScalar);
            _10Floor = Floor(_9Y);
            _11And = And(_10Floor, _6Constant);
            _12Add = Add(_8At, _11And);
            _13At = At(_2CachedValue, _12Add);
            _14FloatZero = FloatZero();
            _15Floor = Floor(_14FloatZero);
            _16And = And(_15Floor, _6Constant);
            _17Add = Add(_13At, _16And);
            _18At = At(_2CachedValue, _17Add);
            _19Constant = 15;
            _20And = And(_18At, _19Constant);
            _21One = One();
            _22And = And(_20And, _21One);
            _23Zero = Zero();
            _24GreaterThan = GreaterThan(_22And, _23Zero);
            _25Constant = 8;
            _26LessThan = LessThan(_20And, _25Constant);
            _31FloorAsFloat = FloorAsFloat(_4X);
            _32Subtract = Subtract(_4X, _31FloorAsFloat);
            _33FloorAsFloat = FloorAsFloat(_9Y);
            _34Subtract = Subtract(_9Y, _33FloorAsFloat);
            _36Two = Two();
            _37And = And(_20And, _36Two);
            _38Zero = Zero();
            _39GreaterThan = GreaterThan(_37And, _38Zero);
            _40Constant = 4;
            _41LessThan = LessThan(_20And, _40Constant);
            _49Constant = 12;
            _50Equal = Equal(_20And, _49Constant);
            _51Constant = 14;
            _52Equal = Equal(_20And, _51Constant);
            _53OrElse = OrElse(_50Equal, _52Equal);
            _56FloorAsFloat = FloorAsFloat(_14FloatZero);
            _57Subtract = Subtract(_14FloatZero, _56FloorAsFloat);
            _59Add = Add(if (_24GreaterThan)
                {
                  Single _35NegativeFloat;// 20:NoisePerlinGrad-ext->26:NegativeFloat 102208
                  _35NegativeFloat = NegativeFloat(if (_26LessThan)
                    {
                      _32Subtract;
                      }else
                    {
                      _34Subtract;
                      });
                  _35NegativeFloat;
                  }else
                {
                  if (_26LessThan)
                    {
                      _32Subtract;
                      }else
                    {
                      _34Subtract;
                      };
                  }, if (_39GreaterThan)
                {
                  Single _58NegativeFloat;// 20:NoisePerlinGrad-ext->31:NegativeFloat 102220
                  _58NegativeFloat = NegativeFloat(if (_41LessThan)
                    {
                      _34Subtract;
                      }else
                    {
                      if (_53OrElse)
                        {
                          _32Subtract;
                          }else
                        {
                          _57Subtract;
                          };
                      });
                  _58NegativeFloat;
                  }else
                {
                  if (_41LessThan)
                    {
                      _34Subtract;
                      }else
                    {
                      if (_53OrElse)
                        {
                          _32Subtract;
                          }else
                        {
                          _57Subtract;
                          };
                      };
                  });
            _60One = One();
            _61Add = Add(_7And, _60One);
            _62At = At(_2CachedValue, _61Add);
            _63Add = Add(_62At, _11And);
            _64At = At(_2CachedValue, _63Add);
            _65Add = Add(_64At, _16And);
            _66At = At(_2CachedValue, _65Add);
            _67Constant = 15;
            _68And = And(_66At, _67Constant);
            _69One = One();
            _70And = And(_68And, _69One);
            _71Zero = Zero();
            _72GreaterThan = GreaterThan(_70And, _71Zero);
            _73Constant = 8;
            _74LessThan = LessThan(_68And, _73Constant);
            _77FloatOne = FloatOne();
            _78Subtract = Subtract(_32Subtract, _77FloatOne);
            _80Two = Two();
            _81And = And(_68And, _80Two);
            _82Zero = Zero();
            _83GreaterThan = GreaterThan(_81And, _82Zero);
            _84Constant = 4;
            _85LessThan = LessThan(_68And, _84Constant);
            _91Constant = 12;
            _92Equal = Equal(_68And, _91Constant);
            _93Constant = 14;
            _94Equal = Equal(_68And, _93Constant);
            _95OrElse = OrElse(_92Equal, _94Equal);
            _97Add = Add(if (_72GreaterThan)
                {
                  Single _79NegativeFloat;// 23:NoisePerlinGrad-ext->26:NegativeFloat 102251
                  _79NegativeFloat = NegativeFloat(if (_74LessThan)
                    {
                      _78Subtract;
                      }else
                    {
                      _34Subtract;
                      });
                  _79NegativeFloat;
                  }else
                {
                  if (_74LessThan)
                    {
                      _78Subtract;
                      }else
                    {
                      _34Subtract;
                      };
                  }, if (_83GreaterThan)
                {
                  Single _96NegativeFloat;// 23:NoisePerlinGrad-ext->31:NegativeFloat 102263
                  _96NegativeFloat = NegativeFloat(if (_85LessThan)
                    {
                      _34Subtract;
                      }else
                    {
                      if (_95OrElse)
                        {
                          _78Subtract;
                          }else
                        {
                          _57Subtract;
                          };
                      });
                  _96NegativeFloat;
                  }else
                {
                  if (_85LessThan)
                    {
                      _34Subtract;
                      }else
                    {
                      if (_95OrElse)
                        {
                          _78Subtract;
                          }else
                        {
                          _57Subtract;
                          };
                      };
                  });
            _98FloorAsFloat = FloorAsFloat(_4X);
            _99Subtract = Subtract(_4X, _98FloorAsFloat);
            _100Multiply = Multiply(_99Subtract, _99Subtract);
            _101Multiply = Multiply(_100Multiply, _99Subtract);
            _102Constant = 6;
            _103Multiply = Multiply(_99Subtract, _102Constant);
            _104Constant = 15;
            _105Subtract = Subtract(_103Multiply, _104Constant);
            _106Multiply = Multiply(_99Subtract, _105Subtract);
            _107Constant = 10;
            _108Add = Add(_106Multiply, _107Constant);
            _109Multiply = Multiply(_101Multiply, _108Add);
            _110FloatLerp = FloatLerp(_59Add, _97Add, _109Multiply);
            _111One = One();
            _112Add = Add(_12Add, _111One);
            _113At = At(_2CachedValue, _112Add);
            _114Add = Add(_113At, _16And);
            _115At = At(_2CachedValue, _114Add);
            _116Constant = 15;
            _117And = And(_115At, _116Constant);
            _118One = One();
            _119And = And(_117And, _118One);
            _120Zero = Zero();
            _121GreaterThan = GreaterThan(_119And, _120Zero);
            _122Constant = 8;
            _123LessThan = LessThan(_117And, _122Constant);
            _126FloatOne = FloatOne();
            _127Subtract = Subtract(_34Subtract, _126FloatOne);
            _129Two = Two();
            _130And = And(_117And, _129Two);
            _131Zero = Zero();
            _132GreaterThan = GreaterThan(_130And, _131Zero);
            _133Constant = 4;
            _134LessThan = LessThan(_117And, _133Constant);
            _140Constant = 12;
            _141Equal = Equal(_117And, _140Constant);
            _142Constant = 14;
            _143Equal = Equal(_117And, _142Constant);
            _144OrElse = OrElse(_141Equal, _143Equal);
            _146Add = Add(if (_121GreaterThan)
                {
                  Single _128NegativeFloat;// 38:NoisePerlinGrad-ext->26:NegativeFloat 102295
                  _128NegativeFloat = NegativeFloat(if (_123LessThan)
                    {
                      _32Subtract;
                      }else
                    {
                      _127Subtract;
                      });
                  _128NegativeFloat;
                  }else
                {
                  if (_123LessThan)
                    {
                      _32Subtract;
                      }else
                    {
                      _127Subtract;
                      };
                  }, if (_132GreaterThan)
                {
                  Single _145NegativeFloat;// 38:NoisePerlinGrad-ext->31:NegativeFloat 102307
                  _145NegativeFloat = NegativeFloat(if (_134LessThan)
                    {
                      _127Subtract;
                      }else
                    {
                      if (_144OrElse)
                        {
                          _32Subtract;
                          }else
                        {
                          _57Subtract;
                          };
                      });
                  _145NegativeFloat;
                  }else
                {
                  if (_134LessThan)
                    {
                      _127Subtract;
                      }else
                    {
                      if (_144OrElse)
                        {
                          _32Subtract;
                          }else
                        {
                          _57Subtract;
                          };
                      };
                  });
            _147One = One();
            _148Add = Add(_63Add, _147One);
            _149At = At(_2CachedValue, _148Add);
            _150Add = Add(_149At, _16And);
            _151At = At(_2CachedValue, _150Add);
            _152Constant = 15;
            _153And = And(_151At, _152Constant);
            _154One = One();
            _155And = And(_153And, _154One);
            _156Zero = Zero();
            _157GreaterThan = GreaterThan(_155And, _156Zero);
            _158Constant = 8;
            _159LessThan = LessThan(_153And, _158Constant);
            _162FloatOne = FloatOne();
            _163Subtract = Subtract(_32Subtract, _162FloatOne);
            _165Two = Two();
            _166And = And(_153And, _165Two);
            _167Zero = Zero();
            _168GreaterThan = GreaterThan(_166And, _167Zero);
            _169Constant = 4;
            _170LessThan = LessThan(_153And, _169Constant);
            _176Constant = 12;
            _177Equal = Equal(_153And, _176Constant);
            _178Constant = 14;
            _179Equal = Equal(_153And, _178Constant);
            _180OrElse = OrElse(_177Equal, _179Equal);
            _182Add = Add(if (_157GreaterThan)
                {
                  Single _164NegativeFloat;// 42:NoisePerlinGrad-ext->26:NegativeFloat 102341
                  _164NegativeFloat = NegativeFloat(if (_159LessThan)
                    {
                      _163Subtract;
                      }else
                    {
                      _127Subtract;
                      });
                  _164NegativeFloat;
                  }else
                {
                  if (_159LessThan)
                    {
                      _163Subtract;
                      }else
                    {
                      _127Subtract;
                      };
                  }, if (_168GreaterThan)
                {
                  Single _181NegativeFloat;// 42:NoisePerlinGrad-ext->31:NegativeFloat 102353
                  _181NegativeFloat = NegativeFloat(if (_170LessThan)
                    {
                      _127Subtract;
                      }else
                    {
                      if (_180OrElse)
                        {
                          _163Subtract;
                          }else
                        {
                          _57Subtract;
                          };
                      });
                  _181NegativeFloat;
                  }else
                {
                  if (_170LessThan)
                    {
                      _127Subtract;
                      }else
                    {
                      if (_180OrElse)
                        {
                          _163Subtract;
                          }else
                        {
                          _57Subtract;
                          };
                      };
                  });
            _183FloatLerp = FloatLerp(_146Add, _182Add, _109Multiply);
            _184FloorAsFloat = FloorAsFloat(_9Y);
            _185Subtract = Subtract(_9Y, _184FloorAsFloat);
            _186Multiply = Multiply(_185Subtract, _185Subtract);
            _187Multiply = Multiply(_186Multiply, _185Subtract);
            _188Constant = 6;
            _189Multiply = Multiply(_185Subtract, _188Constant);
            _190Constant = 15;
            _191Subtract = Subtract(_189Multiply, _190Constant);
            _192Multiply = Multiply(_185Subtract, _191Subtract);
            _193Constant = 10;
            _194Add = Add(_192Multiply, _193Constant);
            _195Multiply = Multiply(_187Multiply, _194Add);
            _196FloatLerp = FloatLerp(_110FloatLerp, _183FloatLerp, _195Multiply);
            _197One = One();
            _198Add = Add(_17Add, _197One);
            _199At = At(_2CachedValue, _198Add);
            _200Constant = 15;
            _201And = And(_199At, _200Constant);
            _202One = One();
            _203And = And(_201And, _202One);
            _204Zero = Zero();
            _205GreaterThan = GreaterThan(_203And, _204Zero);
            _206Constant = 8;
            _207LessThan = LessThan(_201And, _206Constant);
            _209Two = Two();
            _210And = And(_201And, _209Two);
            _211Zero = Zero();
            _212GreaterThan = GreaterThan(_210And, _211Zero);
            _213Constant = 4;
            _214LessThan = LessThan(_201And, _213Constant);
            _222Constant = 12;
            _223Equal = Equal(_201And, _222Constant);
            _224Constant = 14;
            _225Equal = Equal(_201And, _224Constant);
            _226OrElse = OrElse(_223Equal, _225Equal);
            _229FloatOne = FloatOne();
            _230Subtract = Subtract(_57Subtract, _229FloatOne);
            _232Add = Add(if (_205GreaterThan)
                {
                  Single _208NegativeFloat;// 16:NoisePerlinGrad-ext->26:NegativeFloat 102386
                  _208NegativeFloat = NegativeFloat(if (_207LessThan)
                    {
                      _32Subtract;
                      }else
                    {
                      _34Subtract;
                      });
                  _208NegativeFloat;
                  }else
                {
                  if (_207LessThan)
                    {
                      _32Subtract;
                      }else
                    {
                      _34Subtract;
                      };
                  }, if (_212GreaterThan)
                {
                  Single _231NegativeFloat;// 16:NoisePerlinGrad-ext->31:NegativeFloat 102398
                  _231NegativeFloat = NegativeFloat(if (_214LessThan)
                    {
                      _34Subtract;
                      }else
                    {
                      if (_226OrElse)
                        {
                          _32Subtract;
                          }else
                        {
                          _230Subtract;
                          };
                      });
                  _231NegativeFloat;
                  }else
                {
                  if (_214LessThan)
                    {
                      _34Subtract;
                      }else
                    {
                      if (_226OrElse)
                        {
                          _32Subtract;
                          }else
                        {
                          _230Subtract;
                          };
                      };
                  });
            _233One = One();
            _234Add = Add(_65Add, _233One);
            _235At = At(_2CachedValue, _234Add);
            _236Constant = 15;
            _237And = And(_235At, _236Constant);
            _238One = One();
            _239And = And(_237And, _238One);
            _240Zero = Zero();
            _241GreaterThan = GreaterThan(_239And, _240Zero);
            _242Constant = 8;
            _243LessThan = LessThan(_237And, _242Constant);
            _246FloatOne = FloatOne();
            _247Subtract = Subtract(_32Subtract, _246FloatOne);
            _249Two = Two();
            _250And = And(_237And, _249Two);
            _251Zero = Zero();
            _252GreaterThan = GreaterThan(_250And, _251Zero);
            _253Constant = 4;
            _254LessThan = LessThan(_237And, _253Constant);
            _262Constant = 12;
            _263Equal = Equal(_237And, _262Constant);
            _264Constant = 14;
            _265Equal = Equal(_237And, _264Constant);
            _266OrElse = OrElse(_263Equal, _265Equal);
            _269FloatOne = FloatOne();
            _270Subtract = Subtract(_57Subtract, _269FloatOne);
            _272Add = Add(if (_241GreaterThan)
                {
                  Single _248NegativeFloat;// 54:NoisePerlinGrad-ext->26:NegativeFloat 102435
                  _248NegativeFloat = NegativeFloat(if (_243LessThan)
                    {
                      _247Subtract;
                      }else
                    {
                      _34Subtract;
                      });
                  _248NegativeFloat;
                  }else
                {
                  if (_243LessThan)
                    {
                      _247Subtract;
                      }else
                    {
                      _34Subtract;
                      };
                  }, if (_252GreaterThan)
                {
                  Single _271NegativeFloat;// 54:NoisePerlinGrad-ext->31:NegativeFloat 102447
                  _271NegativeFloat = NegativeFloat(if (_254LessThan)
                    {
                      _34Subtract;
                      }else
                    {
                      if (_266OrElse)
                        {
                          _247Subtract;
                          }else
                        {
                          _270Subtract;
                          };
                      });
                  _271NegativeFloat;
                  }else
                {
                  if (_254LessThan)
                    {
                      _34Subtract;
                      }else
                    {
                      if (_266OrElse)
                        {
                          _247Subtract;
                          }else
                        {
                          _270Subtract;
                          };
                      };
                  });
            _273FloatLerp = FloatLerp(_232Add, _272Add, _109Multiply);
            _274One = One();
            _275Add = Add(_114Add, _274One);
            _276At = At(_2CachedValue, _275Add);
            _277Constant = 15;
            _278And = And(_276At, _277Constant);
            _279One = One();
            _280And = And(_278And, _279One);
            _281Zero = Zero();
            _282GreaterThan = GreaterThan(_280And, _281Zero);
            _283Constant = 8;
            _284LessThan = LessThan(_278And, _283Constant);
            _287FloatOne = FloatOne();
            _288Subtract = Subtract(_34Subtract, _287FloatOne);
            _290Two = Two();
            _291And = And(_278And, _290Two);
            _292Zero = Zero();
            _293GreaterThan = GreaterThan(_291And, _292Zero);
            _294Constant = 4;
            _295LessThan = LessThan(_278And, _294Constant);
            _303Constant = 12;
            _304Equal = Equal(_278And, _303Constant);
            _305Constant = 14;
            _306Equal = Equal(_278And, _305Constant);
            _307OrElse = OrElse(_304Equal, _306Equal);
            _310FloatOne = FloatOne();
            _311Subtract = Subtract(_57Subtract, _310FloatOne);
            _313Add = Add(if (_282GreaterThan)
                {
                  Single _289NegativeFloat;// 67:NoisePerlinGrad-ext->26:NegativeFloat 102485
                  _289NegativeFloat = NegativeFloat(if (_284LessThan)
                    {
                      _32Subtract;
                      }else
                    {
                      _288Subtract;
                      });
                  _289NegativeFloat;
                  }else
                {
                  if (_284LessThan)
                    {
                      _32Subtract;
                      }else
                    {
                      _288Subtract;
                      };
                  }, if (_293GreaterThan)
                {
                  Single _312NegativeFloat;// 67:NoisePerlinGrad-ext->31:NegativeFloat 102497
                  _312NegativeFloat = NegativeFloat(if (_295LessThan)
                    {
                      _288Subtract;
                      }else
                    {
                      if (_307OrElse)
                        {
                          _32Subtract;
                          }else
                        {
                          _311Subtract;
                          };
                      });
                  _312NegativeFloat;
                  }else
                {
                  if (_295LessThan)
                    {
                      _288Subtract;
                      }else
                    {
                      if (_307OrElse)
                        {
                          _32Subtract;
                          }else
                        {
                          _311Subtract;
                          };
                      };
                  });
            _314One = One();
            _315Add = Add(_150Add, _314One);
            _316At = At(_2CachedValue, _315Add);
            _317Constant = 15;
            _318And = And(_316At, _317Constant);
            _319One = One();
            _320And = And(_318And, _319One);
            _321Zero = Zero();
            _322GreaterThan = GreaterThan(_320And, _321Zero);
            _323Constant = 8;
            _324LessThan = LessThan(_318And, _323Constant);
            _327FloatOne = FloatOne();
            _328Subtract = Subtract(_32Subtract, _327FloatOne);
            _330Two = Two();
            _331And = And(_318And, _330Two);
            _332Zero = Zero();
            _333GreaterThan = GreaterThan(_331And, _332Zero);
            _334Constant = 4;
            _335LessThan = LessThan(_318And, _334Constant);
            _341Constant = 12;
            _342Equal = Equal(_318And, _341Constant);
            _343Constant = 14;
            _344Equal = Equal(_318And, _343Constant);
            _345OrElse = OrElse(_342Equal, _344Equal);
            _347Add = Add(if (_322GreaterThan)
                {
                  Single _329NegativeFloat;// 71:NoisePerlinGrad-ext->26:NegativeFloat 102537
                  _329NegativeFloat = NegativeFloat(if (_324LessThan)
                    {
                      _328Subtract;
                      }else
                    {
                      _288Subtract;
                      });
                  _329NegativeFloat;
                  }else
                {
                  if (_324LessThan)
                    {
                      _328Subtract;
                      }else
                    {
                      _288Subtract;
                      };
                  }, if (_333GreaterThan)
                {
                  Single _346NegativeFloat;// 71:NoisePerlinGrad-ext->31:NegativeFloat 102549
                  _346NegativeFloat = NegativeFloat(if (_335LessThan)
                    {
                      _288Subtract;
                      }else
                    {
                      if (_345OrElse)
                        {
                          _328Subtract;
                          }else
                        {
                          _311Subtract;
                          };
                      });
                  _346NegativeFloat;
                  }else
                {
                  if (_335LessThan)
                    {
                      _288Subtract;
                      }else
                    {
                      if (_345OrElse)
                        {
                          _328Subtract;
                          }else
                        {
                          _311Subtract;
                          };
                      };
                  });
            _348FloatLerp = FloatLerp(_313Add, _347Add, _109Multiply);
            _349FloatLerp = FloatLerp(_273FloatLerp, _348FloatLerp, _195Multiply);
            _350FloorAsFloat = FloorAsFloat(_14FloatZero);
            _351Subtract = Subtract(_14FloatZero, _350FloorAsFloat);
            _352Multiply = Multiply(_351Subtract, _351Subtract);
            _353Multiply = Multiply(_352Multiply, _351Subtract);
            _354Constant = 6;
            _355Multiply = Multiply(_351Subtract, _354Constant);
            _356Constant = 15;
            _357Subtract = Subtract(_355Multiply, _356Constant);
            _358Multiply = Multiply(_351Subtract, _357Subtract);
            _359Constant = 10;
            _360Add = Add(_358Multiply, _359Constant);
            _361Multiply = Multiply(_353Multiply, _360Add);
            _362FloatLerp = FloatLerp(_196FloatLerp, _349FloatLerp, _361Multiply);
            _363Multiply = Multiply(_362FloatLerp, noiseMultiplier);
            _363Multiply;
            };
        _1Apply1 = Apply1(_0Pass-through: function1, x0);
        _2Repeat = Repeat(_1Apply1, octaves, (Single x0, Int32 x1) => 
          {
            IArray[Single] _0GenerateN;// 18:GeometricSeries-ext->3:GenerateN 102158
            IArray[Int32] _1Range;// 0:NoiseHeteroExponents-ext->8:Range 102160
            Single _2NegativeFloat;// 0:NoiseHeteroExponents-ext->21:NegativeFloat 102164
            IArray[Single] _3Combine;// 0:NoiseHeteroExponents-ext->7:Combine 102154
            Single _4At;// 0:NoiseHeteroTerrain-ext->24:At 102149
            IArray[Vector3] _5GenerateN;// 1:NoiseHeteroPoints-ext->10:GenerateN 102170
            Vector3 _6At;// 0:NoiseHeteroTerrain-ext->14:At 102166
            Single _7Apply1;// 12:NoiseHeteroTerrainStep-ext->6:Apply1 102147
            Single _8Add;// 12:NoiseHeteroTerrainStep-ext->7:Add 102146
            Single _9Multiply;// 12:NoiseHeteroTerrainStep-ext->8:Multiply 102145
            Single _10Pow;// 12:NoiseHeteroTerrainStep-ext->12:Pow 102148
            Single _11Multiply;// 12:NoiseHeteroTerrainStep-ext->11:Multiply 102144
            Single _12Add;// 12:NoiseHeteroTerrainStep-ext->10:Add 102143
            _0GenerateN = GenerateN(frequency, octaves, (Single x0) => 
              {
                Single _0Multiply;// 18:GeometricSeries-ext->4:Multiply 102159
                _0Multiply = Multiply(x0, lacunarity);
                _0Multiply;
                });
            _1Range = Range(octaves);
            _2NegativeFloat = NegativeFloat(H);
            _3Combine = Combine(_0GenerateN, _1Range, (Single x0, Int32 x1) => 
              {
                Single _0IntAsFloat;// 0:NoiseHeteroExponents-ext->19:IntAsFloat 102163
                Single _1Multiply;// 0:NoiseHeteroExponents-ext->31:Multiply 102162
                Single _2Pow;// 0:NoiseHeteroExponents-ext->20:Pow 102161
                _0IntAsFloat = IntAsFloat(x1);
                _1Multiply = Multiply(_0IntAsFloat, _2NegativeFloat);
                _2Pow = Pow(x0, _1Multiply);
                _2Pow;
                });
            _4At = At(_3Combine, x1);
            _5GenerateN = GenerateN(x0, octaves, (Vector3 x0) => 
              {
                Vector3 _0MultiplyByScalar;// 1:NoiseHeteroPoints-ext->1:MultiplyByScalar 102171
                _0MultiplyByScalar = MultiplyByScalar(x0, lacunarity);
                _0MultiplyByScalar;
                });
            _6At = At(_5GenerateN, x1);
            _7Apply1 = Apply1(_0Pass-through: function1, _6At);
            _8Add = Add(_7Apply1, offset);
            _9Multiply = Multiply(_4At, _8Add);
            _10Pow = Pow(x0, power);
            _11Multiply = Multiply(_9Multiply, _10Pow);
            _12Add = Add(x0, _11Multiply);
            _12Add;
            });
        _2Repeat;
        });
    _4Combine = Combine(_0MeshVertices, _3Map, (Vector3 x0, Single x1) => 
      {
        Single _0X;// 8:SetZ->4:X 102680
        Single _1Y;// 8:SetZ->5:Y 102681
        Vector3 _2Vector3;// 8:SetZ->2:Vector3 102679
        _0X = X(x0);
        _1Y = Y(x0);
        _2Vector3 = Vector3(_0X, _1Y, x1);
        _2Vector3;
        });
    _5SetMeshVertices = SetMeshVertices(mesh, _4Combine);
    _5SetMeshVertices;
    }