(InstanceState state, TriMesh mesh, Single angle, Int32 axis, Boolean useGizmoXform, INode gizmo, Matrix modifierTransform, Single bias) => 
  {
    IArray[Vector3] _0MeshVertices;// 0:TwistMesh->15:MeshVertices 124750
    Single _1ToRadians;// 19:ToRadians 124876
    IArray[Vector3] _2MeshVertices;// 2:MeshBoundingBox->1:MeshVertices 124874
    BoundingBox _3BoxFromPoints;// 2:MeshBoundingBox->0:BoxFromPoints 124873
    Matrix _12Pass-through: Matrix;// 0:Pass-through: Matrix 124745
    Single _13Constant;// 20:DivideBy100Float->0:Constant 124901
    Single _14Divide;// 20:DivideBy100Float->1:Divide 124900
    IArray[Vector3] _15ParallelMap;// 0:TwistMesh->11:ParallelMap 124749
    TriMesh _16SetMeshVertices;// 0:TwistMesh->18:SetMeshVertices 124747
    _0MeshVertices = MeshVertices(mesh);
    _1ToRadians = ToRadians(angle);
    _2MeshVertices = MeshVertices(mesh);
    _3BoxFromPoints = BoxFromPoints(_2MeshVertices);
    _12Pass-through: Matrix = if (useGizmoXform)
      {
        Boolean _4IsValidNode;// 1:GizmoTransformInLocalSpace->35:IsValidNode 124884
        _4IsValidNode = IsValidNode(gizmo);
        if (_4IsValidNode)
          {
            Boolean _5IsValidNode;// 3:ValidNodeWorldTransform->2:IsValidNode 124890
            Matrix _8InvertMatrix;// 37:MaxtoolMatrixWorldToLocalTransform->2:InvertMatrix 124894
            Matrix _9Multiply;// 32:NodeToLocalTransform->18:Multiply 124887
            _5IsValidNode = IsValidNode(gizmo);
            _8InvertMatrix = InvertMatrix(modifierTransform);
            _9Multiply = Multiply(if (_5IsValidNode)
                {
                  Matrix _6WorldTransform;// 3:ValidNodeWorldTransform->1:WorldTransform 124891
                  _6WorldTransform = WorldTransform(gizmo);
                  _6WorldTransform;
                  }else
                {
                  Matrix _7MatrixIdentity;// 3:ValidNodeWorldTransform->4:MatrixIdentity 124892
                  _7MatrixIdentity = MatrixIdentity();
                  _7MatrixIdentity;
                  }, _8InvertMatrix);
            _9Multiply;
            }else
          {
            Matrix _10MatrixIdentity;// 1:GizmoTransformInLocalSpace->40:MatrixIdentity 124895
            _10MatrixIdentity = MatrixIdentity();
            _10MatrixIdentity;
            };
        }else
      {
        Matrix _11MatrixIdentity;// 12:MatrixIdentity 124898
        _11MatrixIdentity = MatrixIdentity();
        _11MatrixIdentity;
        };
    _13Constant = 100;
    _14Divide = Divide(bias, _13Constant);
    _15ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
      {
        Single _0FloatZero;// 5:TwistDeformer->59:FloatZero 124761
        Boolean _1Equal;// 5:TwistDeformer->58:Equal 124760
        Single _2FloatZero;// 5:TwistDeformer->76:FloatZero 124764
        Vector3 _3BoxMax;// 47:BoundingBoxExtent->1:BoxMax 124788
        Vector3 _4BoxMin;// 47:BoundingBoxExtent->2:BoxMin 124789
        Vector3 _5Subtract;// 47:BoundingBoxExtent->3:Subtract 124787
        Single _6X;// 2:Vector3ToArray->1:X 124775
        IArray[Single] _7Unit;// 4:Array3->2:Unit 124774
        Single _8Y;// 2:Vector3ToArray->2:Y 124776
        IArray[Single] _9Append;// 4:Array3->3:Append 124773
        Single _10Z;// 2:Vector3ToArray->3:Z 124777
        IArray[Single] _11Append;// 4:Array3->6:Append 124772
        Int32 _12Zero;// 4:ValidIndex->2:Zero 124781
        Int32 _13Count;// 4:ValidIndex->4:Count 124785
        Int32 _14One;// 5:MinusOne->2:One 124784
        Int32 _15Subtract;// 5:MinusOne->1:Subtract 124783
        Int32 _16ClampInt;// 4:ValidIndex->3:ClampInt 124780
        Single _17At;// 48:Vector3At->3:At 124767
        Boolean _18Equal;// 5:TwistDeformer->26:Equal 124763
        Boolean _19OrElse;// 5:TwistDeformer->64:OrElse 124759
        Matrix _20InvertMatrix;// 5:TwistDeformer->117:InvertMatrix 124794
        Vector3 _21Transform;// 5:TwistDeformer->116:Transform 124793
        Boolean _30IsValidNode;// 1:GizmoTransformInLocalSpace->35:IsValidNode 124884
        Boolean _37IsValidNode;// 3:ValidNodeWorldTransform->2:IsValidNode 124890
        Matrix _40InvertMatrix;// 37:MaxtoolMatrixWorldToLocalTransform->2:InvertMatrix 124894
        Vector3 _118Transform;// 5:TwistDeformer->119:Transform 124757
        _0FloatZero = FloatZero();
        _1Equal = Equal(_0FloatZero, _1ToRadians);
        _2FloatZero = FloatZero();
        _3BoxMax = BoxMax(_3BoxFromPoints);
        _4BoxMin = BoxMin(_3BoxFromPoints);
        _5Subtract = Subtract(_3BoxMax, _4BoxMin);
        _6X = X(_5Subtract);
        _7Unit = Unit(_6X);
        _8Y = Y(_5Subtract);
        _9Append = Append(_7Unit, _8Y);
        _10Z = Z(_5Subtract);
        _11Append = Append(_9Append, _10Z);
        _12Zero = Zero();
        _13Count = Count(_11Append);
        _14One = One();
        _15Subtract = Subtract(_13Count, _14One);
        _16ClampInt = ClampInt(axis, _12Zero, _15Subtract);
        _17At = At(_11Append, _16ClampInt);
        _18Equal = Equal(_2FloatZero, _17At);
        _19OrElse = OrElse(_1Equal, _18Equal);
        _20InvertMatrix = InvertMatrix(_12Pass-through: Matrix);
        _21Transform = Transform(x0, _20InvertMatrix);
        _30IsValidNode = IsValidNode(gizmo);
        _37IsValidNode = IsValidNode(gizmo);
        _40InvertMatrix = InvertMatrix(modifierTransform);
        _118Transform = Transform(if (_19OrElse)
          {
            _21Transform;
            }else
          {
            Single _41HalfPi;// 5:TwistDeformer->3:HalfPi 124818
            Single _42NegativeFloat;// 5:TwistDeformer->4:NegativeFloat 124817
            Matrix _43RotationYMatrix;// 5:TwistDeformer->1:RotationYMatrix 124816
            Func[Matrix] _44Pass-through: any;// 0:Pass-through: any 124810
            IArray[Func[Matrix]] _45Unit;// 7:Array3->2:Unit 124815
            Matrix _46RotationXMatrix;// 5:TwistDeformer->6:RotationXMatrix 124819
            Func[Matrix] _47Pass-through: any;// 0:Pass-through: any 124811
            IArray[Func[Matrix]] _48Append;// 7:Array3->3:Append 124814
            Matrix _49MatrixIdentity;// 5:TwistDeformer->5:MatrixIdentity 124820
            Func[Matrix] _50Pass-through: any;// 0:Pass-through: any 124812
            IArray[Func[Matrix]] _51Append;// 7:Array3->6:Append 124813
            Func[Matrix] _52At;// 5:TwistDeformer->8:At 124809
            Matrix _53Apply0;// 5:TwistDeformer->74:Apply0 124808
            Vector3 _54Transform;// 5:TwistDeformer->18:Transform 124805
            Single _55X;// 5:TwistDeformer->40:X 124803
            Single _56FloatZero;// 5:TwistDeformer->84:FloatZero 124827
            Boolean _57Equal;// 5:TwistDeformer->85:Equal 124826
            Single _58Z;// 5:TwistDeformer->38:Z 124830
            Single _105Pass-through: Single;// 5:TwistDeformer->70:Pass-through: Single 124824
            Single _106Cos;// 5:TwistDeformer->75:Cos 124823
            Single _107Multiply;// 5:TwistDeformer->92:Multiply 124801
            Single _108Y;// 5:TwistDeformer->41:Y 124863
            Single _109Sin;// 5:TwistDeformer->88:Sin 124864
            Single _110Multiply;// 5:TwistDeformer->105:Multiply 124861
            Single _111Add;// 5:TwistDeformer->104:Add 124800
            Single _112Multiply;// 5:TwistDeformer->107:Multiply 124867
            Single _113Multiply;// 5:TwistDeformer->109:Multiply 124868
            Single _114Subtract;// 5:TwistDeformer->108:Subtract 124866
            Vector3 _115Vector3;// 5:TwistDeformer->36:Vector3 124798
            Matrix _116InvertMatrix;// 5:TwistDeformer->14:InvertMatrix 124870
            Vector3 _117Transform;// 5:TwistDeformer->19:Transform 124796
            _41HalfPi = HalfPi();
            _42NegativeFloat = NegativeFloat(_41HalfPi);
            _43RotationYMatrix = RotationYMatrix(_42NegativeFloat);
            _44Pass-through: any = () => 
              {
                _43RotationYMatrix;
                };
            _45Unit = Unit(_44Pass-through: any);
            _46RotationXMatrix = RotationXMatrix(_41HalfPi);
            _47Pass-through: any = () => 
              {
                _46RotationXMatrix;
                };
            _48Append = Append(_45Unit, _47Pass-through: any);
            _49MatrixIdentity = MatrixIdentity();
            _50Pass-through: any = () => 
              {
                _49MatrixIdentity;
                };
            _51Append = Append(_48Append, _50Pass-through: any);
            _52At = At(_51Append, axis);
            _53Apply0 = Apply0(_52At);
            _54Transform = Transform(_21Transform, _53Apply0);
            _55X = X(_54Transform);
            _56FloatZero = FloatZero();
            _57Equal = Equal(_56FloatZero, _14Divide);
            _58Z = Z(_54Transform);
            _105Pass-through: Single = if (_57Equal)
              {
                Single _72Pass-through: Single;// 5:TwistDeformer->39:Pass-through: Single 124832
                Single _73Multiply;// 5:TwistDeformer->61:Multiply 124828
                _72Pass-through: Single = if (_18Equal)
                  {
                    Single _70FloatZero;// 5:TwistDeformer->28:FloatZero 124834
                    _70FloatZero = FloatZero();
                    _70FloatZero;
                    }else
                  {
                    Single _71Divide;// 5:TwistDeformer->32:Divide 124835
                    _71Divide = Divide(_1ToRadians, _17At);
                    _71Divide;
                    };
                _73Multiply = Multiply(_58Z, _72Pass-through: Single);
                _73Multiply;
                }else
              {
                Single _74Divide;// 5:TwistDeformer->63:Divide 124838
                Single _75FloatZero;// 5:TwistDeformer->73:FloatZero 124841
                Boolean _76LessThan;// 5:TwistDeformer->69:LessThan 124837
                Single _77Abs;// 5:TwistDeformer->66:Abs 124847
                Single _78FloatOne;// 5:TwistDeformer->78:FloatOne 124852
                Single _79FloatOne;// 5:TwistDeformer->90:FloatOne 124855
                Single _80Add;// 5:TwistDeformer->94:Add 124854
                Single _81Constant;// 5:TwistDeformer->0:Constant 124856
                Single _82Multiply;// 5:TwistDeformer->80:Multiply 124853
                Single _83Subtract;// 5:TwistDeformer->83:Subtract 124851
                Single _84Constant;// 5:TwistDeformer->0:Constant 124857
                Single _85Constant;// 5:TwistDeformer->0:Constant 124858
                Single _86ClampFloat;// 5:TwistDeformer->86:ClampFloat 124850
                Single _87LogN;// 5:TwistDeformer->99:LogN 124849
                Single _88Constant;// 5:TwistDeformer->0:Constant 124860
                Single _89LogN;// 5:TwistDeformer->101:LogN 124859
                Single _90Divide;// 5:TwistDeformer->102:Divide 124848
                Single _91Pow;// 5:TwistDeformer->62:Pow 124846
                Single _92Multiply;// 5:TwistDeformer->65:Multiply 124844
                _74Divide = Divide(_58Z, _17At);
                _75FloatZero = FloatZero();
                _76LessThan = LessThan(_74Divide, _75FloatZero);
                _77Abs = Abs(_74Divide);
                _78FloatOne = FloatOne();
                _79FloatOne = FloatOne();
                _80Add = Add(_14Divide, _79FloatOne);
                _81Constant = 0.5;
                _82Multiply = Multiply(_80Add, _81Constant);
                _83Subtract = Subtract(_78FloatOne, _82Multiply);
                _84Constant = 1E-05;
                _85Constant = 0.99999;
                _86ClampFloat = ClampFloat(_83Subtract, _84Constant, _85Constant);
                _87LogN = LogN(_86ClampFloat);
                _88Constant = 0.5;
                _89LogN = LogN(_88Constant);
                _90Divide = Divide(_87LogN, _89LogN);
                _91Pow = Pow(_77Abs, _90Divide);
                _92Multiply = Multiply(_1ToRadians, _91Pow);
                if (_76LessThan)
                  {
                    Single _104NegativeFloat;// 5:TwistDeformer->81:NegativeFloat 124842
                    _104NegativeFloat = NegativeFloat(_92Multiply);
                    _104NegativeFloat;
                    }else
                  {
                    _92Multiply;
                    };
                };
            _106Cos = Cos(_105Pass-through: Single);
            _107Multiply = Multiply(_55X, _106Cos);
            _108Y = Y(_54Transform);
            _109Sin = Sin(_105Pass-through: Single);
            _110Multiply = Multiply(_108Y, _109Sin);
            _111Add = Add(_107Multiply, _110Multiply);
            _112Multiply = Multiply(_108Y, _106Cos);
            _113Multiply = Multiply(_55X, _109Sin);
            _114Subtract = Subtract(_112Multiply, _113Multiply);
            _115Vector3 = Vector3(_111Add, _114Subtract, _58Z);
            _116InvertMatrix = InvertMatrix(_53Apply0);
            _117Transform = Transform(_115Vector3, _116InvertMatrix);
            _117Transform;
            }, _12Pass-through: Matrix);
        _118Transform;
        });
    _16SetMeshVertices = SetMeshVertices(mesh, _15ParallelMap);
    _16SetMeshVertices;
    }