(InstanceState state, TriMesh mesh, Int32 channel id, INode source, Boolean position only, Int32 axis, Single box radius) => 
  {
    Boolean _0IsValidNode;// 14:MeshFromNodeWithDefault.ext->1:IsValidNode 76827
    TriMesh _2Pass-through: TriMesh;// 0:Pass-through: TriMesh 76819
    IArray[Vector3] _3MeshVertices;// 5:MeshVertexNormalsAsRays.ext->2:MeshVertices 76821
    IArray[Vector3] _4VertexNormals;// 5:MeshVertexNormalsAsRays.ext->1:VertexNormals 76822
    IArray[Ray] _5Combine;// 5:MeshVertexNormalsAsRays.ext->3:Combine 76820
    IArray[Matrix] _6Map;// 19:Map 76818
    Func[Matrix, IArray[Vector3]] _7Pass-through: function1;// 0:Pass-through: function1 76804
    IArray[IArray[Vector3]] _8Map;// 5:FlatMap->4:Map 76806
    IArray[Vector3] _9Flatten;// 5:FlatMap->3:Flatten 76805
    IArray[Int32] _10MeshIndices;// 0:StoreMatricesInMapChannel.ext->0:MeshIndices 76815
    TriMesh _11SetMapChannel;// 0:StoreMatricesInMapChannel.ext->7:SetMapChannel 76802
    Int32 _12Constant;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->0:Constant 76681
    IArray[Int32] _13Range;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->1:Range 76680
    Int32 _14Two;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->4:Two 76682
    IArray[Int32] _15Skip;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->3:Skip 76679
    IArray[Int32] _16Filter;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->13:Filter 76678
    MapChannel _17GetMapChannel;// 34:MatricesFromMapChannel.ext->9:GetMapChannel 76740
    IArray[Vector3] _18MapChannelVertexBuffer;// 34:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 76739
    Int32 _19Count;// 2:Slices->2:Count 76736
    Int32 _20Constant;// 34:MatricesFromMapChannel.ext->0:Constant 76741
    Int32 _21Divide;// 2:Slices->3:Divide 76735
    IArray[Int32] _22Range;// 2:Slices->4:Range 76734
    IArray[IArray[Vector3]] _23Map;// 2:Slices->5:Map 76733
    IArray[Matrix] _24Map;// 34:MatricesFromMapChannel.ext->5:Map 76730
    Single _25Constant;// 1:Origin->0:Constant 76798
    Vector3 _26Vector3;// 1:Origin->1:Vector3 76797
    BoundingSphere _27Sphere;// 0:BoxFromPointAndRadius->3:Sphere 76796
    BoundingBox _28BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 76795
    QuadMesh _29BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 76791
    TriMesh _30Triangulate;// 29:BoxTriMesh->3:Triangulate 76790
    IArray[Int32] _31MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 76781
    IArray[Int32] _32Indices;// 4:HideEveryThirdEdge->8:Indices 76780
    Int32 _33Constant;// 4:HideEveryThirdEdge->0:Constant 76788
    Int32 _34Constant;// 4:HideEveryThirdEdge->0:Constant 76789
    IArray[Boolean] _35Map;// 4:HideEveryThirdEdge->5:Map 76779
    TriMesh _36SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 76778
    IArray[TriMesh] _37Map;// 20:ClonerMeshAsBoxes.ext->16:Map 76727
    TriMesh _38CombineAllMeshes;// 20:ClonerMeshAsBoxes.ext->2:CombineAllMeshes 76726
    TriMesh _39Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->6:Aggregate 76677
    TriMesh _40IgnoreFirst;// 20:ClonerMeshAsBoxes.ext->7:IgnoreFirst 76674
    _0IsValidNode = IsValidNode(source);
    _2Pass-through: TriMesh = if (_0IsValidNode)
      {
        TriMesh _1MeshFromNode;// 14:MeshFromNodeWithDefault.ext->2:MeshFromNode 76828
        _1MeshFromNode = MeshFromNode(source);
        _1MeshFromNode;
        }else
      {
        mesh;
        };
    _3MeshVertices = MeshVertices(_2Pass-through: TriMesh);
    _4VertexNormals = VertexNormals(_2Pass-through: TriMesh);
    _5Combine = Combine(_3MeshVertices, _4VertexNormals, (Vector3 x0, Vector3 x1) => 
      {
        Ray _0Ray;// 5:MeshVertexNormalsAsRays.ext->4:Ray 76823
        _0Ray = Ray(x0, x1);
        _0Ray;
        });
    _6Map = Map(_5Combine, (Ray x0) => 
      {
        Vector3 _61RayPosition;// 16:RayToMatrix.ext->10:RayPosition 76900
        Matrix _62RotationTranslationMatrix;// 16:RayToMatrix.ext->8:RotationTranslationMatrix 76833
        _61RayPosition = RayPosition(x0);
        _62RotationTranslationMatrix = RotationTranslationMatrix(if (position only)
          {
            Quaternion _0QuaternionIdentity;// 16:RayToMatrix.ext->4:QuaternionIdentity 76835
            _0QuaternionIdentity = QuaternionIdentity();
            _0QuaternionIdentity;
            }else
          {
            Int32 _1Zero;// 6:ChooseAxis.ext->9:Zero 76873
            Boolean _2GreaterThanOrEqual;// 6:ChooseAxis.ext->8:GreaterThanOrEqual 76872
            Vector3 _3XAxis;// 6:ChooseAxis.ext->3:XAxis 76881
            IArray[Vector3] _4Unit;// 2:Array3->2:Unit 76880
            Vector3 _5YAxis;// 6:ChooseAxis.ext->4:YAxis 76882
            IArray[Vector3] _6Append;// 2:Array3->3:Append 76879
            Vector3 _7ZAxis;// 6:ChooseAxis.ext->5:ZAxis 76883
            IArray[Vector3] _8Append;// 2:Array3->6:Append 76878
            Vector3 _15Pass-through: Vector3;// 0:Pass-through: Vector3 76836
            Vector3 _16Normalize;// 5:RotationBetweenVectorsFix.ext->4:Normalize 76868
            Vector3 _17RayDirection;// 16:RayToMatrix.ext->7:RayDirection 76899
            Single _18Length;// 4:VectorIsSmall.ext->3:Length 76896
            Single _19Constant;// 4:VectorLengthEpsilon.ext->0:Constant 76897
            Boolean _20LessThan;// 4:VectorIsSmall.ext->5:LessThan 76895
            Vector3 _22Pass-through: Vector3;// 0:Pass-through: Vector3 76837
            Vector3 _23Normalize;// 5:RotationBetweenVectorsFix.ext->5:Normalize 76869
            Single _24Dot;// 0:RotationBetweenUnitVectors.ext->6:Dot 76844
            Single _25FloatOne;// 0:RotationBetweenUnitVectors.ext->8:FloatOne 76845
            Single _26Add;// 0:RotationBetweenUnitVectors.ext->7:Add 76843
            Single _27Constant;// 0:RotationBetweenUnitVectors.ext->0:Constant 76846
            Boolean _28LessThan;// 0:RotationBetweenUnitVectors.ext->40:LessThan 76842
            Quaternion _60QuaternionNormalize;// 0:RotationBetweenUnitVectors.ext->3:QuaternionNormalize 76840
            _1Zero = Zero();
            _2GreaterThanOrEqual = GreaterThanOrEqual(axis, _1Zero);
            _3XAxis = XAxis();
            _4Unit = Unit(_3XAxis);
            _5YAxis = YAxis();
            _6Append = Append(_4Unit, _5YAxis);
            _7ZAxis = ZAxis();
            _8Append = Append(_6Append, _7ZAxis);
            _15Pass-through: Vector3 = if (_2GreaterThanOrEqual)
              {
                Vector3 _9At;// 6:ChooseAxis.ext->1:At 76874
                _9At = At(_8Append, axis);
                _9At;
                }else
              {
                Int32 _10One;// 10:PlusOne->1:One 76889
                Int32 _11Add;// 10:PlusOne->0:Add 76888
                Int32 _12Negative;// 6:ChooseAxis.ext->11:Negative 76886
                Vector3 _13At;// 6:ChooseAxis.ext->12:At 76885
                Vector3 _14Negate;// 6:ChooseAxis.ext->13:Negate 76884
                _10One = One();
                _11Add = Add(axis, _10One);
                _12Negative = Negative(_11Add);
                _13At = At(_8Append, _12Negative);
                _14Negate = Negate(_13At);
                _14Negate;
                };
            _16Normalize = Normalize(_15Pass-through: Vector3);
            _17RayDirection = RayDirection(x0);
            _18Length = Length(_17RayDirection);
            _19Constant = 1E-06;
            _20LessThan = LessThan(_18Length, _19Constant);
            _22Pass-through: Vector3 = if (_20LessThan)
              {
                Vector3 _21ZAxis;// 11:VectorOrZAxis.ext->2:ZAxis 76898
                _21ZAxis = ZAxis();
                _21ZAxis;
                }else
              {
                _17RayDirection;
                };
            _23Normalize = Normalize(_22Pass-through: Vector3);
            _24Dot = Dot(_16Normalize, _23Normalize);
            _25FloatOne = FloatOne();
            _26Add = Add(_24Dot, _25FloatOne);
            _27Constant = 1E-07;
            _28LessThan = LessThan(_26Add, _27Constant);
            _60QuaternionNormalize = QuaternionNormalize(if (_28LessThan)
              {
                Single _35X;// 0:RotationBetweenUnitVectors.ext->12:X 76851
                Single _36Abs;// 0:RotationBetweenUnitVectors.ext->11:Abs 76850
                Single _37Z;// 0:RotationBetweenUnitVectors.ext->14:Z 76854
                Single _38Abs;// 0:RotationBetweenUnitVectors.ext->13:Abs 76853
                Boolean _39GreaterThan;// 0:RotationBetweenUnitVectors.ext->15:GreaterThan 76849
                Single _56FloatZero;// 0:RotationBetweenUnitVectors.ext->36:FloatZero 76865
                Quaternion _57QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors.ext->35:QuaternionFromVectorAndTheta 76847
                _35X = X(_16Normalize);
                _36Abs = Abs(_35X);
                _37Z = Z(_16Normalize);
                _38Abs = Abs(_37Z);
                _39GreaterThan = GreaterThan(_36Abs, _38Abs);
                _56FloatZero = FloatZero();
                _57QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_39GreaterThan)
                  {
                    Single _46Y;// 0:RotationBetweenUnitVectors.ext->29:Y 76857
                    Single _47NegativeFloat;// 0:RotationBetweenUnitVectors.ext->30:NegativeFloat 76856
                    Single _48X;// 0:RotationBetweenUnitVectors.ext->23:X 76858
                    Single _49FloatZero;// 0:RotationBetweenUnitVectors.ext->21:FloatZero 76859
                    Vector3 _50Vector3;// 0:RotationBetweenUnitVectors.ext->19:Vector3 76855
                    _46Y = Y(_16Normalize);
                    _47NegativeFloat = NegativeFloat(_46Y);
                    _48X = X(_16Normalize);
                    _49FloatZero = FloatZero();
                    _50Vector3 = Vector3(_47NegativeFloat, _48X, _49FloatZero);
                    _50Vector3;
                    }else
                  {
                    Single _51FloatZero;// 0:RotationBetweenUnitVectors.ext->22:FloatZero 76861
                    Single _52Z;// 0:RotationBetweenUnitVectors.ext->26:Z 76863
                    Single _53NegativeFloat;// 0:RotationBetweenUnitVectors.ext->25:NegativeFloat 76862
                    Single _54Y;// 0:RotationBetweenUnitVectors.ext->24:Y 76864
                    Vector3 _55Vector3;// 0:RotationBetweenUnitVectors.ext->20:Vector3 76860
                    _51FloatZero = FloatZero();
                    _52Z = Z(_16Normalize);
                    _53NegativeFloat = NegativeFloat(_52Z);
                    _54Y = Y(_16Normalize);
                    _55Vector3 = Vector3(_51FloatZero, _53NegativeFloat, _54Y);
                    _55Vector3;
                    }, _56FloatZero);
                _57QuaternionFromVectorAndTheta;
                }else
              {
                Vector3 _58Cross;// 0:RotationBetweenUnitVectors.ext->2:Cross 76867
                Quaternion _59QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors.ext->5:QuaternionFromVectorAndTheta 76866
                _58Cross = Cross(_16Normalize, _23Normalize);
                _59QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_58Cross, _26Add);
                _59QuaternionFromVectorAndTheta;
                });
            _60QuaternionNormalize;
            }, _61RayPosition);
        _62RotationTranslationMatrix;
        });
    _7Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 76810
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 76809
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 76808
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 76814
            Int32 _1Add;// 5:PlusOne->0:Add 76813
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 76811
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _8Map = Map(_6Map, _7Pass-through: function1);
    _9Flatten = Flatten(_8Map);
    _10MeshIndices = MeshIndices(mesh);
    _11SetMapChannel = SetMapChannel(mesh, channel id, _9Flatten, _10MeshIndices);
    _12Constant = 100;
    _13Range = Range(_12Constant);
    _14Two = Two();
    _15Skip = Skip(_13Range, _14Two);
    _16Filter = Filter(_15Skip, (Int32 x0) => 
      {
        Int32 _0Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 76695
        Boolean _1Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 76694
        MapChannel _5Pass-through: any;// 0:Pass-through: any 76686
        Object _6Null;// 6:IsNullFix2.ext->3:Null 76690
        Object _7As;// 6:IsNullFix2.ext->23:As 76688
        Boolean _8Equal;// 6:IsNullFix2.ext->1:Equal 76687
        Boolean _9Not;// 12:MapChannelExists.ext->4:Not 76685
        _0Constant = -3;
        _1Equal = Equal(x0, _0Constant);
        _5Pass-through: any = if (_1Equal)
          {
            MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 76696
            _3TopologyChannel = TopologyChannel(_11SetMapChannel);
            _3TopologyChannel;
            }else
          {
            MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 76697
            _4GetMapChannel = GetMapChannel(_11SetMapChannel, x0);
            _4GetMapChannel;
            };
        _6Null = Null();
        _7As = As(_5Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 76689
            _0IgnoreFirst = IgnoreFirst(x0, _6Null);
            _0IgnoreFirst;
            });
        _8Equal = Equal(_7As, _6Null);
        _9Not = Not(_8Equal);
        _9Not;
        });
    _17GetMapChannel = GetMapChannel(_11SetMapChannel, channel id);
    _18MapChannelVertexBuffer = MapChannelVertexBuffer(_17GetMapChannel);
    _19Count = Count(_18MapChannelVertexBuffer);
    _20Constant = 4;
    _21Divide = Divide(_19Count, _20Constant);
    _22Range = Range(_21Divide);
    _23Map = Map(_22Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 76738
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 76737
        _0Multiply = Multiply(_20Constant, x0);
        _1Slice = Slice(_18MapChannelVertexBuffer, _0Multiply, _20Constant);
        _1Slice;
        });
    _24Map = Map(_23Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 76750
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 76751
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 76755
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 76754
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 76749
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 76752
        Int32 _6One;// 8:PlusOne->1:One 76759
        Int32 _7Add;// 8:PlusOne->0:Add 76758
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 76756
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 76748
        Int32 _10Constant;// 25:Three->0:Constant 76753
        Int32 _11One;// 9:PlusOne->1:One 76763
        Int32 _12Add;// 9:PlusOne->0:Add 76762
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 76760
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 76747
        Int32 _15One;// 10:PlusOne->1:One 76767
        Int32 _16Add;// 10:PlusOne->0:Add 76766
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 76764
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 76743
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _25Constant = 0;
    _26Vector3 = Vector3(_25Constant, _25Constant, _25Constant);
    _27Sphere = Sphere(_26Vector3, box radius);
    _28BoxFromSphere = BoxFromSphere(_27Sphere);
    _29BoxQuadMesh = BoxQuadMesh(_28BoxFromSphere);
    _30Triangulate = Triangulate(_29BoxQuadMesh);
    _31MeshIndices = MeshIndices(_30Triangulate);
    _32Indices = Indices(_31MeshIndices);
    _33Constant = 3;
    _34Constant = 2;
    _35Map = Map(_32Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 76787
        Boolean _1Equal;// 6:ModuloEquals->4:Equal 76786
        Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 76782
        _0Modulo = Modulo(x0, _33Constant);
        _1Equal = Equal(_0Modulo, _34Constant);
        _2Not = Not(_1Equal);
        _2Not;
        });
    _36SetVisibleEdges = SetVisibleEdges(_30Triangulate, _35Map);
    _37Map = Map(_24Map, (Matrix x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 76774
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 76771
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 76773
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 76772
        _0MeshVertices = MeshVertices(_36SetVisibleEdges);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 36:TransformMesh->0:Transform 76775
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(_36SetVisibleEdges, _2Map);
        _3SetMeshVertices;
        });
    _38CombineAllMeshes = CombineAllMeshes(_37Map);
    _39Aggregate = Aggregate(_16Filter, _38CombineAllMeshes, (TriMesh x0, Int32 x1) => 
      {
        TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer.ext->10:TryCatch 76701
        _0TryCatch = TryCatch(() => 
          {
            Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->7:IgnoreFirst 76723
            Int32 _1Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 76715
            Boolean _2Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 76714
            MapChannel _6Pass-through: any;// 0:Pass-through: any 76706
            Object _7Null;// 6:IsNullFix2.ext->3:Null 76710
            Object _8As;// 6:IsNullFix2.ext->23:As 76708
            Boolean _9Equal;// 6:IsNullFix2.ext->1:Equal 76707
            Boolean _10Not;// 5:MapChannelExists.ext->4:Not 76705
            _0IgnoreFirst = IgnoreFirst(x0, x1);
            _1Constant = -3;
            _2Equal = Equal(_0IgnoreFirst, _1Constant);
            _6Pass-through: any = if (_2Equal)
              {
                MapChannel _4TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 76716
                _4TopologyChannel = TopologyChannel(_11SetMapChannel);
                _4TopologyChannel;
                }else
              {
                MapChannel _5GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 76717
                _5GetMapChannel = GetMapChannel(_11SetMapChannel, _0IgnoreFirst);
                _5GetMapChannel;
                };
            _7Null = Null();
            _8As = As(_6Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 76709
                _0IgnoreFirst = IgnoreFirst(x0, _7Null);
                _0IgnoreFirst;
                });
            _9Equal = Equal(_8As, _7Null);
            _10Not = Not(_9Equal);
            if (_10Not)
              {
                MapChannel _11GetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->1:GetMapChannel 76720
                IArray[Vector3] _12MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer.ext->8:MapChannelVertexBuffer 76719
                IArray[Int32] _13MeshIndices;// 10:MapChannelCopyVertexBuffer.ext->0:MeshIndices 76721
                TriMesh _14SetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->7:SetMapChannel 76718
                _11GetMapChannel = GetMapChannel(_11SetMapChannel, _0IgnoreFirst);
                _12MapChannelVertexBuffer = MapChannelVertexBuffer(_11GetMapChannel);
                _13MeshIndices = MeshIndices(x0);
                _14SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _12MapChannelVertexBuffer, _13MeshIndices);
                _14SetMapChannel;
                }else
              {
                x0;
                };
            }, (Exception x0) => 
          {
            TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer.ext->11:IgnoreFirst 76722
            _0IgnoreFirst = IgnoreFirst(x0, x0);
            _0IgnoreFirst;
            });
        _0TryCatch;
        });
    _40IgnoreFirst = IgnoreFirst(_11SetMapChannel, _39Aggregate);
    _40IgnoreFirst;
    }