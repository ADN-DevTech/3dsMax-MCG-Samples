(InstanceState state, TriMesh mesh, Int32 flux channel, INode source, Boolean position only, Int32 axis, Boolean create mesh, Single box radius) => 
  {
    Boolean _0IsValidNode;// 14:MeshFromNodeWithDefault.ext->1:IsValidNode 54034
    TriMesh _2Pass-through: TriMesh;// 0:Pass-through: TriMesh 54026
    IArray[Vector3] _3MeshVertices;// 5:MeshVertexNormalsAsRays.ext->2:MeshVertices 54028
    IArray[Vector3] _4VertexNormals;// 5:MeshVertexNormalsAsRays.ext->1:VertexNormals 54029
    IArray[Ray] _5Combine;// 5:MeshVertexNormalsAsRays.ext->3:Combine 54027
    IArray[Matrix] _6Map;// 19:Map 54025
    Func[Matrix, IArray[Vector3]] _7Pass-through: function1;// 0:Pass-through: function1 54011
    IArray[IArray[Vector3]] _8Map;// 5:FlatMap->4:Map 54013
    IArray[Vector3] _9Flatten;// 5:FlatMap->3:Flatten 54012
    IArray[Int32] _10MeshIndices;// 0:StoreMatricesInMapChannel.ext->0:MeshIndices 54022
    TriMesh _11SetMapChannel;// 0:StoreMatricesInMapChannel.ext->7:SetMapChannel 54009
    TriMesh _41IgnoreFirst;// 20:ClonerMeshAsBoxes.ext->7:IgnoreFirst 53880
    _0IsValidNode = IsValidNode(source);
    _2Pass-through: TriMesh = if (_0IsValidNode)
      {
        TriMesh _1MeshFromNode;// 14:MeshFromNodeWithDefault.ext->2:MeshFromNode 54035
        _1MeshFromNode = MeshFromNode(source);
        _1MeshFromNode;
        }else
      {
        mesh;
        };
    _3MeshVertices = MeshVertices(_2Pass-through: TriMesh);
    _4VertexNormals = VertexNormals(_2Pass-through: TriMesh);
    _5Combine = Combine(_3MeshVertices, _4VertexNormals, (Vector3 x0, Vector3 x1) => 
      {
        Ray _0Ray;// 5:MeshVertexNormalsAsRays.ext->4:Ray 54030
        _0Ray = Ray(x0, x1);
        _0Ray;
        });
    _6Map = Map(_5Combine, (Ray x0) => 
      {
        Vector3 _61RayPosition;// 16:RayToMatrix.ext->10:RayPosition 54107
        Matrix _62RotationTranslationMatrix;// 16:RayToMatrix.ext->8:RotationTranslationMatrix 54040
        _61RayPosition = RayPosition(x0);
        _62RotationTranslationMatrix = RotationTranslationMatrix(if (position only)
          {
            Quaternion _0QuaternionIdentity;// 16:RayToMatrix.ext->4:QuaternionIdentity 54042
            _0QuaternionIdentity = QuaternionIdentity();
            _0QuaternionIdentity;
            }else
          {
            Int32 _1Zero;// 6:ChooseAxis.ext->9:Zero 54080
            Boolean _2GreaterThanOrEqual;// 6:ChooseAxis.ext->8:GreaterThanOrEqual 54079
            Vector3 _3XAxis;// 6:ChooseAxis.ext->3:XAxis 54088
            IArray[Vector3] _4Unit;// 2:Array3->2:Unit 54087
            Vector3 _5YAxis;// 6:ChooseAxis.ext->4:YAxis 54089
            IArray[Vector3] _6Append;// 2:Array3->3:Append 54086
            Vector3 _7ZAxis;// 6:ChooseAxis.ext->5:ZAxis 54090
            IArray[Vector3] _8Append;// 2:Array3->6:Append 54085
            Vector3 _15Pass-through: Vector3;// 0:Pass-through: Vector3 54043
            Vector3 _16Normalize;// 5:RotationBetweenVectorsFix.ext->4:Normalize 54075
            Vector3 _17RayDirection;// 16:RayToMatrix.ext->7:RayDirection 54106
            Single _18Length;// 4:VectorIsSmall.ext->3:Length 54103
            Single _19Constant;// 4:VectorLengthEpsilon.ext->0:Constant 54104
            Boolean _20LessThan;// 4:VectorIsSmall.ext->5:LessThan 54102
            Vector3 _22Pass-through: Vector3;// 0:Pass-through: Vector3 54044
            Vector3 _23Normalize;// 5:RotationBetweenVectorsFix.ext->5:Normalize 54076
            Single _24Dot;// 0:RotationBetweenUnitVectors.ext->6:Dot 54051
            Single _25FloatOne;// 0:RotationBetweenUnitVectors.ext->8:FloatOne 54052
            Single _26Add;// 0:RotationBetweenUnitVectors.ext->7:Add 54050
            Single _27Constant;// 0:RotationBetweenUnitVectors.ext->0:Constant 54053
            Boolean _28LessThan;// 0:RotationBetweenUnitVectors.ext->40:LessThan 54049
            Quaternion _60QuaternionNormalize;// 0:RotationBetweenUnitVectors.ext->3:QuaternionNormalize 54047
            _1Zero = Zero();
            _2GreaterThanOrEqual = GreaterThanOrEqual(axis, _1Zero);
            _3XAxis = XAxis();
            _4Unit = Unit(_3XAxis);
            _5YAxis = YAxis();
            _6Append = Append(_4Unit, _5YAxis);
            _7ZAxis = ZAxis();
            _8Append = Append(_6Append, _7ZAxis);
            _15Pass-through: Vector3 = if (_2GreaterThanOrEqual)
              {
                Vector3 _9At;// 6:ChooseAxis.ext->1:At 54081
                _9At = At(_8Append, axis);
                _9At;
                }else
              {
                Int32 _10One;// 10:PlusOne->1:One 54096
                Int32 _11Add;// 10:PlusOne->0:Add 54095
                Int32 _12Negative;// 6:ChooseAxis.ext->11:Negative 54093
                Vector3 _13At;// 6:ChooseAxis.ext->12:At 54092
                Vector3 _14Negate;// 6:ChooseAxis.ext->13:Negate 54091
                _10One = One();
                _11Add = Add(axis, _10One);
                _12Negative = Negative(_11Add);
                _13At = At(_8Append, _12Negative);
                _14Negate = Negate(_13At);
                _14Negate;
                };
            _16Normalize = Normalize(_15Pass-through: Vector3);
            _17RayDirection = RayDirection(x0);
            _18Length = Length(_17RayDirection);
            _19Constant = 1E-06;
            _20LessThan = LessThan(_18Length, _19Constant);
            _22Pass-through: Vector3 = if (_20LessThan)
              {
                Vector3 _21ZAxis;// 11:VectorOrZAxis.ext->2:ZAxis 54105
                _21ZAxis = ZAxis();
                _21ZAxis;
                }else
              {
                _17RayDirection;
                };
            _23Normalize = Normalize(_22Pass-through: Vector3);
            _24Dot = Dot(_16Normalize, _23Normalize);
            _25FloatOne = FloatOne();
            _26Add = Add(_24Dot, _25FloatOne);
            _27Constant = 1E-07;
            _28LessThan = LessThan(_26Add, _27Constant);
            _60QuaternionNormalize = QuaternionNormalize(if (_28LessThan)
              {
                Single _35X;// 0:RotationBetweenUnitVectors.ext->12:X 54058
                Single _36Abs;// 0:RotationBetweenUnitVectors.ext->11:Abs 54057
                Single _37Z;// 0:RotationBetweenUnitVectors.ext->14:Z 54061
                Single _38Abs;// 0:RotationBetweenUnitVectors.ext->13:Abs 54060
                Boolean _39GreaterThan;// 0:RotationBetweenUnitVectors.ext->15:GreaterThan 54056
                Single _56FloatZero;// 0:RotationBetweenUnitVectors.ext->36:FloatZero 54072
                Quaternion _57QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors.ext->35:QuaternionFromVectorAndTheta 54054
                _35X = X(_16Normalize);
                _36Abs = Abs(_35X);
                _37Z = Z(_16Normalize);
                _38Abs = Abs(_37Z);
                _39GreaterThan = GreaterThan(_36Abs, _38Abs);
                _56FloatZero = FloatZero();
                _57QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(if (_39GreaterThan)
                  {
                    Single _46Y;// 0:RotationBetweenUnitVectors.ext->29:Y 54064
                    Single _47NegativeFloat;// 0:RotationBetweenUnitVectors.ext->30:NegativeFloat 54063
                    Single _48X;// 0:RotationBetweenUnitVectors.ext->23:X 54065
                    Single _49FloatZero;// 0:RotationBetweenUnitVectors.ext->21:FloatZero 54066
                    Vector3 _50Vector3;// 0:RotationBetweenUnitVectors.ext->19:Vector3 54062
                    _46Y = Y(_16Normalize);
                    _47NegativeFloat = NegativeFloat(_46Y);
                    _48X = X(_16Normalize);
                    _49FloatZero = FloatZero();
                    _50Vector3 = Vector3(_47NegativeFloat, _48X, _49FloatZero);
                    _50Vector3;
                    }else
                  {
                    Single _51FloatZero;// 0:RotationBetweenUnitVectors.ext->22:FloatZero 54068
                    Single _52Z;// 0:RotationBetweenUnitVectors.ext->26:Z 54070
                    Single _53NegativeFloat;// 0:RotationBetweenUnitVectors.ext->25:NegativeFloat 54069
                    Single _54Y;// 0:RotationBetweenUnitVectors.ext->24:Y 54071
                    Vector3 _55Vector3;// 0:RotationBetweenUnitVectors.ext->20:Vector3 54067
                    _51FloatZero = FloatZero();
                    _52Z = Z(_16Normalize);
                    _53NegativeFloat = NegativeFloat(_52Z);
                    _54Y = Y(_16Normalize);
                    _55Vector3 = Vector3(_51FloatZero, _53NegativeFloat, _54Y);
                    _55Vector3;
                    }, _56FloatZero);
                _57QuaternionFromVectorAndTheta;
                }else
              {
                Vector3 _58Cross;// 0:RotationBetweenUnitVectors.ext->2:Cross 54074
                Quaternion _59QuaternionFromVectorAndTheta;// 0:RotationBetweenUnitVectors.ext->5:QuaternionFromVectorAndTheta 54073
                _58Cross = Cross(_16Normalize, _23Normalize);
                _59QuaternionFromVectorAndTheta = QuaternionFromVectorAndTheta(_58Cross, _26Add);
                _59QuaternionFromVectorAndTheta;
                });
            _60QuaternionNormalize;
            }, _61RayPosition);
        _62RotationTranslationMatrix;
        });
    _7Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 54017
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 54016
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 54015
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 54021
            Int32 _1Add;// 5:PlusOne->0:Add 54020
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 54018
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _8Map = Map(_6Map, _7Pass-through: function1);
    _9Flatten = Flatten(_8Map);
    _10MeshIndices = MeshIndices(mesh);
    _11SetMapChannel = SetMapChannel(mesh, flux channel, _9Flatten, _10MeshIndices);
    _41IgnoreFirst = IgnoreFirst(_11SetMapChannel, if (create mesh)
      {
        Int32 _13Constant;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->0:Constant 53888
        IArray[Int32] _14Range;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->1:Range 53887
        Int32 _15Two;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->4:Two 53889
        IArray[Int32] _16Skip;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->3:Skip 53886
        IArray[Int32] _17Filter;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->13:Filter 53885
        MapChannel _18GetMapChannel;// 34:MatricesFromMapChannel.ext->9:GetMapChannel 53947
        IArray[Vector3] _19MapChannelVertexBuffer;// 34:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 53946
        Int32 _20Count;// 2:Slices->2:Count 53943
        Int32 _21Constant;// 34:MatricesFromMapChannel.ext->0:Constant 53948
        Int32 _22Divide;// 2:Slices->3:Divide 53942
        IArray[Int32] _23Range;// 2:Slices->4:Range 53941
        IArray[IArray[Vector3]] _24Map;// 2:Slices->5:Map 53940
        IArray[Matrix] _25Map;// 34:MatricesFromMapChannel.ext->5:Map 53937
        Single _26Constant;// 1:Origin->0:Constant 54005
        Vector3 _27Vector3;// 1:Origin->1:Vector3 54004
        BoundingSphere _28Sphere;// 0:BoxFromPointAndRadius->3:Sphere 54003
        BoundingBox _29BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 54002
        QuadMesh _30BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 53998
        TriMesh _31Triangulate;// 29:BoxTriMesh->3:Triangulate 53997
        IArray[Int32] _32MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 53988
        IArray[Int32] _33Indices;// 4:HideEveryThirdEdge->8:Indices 53987
        Int32 _34Constant;// 4:HideEveryThirdEdge->0:Constant 53995
        Int32 _35Constant;// 4:HideEveryThirdEdge->0:Constant 53996
        IArray[Boolean] _36Map;// 4:HideEveryThirdEdge->5:Map 53986
        TriMesh _37SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 53985
        IArray[TriMesh] _38Map;// 20:ClonerMeshAsBoxes.ext->16:Map 53934
        TriMesh _39CombineAllMeshes;// 20:ClonerMeshAsBoxes.ext->2:CombineAllMeshes 53933
        TriMesh _40Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->6:Aggregate 53884
        _13Constant = 100;
        _14Range = Range(_13Constant);
        _15Two = Two();
        _16Skip = Skip(_14Range, _15Two);
        _17Filter = Filter(_16Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 53902
            Boolean _1Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 53901
            MapChannel _5Pass-through: any;// 0:Pass-through: any 53893
            Object _6Null;// 6:IsNullFix2.ext->3:Null 53897
            Object _7As;// 6:IsNullFix2.ext->23:As 53895
            Boolean _8Equal;// 6:IsNullFix2.ext->1:Equal 53894
            Boolean _9Not;// 12:MapChannelExists.ext->4:Not 53892
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _5Pass-through: any = if (_1Equal)
              {
                MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 53903
                _3TopologyChannel = TopologyChannel(_11SetMapChannel);
                _3TopologyChannel;
                }else
              {
                MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 53904
                _4GetMapChannel = GetMapChannel(_11SetMapChannel, x0);
                _4GetMapChannel;
                };
            _6Null = Null();
            _7As = As(_5Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 53896
                _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                _0IgnoreFirst;
                });
            _8Equal = Equal(_7As, _6Null);
            _9Not = Not(_8Equal);
            _9Not;
            });
        _18GetMapChannel = GetMapChannel(_11SetMapChannel, flux channel);
        _19MapChannelVertexBuffer = MapChannelVertexBuffer(_18GetMapChannel);
        _20Count = Count(_19MapChannelVertexBuffer);
        _21Constant = 4;
        _22Divide = Divide(_20Count, _21Constant);
        _23Range = Range(_22Divide);
        _24Map = Map(_23Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 53945
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 53944
            _0Multiply = Multiply(_21Constant, x0);
            _1Slice = Slice(_19MapChannelVertexBuffer, _0Multiply, _21Constant);
            _1Slice;
            });
        _25Map = Map(_24Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 53957
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 53958
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 53962
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 53961
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 53956
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 53959
            Int32 _6One;// 8:PlusOne->1:One 53966
            Int32 _7Add;// 8:PlusOne->0:Add 53965
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 53963
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 53955
            Int32 _10Constant;// 25:Three->0:Constant 53960
            Int32 _11One;// 9:PlusOne->1:One 53970
            Int32 _12Add;// 9:PlusOne->0:Add 53969
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 53967
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 53954
            Int32 _15One;// 10:PlusOne->1:One 53974
            Int32 _16Add;// 10:PlusOne->0:Add 53973
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 53971
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 53950
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _26Constant = 0;
        _27Vector3 = Vector3(_26Constant, _26Constant, _26Constant);
        _28Sphere = Sphere(_27Vector3, box radius);
        _29BoxFromSphere = BoxFromSphere(_28Sphere);
        _30BoxQuadMesh = BoxQuadMesh(_29BoxFromSphere);
        _31Triangulate = Triangulate(_30BoxQuadMesh);
        _32MeshIndices = MeshIndices(_31Triangulate);
        _33Indices = Indices(_32MeshIndices);
        _34Constant = 3;
        _35Constant = 2;
        _36Map = Map(_33Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 53994
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 53993
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 53989
            _0Modulo = Modulo(x0, _34Constant);
            _1Equal = Equal(_0Modulo, _35Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _37SetVisibleEdges = SetVisibleEdges(_31Triangulate, _36Map);
        _38Map = Map(_25Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 53981
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 53978
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 53980
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 53979
            _0MeshVertices = MeshVertices(_37SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 53982
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_37SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _39CombineAllMeshes = CombineAllMeshes(_38Map);
        _40Aggregate = Aggregate(_17Filter, _39CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer.ext->10:TryCatch 53908
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->7:IgnoreFirst 53930
                Int32 _1Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 53922
                Boolean _2Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 53921
                MapChannel _6Pass-through: any;// 0:Pass-through: any 53913
                Object _7Null;// 6:IsNullFix2.ext->3:Null 53917
                Object _8As;// 6:IsNullFix2.ext->23:As 53915
                Boolean _9Equal;// 6:IsNullFix2.ext->1:Equal 53914
                Boolean _10Not;// 5:MapChannelExists.ext->4:Not 53912
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _6Pass-through: any = if (_2Equal)
                  {
                    MapChannel _4TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 53923
                    _4TopologyChannel = TopologyChannel(_11SetMapChannel);
                    _4TopologyChannel;
                    }else
                  {
                    MapChannel _5GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 53924
                    _5GetMapChannel = GetMapChannel(_11SetMapChannel, _0IgnoreFirst);
                    _5GetMapChannel;
                    };
                _7Null = Null();
                _8As = As(_6Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 53916
                    _0IgnoreFirst = IgnoreFirst(x0, _7Null);
                    _0IgnoreFirst;
                    });
                _9Equal = Equal(_8As, _7Null);
                _10Not = Not(_9Equal);
                if (_10Not)
                  {
                    MapChannel _11GetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->1:GetMapChannel 53927
                    IArray[Vector3] _12MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer.ext->8:MapChannelVertexBuffer 53926
                    IArray[Int32] _13MeshIndices;// 10:MapChannelCopyVertexBuffer.ext->0:MeshIndices 53928
                    TriMesh _14SetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->7:SetMapChannel 53925
                    _11GetMapChannel = GetMapChannel(_11SetMapChannel, _0IgnoreFirst);
                    _12MapChannelVertexBuffer = MapChannelVertexBuffer(_11GetMapChannel);
                    _13MeshIndices = MeshIndices(x0);
                    _14SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _12MapChannelVertexBuffer, _13MeshIndices);
                    _14SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer.ext->11:IgnoreFirst 53929
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _40Aggregate;
        }else
      {
        _11SetMapChannel;
        });
    _41IgnoreFirst;
    }