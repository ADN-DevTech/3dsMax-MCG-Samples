(InstanceState state, Int32 channel, TriMesh mesh, Single frequency, Int32 octaves, Single lacunarity, Single amplitude, Single gain, Single xoff, Single yoff) => 
  {
    Int32 _0Constant;// 9:MapChannelOrGeometrySet-ext->0:Constant 103924
    Boolean _1Equal;// 9:MapChannelOrGeometrySet-ext->6:Equal 103923
    MapChannel _2UVChannel;// 7:MapUVToVertexColor-ext->3:UVChannel 103930
    IArray[Vector3] _3MapChannelVertexBuffer;// 7:MapUVToVertexColor-ext->7:MapChannelVertexBuffer 103929
    Func[Vector3, Vector3] _4Pass-through: function1;// 0:Pass-through: function1 103917
    IArray[Vector3] _5Map;// 7:MapUVToVertexColor-ext->8:Map 103928
    IArray[Int32] _6MapChannelIndexBuffer;// 7:MapUVToVertexColor-ext->6:MapChannelIndexBuffer 103931
    _0Constant = -3;
    _1Equal = Equal(_0Constant, channel);
    _2UVChannel = UVChannel(mesh);
    _3MapChannelVertexBuffer = MapChannelVertexBuffer(_2UVChannel);
    _4Pass-through: function1 = (Vector3 x0) => 
      {
        Single _0Constant;// 0:Origin->0:Constant 103941
        Vector3 _1Vector3;// 0:Origin->1:Vector3 103940
        Single _2X;// 1:SetZ->4:X 103938
        Single _3Y;// 1:SetZ->5:Y 103939
        IArray[Single] _4GenerateN;// 16:GeometricSeries-ext->3:GenerateN 103959
        IArray[Single] _5GenerateN;// 5:GeometricSeries-ext->3:GenerateN 103964
        Single _6X;// 14:X 104483
        Single _7Y;// 15:Y 104486
        IArray[Single] _8Combine;// 0:NoisePerlin2DBrownian-ext->10:Combine 103955
        Single _9DefaultValueOfElement;// 11:Sum->4:DefaultValueOfElement 103953
        Single _10Aggregate;// 11:Sum->0:Aggregate 103952
        Vector3 _11Vector3;// 1:SetZ->2:Vector3 103937
        _0Constant = 0;
        _1Vector3 = Vector3(_0Constant, _0Constant, _0Constant);
        _2X = X(_1Vector3);
        _3Y = Y(_1Vector3);
        _4GenerateN = GenerateN(frequency, octaves, (Single x0) => 
          {
            Single _0Multiply;// 16:GeometricSeries-ext->4:Multiply 103960
            _0Multiply = Multiply(x0, lacunarity);
            _0Multiply;
            });
        _5GenerateN = GenerateN(amplitude, octaves, (Single x0) => 
          {
            Single _0Multiply;// 5:GeometricSeries-ext->4:Multiply 103965
            _0Multiply = Multiply(x0, gain);
            _0Multiply;
            });
        _6X = X(x0);
        _7Y = Y(x0);
        _8Combine = Combine(_4GenerateN, _5GenerateN, (Single x0, Single x1) => 
          {
            Cache[IArray[Int32]] _0CreateStaticCache;// 2:CacheValue-ext->17:CreateStaticCache 104372
            Int32 _1Zero;// 2:CacheValue-ext->7:Zero 104373
            IArray[Int32] _2CachedValue;// 2:CacheValue-ext->4:CachedValue 104371
            Single _3Add;// 0:PerlinNoise2D-ext->12:Add 104467
            Single _4Constant;// 0:PerlinNoise2D-ext->0:Constant 104468
            Single _5Divide;// 0:PerlinNoise2D-ext->3:Divide 104466
            Single _6Multiply;// 0:PerlinNoise2D-ext->7:Multiply 104465
            Int32 _7Floor;// 0:NoisePerlin-ext->0:Floor 104390
            Int32 _8Constant;// 0:NoisePerlin-ext->0:Constant 104391
            Int32 _9And;// 0:NoisePerlin-ext->16:And 104389
            Int32 _10At;// 0:NoisePerlin-ext->17:At 104388
            Single _11Add;// 0:PerlinNoise2D-ext->13:Add 104471
            Single _12Divide;// 0:PerlinNoise2D-ext->5:Divide 104470
            Single _13Multiply;// 0:PerlinNoise2D-ext->9:Multiply 104469
            Int32 _14Floor;// 0:NoisePerlin-ext->1:Floor 104393
            Int32 _15And;// 0:NoisePerlin-ext->4:And 104392
            Int32 _16Add;// 0:NoisePerlin-ext->21:Add 104387
            Int32 _17At;// 0:NoisePerlin-ext->27:At 104386
            Single _18FloatZero;// 0:NoiseOp->3:FloatZero 104464
            Int32 _19Floor;// 0:NoisePerlin-ext->2:Floor 104395
            Int32 _20And;// 0:NoisePerlin-ext->6:And 104394
            Int32 _21Add;// 0:NoisePerlin-ext->29:Add 104385
            Int32 _22At;// 19:NoisePerlinBlendCorners-ext->12:At 104031
            Int32 _23Constant;// 20:NoisePerlinGrad-ext->0:Constant 104007
            Int32 _24And;// 20:NoisePerlinGrad-ext->5:And 104006
            Int32 _25One;// 20:NoisePerlinGrad-ext->21:One 104008
            Int32 _26And;// 3:BitsSet-ext->4:And 104004
            Int32 _27Zero;// 2:GreaterThanZero->1:Zero 104003
            Boolean _28GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104002
            Int32 _29Constant;// 20:NoisePerlinGrad-ext->0:Constant 104012
            Boolean _30LessThan;// 20:NoisePerlinGrad-ext->7:LessThan 104011
            Single _35FloorAsFloat;// 46:FloatFractionalPart-ext->4:FloorAsFloat 104398
            Single _36Subtract;// 46:FloatFractionalPart-ext->6:Subtract 104397
            Single _37FloorAsFloat;// 47:FloatFractionalPart-ext->4:FloorAsFloat 104401
            Single _38Subtract;// 47:FloatFractionalPart-ext->6:Subtract 104400
            Int32 _40Two;// 20:NoisePerlinGrad-ext->29:Two 104020
            Int32 _41And;// 22:BitsSet-ext->4:And 104019
            Int32 _42Zero;// 2:GreaterThanZero->1:Zero 104018
            Boolean _43GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104017
            Int32 _44Constant;// 20:NoisePerlinGrad-ext->0:Constant 104024
            Boolean _45LessThan;// 20:NoisePerlinGrad-ext->12:LessThan 104023
            Int32 _53Constant;// 20:NoisePerlinGrad-ext->0:Constant 104028
            Boolean _54Equal;// 20:NoisePerlinGrad-ext->16:Equal 104027
            Int32 _55Constant;// 20:NoisePerlinGrad-ext->0:Constant 104030
            Boolean _56Equal;// 20:NoisePerlinGrad-ext->19:Equal 104029
            Boolean _57OrElse;// 20:NoisePerlinGrad-ext->18:OrElse 104026
            Single _60FloorAsFloat;// 48:FloatFractionalPart-ext->4:FloorAsFloat 104404
            Single _61Subtract;// 48:FloatFractionalPart-ext->6:Subtract 104403
            Single _63Add;// 20:NoisePerlinGrad-ext->33:Add 103997
            Int32 _64One;// 23:PlusOne->1:One 104411
            Int32 _65Add;// 23:PlusOne->0:Add 104410
            Int32 _66At;// 0:NoisePerlin-ext->24:At 104408
            Int32 _67Add;// 0:NoisePerlin-ext->25:Add 104407
            Int32 _68At;// 0:NoisePerlin-ext->28:At 104406
            Int32 _69Add;// 0:NoisePerlin-ext->30:Add 104405
            Int32 _70At;// 19:NoisePerlinBlendCorners-ext->13:At 104074
            Int32 _71Constant;// 23:NoisePerlinGrad-ext->0:Constant 104050
            Int32 _72And;// 23:NoisePerlinGrad-ext->5:And 104049
            Int32 _73One;// 23:NoisePerlinGrad-ext->21:One 104051
            Int32 _74And;// 3:BitsSet-ext->4:And 104047
            Int32 _75Zero;// 2:GreaterThanZero->1:Zero 104046
            Boolean _76GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104045
            Int32 _77Constant;// 23:NoisePerlinGrad-ext->0:Constant 104055
            Boolean _78LessThan;// 23:NoisePerlinGrad-ext->7:LessThan 104054
            Single _81FloatOne;// 24:MinusOneFloat-ext->3:FloatOne 104077
            Single _82Subtract;// 24:MinusOneFloat-ext->2:Subtract 104076
            Int32 _84Two;// 23:NoisePerlinGrad-ext->29:Two 104063
            Int32 _85And;// 22:BitsSet-ext->4:And 104062
            Int32 _86Zero;// 2:GreaterThanZero->1:Zero 104061
            Boolean _87GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104060
            Int32 _88Constant;// 23:NoisePerlinGrad-ext->0:Constant 104067
            Boolean _89LessThan;// 23:NoisePerlinGrad-ext->12:LessThan 104066
            Int32 _95Constant;// 23:NoisePerlinGrad-ext->0:Constant 104071
            Boolean _96Equal;// 23:NoisePerlinGrad-ext->16:Equal 104070
            Int32 _97Constant;// 23:NoisePerlinGrad-ext->0:Constant 104073
            Boolean _98Equal;// 23:NoisePerlinGrad-ext->19:Equal 104072
            Boolean _99OrElse;// 23:NoisePerlinGrad-ext->18:OrElse 104069
            Single _101Add;// 23:NoisePerlinGrad-ext->33:Add 104040
            Single _102FloorAsFloat;// 3:FloatFractionalPart-ext->4:FloorAsFloat 104425
            Single _103Subtract;// 3:FloatFractionalPart-ext->6:Subtract 104424
            Single _104Multiply;// 12:NoisePerlinFade-ext->8:Multiply 104415
            Single _105Multiply;// 12:NoisePerlinFade-ext->9:Multiply 104414
            Single _106Constant;// 12:NoisePerlinFade-ext->0:Constant 104420
            Single _107Multiply;// 12:NoisePerlinFade-ext->1:Multiply 104419
            Single _108Constant;// 12:NoisePerlinFade-ext->0:Constant 104421
            Single _109Subtract;// 12:NoisePerlinFade-ext->5:Subtract 104418
            Single _110Multiply;// 12:NoisePerlinFade-ext->3:Multiply 104417
            Single _111Constant;// 12:NoisePerlinFade-ext->0:Constant 104422
            Single _112Add;// 12:NoisePerlinFade-ext->6:Add 104416
            Single _113Multiply;// 12:NoisePerlinFade-ext->10:Multiply 104413
            Single _114FloatLerp;// 19:NoisePerlinBlendCorners-ext->25:FloatLerp 103992
            Int32 _115One;// 42:PlusOne->1:One 104430
            Int32 _116Add;// 42:PlusOne->0:Add 104429
            Int32 _117At;// 0:NoisePerlin-ext->33:At 104427
            Int32 _118Add;// 0:NoisePerlin-ext->34:Add 104426
            Int32 _119At;// 19:NoisePerlinBlendCorners-ext->47:At 104118
            Int32 _120Constant;// 38:NoisePerlinGrad-ext->0:Constant 104094
            Int32 _121And;// 38:NoisePerlinGrad-ext->5:And 104093
            Int32 _122One;// 38:NoisePerlinGrad-ext->21:One 104095
            Int32 _123And;// 3:BitsSet-ext->4:And 104091
            Int32 _124Zero;// 2:GreaterThanZero->1:Zero 104090
            Boolean _125GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104089
            Int32 _126Constant;// 38:NoisePerlinGrad-ext->0:Constant 104099
            Boolean _127LessThan;// 38:NoisePerlinGrad-ext->7:LessThan 104098
            Single _130FloatOne;// 87:MinusOneFloat-ext->3:FloatOne 104123
            Single _131Subtract;// 87:MinusOneFloat-ext->2:Subtract 104122
            Int32 _133Two;// 38:NoisePerlinGrad-ext->29:Two 104107
            Int32 _134And;// 22:BitsSet-ext->4:And 104106
            Int32 _135Zero;// 2:GreaterThanZero->1:Zero 104105
            Boolean _136GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104104
            Int32 _137Constant;// 38:NoisePerlinGrad-ext->0:Constant 104111
            Boolean _138LessThan;// 38:NoisePerlinGrad-ext->12:LessThan 104110
            Int32 _144Constant;// 38:NoisePerlinGrad-ext->0:Constant 104115
            Boolean _145Equal;// 38:NoisePerlinGrad-ext->16:Equal 104114
            Int32 _146Constant;// 38:NoisePerlinGrad-ext->0:Constant 104117
            Boolean _147Equal;// 38:NoisePerlinGrad-ext->19:Equal 104116
            Boolean _148OrElse;// 38:NoisePerlinGrad-ext->18:OrElse 104113
            Single _150Add;// 38:NoisePerlinGrad-ext->33:Add 104084
            Int32 _151One;// 41:PlusOne->1:One 104435
            Int32 _152Add;// 41:PlusOne->0:Add 104434
            Int32 _153At;// 0:NoisePerlin-ext->37:At 104432
            Int32 _154Add;// 0:NoisePerlin-ext->38:Add 104431
            Int32 _155At;// 19:NoisePerlinBlendCorners-ext->37:At 104164
            Int32 _156Constant;// 42:NoisePerlinGrad-ext->0:Constant 104140
            Int32 _157And;// 42:NoisePerlinGrad-ext->5:And 104139
            Int32 _158One;// 42:NoisePerlinGrad-ext->21:One 104141
            Int32 _159And;// 3:BitsSet-ext->4:And 104137
            Int32 _160Zero;// 2:GreaterThanZero->1:Zero 104136
            Boolean _161GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104135
            Int32 _162Constant;// 42:NoisePerlinGrad-ext->0:Constant 104145
            Boolean _163LessThan;// 42:NoisePerlinGrad-ext->7:LessThan 104144
            Single _166FloatOne;// 44:MinusOneFloat-ext->3:FloatOne 104167
            Single _167Subtract;// 44:MinusOneFloat-ext->2:Subtract 104166
            Int32 _169Two;// 42:NoisePerlinGrad-ext->29:Two 104153
            Int32 _170And;// 22:BitsSet-ext->4:And 104152
            Int32 _171Zero;// 2:GreaterThanZero->1:Zero 104151
            Boolean _172GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104150
            Int32 _173Constant;// 42:NoisePerlinGrad-ext->0:Constant 104157
            Boolean _174LessThan;// 42:NoisePerlinGrad-ext->12:LessThan 104156
            Int32 _180Constant;// 42:NoisePerlinGrad-ext->0:Constant 104161
            Boolean _181Equal;// 42:NoisePerlinGrad-ext->16:Equal 104160
            Int32 _182Constant;// 42:NoisePerlinGrad-ext->0:Constant 104163
            Boolean _183Equal;// 42:NoisePerlinGrad-ext->19:Equal 104162
            Boolean _184OrElse;// 42:NoisePerlinGrad-ext->18:OrElse 104159
            Single _186Add;// 42:NoisePerlinGrad-ext->33:Add 104130
            Single _187FloatLerp;// 19:NoisePerlinBlendCorners-ext->45:FloatLerp 104079
            Single _188FloorAsFloat;// 7:FloatFractionalPart-ext->4:FloorAsFloat 104449
            Single _189Subtract;// 7:FloatFractionalPart-ext->6:Subtract 104448
            Single _190Multiply;// 13:NoisePerlinFade-ext->8:Multiply 104439
            Single _191Multiply;// 13:NoisePerlinFade-ext->9:Multiply 104438
            Single _192Constant;// 13:NoisePerlinFade-ext->0:Constant 104444
            Single _193Multiply;// 13:NoisePerlinFade-ext->1:Multiply 104443
            Single _194Constant;// 13:NoisePerlinFade-ext->0:Constant 104445
            Single _195Subtract;// 13:NoisePerlinFade-ext->5:Subtract 104442
            Single _196Multiply;// 13:NoisePerlinFade-ext->3:Multiply 104441
            Single _197Constant;// 13:NoisePerlinFade-ext->0:Constant 104446
            Single _198Add;// 13:NoisePerlinFade-ext->6:Add 104440
            Single _199Multiply;// 13:NoisePerlinFade-ext->10:Multiply 104437
            Single _200FloatLerp;// 19:NoisePerlinBlendCorners-ext->88:FloatLerp 103991
            Int32 _201One;// 8:PlusOne->1:One 104213
            Int32 _202Add;// 8:PlusOne->0:Add 104212
            Int32 _203At;// 19:NoisePerlinBlendCorners-ext->59:At 104209
            Int32 _204Constant;// 16:NoisePerlinGrad-ext->0:Constant 104185
            Int32 _205And;// 16:NoisePerlinGrad-ext->5:And 104184
            Int32 _206One;// 16:NoisePerlinGrad-ext->21:One 104186
            Int32 _207And;// 3:BitsSet-ext->4:And 104182
            Int32 _208Zero;// 2:GreaterThanZero->1:Zero 104181
            Boolean _209GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104180
            Int32 _210Constant;// 16:NoisePerlinGrad-ext->0:Constant 104190
            Boolean _211LessThan;// 16:NoisePerlinGrad-ext->7:LessThan 104189
            Int32 _213Two;// 16:NoisePerlinGrad-ext->29:Two 104198
            Int32 _214And;// 22:BitsSet-ext->4:And 104197
            Int32 _215Zero;// 2:GreaterThanZero->1:Zero 104196
            Boolean _216GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104195
            Int32 _217Constant;// 16:NoisePerlinGrad-ext->0:Constant 104202
            Boolean _218LessThan;// 16:NoisePerlinGrad-ext->12:LessThan 104201
            Int32 _226Constant;// 16:NoisePerlinGrad-ext->0:Constant 104206
            Boolean _227Equal;// 16:NoisePerlinGrad-ext->16:Equal 104205
            Int32 _228Constant;// 16:NoisePerlinGrad-ext->0:Constant 104208
            Boolean _229Equal;// 16:NoisePerlinGrad-ext->19:Equal 104207
            Boolean _230OrElse;// 16:NoisePerlinGrad-ext->18:OrElse 104204
            Single _233FloatOne;// 86:MinusOneFloat-ext->3:FloatOne 104218
            Single _234Subtract;// 86:MinusOneFloat-ext->2:Subtract 104217
            Single _236Add;// 16:NoisePerlinGrad-ext->33:Add 104175
            Int32 _237One;// 10:PlusOne->1:One 104261
            Int32 _238Add;// 10:PlusOne->0:Add 104260
            Int32 _239At;// 19:NoisePerlinBlendCorners-ext->15:At 104258
            Int32 _240Constant;// 54:NoisePerlinGrad-ext->0:Constant 104234
            Int32 _241And;// 54:NoisePerlinGrad-ext->5:And 104233
            Int32 _242One;// 54:NoisePerlinGrad-ext->21:One 104235
            Int32 _243And;// 3:BitsSet-ext->4:And 104231
            Int32 _244Zero;// 2:GreaterThanZero->1:Zero 104230
            Boolean _245GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104229
            Int32 _246Constant;// 54:NoisePerlinGrad-ext->0:Constant 104239
            Boolean _247LessThan;// 54:NoisePerlinGrad-ext->7:LessThan 104238
            Single _250FloatOne;// 56:MinusOneFloat-ext->3:FloatOne 104264
            Single _251Subtract;// 56:MinusOneFloat-ext->2:Subtract 104263
            Int32 _253Two;// 54:NoisePerlinGrad-ext->29:Two 104247
            Int32 _254And;// 22:BitsSet-ext->4:And 104246
            Int32 _255Zero;// 2:GreaterThanZero->1:Zero 104245
            Boolean _256GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104244
            Int32 _257Constant;// 54:NoisePerlinGrad-ext->0:Constant 104251
            Boolean _258LessThan;// 54:NoisePerlinGrad-ext->12:LessThan 104250
            Int32 _266Constant;// 54:NoisePerlinGrad-ext->0:Constant 104255
            Boolean _267Equal;// 54:NoisePerlinGrad-ext->16:Equal 104254
            Int32 _268Constant;// 54:NoisePerlinGrad-ext->0:Constant 104257
            Boolean _269Equal;// 54:NoisePerlinGrad-ext->19:Equal 104256
            Boolean _270OrElse;// 54:NoisePerlinGrad-ext->18:OrElse 104253
            Single _273FloatOne;// 85:MinusOneFloat-ext->3:FloatOne 104267
            Single _274Subtract;// 85:MinusOneFloat-ext->2:Subtract 104266
            Single _276Add;// 54:NoisePerlinGrad-ext->33:Add 104224
            Single _277FloatLerp;// 19:NoisePerlinBlendCorners-ext->57:FloatLerp 104170
            Int32 _278One;// 9:PlusOne->1:One 104312
            Int32 _279Add;// 9:PlusOne->0:Add 104311
            Int32 _280At;// 19:NoisePerlinBlendCorners-ext->76:At 104308
            Int32 _281Constant;// 67:NoisePerlinGrad-ext->0:Constant 104284
            Int32 _282And;// 67:NoisePerlinGrad-ext->5:And 104283
            Int32 _283One;// 67:NoisePerlinGrad-ext->21:One 104285
            Int32 _284And;// 3:BitsSet-ext->4:And 104281
            Int32 _285Zero;// 2:GreaterThanZero->1:Zero 104280
            Boolean _286GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104279
            Int32 _287Constant;// 67:NoisePerlinGrad-ext->0:Constant 104289
            Boolean _288LessThan;// 67:NoisePerlinGrad-ext->7:LessThan 104288
            Single _291FloatOne;// 84:MinusOneFloat-ext->3:FloatOne 104316
            Single _292Subtract;// 84:MinusOneFloat-ext->2:Subtract 104315
            Int32 _294Two;// 67:NoisePerlinGrad-ext->29:Two 104297
            Int32 _295And;// 22:BitsSet-ext->4:And 104296
            Int32 _296Zero;// 2:GreaterThanZero->1:Zero 104295
            Boolean _297GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104294
            Int32 _298Constant;// 67:NoisePerlinGrad-ext->0:Constant 104301
            Boolean _299LessThan;// 67:NoisePerlinGrad-ext->12:LessThan 104300
            Int32 _307Constant;// 67:NoisePerlinGrad-ext->0:Constant 104305
            Boolean _308Equal;// 67:NoisePerlinGrad-ext->16:Equal 104304
            Int32 _309Constant;// 67:NoisePerlinGrad-ext->0:Constant 104307
            Boolean _310Equal;// 67:NoisePerlinGrad-ext->19:Equal 104306
            Boolean _311OrElse;// 67:NoisePerlinGrad-ext->18:OrElse 104303
            Single _314FloatOne;// 83:MinusOneFloat-ext->3:FloatOne 104320
            Single _315Subtract;// 83:MinusOneFloat-ext->2:Subtract 104319
            Single _317Add;// 67:NoisePerlinGrad-ext->33:Add 104274
            Int32 _318One;// 11:PlusOne->1:One 104363
            Int32 _319Add;// 11:PlusOne->0:Add 104362
            Int32 _320At;// 19:NoisePerlinBlendCorners-ext->66:At 104360
            Int32 _321Constant;// 71:NoisePerlinGrad-ext->0:Constant 104336
            Int32 _322And;// 71:NoisePerlinGrad-ext->5:And 104335
            Int32 _323One;// 71:NoisePerlinGrad-ext->21:One 104337
            Int32 _324And;// 3:BitsSet-ext->4:And 104333
            Int32 _325Zero;// 2:GreaterThanZero->1:Zero 104332
            Boolean _326GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104331
            Int32 _327Constant;// 71:NoisePerlinGrad-ext->0:Constant 104341
            Boolean _328LessThan;// 71:NoisePerlinGrad-ext->7:LessThan 104340
            Single _331FloatOne;// 73:MinusOneFloat-ext->3:FloatOne 104366
            Single _332Subtract;// 73:MinusOneFloat-ext->2:Subtract 104365
            Int32 _334Two;// 71:NoisePerlinGrad-ext->29:Two 104349
            Int32 _335And;// 22:BitsSet-ext->4:And 104348
            Int32 _336Zero;// 2:GreaterThanZero->1:Zero 104347
            Boolean _337GreaterThan;// 2:GreaterThanZero->3:GreaterThan 104346
            Int32 _338Constant;// 71:NoisePerlinGrad-ext->0:Constant 104353
            Boolean _339LessThan;// 71:NoisePerlinGrad-ext->12:LessThan 104352
            Int32 _345Constant;// 71:NoisePerlinGrad-ext->0:Constant 104357
            Boolean _346Equal;// 71:NoisePerlinGrad-ext->16:Equal 104356
            Int32 _347Constant;// 71:NoisePerlinGrad-ext->0:Constant 104359
            Boolean _348Equal;// 71:NoisePerlinGrad-ext->19:Equal 104358
            Boolean _349OrElse;// 71:NoisePerlinGrad-ext->18:OrElse 104355
            Single _351Add;// 71:NoisePerlinGrad-ext->33:Add 104326
            Single _352FloatLerp;// 19:NoisePerlinBlendCorners-ext->74:FloatLerp 104269
            Single _353FloatLerp;// 19:NoisePerlinBlendCorners-ext->89:FloatLerp 104169
            Single _354FloorAsFloat;// 11:FloatFractionalPart-ext->4:FloorAsFloat 104463
            Single _355Subtract;// 11:FloatFractionalPart-ext->6:Subtract 104462
            Single _356Multiply;// 14:NoisePerlinFade-ext->8:Multiply 104453
            Single _357Multiply;// 14:NoisePerlinFade-ext->9:Multiply 104452
            Single _358Constant;// 14:NoisePerlinFade-ext->0:Constant 104458
            Single _359Multiply;// 14:NoisePerlinFade-ext->1:Multiply 104457
            Single _360Constant;// 14:NoisePerlinFade-ext->0:Constant 104459
            Single _361Subtract;// 14:NoisePerlinFade-ext->5:Subtract 104456
            Single _362Multiply;// 14:NoisePerlinFade-ext->3:Multiply 104455
            Single _363Constant;// 14:NoisePerlinFade-ext->0:Constant 104460
            Single _364Add;// 14:NoisePerlinFade-ext->6:Add 104454
            Single _365Multiply;// 14:NoisePerlinFade-ext->10:Multiply 104451
            Single _366FloatLerp;// 19:NoisePerlinBlendCorners-ext->98:FloatLerp 103990
            Single _367Constant;// 0:PerlinNoise2D-ext->0:Constant 104476
            Single _368Sqrt;// 0:PerlinNoise2D-ext->17:Sqrt 104475
            Single _369Constant;// 19:DivideByTwoFloat->0:Constant 104474
            Single _370Divide;// 19:DivideByTwoFloat->2:Divide 104473
            Single _371Divide;// 0:PerlinNoise2D-ext->16:Divide 103973
            Single _372Multiply;// 0:PerlinNoise2D-ext->10:Multiply 103972
            _0CreateStaticCache = CreateStaticCache(() => 
              {
                String _0Constant;// 44:NoisePerlinPermutationTable-ext->0:Constant 104384
                String _1Constant;// 1:StringToInts-ext->0:Constant 104380
                Regex _2Regex;// 1:StringToInts-ext->40:Regex 104379
                IArray[String] _3RegexMatches;// 1:StringToInts-ext->43:RegexMatches 104378
                String _4Constant;// 1:StringToInts-ext->0:Constant 104382
                IArray[String] _5Filter;// 1:StringToInts-ext->4:Filter 104377
                IArray[Int32] _6Map;// 1:StringToInts-ext->0:Map 104376
                IArray[Int32] _7Concatenate;// 44:NoisePerlinPermutationTable-ext->4:Concatenate 104374
                _0Constant = 151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180;
                _1Constant = -?\d*;
                _2Regex = Regex(_1Constant);
                _3RegexMatches = RegexMatches(_0Constant, _2Regex);
                _4Constant = ;
                _5Filter = Filter(_3RegexMatches, (String x0) => 
                  {
                    Boolean _0NotEqual;// 1:StringToInts-ext->11:NotEqual 104381
                    _0NotEqual = NotEqual(x0, _4Constant);
                    _0NotEqual;
                    });
                _6Map = Map(_5Filter, (String x0) => 
                  {
                    Int32 _0AsInt;// 1:StringToInts-ext->5:AsInt 104383
                    _0AsInt = AsInt(x0);
                    _0AsInt;
                    });
                _7Concatenate = Concatenate(_6Map, _6Map);
                _7Concatenate;
                }).SetId(state, 0);
            _1Zero = Zero();
            _2CachedValue = CachedValue(_0CreateStaticCache, _1Zero);
            _3Add = Add(xoff, _6X);
            _4Constant = 255;
            _5Divide = Divide(_3Add, _4Constant);
            _6Multiply = Multiply(x0, _5Divide);
            _7Floor = Floor(_6Multiply);
            _8Constant = 255;
            _9And = And(_7Floor, _8Constant);
            _10At = At(_2CachedValue, _9And);
            _11Add = Add(yoff, _7Y);
            _12Divide = Divide(_11Add, _4Constant);
            _13Multiply = Multiply(x0, _12Divide);
            _14Floor = Floor(_13Multiply);
            _15And = And(_14Floor, _8Constant);
            _16Add = Add(_10At, _15And);
            _17At = At(_2CachedValue, _16Add);
            _18FloatZero = FloatZero();
            _19Floor = Floor(_18FloatZero);
            _20And = And(_19Floor, _8Constant);
            _21Add = Add(_17At, _20And);
            _22At = At(_2CachedValue, _21Add);
            _23Constant = 15;
            _24And = And(_22At, _23Constant);
            _25One = One();
            _26And = And(_24And, _25One);
            _27Zero = Zero();
            _28GreaterThan = GreaterThan(_26And, _27Zero);
            _29Constant = 8;
            _30LessThan = LessThan(_24And, _29Constant);
            _35FloorAsFloat = FloorAsFloat(_6Multiply);
            _36Subtract = Subtract(_6Multiply, _35FloorAsFloat);
            _37FloorAsFloat = FloorAsFloat(_13Multiply);
            _38Subtract = Subtract(_13Multiply, _37FloorAsFloat);
            _40Two = Two();
            _41And = And(_24And, _40Two);
            _42Zero = Zero();
            _43GreaterThan = GreaterThan(_41And, _42Zero);
            _44Constant = 4;
            _45LessThan = LessThan(_24And, _44Constant);
            _53Constant = 12;
            _54Equal = Equal(_24And, _53Constant);
            _55Constant = 14;
            _56Equal = Equal(_24And, _55Constant);
            _57OrElse = OrElse(_54Equal, _56Equal);
            _60FloorAsFloat = FloorAsFloat(_18FloatZero);
            _61Subtract = Subtract(_18FloatZero, _60FloorAsFloat);
            _63Add = Add(if (_28GreaterThan)
                {
                  Single _39NegativeFloat;// 20:NoisePerlinGrad-ext->26:NegativeFloat 104009
                  _39NegativeFloat = NegativeFloat(if (_30LessThan)
                    {
                      _36Subtract;
                      }else
                    {
                      _38Subtract;
                      });
                  _39NegativeFloat;
                  }else
                {
                  if (_30LessThan)
                    {
                      _36Subtract;
                      }else
                    {
                      _38Subtract;
                      };
                  }, if (_43GreaterThan)
                {
                  Single _62NegativeFloat;// 20:NoisePerlinGrad-ext->31:NegativeFloat 104021
                  _62NegativeFloat = NegativeFloat(if (_45LessThan)
                    {
                      _38Subtract;
                      }else
                    {
                      if (_57OrElse)
                        {
                          _36Subtract;
                          }else
                        {
                          _61Subtract;
                          };
                      });
                  _62NegativeFloat;
                  }else
                {
                  if (_45LessThan)
                    {
                      _38Subtract;
                      }else
                    {
                      if (_57OrElse)
                        {
                          _36Subtract;
                          }else
                        {
                          _61Subtract;
                          };
                      };
                  });
            _64One = One();
            _65Add = Add(_9And, _64One);
            _66At = At(_2CachedValue, _65Add);
            _67Add = Add(_66At, _15And);
            _68At = At(_2CachedValue, _67Add);
            _69Add = Add(_68At, _20And);
            _70At = At(_2CachedValue, _69Add);
            _71Constant = 15;
            _72And = And(_70At, _71Constant);
            _73One = One();
            _74And = And(_72And, _73One);
            _75Zero = Zero();
            _76GreaterThan = GreaterThan(_74And, _75Zero);
            _77Constant = 8;
            _78LessThan = LessThan(_72And, _77Constant);
            _81FloatOne = FloatOne();
            _82Subtract = Subtract(_36Subtract, _81FloatOne);
            _84Two = Two();
            _85And = And(_72And, _84Two);
            _86Zero = Zero();
            _87GreaterThan = GreaterThan(_85And, _86Zero);
            _88Constant = 4;
            _89LessThan = LessThan(_72And, _88Constant);
            _95Constant = 12;
            _96Equal = Equal(_72And, _95Constant);
            _97Constant = 14;
            _98Equal = Equal(_72And, _97Constant);
            _99OrElse = OrElse(_96Equal, _98Equal);
            _101Add = Add(if (_76GreaterThan)
                {
                  Single _83NegativeFloat;// 23:NoisePerlinGrad-ext->26:NegativeFloat 104052
                  _83NegativeFloat = NegativeFloat(if (_78LessThan)
                    {
                      _82Subtract;
                      }else
                    {
                      _38Subtract;
                      });
                  _83NegativeFloat;
                  }else
                {
                  if (_78LessThan)
                    {
                      _82Subtract;
                      }else
                    {
                      _38Subtract;
                      };
                  }, if (_87GreaterThan)
                {
                  Single _100NegativeFloat;// 23:NoisePerlinGrad-ext->31:NegativeFloat 104064
                  _100NegativeFloat = NegativeFloat(if (_89LessThan)
                    {
                      _38Subtract;
                      }else
                    {
                      if (_99OrElse)
                        {
                          _82Subtract;
                          }else
                        {
                          _61Subtract;
                          };
                      });
                  _100NegativeFloat;
                  }else
                {
                  if (_89LessThan)
                    {
                      _38Subtract;
                      }else
                    {
                      if (_99OrElse)
                        {
                          _82Subtract;
                          }else
                        {
                          _61Subtract;
                          };
                      };
                  });
            _102FloorAsFloat = FloorAsFloat(_6Multiply);
            _103Subtract = Subtract(_6Multiply, _102FloorAsFloat);
            _104Multiply = Multiply(_103Subtract, _103Subtract);
            _105Multiply = Multiply(_104Multiply, _103Subtract);
            _106Constant = 6;
            _107Multiply = Multiply(_103Subtract, _106Constant);
            _108Constant = 15;
            _109Subtract = Subtract(_107Multiply, _108Constant);
            _110Multiply = Multiply(_103Subtract, _109Subtract);
            _111Constant = 10;
            _112Add = Add(_110Multiply, _111Constant);
            _113Multiply = Multiply(_105Multiply, _112Add);
            _114FloatLerp = FloatLerp(_63Add, _101Add, _113Multiply);
            _115One = One();
            _116Add = Add(_16Add, _115One);
            _117At = At(_2CachedValue, _116Add);
            _118Add = Add(_117At, _20And);
            _119At = At(_2CachedValue, _118Add);
            _120Constant = 15;
            _121And = And(_119At, _120Constant);
            _122One = One();
            _123And = And(_121And, _122One);
            _124Zero = Zero();
            _125GreaterThan = GreaterThan(_123And, _124Zero);
            _126Constant = 8;
            _127LessThan = LessThan(_121And, _126Constant);
            _130FloatOne = FloatOne();
            _131Subtract = Subtract(_38Subtract, _130FloatOne);
            _133Two = Two();
            _134And = And(_121And, _133Two);
            _135Zero = Zero();
            _136GreaterThan = GreaterThan(_134And, _135Zero);
            _137Constant = 4;
            _138LessThan = LessThan(_121And, _137Constant);
            _144Constant = 12;
            _145Equal = Equal(_121And, _144Constant);
            _146Constant = 14;
            _147Equal = Equal(_121And, _146Constant);
            _148OrElse = OrElse(_145Equal, _147Equal);
            _150Add = Add(if (_125GreaterThan)
                {
                  Single _132NegativeFloat;// 38:NoisePerlinGrad-ext->26:NegativeFloat 104096
                  _132NegativeFloat = NegativeFloat(if (_127LessThan)
                    {
                      _36Subtract;
                      }else
                    {
                      _131Subtract;
                      });
                  _132NegativeFloat;
                  }else
                {
                  if (_127LessThan)
                    {
                      _36Subtract;
                      }else
                    {
                      _131Subtract;
                      };
                  }, if (_136GreaterThan)
                {
                  Single _149NegativeFloat;// 38:NoisePerlinGrad-ext->31:NegativeFloat 104108
                  _149NegativeFloat = NegativeFloat(if (_138LessThan)
                    {
                      _131Subtract;
                      }else
                    {
                      if (_148OrElse)
                        {
                          _36Subtract;
                          }else
                        {
                          _61Subtract;
                          };
                      });
                  _149NegativeFloat;
                  }else
                {
                  if (_138LessThan)
                    {
                      _131Subtract;
                      }else
                    {
                      if (_148OrElse)
                        {
                          _36Subtract;
                          }else
                        {
                          _61Subtract;
                          };
                      };
                  });
            _151One = One();
            _152Add = Add(_67Add, _151One);
            _153At = At(_2CachedValue, _152Add);
            _154Add = Add(_153At, _20And);
            _155At = At(_2CachedValue, _154Add);
            _156Constant = 15;
            _157And = And(_155At, _156Constant);
            _158One = One();
            _159And = And(_157And, _158One);
            _160Zero = Zero();
            _161GreaterThan = GreaterThan(_159And, _160Zero);
            _162Constant = 8;
            _163LessThan = LessThan(_157And, _162Constant);
            _166FloatOne = FloatOne();
            _167Subtract = Subtract(_36Subtract, _166FloatOne);
            _169Two = Two();
            _170And = And(_157And, _169Two);
            _171Zero = Zero();
            _172GreaterThan = GreaterThan(_170And, _171Zero);
            _173Constant = 4;
            _174LessThan = LessThan(_157And, _173Constant);
            _180Constant = 12;
            _181Equal = Equal(_157And, _180Constant);
            _182Constant = 14;
            _183Equal = Equal(_157And, _182Constant);
            _184OrElse = OrElse(_181Equal, _183Equal);
            _186Add = Add(if (_161GreaterThan)
                {
                  Single _168NegativeFloat;// 42:NoisePerlinGrad-ext->26:NegativeFloat 104142
                  _168NegativeFloat = NegativeFloat(if (_163LessThan)
                    {
                      _167Subtract;
                      }else
                    {
                      _131Subtract;
                      });
                  _168NegativeFloat;
                  }else
                {
                  if (_163LessThan)
                    {
                      _167Subtract;
                      }else
                    {
                      _131Subtract;
                      };
                  }, if (_172GreaterThan)
                {
                  Single _185NegativeFloat;// 42:NoisePerlinGrad-ext->31:NegativeFloat 104154
                  _185NegativeFloat = NegativeFloat(if (_174LessThan)
                    {
                      _131Subtract;
                      }else
                    {
                      if (_184OrElse)
                        {
                          _167Subtract;
                          }else
                        {
                          _61Subtract;
                          };
                      });
                  _185NegativeFloat;
                  }else
                {
                  if (_174LessThan)
                    {
                      _131Subtract;
                      }else
                    {
                      if (_184OrElse)
                        {
                          _167Subtract;
                          }else
                        {
                          _61Subtract;
                          };
                      };
                  });
            _187FloatLerp = FloatLerp(_150Add, _186Add, _113Multiply);
            _188FloorAsFloat = FloorAsFloat(_13Multiply);
            _189Subtract = Subtract(_13Multiply, _188FloorAsFloat);
            _190Multiply = Multiply(_189Subtract, _189Subtract);
            _191Multiply = Multiply(_190Multiply, _189Subtract);
            _192Constant = 6;
            _193Multiply = Multiply(_189Subtract, _192Constant);
            _194Constant = 15;
            _195Subtract = Subtract(_193Multiply, _194Constant);
            _196Multiply = Multiply(_189Subtract, _195Subtract);
            _197Constant = 10;
            _198Add = Add(_196Multiply, _197Constant);
            _199Multiply = Multiply(_191Multiply, _198Add);
            _200FloatLerp = FloatLerp(_114FloatLerp, _187FloatLerp, _199Multiply);
            _201One = One();
            _202Add = Add(_21Add, _201One);
            _203At = At(_2CachedValue, _202Add);
            _204Constant = 15;
            _205And = And(_203At, _204Constant);
            _206One = One();
            _207And = And(_205And, _206One);
            _208Zero = Zero();
            _209GreaterThan = GreaterThan(_207And, _208Zero);
            _210Constant = 8;
            _211LessThan = LessThan(_205And, _210Constant);
            _213Two = Two();
            _214And = And(_205And, _213Two);
            _215Zero = Zero();
            _216GreaterThan = GreaterThan(_214And, _215Zero);
            _217Constant = 4;
            _218LessThan = LessThan(_205And, _217Constant);
            _226Constant = 12;
            _227Equal = Equal(_205And, _226Constant);
            _228Constant = 14;
            _229Equal = Equal(_205And, _228Constant);
            _230OrElse = OrElse(_227Equal, _229Equal);
            _233FloatOne = FloatOne();
            _234Subtract = Subtract(_61Subtract, _233FloatOne);
            _236Add = Add(if (_209GreaterThan)
                {
                  Single _212NegativeFloat;// 16:NoisePerlinGrad-ext->26:NegativeFloat 104187
                  _212NegativeFloat = NegativeFloat(if (_211LessThan)
                    {
                      _36Subtract;
                      }else
                    {
                      _38Subtract;
                      });
                  _212NegativeFloat;
                  }else
                {
                  if (_211LessThan)
                    {
                      _36Subtract;
                      }else
                    {
                      _38Subtract;
                      };
                  }, if (_216GreaterThan)
                {
                  Single _235NegativeFloat;// 16:NoisePerlinGrad-ext->31:NegativeFloat 104199
                  _235NegativeFloat = NegativeFloat(if (_218LessThan)
                    {
                      _38Subtract;
                      }else
                    {
                      if (_230OrElse)
                        {
                          _36Subtract;
                          }else
                        {
                          _234Subtract;
                          };
                      });
                  _235NegativeFloat;
                  }else
                {
                  if (_218LessThan)
                    {
                      _38Subtract;
                      }else
                    {
                      if (_230OrElse)
                        {
                          _36Subtract;
                          }else
                        {
                          _234Subtract;
                          };
                      };
                  });
            _237One = One();
            _238Add = Add(_69Add, _237One);
            _239At = At(_2CachedValue, _238Add);
            _240Constant = 15;
            _241And = And(_239At, _240Constant);
            _242One = One();
            _243And = And(_241And, _242One);
            _244Zero = Zero();
            _245GreaterThan = GreaterThan(_243And, _244Zero);
            _246Constant = 8;
            _247LessThan = LessThan(_241And, _246Constant);
            _250FloatOne = FloatOne();
            _251Subtract = Subtract(_36Subtract, _250FloatOne);
            _253Two = Two();
            _254And = And(_241And, _253Two);
            _255Zero = Zero();
            _256GreaterThan = GreaterThan(_254And, _255Zero);
            _257Constant = 4;
            _258LessThan = LessThan(_241And, _257Constant);
            _266Constant = 12;
            _267Equal = Equal(_241And, _266Constant);
            _268Constant = 14;
            _269Equal = Equal(_241And, _268Constant);
            _270OrElse = OrElse(_267Equal, _269Equal);
            _273FloatOne = FloatOne();
            _274Subtract = Subtract(_61Subtract, _273FloatOne);
            _276Add = Add(if (_245GreaterThan)
                {
                  Single _252NegativeFloat;// 54:NoisePerlinGrad-ext->26:NegativeFloat 104236
                  _252NegativeFloat = NegativeFloat(if (_247LessThan)
                    {
                      _251Subtract;
                      }else
                    {
                      _38Subtract;
                      });
                  _252NegativeFloat;
                  }else
                {
                  if (_247LessThan)
                    {
                      _251Subtract;
                      }else
                    {
                      _38Subtract;
                      };
                  }, if (_256GreaterThan)
                {
                  Single _275NegativeFloat;// 54:NoisePerlinGrad-ext->31:NegativeFloat 104248
                  _275NegativeFloat = NegativeFloat(if (_258LessThan)
                    {
                      _38Subtract;
                      }else
                    {
                      if (_270OrElse)
                        {
                          _251Subtract;
                          }else
                        {
                          _274Subtract;
                          };
                      });
                  _275NegativeFloat;
                  }else
                {
                  if (_258LessThan)
                    {
                      _38Subtract;
                      }else
                    {
                      if (_270OrElse)
                        {
                          _251Subtract;
                          }else
                        {
                          _274Subtract;
                          };
                      };
                  });
            _277FloatLerp = FloatLerp(_236Add, _276Add, _113Multiply);
            _278One = One();
            _279Add = Add(_118Add, _278One);
            _280At = At(_2CachedValue, _279Add);
            _281Constant = 15;
            _282And = And(_280At, _281Constant);
            _283One = One();
            _284And = And(_282And, _283One);
            _285Zero = Zero();
            _286GreaterThan = GreaterThan(_284And, _285Zero);
            _287Constant = 8;
            _288LessThan = LessThan(_282And, _287Constant);
            _291FloatOne = FloatOne();
            _292Subtract = Subtract(_38Subtract, _291FloatOne);
            _294Two = Two();
            _295And = And(_282And, _294Two);
            _296Zero = Zero();
            _297GreaterThan = GreaterThan(_295And, _296Zero);
            _298Constant = 4;
            _299LessThan = LessThan(_282And, _298Constant);
            _307Constant = 12;
            _308Equal = Equal(_282And, _307Constant);
            _309Constant = 14;
            _310Equal = Equal(_282And, _309Constant);
            _311OrElse = OrElse(_308Equal, _310Equal);
            _314FloatOne = FloatOne();
            _315Subtract = Subtract(_61Subtract, _314FloatOne);
            _317Add = Add(if (_286GreaterThan)
                {
                  Single _293NegativeFloat;// 67:NoisePerlinGrad-ext->26:NegativeFloat 104286
                  _293NegativeFloat = NegativeFloat(if (_288LessThan)
                    {
                      _36Subtract;
                      }else
                    {
                      _292Subtract;
                      });
                  _293NegativeFloat;
                  }else
                {
                  if (_288LessThan)
                    {
                      _36Subtract;
                      }else
                    {
                      _292Subtract;
                      };
                  }, if (_297GreaterThan)
                {
                  Single _316NegativeFloat;// 67:NoisePerlinGrad-ext->31:NegativeFloat 104298
                  _316NegativeFloat = NegativeFloat(if (_299LessThan)
                    {
                      _292Subtract;
                      }else
                    {
                      if (_311OrElse)
                        {
                          _36Subtract;
                          }else
                        {
                          _315Subtract;
                          };
                      });
                  _316NegativeFloat;
                  }else
                {
                  if (_299LessThan)
                    {
                      _292Subtract;
                      }else
                    {
                      if (_311OrElse)
                        {
                          _36Subtract;
                          }else
                        {
                          _315Subtract;
                          };
                      };
                  });
            _318One = One();
            _319Add = Add(_154Add, _318One);
            _320At = At(_2CachedValue, _319Add);
            _321Constant = 15;
            _322And = And(_320At, _321Constant);
            _323One = One();
            _324And = And(_322And, _323One);
            _325Zero = Zero();
            _326GreaterThan = GreaterThan(_324And, _325Zero);
            _327Constant = 8;
            _328LessThan = LessThan(_322And, _327Constant);
            _331FloatOne = FloatOne();
            _332Subtract = Subtract(_36Subtract, _331FloatOne);
            _334Two = Two();
            _335And = And(_322And, _334Two);
            _336Zero = Zero();
            _337GreaterThan = GreaterThan(_335And, _336Zero);
            _338Constant = 4;
            _339LessThan = LessThan(_322And, _338Constant);
            _345Constant = 12;
            _346Equal = Equal(_322And, _345Constant);
            _347Constant = 14;
            _348Equal = Equal(_322And, _347Constant);
            _349OrElse = OrElse(_346Equal, _348Equal);
            _351Add = Add(if (_326GreaterThan)
                {
                  Single _333NegativeFloat;// 71:NoisePerlinGrad-ext->26:NegativeFloat 104338
                  _333NegativeFloat = NegativeFloat(if (_328LessThan)
                    {
                      _332Subtract;
                      }else
                    {
                      _292Subtract;
                      });
                  _333NegativeFloat;
                  }else
                {
                  if (_328LessThan)
                    {
                      _332Subtract;
                      }else
                    {
                      _292Subtract;
                      };
                  }, if (_337GreaterThan)
                {
                  Single _350NegativeFloat;// 71:NoisePerlinGrad-ext->31:NegativeFloat 104350
                  _350NegativeFloat = NegativeFloat(if (_339LessThan)
                    {
                      _292Subtract;
                      }else
                    {
                      if (_349OrElse)
                        {
                          _332Subtract;
                          }else
                        {
                          _315Subtract;
                          };
                      });
                  _350NegativeFloat;
                  }else
                {
                  if (_339LessThan)
                    {
                      _292Subtract;
                      }else
                    {
                      if (_349OrElse)
                        {
                          _332Subtract;
                          }else
                        {
                          _315Subtract;
                          };
                      };
                  });
            _352FloatLerp = FloatLerp(_317Add, _351Add, _113Multiply);
            _353FloatLerp = FloatLerp(_277FloatLerp, _352FloatLerp, _199Multiply);
            _354FloorAsFloat = FloorAsFloat(_18FloatZero);
            _355Subtract = Subtract(_18FloatZero, _354FloorAsFloat);
            _356Multiply = Multiply(_355Subtract, _355Subtract);
            _357Multiply = Multiply(_356Multiply, _355Subtract);
            _358Constant = 6;
            _359Multiply = Multiply(_355Subtract, _358Constant);
            _360Constant = 15;
            _361Subtract = Subtract(_359Multiply, _360Constant);
            _362Multiply = Multiply(_355Subtract, _361Subtract);
            _363Constant = 10;
            _364Add = Add(_362Multiply, _363Constant);
            _365Multiply = Multiply(_357Multiply, _364Add);
            _366FloatLerp = FloatLerp(_200FloatLerp, _353FloatLerp, _365Multiply);
            _367Constant = 2;
            _368Sqrt = Sqrt(_367Constant);
            _369Constant = 2;
            _370Divide = Divide(_368Sqrt, _369Constant);
            _371Divide = Divide(_366FloatLerp, _370Divide);
            _372Multiply = Multiply(_371Divide, x1);
            _372Multiply;
            });
        _9DefaultValueOfElement = DefaultValueOfElement(_8Combine);
        _10Aggregate = Aggregate(_8Combine, _9DefaultValueOfElement, (Single x0, Single x1) => 
          {
            Single _0Add;// 11:Sum->2:Add 103954
            _0Add = Add(x0, x1);
            _0Add;
            });
        _11Vector3 = Vector3(_2X, _3Y, _10Aggregate);
        _11Vector3;
        };
    _5Map = Map(_3MapChannelVertexBuffer, _4Pass-through: function1);
    _6MapChannelIndexBuffer = MapChannelIndexBuffer(_2UVChannel);
    if (_1Equal)
      {
        MeshData _7MeshData;// 9:MapChannelOrGeometrySet-ext->9:MeshData 103926
        TriMesh _8CreateMeshWithMeshData;// 9:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 103925
        _7MeshData = MeshData(mesh);
        _8CreateMeshWithMeshData = CreateMeshWithMeshData(_5Map, _6MapChannelIndexBuffer, _7MeshData);
        _8CreateMeshWithMeshData;
        }else
      {
        TriMesh _9SetMapChannel;// 9:MapChannelOrGeometrySet-ext->0:SetMapChannel 103927
        _9SetMapChannel = SetMapChannel(mesh, channel, _5Map, _6MapChannelIndexBuffer);
        _9SetMapChannel;
        };
    }