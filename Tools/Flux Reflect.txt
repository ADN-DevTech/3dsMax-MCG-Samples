(InstanceState state, TriMesh mesh, Int32 flux channel, Boolean keep original, Single x, Single y, Single z, Int32 axis) => 
  {
    MapChannel _0GetMapChannel;// 18:MatricesFromMapChannel-ext->9:GetMapChannel 98864
    IArray[Vector3] _1MapChannelVertexBuffer;// 18:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 98863
    Int32 _2Count;// 2:Slices->2:Count 98860
    Int32 _3Constant;// 18:MatricesFromMapChannel-ext->0:Constant 98865
    Int32 _4Divide;// 2:Slices->3:Divide 98859
    IArray[Int32] _5Range;// 2:Slices->4:Range 98858
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 98857
    IArray[Matrix] _7Map;// 18:MatricesFromMapChannel-ext->5:Map 98854
    Vector3 _8Vector3;// 4:Vector3 98898
    Int32 _9Zero;// 10:AxisChoose-ext->9:Zero 98905
    Boolean _10GreaterThanOrEqual;// 10:AxisChoose-ext->8:GreaterThanOrEqual 98904
    Vector3 _11XAxis;// 10:AxisChoose-ext->3:XAxis 98913
    IArray[Vector3] _12Unit;// 2:Array3->2:Unit 98912
    Vector3 _13YAxis;// 10:AxisChoose-ext->4:YAxis 98914
    IArray[Vector3] _14Append;// 2:Array3->3:Append 98911
    Vector3 _15ZAxis;// 10:AxisChoose-ext->5:ZAxis 98915
    IArray[Vector3] _16Append;// 2:Array3->6:Append 98910
    Vector3 _23Pass-through: Vector3;// 0:Pass-through: Vector3 98894
    Ray _24Ray;// 21:MatrixReflectionFromPositionDirection-ext->14:Ray 98897
    Plane _25Plane;// 21:MatrixReflectionFromPositionDirection-ext->16:Plane 98896
    Matrix _26ReflectionMatrix;// 21:MatrixReflectionFromPositionDirection-ext->2:ReflectionMatrix 98895
    IArray[Matrix] _27Map;// 2:Map 98851
    IArray[Matrix] _29Pass-through: array;// 0:Pass-through: array 98828
    Func[Matrix, IArray[Vector3]] _30Pass-through: function1;// 0:Pass-through: function1 98831
    IArray[IArray[Vector3]] _31Map;// 5:FlatMap->4:Map 98833
    IArray[Vector3] _32Flatten;// 5:FlatMap->3:Flatten 98832
    IArray[Int32] _33MeshIndices;// 16:MapChannelStoreMatrices-ext->0:MeshIndices 98842
    TriMesh _34SetMapChannel;// 16:MapChannelStoreMatrices-ext->7:SetMapChannel 98829
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 98862
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 98861
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 98874
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 98875
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 98879
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 98878
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 98873
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 98876
        Int32 _6One;// 8:PlusOne->1:One 98883
        Int32 _7Add;// 8:PlusOne->0:Add 98882
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 98880
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 98872
        Int32 _10Constant;// 25:Three->0:Constant 98877
        Int32 _11One;// 9:PlusOne->1:One 98887
        Int32 _12Add;// 9:PlusOne->0:Add 98886
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 98884
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 98871
        Int32 _15One;// 10:PlusOne->1:One 98891
        Int32 _16Add;// 10:PlusOne->0:Add 98890
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 98888
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 98867
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8Vector3 = Vector3(x, y, z);
    _9Zero = Zero();
    _10GreaterThanOrEqual = GreaterThanOrEqual(axis, _9Zero);
    _11XAxis = XAxis();
    _12Unit = Unit(_11XAxis);
    _13YAxis = YAxis();
    _14Append = Append(_12Unit, _13YAxis);
    _15ZAxis = ZAxis();
    _16Append = Append(_14Append, _15ZAxis);
    _23Pass-through: Vector3 = if (_10GreaterThanOrEqual)
      {
        Vector3 _17At;// 10:AxisChoose-ext->1:At 98906
        _17At = At(_16Append, axis);
        _17At;
        }else
      {
        Int32 _18One;// 10:PlusOne->1:One 98921
        Int32 _19Add;// 10:PlusOne->0:Add 98920
        Int32 _20Negative;// 10:AxisChoose-ext->11:Negative 98918
        Vector3 _21At;// 10:AxisChoose-ext->12:At 98917
        Vector3 _22Negate;// 10:AxisChoose-ext->13:Negate 98916
        _18One = One();
        _19Add = Add(axis, _18One);
        _20Negative = Negative(_19Add);
        _21At = At(_16Append, _20Negative);
        _22Negate = Negate(_21At);
        _22Negate;
        };
    _24Ray = Ray(_8Vector3, _23Pass-through: Vector3);
    _25Plane = Plane(_24Ray);
    _26ReflectionMatrix = ReflectionMatrix(_25Plane);
    _27Map = Map(_7Map, (Matrix x0) => 
      {
        Matrix _0Multiply;// 3:Multiply 98892
        _0Multiply = Multiply(x0, _26ReflectionMatrix);
        _0Multiply;
        });
    _29Pass-through: array = if (keep original)
      {
        IArray[Matrix] _28Concatenate;// 11:ConcatenateIf-ext->1:Concatenate 98849
        _28Concatenate = Concatenate(_27Map, _7Map);
        _28Concatenate;
        }else
      {
        _27Map;
        };
    _30Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 98837
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 98836
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 98835
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 98841
            Int32 _1Add;// 5:PlusOne->0:Add 98840
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 98838
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _31Map = Map(_29Pass-through: array, _30Pass-through: function1);
    _32Flatten = Flatten(_31Map);
    _33MeshIndices = MeshIndices(mesh);
    _34SetMapChannel = SetMapChannel(mesh, flux channel, _32Flatten, _33MeshIndices);
    _34SetMapChannel;
    }