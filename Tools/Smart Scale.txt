(InstanceState state, TriMesh mesh, Boolean Affect both sides, Int32 axis, Single Center Protection, Single Offset, Boolean Weight distance) => 
  {
    IArray[Vector3] _0MeshVertices;// 10:DeformMeshPoints->0:MeshVertices 77719
    IArray[Vector3] _1MeshVertices;// 6:PlaneAtMeshCenter.ext->6:MeshVertices 77739
    BoundingBox _2BoxFromPoints;// 6:PlaneAtMeshCenter.ext->7:BoxFromPoints 77738
    BoundingSphere _3SphereFromBox;// 8:BoundingBoxCenter->2:SphereFromBox 77737
    Vector3 _4SphereCenter;// 8:BoundingBoxCenter->3:SphereCenter 77736
    Int32 _5Zero;// 7:ChooseAxis.ext->9:Zero 77743
    Boolean _6GreaterThanOrEqual;// 7:ChooseAxis.ext->8:GreaterThanOrEqual 77742
    Vector3 _7XAxis;// 7:ChooseAxis.ext->3:XAxis 77751
    IArray[Vector3] _8Unit;// 2:Array3->2:Unit 77750
    Vector3 _9YAxis;// 7:ChooseAxis.ext->4:YAxis 77752
    IArray[Vector3] _10Append;// 2:Array3->3:Append 77749
    Vector3 _11ZAxis;// 7:ChooseAxis.ext->5:ZAxis 77753
    IArray[Vector3] _12Append;// 2:Array3->6:Append 77748
    Vector3 _19Pass-through: Vector3;// 0:Pass-through: Vector3 77732
    Ray _20Ray;// 6:PlaneAtMeshCenter.ext->28:Ray 77734
    Plane _21Plane;// 6:PlaneAtMeshCenter.ext->27:Plane 77733
    Single _22Constant;// 23:DivideByTwoFloat->0:Constant 77773
    Single _23Divide;// 23:DivideByTwoFloat->2:Divide 77772
    Func[Vector3, Vector3] _24Pass-through: function1;// 0:Pass-through: function1 77716
    IArray[Vector3] _25Map;// 10:DeformMeshPoints->1:Map 77718
    TriMesh _26SetMeshVertices;// 10:DeformMeshPoints->4:SetMeshVertices 77717
    _0MeshVertices = MeshVertices(mesh);
    _1MeshVertices = MeshVertices(mesh);
    _2BoxFromPoints = BoxFromPoints(_1MeshVertices);
    _3SphereFromBox = SphereFromBox(_2BoxFromPoints);
    _4SphereCenter = SphereCenter(_3SphereFromBox);
    _5Zero = Zero();
    _6GreaterThanOrEqual = GreaterThanOrEqual(axis, _5Zero);
    _7XAxis = XAxis();
    _8Unit = Unit(_7XAxis);
    _9YAxis = YAxis();
    _10Append = Append(_8Unit, _9YAxis);
    _11ZAxis = ZAxis();
    _12Append = Append(_10Append, _11ZAxis);
    _19Pass-through: Vector3 = if (_6GreaterThanOrEqual)
      {
        Vector3 _13At;// 7:ChooseAxis.ext->1:At 77744
        _13At = At(_12Append, axis);
        _13At;
        }else
      {
        Int32 _14One;// 10:PlusOne->1:One 77759
        Int32 _15Add;// 10:PlusOne->0:Add 77758
        Int32 _16Negative;// 7:ChooseAxis.ext->11:Negative 77756
        Vector3 _17At;// 7:ChooseAxis.ext->12:At 77755
        Vector3 _18Negate;// 7:ChooseAxis.ext->13:Negate 77754
        _14One = One();
        _15Add = Add(axis, _14One);
        _16Negative = Negative(_15Add);
        _17At = At(_12Append, _16Negative);
        _18Negate = Negate(_17At);
        _18Negate;
        };
    _20Ray = Ray(_4SphereCenter, _19Pass-through: Vector3);
    _21Plane = Plane(_20Ray);
    _22Constant = 2;
    _23Divide = Divide(Offset, _22Constant);
    _24Pass-through: function1 = (Vector3 x0) => 
      {
        Single _0PointPlaneDistance;// 29:PointPlaneDistance 77730
        Boolean _10GreaterThanOrEqual;// 15:GreaterThanOrEqual 77723
        Single _42FloatZero;// 1:GtEqZ.ext->1:FloatZero 77769
        Boolean _43GreaterThanOrEqual;// 1:GtEqZ.ext->2:GreaterThanOrEqual 77768
        _0PointPlaneDistance = PointPlaneDistance(_21Plane, x0);
        _10GreaterThanOrEqual = GreaterThanOrEqual(if (Affect both sides)
            {
              Single _7Abs;// 18:Abs 77729
              Single _8Constant;// 26:DivideByTwoFloat->0:Constant 77728
              Single _9Divide;// 26:DivideByTwoFloat->2:Divide 77727
              _7Abs = Abs(_0PointPlaneDistance);
              _8Constant = 2;
              _9Divide = Divide(_7Abs, _8Constant);
              _9Divide;
              }else
            {
              _0PointPlaneDistance;
              }, Center Protection);
        _42FloatZero = FloatZero();
        _43GreaterThanOrEqual = GreaterThanOrEqual(_0PointPlaneDistance, _42FloatZero);
        if (_10GreaterThanOrEqual)
          {
            if (Affect both sides)
              {
                Vector3 _98Add;// 22:Add 77764
                _98Add = Add(x0, if (_43GreaterThanOrEqual)
                    {
                      Vector3 _89MultiplyByScalar;// 24:MultiplyByScalar 77770
                      _89MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                        {
                          Vector3 _83At;// 7:ChooseAxis.ext->1:At 77744
                          _83At = At(_12Append, axis);
                          _83At;
                          }else
                        {
                          Int32 _84One;// 10:PlusOne->1:One 77759
                          Int32 _85Add;// 10:PlusOne->0:Add 77758
                          Int32 _86Negative;// 7:ChooseAxis.ext->11:Negative 77756
                          Vector3 _87At;// 7:ChooseAxis.ext->12:At 77755
                          Vector3 _88Negate;// 7:ChooseAxis.ext->13:Negate 77754
                          _84One = One();
                          _85Add = Add(axis, _84One);
                          _86Negative = Negative(_85Add);
                          _87At = At(_12Append, _86Negative);
                          _88Negate = Negate(_87At);
                          _88Negate;
                          }, _23Divide);
                      _89MultiplyByScalar;
                      }else
                    {
                      Vector3 _96MultiplyByScalar;// 24:MultiplyByScalar 77770
                      Vector3 _97Negate;// 21:Negate 77775
                      _96MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                        {
                          Vector3 _90At;// 7:ChooseAxis.ext->1:At 77744
                          _90At = At(_12Append, axis);
                          _90At;
                          }else
                        {
                          Int32 _91One;// 10:PlusOne->1:One 77759
                          Int32 _92Add;// 10:PlusOne->0:Add 77758
                          Int32 _93Negative;// 7:ChooseAxis.ext->11:Negative 77756
                          Vector3 _94At;// 7:ChooseAxis.ext->12:At 77755
                          Vector3 _95Negate;// 7:ChooseAxis.ext->13:Negate 77754
                          _91One = One();
                          _92Add = Add(axis, _91One);
                          _93Negative = Negative(_92Add);
                          _94At = At(_12Append, _93Negative);
                          _95Negate = Negate(_94At);
                          _95Negate;
                          }, _23Divide);
                      _97Negate = Negate(_96MultiplyByScalar);
                      _97Negate;
                      });
                _98Add;
                }else
              {
                Vector3 _105MultiplyByScalar;// 11:MultiplyByScalar 77777
                Vector3 _106Add;// 17:Add 77776
                _105MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                  {
                    Vector3 _99At;// 7:ChooseAxis.ext->1:At 77744
                    _99At = At(_12Append, axis);
                    _99At;
                    }else
                  {
                    Int32 _100One;// 10:PlusOne->1:One 77759
                    Int32 _101Add;// 10:PlusOne->0:Add 77758
                    Int32 _102Negative;// 7:ChooseAxis.ext->11:Negative 77756
                    Vector3 _103At;// 7:ChooseAxis.ext->12:At 77755
                    Vector3 _104Negate;// 7:ChooseAxis.ext->13:Negate 77754
                    _100One = One();
                    _101Add = Add(axis, _100One);
                    _102Negative = Negative(_101Add);
                    _103At = At(_12Append, _102Negative);
                    _104Negate = Negate(_103At);
                    _104Negate;
                    }, Offset);
                _106Add = Add(x0, _105MultiplyByScalar);
                _106Add;
                };
            }else
          {
            if (Weight distance)
              {
                Single _152Divide;// 35:Divide 77781
                Vector3 _153Lerp;// 36:Lerp 77780
                _152Divide = Divide(if (Affect both sides)
                    {
                      Single _149Abs;// 18:Abs 77729
                      Single _150Constant;// 26:DivideByTwoFloat->0:Constant 77728
                      Single _151Divide;// 26:DivideByTwoFloat->2:Divide 77727
                      _149Abs = Abs(_0PointPlaneDistance);
                      _150Constant = 2;
                      _151Divide = Divide(_149Abs, _150Constant);
                      _151Divide;
                      }else
                    {
                      _0PointPlaneDistance;
                      }, Center Protection);
                _153Lerp = Lerp(x0, if (Affect both sides)
                  {
                    Vector3 _134Add;// 22:Add 77764
                    _134Add = Add(x0, if (_43GreaterThanOrEqual)
                        {
                          Vector3 _125MultiplyByScalar;// 24:MultiplyByScalar 77770
                          _125MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                            {
                              Vector3 _119At;// 7:ChooseAxis.ext->1:At 77744
                              _119At = At(_12Append, axis);
                              _119At;
                              }else
                            {
                              Int32 _120One;// 10:PlusOne->1:One 77759
                              Int32 _121Add;// 10:PlusOne->0:Add 77758
                              Int32 _122Negative;// 7:ChooseAxis.ext->11:Negative 77756
                              Vector3 _123At;// 7:ChooseAxis.ext->12:At 77755
                              Vector3 _124Negate;// 7:ChooseAxis.ext->13:Negate 77754
                              _120One = One();
                              _121Add = Add(axis, _120One);
                              _122Negative = Negative(_121Add);
                              _123At = At(_12Append, _122Negative);
                              _124Negate = Negate(_123At);
                              _124Negate;
                              }, _23Divide);
                          _125MultiplyByScalar;
                          }else
                        {
                          Vector3 _132MultiplyByScalar;// 24:MultiplyByScalar 77770
                          Vector3 _133Negate;// 21:Negate 77775
                          _132MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                            {
                              Vector3 _126At;// 7:ChooseAxis.ext->1:At 77744
                              _126At = At(_12Append, axis);
                              _126At;
                              }else
                            {
                              Int32 _127One;// 10:PlusOne->1:One 77759
                              Int32 _128Add;// 10:PlusOne->0:Add 77758
                              Int32 _129Negative;// 7:ChooseAxis.ext->11:Negative 77756
                              Vector3 _130At;// 7:ChooseAxis.ext->12:At 77755
                              Vector3 _131Negate;// 7:ChooseAxis.ext->13:Negate 77754
                              _127One = One();
                              _128Add = Add(axis, _127One);
                              _129Negative = Negative(_128Add);
                              _130At = At(_12Append, _129Negative);
                              _131Negate = Negate(_130At);
                              _131Negate;
                              }, _23Divide);
                          _133Negate = Negate(_132MultiplyByScalar);
                          _133Negate;
                          });
                    _134Add;
                    }else
                  {
                    Vector3 _141MultiplyByScalar;// 11:MultiplyByScalar 77777
                    Vector3 _142Add;// 17:Add 77776
                    _141MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                      {
                        Vector3 _135At;// 7:ChooseAxis.ext->1:At 77744
                        _135At = At(_12Append, axis);
                        _135At;
                        }else
                      {
                        Int32 _136One;// 10:PlusOne->1:One 77759
                        Int32 _137Add;// 10:PlusOne->0:Add 77758
                        Int32 _138Negative;// 7:ChooseAxis.ext->11:Negative 77756
                        Vector3 _139At;// 7:ChooseAxis.ext->12:At 77755
                        Vector3 _140Negate;// 7:ChooseAxis.ext->13:Negate 77754
                        _136One = One();
                        _137Add = Add(axis, _136One);
                        _138Negative = Negative(_137Add);
                        _139At = At(_12Append, _138Negative);
                        _140Negate = Negate(_139At);
                        _140Negate;
                        }, Offset);
                    _142Add = Add(x0, _141MultiplyByScalar);
                    _142Add;
                    }, _152Divide);
                _153Lerp;
                }else
              {
                x0;
                };
            };
        };
    _25Map = Map(_0MeshVertices, _24Pass-through: function1);
    _26SetMeshVertices = SetMeshVertices(mesh, _25Map);
    _26SetMeshVertices;
    }