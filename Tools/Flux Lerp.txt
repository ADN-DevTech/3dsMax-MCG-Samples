(InstanceState state, TriMesh mesh, Int32 flux channel, Boolean closed, Boolean include original, Int32 count) => 
  {
    MapChannel _0GetMapChannel;// 5:MatricesFromMapChannel-ext->9:GetMapChannel 98176
    IArray[Vector3] _1MapChannelVertexBuffer;// 5:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 98175
    Int32 _2Count;// 2:Slices->2:Count 98172
    Int32 _3Constant;// 5:MatricesFromMapChannel-ext->0:Constant 98177
    Int32 _4Divide;// 2:Slices->3:Divide 98171
    IArray[Int32] _5Range;// 2:Slices->4:Range 98170
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 98169
    IArray[Matrix] _7Map;// 5:MatricesFromMapChannel-ext->5:Map 98166
    IArray[Matrix] _11Pass-through: array;// 0:Pass-through: array 98090
    Int32 _12Count;// 3:LastIndex->2:Count 98108
    Int32 _13One;// 3:MinusOne->2:One 98107
    Int32 _14Subtract;// 3:MinusOne->1:Subtract 98106
    IArray[Matrix] _15Take;// 1:DropLast->2:Take 98103
    Int32 _16One;// 2:SkipOne->2:One 98111
    IArray[Matrix] _17Skip;// 2:SkipOne->3:Skip 98110
    Func[Matrix, Matrix, IArray[Matrix]] _18Pass-through: function2;// 0:Pass-through: function2 98094
    IArray[IArray[Matrix]] _19Combine;// 1:CombinePairwiseElements-ext->3:Combine 98101
    Int32 _23Zero;// 2:First->2:Zero 98163
    Matrix _24At;// 2:First->0:At 98162
    Int32 _34Count;// 3:LastIndex->2:Count 98119
    IArray[Matrix] _56Pass-through: array;// 0:Pass-through: array 98063
    Func[Matrix, IArray[Vector3]] _57Pass-through: function1;// 0:Pass-through: function1 98066
    IArray[IArray[Vector3]] _58Map;// 5:FlatMap->4:Map 98068
    IArray[Vector3] _59Flatten;// 5:FlatMap->3:Flatten 98067
    IArray[Int32] _60MeshIndices;// 3:MapChannelStoreMatrices-ext->0:MeshIndices 98077
    TriMesh _61SetMapChannel;// 3:MapChannelStoreMatrices-ext->7:SetMapChannel 98064
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 98174
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 98173
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 98186
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 98187
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 98191
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 98190
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 98185
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 98188
        Int32 _6One;// 8:PlusOne->1:One 98195
        Int32 _7Add;// 8:PlusOne->0:Add 98194
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 98192
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 98184
        Int32 _10Constant;// 25:Three->0:Constant 98189
        Int32 _11One;// 9:PlusOne->1:One 98199
        Int32 _12Add;// 9:PlusOne->0:Add 98198
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 98196
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 98183
        Int32 _15One;// 10:PlusOne->1:One 98203
        Int32 _16Add;// 10:PlusOne->0:Add 98202
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 98200
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 98179
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _11Pass-through: array = if (closed)
      {
        Int32 _8Zero;// 2:First->2:Zero 98163
        Matrix _9At;// 2:First->0:At 98162
        IArray[Matrix] _10Append;// 0:AppendIf->1:Append 98160
        _8Zero = Zero();
        _9At = At(_7Map, _8Zero);
        _10Append = Append(_7Map, _9At);
        _10Append;
        }else
      {
        _7Map;
        };
    _12Count = Count(_11Pass-through: array);
    _13One = One();
    _14Subtract = Subtract(_12Count, _13One);
    _15Take = Take(_11Pass-through: array, _14Subtract);
    _16One = One();
    _17Skip = Skip(_11Pass-through: array, _16One);
    _18Pass-through: function2 = (Matrix x0, Matrix x1) => 
      {
        Int32 _0One;// 2:PlusOne->1:One 98134
        Int32 _1Add;// 2:PlusOne->0:Add 98133
        IArray[Single] _2RangeExclusiveFloat;// 7:FloatRandeBetween-ext->5:RangeExclusiveFloat 98131
        Int32 _3One;// 6:SkipOne->2:One 98130
        IArray[Single] _4Skip;// 6:SkipOne->3:Skip 98129
        Func[Single, Matrix] _5Pass-through: function1;// 0:Pass-through: function1 98125
        IArray[Matrix] _6Map;// 2:SampleBetween-ext->3:Map 98126
        _0One = One();
        _1Add = Add(count, _0One);
        _2RangeExclusiveFloat = RangeExclusiveFloat(_1Add);
        _3One = One();
        _4Skip = Skip(_2RangeExclusiveFloat, _3One);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp-ext->6:GetMatrixScaling 98145
            Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp-ext->7:GetMatrixScaling 98146
            Vector3 _2Lerp;// 12:MatrixComponentsLerp-ext->11:Lerp 98144
            Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp-ext->4:GetMatrixRotation 98148
            Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp-ext->5:GetMatrixRotation 98149
            Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp-ext->9:QuaternionLerp 98147
            Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp-ext->2:GetMatrixTranslation 98151
            Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp-ext->3:GetMatrixTranslation 98152
            Vector3 _8Lerp;// 12:MatrixComponentsLerp-ext->10:Lerp 98150
            Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp-ext->14:ScalingRotationTranslationMatrix 98143
            _0GetMatrixScaling = GetMatrixScaling(x0);
            _1GetMatrixScaling = GetMatrixScaling(x1);
            _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, x0);
            _3GetMatrixRotation = GetMatrixRotation(x0);
            _4GetMatrixRotation = GetMatrixRotation(x1);
            _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, x0);
            _6GetMatrixTranslation = GetMatrixTranslation(x0);
            _7GetMatrixTranslation = GetMatrixTranslation(x1);
            _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, x0);
            _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
            _9ScalingRotationTranslationMatrix;
            };
        _6Map = Map(_4Skip, _5Pass-through: function1);
        _6Map;
        };
    _19Combine = Combine(_15Take, _17Skip, _18Pass-through: function2);
    _23Zero = Zero();
    _24At = At(_7Map, _23Zero);
    _34Count = Count(_11Pass-through: array);
    _56Pass-through: array = if (closed)
      {
        IArray[Matrix] _43Pass-through: array;// 0:Pass-through: array 98082
        Int32 _44Count;// 3:LastIndex->2:Count 98088
        Int32 _45One;// 3:MinusOne->2:One 98087
        Int32 _46Subtract;// 3:MinusOne->1:Subtract 98086
        IArray[Matrix] _47Take;// 14:DropLast->2:Take 98083
        _43Pass-through: array = if (include original)
          {
            IArray[IArray[Matrix]] _36Combine;// 10:ArrayInterpolate-ext->4:Combine 98098
            IArray[Matrix] _37Flatten;// 10:ArrayInterpolate-ext->7:Flatten 98097
            Int32 _38One;// 3:MinusOne->2:One 98118
            Int32 _39Subtract;// 3:MinusOne->1:Subtract 98117
            Matrix _40At;// 5:Last->0:At 98114
            IArray[Matrix] _41Append;// 10:ArrayInterpolate-ext->9:Append 98096
            _36Combine = Combine(_19Combine, _11Pass-through: array, (IArray[Matrix] x0, Matrix x1) => 
              {
                IArray[Matrix] _0Prepend;// 10:ArrayInterpolate-ext->6:Prepend 98112
                _0Prepend = Prepend(x0, x1);
                _0Prepend;
                });
            _37Flatten = Flatten(_36Combine);
            _38One = One();
            _39Subtract = Subtract(_34Count, _38One);
            _40At = At(_11Pass-through: array, _39Subtract);
            _41Append = Append(_37Flatten, _40At);
            _41Append;
            }else
          {
            IArray[Matrix] _42Flatten;// 10:ArrayInterpolate-ext->11:Flatten 98120
            _42Flatten = Flatten(_19Combine);
            _42Flatten;
            };
        _44Count = Count(_43Pass-through: array);
        _45One = One();
        _46Subtract = Subtract(_44Count, _45One);
        _47Take = Take(_43Pass-through: array, _46Subtract);
        _47Take;
        }else
      {
        if (include original)
          {
            IArray[IArray[Matrix]] _49Combine;// 10:ArrayInterpolate-ext->4:Combine 98098
            IArray[Matrix] _50Flatten;// 10:ArrayInterpolate-ext->7:Flatten 98097
            Int32 _51One;// 3:MinusOne->2:One 98118
            Int32 _52Subtract;// 3:MinusOne->1:Subtract 98117
            Matrix _53At;// 5:Last->0:At 98114
            IArray[Matrix] _54Append;// 10:ArrayInterpolate-ext->9:Append 98096
            _49Combine = Combine(_19Combine, _11Pass-through: array, (IArray[Matrix] x0, Matrix x1) => 
              {
                IArray[Matrix] _0Prepend;// 10:ArrayInterpolate-ext->6:Prepend 98112
                _0Prepend = Prepend(x0, x1);
                _0Prepend;
                });
            _50Flatten = Flatten(_49Combine);
            _51One = One();
            _52Subtract = Subtract(_34Count, _51One);
            _53At = At(_11Pass-through: array, _52Subtract);
            _54Append = Append(_50Flatten, _53At);
            _54Append;
            }else
          {
            IArray[Matrix] _55Flatten;// 10:ArrayInterpolate-ext->11:Flatten 98120
            _55Flatten = Flatten(_19Combine);
            _55Flatten;
            };
        };
    _57Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 98072
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 98071
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 98070
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 98076
            Int32 _1Add;// 5:PlusOne->0:Add 98075
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 98073
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _58Map = Map(_56Pass-through: array, _57Pass-through: function1);
    _59Flatten = Flatten(_58Map);
    _60MeshIndices = MeshIndices(mesh);
    _61SetMapChannel = SetMapChannel(mesh, flux channel, _59Flatten, _60MeshIndices);
    _61SetMapChannel;
    }