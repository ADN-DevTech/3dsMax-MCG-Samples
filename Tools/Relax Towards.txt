(InstanceState state, TriMesh mesh, Int32 iterations, INode original, Single relaxAmount) => 
  {
    TriMesh _0Repeat;// 2:RepeatWithoutIndex-ext->7:Repeat 107671
    _0Repeat = Repeat(mesh, iterations, (TriMesh x0, Int32 x1) => 
      {
        Boolean _0IsValidNode;// 2:NodeMeshOrExit-ext->1:IsValidNode 107831
        Boolean _1CanGetMeshFromNode;// 2:NodeMeshOrExit-ext->2:CanGetMeshFromNode 107832
        Boolean _2AndAlso;// 2:NodeMeshOrExit-ext->3:AndAlso 107830
        Func[TriMesh, TriMesh] _7Pass-through: function1;// 0:Pass-through: function1 107667
        TriMesh _8Apply1;// 2:RepeatWithoutIndex-ext->1:Apply1 107673
        TriMesh _9IgnoreSecond;// 2:RepeatWithoutIndex-ext->9:IgnoreSecond 107672
        _0IsValidNode = IsValidNode(original);
        _1CanGetMeshFromNode = CanGetMeshFromNode(original);
        _2AndAlso = AndAlso(_0IsValidNode, _1CanGetMeshFromNode);
        _7Pass-through: function1 = (TriMesh x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 10:MeshMoveVerticesToward-ext->2:MeshVertices 107684
            TriMesh _5Pass-through: TriMesh;// 0:Pass-through: TriMesh 107677
            IArray[Vector3] _6MeshVertices;// 5:MeshRelaxTowardsOriginal-ext->6:MeshVertices 107690
            IArray[Int32] _7Indices;// 7:MapIndices-ext->4:Indices 107689
            Func[Int32, Vector3] _8Pass-through: function1;// 0:Pass-through: function1 107687
            IArray[Vector3] _9Map;// 7:MapIndices-ext->2:Map 107688
            IArray[Vector3] _10Combine;// 10:MeshMoveVerticesToward-ext->5:Combine 107683
            TriMesh _11SetMeshVertices;// 10:MeshMoveVerticesToward-ext->3:SetMeshVertices 107682
            _0MeshVertices = MeshVertices(x0);
            _5Pass-through: TriMesh = if (_2AndAlso)
              {
                TriMesh _1MeshFromNode;// 2:NodeMeshOrExit-ext->4:MeshFromNode 107833
                _1MeshFromNode = MeshFromNode(original);
                _1MeshFromNode;
                }else
              {
                TriMesh _2EmptyMesh;// 2:NodeMeshOrExit-ext->8:EmptyMesh 107835
                Boolean _3True;// 2:NodeMeshOrExit-ext->7:True 107836
                TriMesh _4ExitIf;// 2:NodeMeshOrExit-ext->6:ExitIf 107834
                _2EmptyMesh = EmptyMesh();
                _3True = True();
                _4ExitIf = ExitIf(_2EmptyMesh, _3True);
                _4ExitIf;
                };
            _6MeshVertices = MeshVertices(_5Pass-through: TriMesh);
            _7Indices = Indices(_6MeshVertices);
            _8Pass-through: function1 = (Int32 x0) => 
              {
                IArray[Int32] _0VertexFaceLookup;// 2:AdjacentVertexIndices->2:VertexFaceLookup 107740
                Func[Int32, IArray[Int32]] _1Pass-through: function1;// 0:Pass-through: function1 107737
                IArray[IArray[Int32]] _2Map;// 3:FlatMap->4:Map 107739
                IArray[Int32] _3Flatten;// 3:FlatMap->3:Flatten 107738
                IArray[Int32] _4Sort;// 6:RemoveDuplicates->7:Sort 107721
                IArray[Int32] _5Indices;// 6:RemoveDuplicates->0:Indices 107720
                IArray[Int32] _6Filter;// 6:RemoveDuplicates->3:Filter 107719
                IArray[Int32] _7Map;// 5:SelectByIndex->2:Map 107717
                IArray[Vector3] _8MeshVertices;// 7:VertexNeighbours-ext->3:MeshVertices 107763
                IArray[Vector3] _9Map;// 4:SelectByIndex->2:Map 107710
                IArray[Vector3] _10MeshVertices;// 2:Vertex-ext->3:MeshVertices 107768
                Vector3 _11At;// 2:Vertex-ext->5:At 107767
                IArray[Vector3] _12Map;// 5:VertexNeighbourDeltas-ext->6:Map 107705
                IArray[Int32] _13VertexFaceLookup;// 2:AdjacentVertexIndices->2:VertexFaceLookup 107804
                Func[Int32, IArray[Int32]] _14Pass-through: function1;// 0:Pass-through: function1 107801
                IArray[IArray[Int32]] _15Map;// 3:FlatMap->4:Map 107803
                IArray[Int32] _16Flatten;// 3:FlatMap->3:Flatten 107802
                IArray[Int32] _17Sort;// 6:RemoveDuplicates->7:Sort 107785
                IArray[Int32] _18Indices;// 6:RemoveDuplicates->0:Indices 107784
                IArray[Int32] _19Filter;// 6:RemoveDuplicates->3:Filter 107783
                IArray[Int32] _20Map;// 5:SelectByIndex->2:Map 107781
                IArray[Vector3] _21MeshVertices;// 4:VertexNeighbours-ext->3:MeshVertices 107827
                IArray[Vector3] _22Map;// 4:SelectByIndex->2:Map 107774
                IArray[Vector3] _23Combine;// 2:ArrayAdd-ext->2:Combine 107701
                Vector3 _24DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 107695
                Vector3 _25Aggregate;// 2:Sum->0:Aggregate 107694
                Int32 _26Count;// 8:AverageVector->3:Count 107698
                Single _27IntAsFloat;// 8:AverageVector->1:IntAsFloat 107697
                Vector3 _28DivideByScalar;// 8:AverageVector->5:DivideByScalar 107692
                _0VertexFaceLookup = VertexFaceLookup(_5Pass-through: TriMesh, x0);
                _1Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Constant;// 1:Three->0:Constant 107755
                    Int32 _1Multiply;// 2:MultiplyByThree->2:Multiply 107754
                    IArray[Int32] _2Unit;// 0:Array3->2:Unit 107752
                    Int32 _3One;// 3:PlusOne->1:One 107758
                    Int32 _4Add;// 3:PlusOne->0:Add 107757
                    IArray[Int32] _5Append;// 0:Array3->3:Append 107751
                    Int32 _6One;// 4:PlusOne->1:One 107761
                    Int32 _7Add;// 4:PlusOne->0:Add 107760
                    IArray[Int32] _8Append;// 0:Array3->6:Append 107750
                    IArray[Int32] _9MeshIndices;// 4:FaceToVertexIndices->7:MeshIndices 107762
                    IArray[Int32] _10Map;// 8:SelectByIndex->2:Map 107745
                    _0Constant = 3;
                    _1Multiply = Multiply(x0, _0Constant);
                    _2Unit = Unit(_1Multiply);
                    _3One = One();
                    _4Add = Add(_1Multiply, _3One);
                    _5Append = Append(_2Unit, _4Add);
                    _6One = One();
                    _7Add = Add(_4Add, _6One);
                    _8Append = Append(_5Append, _7Add);
                    _9MeshIndices = MeshIndices(_5Pass-through: TriMesh);
                    _10Map = Map(_8Append, (Int32 x0) => 
                      {
                        Int32 _0At;// 8:SelectByIndex->3:At 107746
                        _0At = At(_9MeshIndices, x0);
                        _0At;
                        });
                    _10Map;
                    };
                _2Map = Map(_0VertexFaceLookup, _1Pass-through: function1);
                _3Flatten = Flatten(_2Map);
                _4Sort = Sort(_3Flatten);
                _5Indices = Indices(_4Sort);
                _6Filter = Filter(_5Indices, (Int32 x0) => 
                  {
                    Int32 _0Zero;// 2:GreaterThanZero->1:Zero 107728
                    Boolean _1GreaterThan;// 2:GreaterThanZero->3:GreaterThan 107727
                    Boolean _8Not;// 6:RemoveDuplicates->4:Not 107722
                    _0Zero = Zero();
                    _1GreaterThan = GreaterThan(x0, _0Zero);
                    _8Not = Not(if (_1GreaterThan)
                      {
                        Int32 _2At;// 2:SameAsPreviousElement->6:At 107730
                        Int32 _3One;// 5:MinusOne->2:One 107734
                        Int32 _4Subtract;// 5:MinusOne->1:Subtract 107733
                        Int32 _5At;// 2:SameAsPreviousElement->7:At 107731
                        Boolean _6Equal;// 2:SameAsPreviousElement->3:Equal 107729
                        _2At = At(_4Sort, x0);
                        _3One = One();
                        _4Subtract = Subtract(x0, _3One);
                        _5At = At(_4Sort, _4Subtract);
                        _6Equal = Equal(_2At, _5At);
                        _6Equal;
                        }else
                      {
                        Boolean _7False;// 2:SameAsPreviousElement->8:False 107735
                        _7False = False();
                        _7False;
                        });
                    _8Not;
                    });
                _7Map = Map(_6Filter, (Int32 x0) => 
                  {
                    Int32 _0At;// 5:SelectByIndex->3:At 107718
                    _0At = At(_4Sort, x0);
                    _0At;
                    });
                _8MeshVertices = MeshVertices(_5Pass-through: TriMesh);
                _9Map = Map(_7Map, (Int32 x0) => 
                  {
                    Vector3 _0At;// 4:SelectByIndex->3:At 107711
                    _0At = At(_8MeshVertices, x0);
                    _0At;
                    });
                _10MeshVertices = MeshVertices(_5Pass-through: TriMesh);
                _11At = At(_10MeshVertices, x0);
                _12Map = Map(_9Map, (Vector3 x0) => 
                  {
                    Vector3 _0Subtract;// 5:VertexNeighbourDeltas-ext->9:Subtract 107764
                    _0Subtract = Subtract(_11At, x0);
                    _0Subtract;
                    });
                _13VertexFaceLookup = VertexFaceLookup(x0, x0);
                _14Pass-through: function1 = (Int32 x0) => 
                  {
                    Int32 _0Constant;// 1:Three->0:Constant 107819
                    Int32 _1Multiply;// 2:MultiplyByThree->2:Multiply 107818
                    IArray[Int32] _2Unit;// 0:Array3->2:Unit 107816
                    Int32 _3One;// 3:PlusOne->1:One 107822
                    Int32 _4Add;// 3:PlusOne->0:Add 107821
                    IArray[Int32] _5Append;// 0:Array3->3:Append 107815
                    Int32 _6One;// 4:PlusOne->1:One 107825
                    Int32 _7Add;// 4:PlusOne->0:Add 107824
                    IArray[Int32] _8Append;// 0:Array3->6:Append 107814
                    IArray[Int32] _9MeshIndices;// 4:FaceToVertexIndices->7:MeshIndices 107826
                    IArray[Int32] _10Map;// 8:SelectByIndex->2:Map 107809
                    _0Constant = 3;
                    _1Multiply = Multiply(x0, _0Constant);
                    _2Unit = Unit(_1Multiply);
                    _3One = One();
                    _4Add = Add(_1Multiply, _3One);
                    _5Append = Append(_2Unit, _4Add);
                    _6One = One();
                    _7Add = Add(_4Add, _6One);
                    _8Append = Append(_5Append, _7Add);
                    _9MeshIndices = MeshIndices(x0);
                    _10Map = Map(_8Append, (Int32 x0) => 
                      {
                        Int32 _0At;// 8:SelectByIndex->3:At 107810
                        _0At = At(_9MeshIndices, x0);
                        _0At;
                        });
                    _10Map;
                    };
                _15Map = Map(_13VertexFaceLookup, _14Pass-through: function1);
                _16Flatten = Flatten(_15Map);
                _17Sort = Sort(_16Flatten);
                _18Indices = Indices(_17Sort);
                _19Filter = Filter(_18Indices, (Int32 x0) => 
                  {
                    Int32 _0Zero;// 2:GreaterThanZero->1:Zero 107792
                    Boolean _1GreaterThan;// 2:GreaterThanZero->3:GreaterThan 107791
                    Boolean _8Not;// 6:RemoveDuplicates->4:Not 107786
                    _0Zero = Zero();
                    _1GreaterThan = GreaterThan(x0, _0Zero);
                    _8Not = Not(if (_1GreaterThan)
                      {
                        Int32 _2At;// 2:SameAsPreviousElement->6:At 107794
                        Int32 _3One;// 5:MinusOne->2:One 107798
                        Int32 _4Subtract;// 5:MinusOne->1:Subtract 107797
                        Int32 _5At;// 2:SameAsPreviousElement->7:At 107795
                        Boolean _6Equal;// 2:SameAsPreviousElement->3:Equal 107793
                        _2At = At(_17Sort, x0);
                        _3One = One();
                        _4Subtract = Subtract(x0, _3One);
                        _5At = At(_17Sort, _4Subtract);
                        _6Equal = Equal(_2At, _5At);
                        _6Equal;
                        }else
                      {
                        Boolean _7False;// 2:SameAsPreviousElement->8:False 107799
                        _7False = False();
                        _7False;
                        });
                    _8Not;
                    });
                _20Map = Map(_19Filter, (Int32 x0) => 
                  {
                    Int32 _0At;// 5:SelectByIndex->3:At 107782
                    _0At = At(_17Sort, x0);
                    _0At;
                    });
                _21MeshVertices = MeshVertices(x0);
                _22Map = Map(_20Map, (Int32 x0) => 
                  {
                    Vector3 _0At;// 4:SelectByIndex->3:At 107775
                    _0At = At(_21MeshVertices, x0);
                    _0At;
                    });
                _23Combine = Combine(_12Map, _22Map, (Vector3 x0, Vector3 x1) => 
                  {
                    Vector3 _0Add;// 2:ArrayAdd-ext->5:Add 107702
                    _0Add = Add(x0, x1);
                    _0Add;
                    });
                _24DefaultValueOfElement = DefaultValueOfElement(_23Combine);
                _25Aggregate = Aggregate(_23Combine, _24DefaultValueOfElement, (Vector3 x0, Vector3 x1) => 
                  {
                    Vector3 _0Add;// 2:Sum->2:Add 107696
                    _0Add = Add(x0, x1);
                    _0Add;
                    });
                _26Count = Count(_23Combine);
                _27IntAsFloat = IntAsFloat(_26Count);
                _28DivideByScalar = DivideByScalar(_25Aggregate, _27IntAsFloat);
                _28DivideByScalar;
                };
            _9Map = Map(_7Indices, _8Pass-through: function1);
            _10Combine = Combine(_0MeshVertices, _9Map, (Vector3 x0, Vector3 x1) => 
              {
                Vector3 _0Lerp;// 10:MeshMoveVerticesToward-ext->8:Lerp 107685
                _0Lerp = Lerp(x0, x1, relaxAmount);
                _0Lerp;
                });
            _11SetMeshVertices = SetMeshVertices(x0, _10Combine);
            _11SetMeshVertices;
            };
        _8Apply1 = Apply1(_7Pass-through: function1, x0);
        _9IgnoreSecond = IgnoreSecond(_8Apply1, x1);
        _9IgnoreSecond;
        });
    _0Repeat;
    }