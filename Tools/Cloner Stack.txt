(InstanceState state, TriMesh mesh, Int32 flux channel, Single maxDistanceFromTop, Single height offset, Int32 levels, Single height, Boolean create mesh, Single box radius) => 
  {
    MapChannel _0GetMapChannel;// 4:MatricesFromMapChannel.ext->9:GetMapChannel 54983
    IArray[Vector3] _1MapChannelVertexBuffer;// 4:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 54982
    Int32 _2Count;// 2:Slices->2:Count 54979
    Int32 _3Constant;// 4:MatricesFromMapChannel.ext->0:Constant 54984
    Int32 _4Divide;// 2:Slices->3:Divide 54978
    IArray[Int32] _5Range;// 2:Slices->4:Range 54977
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 54976
    IArray[Matrix] _7Map;// 4:MatricesFromMapChannel.ext->5:Map 54973
    IArray[Vector3] _8Map;// 1:MatrixPositions.ext->1:Map 55022
    BoundingBox _9BoxFromPoints;// 2:BoxFromPoints 55020
    IArray[Matrix] _10Filter;// 0:Filter 54970
    Boolean _11True;// 26:TranslateMatrices.ext->4:True 54968
    Vector3 _12ZAxis;// 27:AlongZAxis->3:ZAxis 55027
    Vector3 _13MultiplyByScalar;// 27:AlongZAxis->0:MultiplyByScalar 55026
    Matrix _14TranslationMatrix;// 26:TranslateMatrices.ext->2:TranslationMatrix 54969
    IArray[Matrix] _15Map;// 26:TranslateMatrices.ext->1:Map 54961
    Vector3 _16ZAxis;// 10:AlongZAxis->3:ZAxis 55043
    Vector3 _17MultiplyByScalar;// 10:AlongZAxis->0:MultiplyByScalar 55042
    IArray[IArray[Matrix]] _18GenerateN;// 8:GenerateN 54958
    IArray[Matrix] _19Flatten;// 15:Flatten 54957
    Func[Matrix, IArray[Vector3]] _20Pass-through: function1;// 0:Pass-through: function1 54943
    IArray[IArray[Vector3]] _21Map;// 5:FlatMap->4:Map 54945
    IArray[Vector3] _22Flatten;// 5:FlatMap->3:Flatten 54944
    IArray[Int32] _23MeshIndices;// 16:StoreMatricesInMapChannel.ext->0:MeshIndices 54954
    TriMesh _24SetMapChannel;// 16:StoreMatricesInMapChannel.ext->7:SetMapChannel 54941
    TriMesh _53IgnoreFirst;// 20:ClonerMeshAsBoxes.ext->7:IgnoreFirst 54812
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 54981
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 54980
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 54993
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 54994
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 54998
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 54997
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 54992
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 54995
        Int32 _6One;// 8:PlusOne->1:One 55002
        Int32 _7Add;// 8:PlusOne->0:Add 55001
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 54999
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 54991
        Int32 _10Constant;// 25:Three->0:Constant 54996
        Int32 _11One;// 9:PlusOne->1:One 55006
        Int32 _12Add;// 9:PlusOne->0:Add 55005
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 55003
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 54990
        Int32 _15One;// 10:PlusOne->1:One 55010
        Int32 _16Add;// 10:PlusOne->0:Add 55009
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 55007
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 54986
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8Map = Map(_7Map, (Matrix x0) => 
      {
        Vector3 _0GetMatrixTranslation;// 1:MatrixPositions.ext->2:GetMatrixTranslation 55023
        _0GetMatrixTranslation = GetMatrixTranslation(x0);
        _0GetMatrixTranslation;
        });
    _9BoxFromPoints = BoxFromPoints(_8Map);
    _10Filter = Filter(_7Map, (Matrix x0) => 
      {
        Vector3 _0BoxMax;// 13:MatrixNearBoxTop.ext->7:BoxMax 55017
        Single _1Z;// 13:MatrixNearBoxTop.ext->8:Z 55016
        Vector3 _2GetMatrixTranslation;// 13:MatrixNearBoxTop.ext->3:GetMatrixTranslation 55019
        Single _3Z;// 13:MatrixNearBoxTop.ext->6:Z 55018
        Single _4Subtract;// 13:MatrixNearBoxTop.ext->10:Subtract 55015
        Boolean _5LessThan;// 13:MatrixNearBoxTop.ext->11:LessThan 55014
        _0BoxMax = BoxMax(_9BoxFromPoints);
        _1Z = Z(_0BoxMax);
        _2GetMatrixTranslation = GetMatrixTranslation(x0);
        _3Z = Z(_2GetMatrixTranslation);
        _4Subtract = Subtract(_1Z, _3Z);
        _5LessThan = LessThan(_4Subtract, maxDistanceFromTop);
        _5LessThan;
        });
    _11True = True();
    _12ZAxis = ZAxis();
    _13MultiplyByScalar = MultiplyByScalar(_12ZAxis, height offset);
    _14TranslationMatrix = TranslationMatrix(_13MultiplyByScalar);
    _15Map = Map(_10Filter, (Matrix x0) => 
      {
        if (_11True)
          {
            Matrix _0Multiply;// 3:MatrixApplyTransform.ext->4:Multiply 54966
            _0Multiply = Multiply(_14TranslationMatrix, x0);
            _0Multiply;
            }else
          {
            Matrix _1Multiply;// 3:MatrixApplyTransform.ext->9:Multiply 54967
            _1Multiply = Multiply(x0, _14TranslationMatrix);
            _1Multiply;
            };
        });
    _16ZAxis = ZAxis();
    _17MultiplyByScalar = MultiplyByScalar(_16ZAxis, height);
    _18GenerateN = GenerateN(_15Map, levels, (IArray[Matrix] x0) => 
      {
        Boolean _0True;// 11:TranslateMatrices.ext->4:True 55039
        Matrix _1TranslationMatrix;// 11:TranslateMatrices.ext->2:TranslationMatrix 55040
        IArray[Matrix] _2Map;// 11:TranslateMatrices.ext->1:Map 55032
        _0True = True();
        _1TranslationMatrix = TranslationMatrix(_17MultiplyByScalar);
        _2Map = Map(x0, (Matrix x0) => 
          {
            if (_0True)
              {
                Matrix _0Multiply;// 3:MatrixApplyTransform.ext->4:Multiply 55037
                _0Multiply = Multiply(_1TranslationMatrix, x0);
                _0Multiply;
                }else
              {
                Matrix _1Multiply;// 3:MatrixApplyTransform.ext->9:Multiply 55038
                _1Multiply = Multiply(x0, _1TranslationMatrix);
                _1Multiply;
                };
            });
        _2Map;
        });
    _19Flatten = Flatten(_18GenerateN);
    _20Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 54949
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 54948
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 54947
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 54953
            Int32 _1Add;// 5:PlusOne->0:Add 54952
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 54950
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _21Map = Map(_19Flatten, _20Pass-through: function1);
    _22Flatten = Flatten(_21Map);
    _23MeshIndices = MeshIndices(mesh);
    _24SetMapChannel = SetMapChannel(mesh, flux channel, _22Flatten, _23MeshIndices);
    _53IgnoreFirst = IgnoreFirst(_24SetMapChannel, if (create mesh)
      {
        Int32 _25Constant;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->0:Constant 54820
        IArray[Int32] _26Range;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->1:Range 54819
        Int32 _27Two;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->4:Two 54821
        IArray[Int32] _28Skip;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->3:Skip 54818
        IArray[Int32] _29Filter;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->13:Filter 54817
        MapChannel _30GetMapChannel;// 34:MatricesFromMapChannel.ext->9:GetMapChannel 54879
        IArray[Vector3] _31MapChannelVertexBuffer;// 34:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 54878
        Int32 _32Count;// 2:Slices->2:Count 54875
        Int32 _33Constant;// 34:MatricesFromMapChannel.ext->0:Constant 54880
        Int32 _34Divide;// 2:Slices->3:Divide 54874
        IArray[Int32] _35Range;// 2:Slices->4:Range 54873
        IArray[IArray[Vector3]] _36Map;// 2:Slices->5:Map 54872
        IArray[Matrix] _37Map;// 34:MatricesFromMapChannel.ext->5:Map 54869
        Single _38Constant;// 1:Origin->0:Constant 54937
        Vector3 _39Vector3;// 1:Origin->1:Vector3 54936
        BoundingSphere _40Sphere;// 0:BoxFromPointAndRadius->3:Sphere 54935
        BoundingBox _41BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 54934
        QuadMesh _42BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 54930
        TriMesh _43Triangulate;// 29:BoxTriMesh->3:Triangulate 54929
        IArray[Int32] _44MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 54920
        IArray[Int32] _45Indices;// 4:HideEveryThirdEdge->8:Indices 54919
        Int32 _46Constant;// 4:HideEveryThirdEdge->0:Constant 54927
        Int32 _47Constant;// 4:HideEveryThirdEdge->0:Constant 54928
        IArray[Boolean] _48Map;// 4:HideEveryThirdEdge->5:Map 54918
        TriMesh _49SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 54917
        IArray[TriMesh] _50Map;// 20:ClonerMeshAsBoxes.ext->16:Map 54866
        TriMesh _51CombineAllMeshes;// 20:ClonerMeshAsBoxes.ext->2:CombineAllMeshes 54865
        TriMesh _52Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->6:Aggregate 54816
        _25Constant = 100;
        _26Range = Range(_25Constant);
        _27Two = Two();
        _28Skip = Skip(_26Range, _27Two);
        _29Filter = Filter(_28Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 54834
            Boolean _1Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 54833
            MapChannel _4Pass-through: any;// 0:Pass-through: any 54825
            Object _5Null;// 6:IsNullFix2.ext->3:Null 54829
            Object _6As;// 6:IsNullFix2.ext->23:As 54827
            Boolean _7Equal;// 6:IsNullFix2.ext->1:Equal 54826
            Boolean _8Not;// 12:MapChannelExists.ext->4:Not 54824
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _4Pass-through: any = if (_1Equal)
              {
                MapChannel _2TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 54835
                _2TopologyChannel = TopologyChannel(_24SetMapChannel);
                _2TopologyChannel;
                }else
              {
                MapChannel _3GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 54836
                _3GetMapChannel = GetMapChannel(_24SetMapChannel, x0);
                _3GetMapChannel;
                };
            _5Null = Null();
            _6As = As(_4Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 54828
                _0IgnoreFirst = IgnoreFirst(x0, _5Null);
                _0IgnoreFirst;
                });
            _7Equal = Equal(_6As, _5Null);
            _8Not = Not(_7Equal);
            _8Not;
            });
        _30GetMapChannel = GetMapChannel(_24SetMapChannel, flux channel);
        _31MapChannelVertexBuffer = MapChannelVertexBuffer(_30GetMapChannel);
        _32Count = Count(_31MapChannelVertexBuffer);
        _33Constant = 4;
        _34Divide = Divide(_32Count, _33Constant);
        _35Range = Range(_34Divide);
        _36Map = Map(_35Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 54877
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 54876
            _0Multiply = Multiply(_33Constant, x0);
            _1Slice = Slice(_31MapChannelVertexBuffer, _0Multiply, _33Constant);
            _1Slice;
            });
        _37Map = Map(_36Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 54889
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 54890
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 54894
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 54893
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 54888
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 54891
            Int32 _6One;// 8:PlusOne->1:One 54898
            Int32 _7Add;// 8:PlusOne->0:Add 54897
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 54895
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 54887
            Int32 _10Constant;// 25:Three->0:Constant 54892
            Int32 _11One;// 9:PlusOne->1:One 54902
            Int32 _12Add;// 9:PlusOne->0:Add 54901
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 54899
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 54886
            Int32 _15One;// 10:PlusOne->1:One 54906
            Int32 _16Add;// 10:PlusOne->0:Add 54905
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 54903
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 54882
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _38Constant = 0;
        _39Vector3 = Vector3(_38Constant, _38Constant, _38Constant);
        _40Sphere = Sphere(_39Vector3, box radius);
        _41BoxFromSphere = BoxFromSphere(_40Sphere);
        _42BoxQuadMesh = BoxQuadMesh(_41BoxFromSphere);
        _43Triangulate = Triangulate(_42BoxQuadMesh);
        _44MeshIndices = MeshIndices(_43Triangulate);
        _45Indices = Indices(_44MeshIndices);
        _46Constant = 3;
        _47Constant = 2;
        _48Map = Map(_45Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 54926
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 54925
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 54921
            _0Modulo = Modulo(x0, _46Constant);
            _1Equal = Equal(_0Modulo, _47Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _49SetVisibleEdges = SetVisibleEdges(_43Triangulate, _48Map);
        _50Map = Map(_37Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 54913
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 54910
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 54912
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 54911
            _0MeshVertices = MeshVertices(_49SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 54914
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_49SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _51CombineAllMeshes = CombineAllMeshes(_50Map);
        _52Aggregate = Aggregate(_29Filter, _51CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer.ext->10:TryCatch 54840
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->7:IgnoreFirst 54862
                Int32 _1Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 54854
                Boolean _2Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 54853
                MapChannel _5Pass-through: any;// 0:Pass-through: any 54845
                Object _6Null;// 6:IsNullFix2.ext->3:Null 54849
                Object _7As;// 6:IsNullFix2.ext->23:As 54847
                Boolean _8Equal;// 6:IsNullFix2.ext->1:Equal 54846
                Boolean _9Not;// 5:MapChannelExists.ext->4:Not 54844
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _5Pass-through: any = if (_2Equal)
                  {
                    MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 54855
                    _3TopologyChannel = TopologyChannel(_24SetMapChannel);
                    _3TopologyChannel;
                    }else
                  {
                    MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 54856
                    _4GetMapChannel = GetMapChannel(_24SetMapChannel, _0IgnoreFirst);
                    _4GetMapChannel;
                    };
                _6Null = Null();
                _7As = As(_5Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 54848
                    _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                    _0IgnoreFirst;
                    });
                _8Equal = Equal(_7As, _6Null);
                _9Not = Not(_8Equal);
                if (_9Not)
                  {
                    MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->1:GetMapChannel 54859
                    IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer.ext->8:MapChannelVertexBuffer 54858
                    IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer.ext->0:MeshIndices 54860
                    TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->7:SetMapChannel 54857
                    _10GetMapChannel = GetMapChannel(_24SetMapChannel, _0IgnoreFirst);
                    _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                    _12MeshIndices = MeshIndices(x0);
                    _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                    _13SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer.ext->11:IgnoreFirst 54861
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _52Aggregate;
        }else
      {
        _24SetMapChannel;
        });
    _53IgnoreFirst;
    }