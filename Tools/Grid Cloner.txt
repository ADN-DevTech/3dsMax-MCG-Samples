(InstanceState state, Single total x, Single total y, Single total z, Int32 channel, Int32 grid_y, Int32 grid_x, Int32 grid_z, Single box radius) => 
  {
    Vector3 _0Vector3;// 6:Vector3 119417
    Single _1Constant;// 1:BoxFromExtent-ext->0:Constant 119416
    Vector3 _2MultiplyByScalar;// 1:BoxFromExtent-ext->1:MultiplyByScalar 119415
    Vector3 _3Negate;// 1:BoxFromExtent-ext->3:Negate 119414
    BoundingBox _4Box;// 1:BoxFromExtent-ext->4:Box 119413
    QuadMesh _5BoxQuadMesh;// 14:BoxTriMesh->2:BoxQuadMesh 119411
    TriMesh _6Triangulate;// 14:BoxTriMesh->3:Triangulate 119410
    IArray[Int32] _7MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 119401
    IArray[Int32] _8Indices;// 4:HideEveryThirdEdge->8:Indices 119400
    Int32 _9Constant;// 4:HideEveryThirdEdge->0:Constant 119408
    Int32 _10Constant;// 4:HideEveryThirdEdge->0:Constant 119409
    IArray[Boolean] _11Map;// 4:HideEveryThirdEdge->5:Map 119399
    TriMesh _12SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 119398
    Int32 _13One;// 10:PlusOne->1:One 119458
    Int32 _14Add;// 10:PlusOne->0:Add 119457
    IArray[Single] _15RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 119454
    Vector3 _16BoxMin;// 0:SubdivideBoxAlongDiagonal->2:BoxMin 119459
    Vector3 _17BoxMax;// 0:SubdivideBoxAlongDiagonal->3:BoxMax 119460
    Func[Single, Vector3] _18Pass-through: function1;// 0:Pass-through: function1 119452
    IArray[Vector3] _19Map;// 5:SampleLerp->3:Map 119453
    Int32 _20Count;// 3:LastIndex->2:Count 119447
    Int32 _21One;// 3:MinusOne->2:One 119446
    Int32 _22Subtract;// 3:MinusOne->1:Subtract 119445
    IArray[Vector3] _23Take;// 6:DropLast->2:Take 119442
    Int32 _24One;// 5:SkipOne->2:One 119463
    IArray[Vector3] _25Skip;// 5:SkipOne->3:Skip 119462
    IArray[BoundingBox] _26Combine;// 0:SubdivideBoxAlongDiagonal->7:Combine 119440
    IArray[BoundingBox] _27Map;// 4:SubdivideBoxAlongX->1:Map 119437
    Func[BoundingBox, IArray[BoundingBox]] _28Pass-through: function1;// 0:Pass-through: function1 119432
    IArray[IArray[BoundingBox]] _29Map;// 7:FlatMap->4:Map 119434
    IArray[BoundingBox] _30Flatten;// 7:FlatMap->3:Flatten 119433
    Func[BoundingBox, IArray[BoundingBox]] _31Pass-through: function1;// 0:Pass-through: function1 119428
    IArray[IArray[BoundingBox]] _32Map;// 8:FlatMap->4:Map 119430
    IArray[BoundingBox] _33Flatten;// 8:FlatMap->3:Flatten 119429
    IArray[Matrix] _34Map;// 2:Map 119422
    Func[Matrix, IArray[Vector3]] _35Pass-through: function1;// 0:Pass-through: function1 119384
    IArray[IArray[Vector3]] _36Map;// 5:FlatMap->4:Map 119386
    IArray[Vector3] _37Flatten;// 5:FlatMap->3:Flatten 119385
    IArray[Int32] _38MeshIndices;// 13:StoreMatricesInMapChannel-ext->0:MeshIndices 119395
    TriMesh _39SetMapChannel;// 13:StoreMatricesInMapChannel-ext->7:SetMapChannel 119382
    Int32 _40Constant;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->0:Constant 119258
    IArray[Int32] _41Range;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->1:Range 119257
    Int32 _42Two;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->4:Two 119259
    IArray[Int32] _43Skip;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->3:Skip 119256
    IArray[Int32] _44Filter;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->13:Filter 119255
    MapChannel _45GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 119317
    IArray[Vector3] _46MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 119316
    Int32 _47Count;// 2:Slices->2:Count 119313
    Int32 _48Constant;// 34:MatricesFromMapChannel-ext->0:Constant 119318
    Int32 _49Divide;// 2:Slices->3:Divide 119312
    IArray[Int32] _50Range;// 2:Slices->4:Range 119311
    IArray[IArray[Vector3]] _51Map;// 2:Slices->5:Map 119310
    IArray[Matrix] _52Map;// 34:MatricesFromMapChannel-ext->5:Map 119307
    Single _53Constant;// 1:Origin->0:Constant 119375
    Vector3 _54Vector3;// 1:Origin->1:Vector3 119374
    Single _55Constant;// 3:DivideByTwoFloat->0:Constant 119378
    Single _56Divide;// 3:DivideByTwoFloat->2:Divide 119377
    BoundingSphere _57Sphere;// 0:BoxFromPointAndRadius->3:Sphere 119373
    BoundingBox _58BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 119372
    QuadMesh _59BoxQuadMesh;// 3:CubeMesh-ext->5:BoxQuadMesh 119368
    TriMesh _60Triangulate;// 7:QuadToTriMesh-ext->4:Triangulate 119356
    IArray[Int32] _61MeshIndices;// 7:QuadToTriMesh-ext->3:MeshIndices 119359
    IArray[Int32] _62Indices;// 7:QuadToTriMesh-ext->8:Indices 119358
    Int32 _63Constant;// 7:QuadToTriMesh-ext->0:Constant 119364
    Int32 _64Constant;// 7:QuadToTriMesh-ext->0:Constant 119365
    Int32 _65Constant;// 7:QuadToTriMesh-ext->0:Constant 119367
    IArray[Boolean] _66Map;// 7:QuadToTriMesh-ext->5:Map 119357
    TriMesh _67SetVisibleEdges;// 7:QuadToTriMesh-ext->9:SetVisibleEdges 119355
    IArray[TriMesh] _68Map;// 18:ClonerMeshAsBoxes-ext->16:Map 119304
    TriMesh _69CombineAllMeshes;// 18:ClonerMeshAsBoxes-ext->2:CombineAllMeshes 119303
    TriMesh _70Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->6:Aggregate 119254
    TriMesh _71IgnoreFirst;// 18:ClonerMeshAsBoxes-ext->7:IgnoreFirst 119251
    _0Vector3 = Vector3(total x, total y, total z);
    _1Constant = 0.5;
    _2MultiplyByScalar = MultiplyByScalar(_0Vector3, _1Constant);
    _3Negate = Negate(_2MultiplyByScalar);
    _4Box = Box(_3Negate, _2MultiplyByScalar);
    _5BoxQuadMesh = BoxQuadMesh(_4Box);
    _6Triangulate = Triangulate(_5BoxQuadMesh);
    _7MeshIndices = MeshIndices(_6Triangulate);
    _8Indices = Indices(_7MeshIndices);
    _9Constant = 3;
    _10Constant = 2;
    _11Map = Map(_8Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 119407
        Boolean _1Equal;// 6:ModuloEquals->4:Equal 119406
        Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 119402
        _0Modulo = Modulo(x0, _9Constant);
        _1Equal = Equal(_0Modulo, _10Constant);
        _2Not = Not(_1Equal);
        _2Not;
        });
    _12SetVisibleEdges = SetVisibleEdges(_6Triangulate, _11Map);
    _13One = One();
    _14Add = Add(grid_y, _13One);
    _15RangeInclusiveFloat = RangeInclusiveFloat(_14Add);
    _16BoxMin = BoxMin(_4Box);
    _17BoxMax = BoxMax(_4Box);
    _18Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 119455
        _0Lerp = Lerp(_16BoxMin, _17BoxMax, x0);
        _0Lerp;
        };
    _19Map = Map(_15RangeInclusiveFloat, _18Pass-through: function1);
    _20Count = Count(_19Map);
    _21One = One();
    _22Subtract = Subtract(_20Count, _21One);
    _23Take = Take(_19Map, _22Subtract);
    _24One = One();
    _25Skip = Skip(_19Map, _24One);
    _26Combine = Combine(_23Take, _25Skip, (Vector3 x0, Vector3 x1) => 
      {
        BoundingBox _0Box;// 0:SubdivideBoxAlongDiagonal->8:Box 119464
        _0Box = Box(x0, x1);
        _0Box;
        });
    _27Map = Map(_26Combine, (BoundingBox x0) => 
      {
        Vector3 _0BoxMin;// 2:MatchBoxX->7:BoxMin 119470
        Single _1X;// 2:MatchBoxX->4:X 119469
        Vector3 _2BoxMin;// 2:MatchBoxX->5:BoxMin 119472
        Single _3Y;// 2:MatchBoxX->8:Y 119471
        Single _4Z;// 2:MatchBoxX->0:Z 119473
        Vector3 _5Vector3;// 2:MatchBoxX->10:Vector3 119468
        Vector3 _6BoxMax;// 2:MatchBoxX->9:BoxMax 119476
        Single _7X;// 2:MatchBoxX->13:X 119475
        Vector3 _8BoxMax;// 2:MatchBoxX->15:BoxMax 119478
        Single _9Y;// 2:MatchBoxX->11:Y 119477
        Single _10Z;// 2:MatchBoxX->12:Z 119479
        Vector3 _11Vector3;// 2:MatchBoxX->6:Vector3 119474
        BoundingBox _12Box;// 2:MatchBoxX->14:Box 119467
        _0BoxMin = BoxMin(x0);
        _1X = X(_0BoxMin);
        _2BoxMin = BoxMin(_4Box);
        _3Y = Y(_2BoxMin);
        _4Z = Z(_2BoxMin);
        _5Vector3 = Vector3(_1X, _3Y, _4Z);
        _6BoxMax = BoxMax(x0);
        _7X = X(_6BoxMax);
        _8BoxMax = BoxMax(_4Box);
        _9Y = Y(_8BoxMax);
        _10Z = Z(_8BoxMax);
        _11Vector3 = Vector3(_7X, _9Y, _10Z);
        _12Box = Box(_5Vector3, _11Vector3);
        _12Box;
        });
    _28Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 119503
        Int32 _1Add;// 10:PlusOne->0:Add 119502
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 119499
        Vector3 _3BoxMin;// 2:SubdivideBoxAlongDiagonal->2:BoxMin 119504
        Vector3 _4BoxMax;// 2:SubdivideBoxAlongDiagonal->3:BoxMax 119505
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 119497
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 119498
        Int32 _7Count;// 3:LastIndex->2:Count 119492
        Int32 _8One;// 3:MinusOne->2:One 119491
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 119490
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 119487
        Int32 _11One;// 5:SkipOne->2:One 119508
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 119507
        IArray[BoundingBox] _13Combine;// 2:SubdivideBoxAlongDiagonal->7:Combine 119485
        IArray[BoundingBox] _14Map;// 5:SubdivideBoxAlongY->0:Map 119482
        _0One = One();
        _1Add = Add(grid_x, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 119500
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 2:SubdivideBoxAlongDiagonal->8:Box 119509
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxY->5:BoxMin 119515
            Single _1X;// 5:MatchBoxY->4:X 119514
            Vector3 _2BoxMin;// 5:MatchBoxY->11:BoxMin 119517
            Single _3Y;// 5:MatchBoxY->9:Y 119516
            Single _4Z;// 5:MatchBoxY->0:Z 119518
            Vector3 _5Vector3;// 5:MatchBoxY->8:Vector3 119513
            Vector3 _6BoxMax;// 5:MatchBoxY->6:BoxMax 119521
            Single _7X;// 5:MatchBoxY->14:X 119520
            Vector3 _8BoxMax;// 5:MatchBoxY->10:BoxMax 119523
            Single _9Y;// 5:MatchBoxY->13:Y 119522
            Single _10Z;// 5:MatchBoxY->12:Z 119524
            Vector3 _11Vector3;// 5:MatchBoxY->15:Vector3 119519
            BoundingBox _12Box;// 5:MatchBoxY->7:Box 119512
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2BoxMin = BoxMin(x0);
            _3Y = Y(_2BoxMin);
            _4Z = Z(_0BoxMin);
            _5Vector3 = Vector3(_1X, _3Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8BoxMax = BoxMax(x0);
            _9Y = Y(_8BoxMax);
            _10Z = Z(_6BoxMax);
            _11Vector3 = Vector3(_7X, _9Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _29Map = Map(_27Map, _28Pass-through: function1);
    _30Flatten = Flatten(_29Map);
    _31Pass-through: function1 = (BoundingBox x0) => 
      {
        Int32 _0One;// 10:PlusOne->1:One 119548
        Int32 _1Add;// 10:PlusOne->0:Add 119547
        IArray[Single] _2RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 119544
        Vector3 _3BoxMin;// 3:SubdivideBoxAlongDiagonal->2:BoxMin 119549
        Vector3 _4BoxMax;// 3:SubdivideBoxAlongDiagonal->3:BoxMax 119550
        Func[Single, Vector3] _5Pass-through: function1;// 0:Pass-through: function1 119542
        IArray[Vector3] _6Map;// 5:SampleLerp->3:Map 119543
        Int32 _7Count;// 3:LastIndex->2:Count 119537
        Int32 _8One;// 3:MinusOne->2:One 119536
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 119535
        IArray[Vector3] _10Take;// 6:DropLast->2:Take 119532
        Int32 _11One;// 5:SkipOne->2:One 119553
        IArray[Vector3] _12Skip;// 5:SkipOne->3:Skip 119552
        IArray[BoundingBox] _13Combine;// 3:SubdivideBoxAlongDiagonal->7:Combine 119530
        IArray[BoundingBox] _14Map;// 6:SubdivideBoxAlongZ->0:Map 119527
        _0One = One();
        _1Add = Add(grid_z, _0One);
        _2RangeInclusiveFloat = RangeInclusiveFloat(_1Add);
        _3BoxMin = BoxMin(x0);
        _4BoxMax = BoxMax(x0);
        _5Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0Lerp;// 4:ArrayOfLerpedVectors->3:Lerp 119545
            _0Lerp = Lerp(_3BoxMin, _4BoxMax, x0);
            _0Lerp;
            };
        _6Map = Map(_2RangeInclusiveFloat, _5Pass-through: function1);
        _7Count = Count(_6Map);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10Take = Take(_6Map, _9Subtract);
        _11One = One();
        _12Skip = Skip(_6Map, _11One);
        _13Combine = Combine(_10Take, _12Skip, (Vector3 x0, Vector3 x1) => 
          {
            BoundingBox _0Box;// 3:SubdivideBoxAlongDiagonal->8:Box 119554
            _0Box = Box(x0, x1);
            _0Box;
            });
        _14Map = Map(_13Combine, (BoundingBox x0) => 
          {
            Vector3 _0BoxMin;// 5:MatchBoxZ->7:BoxMin 119560
            Single _1X;// 5:MatchBoxZ->6:X 119559
            Single _2Y;// 5:MatchBoxZ->10:Y 119561
            Vector3 _3BoxMin;// 5:MatchBoxZ->4:BoxMin 119563
            Single _4Z;// 5:MatchBoxZ->11:Z 119562
            Vector3 _5Vector3;// 5:MatchBoxZ->9:Vector3 119558
            Vector3 _6BoxMax;// 5:MatchBoxZ->8:BoxMax 119566
            Single _7X;// 5:MatchBoxZ->14:X 119565
            Single _8Y;// 5:MatchBoxZ->13:Y 119567
            Vector3 _9BoxMax;// 5:MatchBoxZ->3:BoxMax 119569
            Single _10Z;// 5:MatchBoxZ->12:Z 119568
            Vector3 _11Vector3;// 5:MatchBoxZ->15:Vector3 119564
            BoundingBox _12Box;// 5:MatchBoxZ->2:Box 119557
            _0BoxMin = BoxMin(x0);
            _1X = X(_0BoxMin);
            _2Y = Y(_0BoxMin);
            _3BoxMin = BoxMin(x0);
            _4Z = Z(_3BoxMin);
            _5Vector3 = Vector3(_1X, _2Y, _4Z);
            _6BoxMax = BoxMax(x0);
            _7X = X(_6BoxMax);
            _8Y = Y(_6BoxMax);
            _9BoxMax = BoxMax(x0);
            _10Z = Z(_9BoxMax);
            _11Vector3 = Vector3(_7X, _8Y, _10Z);
            _12Box = Box(_5Vector3, _11Vector3);
            _12Box;
            });
        _14Map;
        };
    _32Map = Map(_30Flatten, _31Pass-through: function1);
    _33Flatten = Flatten(_32Map);
    _34Map = Map(_33Flatten, (BoundingBox x0) => 
      {
        BoundingSphere _0SphereFromBox;// 7:BoundingBoxCenter->2:SphereFromBox 119576
        Vector3 _1SphereCenter;// 7:BoundingBoxCenter->3:SphereCenter 119575
        Matrix _2TranslationMatrix;// 21:TranslationMatrix 119573
        _0SphereFromBox = SphereFromBox(x0);
        _1SphereCenter = SphereCenter(_0SphereFromBox);
        _2TranslationMatrix = TranslationMatrix(_1SphereCenter);
        _2TranslationMatrix;
        });
    _35Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 119390
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 119389
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 119388
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 119394
            Int32 _1Add;// 5:PlusOne->0:Add 119393
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 119391
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _36Map = Map(_34Map, _35Pass-through: function1);
    _37Flatten = Flatten(_36Map);
    _38MeshIndices = MeshIndices(_12SetVisibleEdges);
    _39SetMapChannel = SetMapChannel(_12SetVisibleEdges, channel, _37Flatten, _38MeshIndices);
    _40Constant = 100;
    _41Range = Range(_40Constant);
    _42Two = Two();
    _43Skip = Skip(_41Range, _42Two);
    _44Filter = Filter(_43Skip, (Int32 x0) => 
      {
        Int32 _0Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 119272
        Boolean _1Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 119271
        MapChannel _4Pass-through: any;// 0:Pass-through: any 119263
        Object _5Null;// 6:IsNullFix2-ext->3:Null 119267
        Object _6As;// 6:IsNullFix2-ext->23:As 119265
        Boolean _7Equal;// 6:IsNullFix2-ext->1:Equal 119264
        Boolean _8Not;// 12:MapChannelExists-ext->4:Not 119262
        _0Constant = -3;
        _1Equal = Equal(x0, _0Constant);
        _4Pass-through: any = if (_1Equal)
          {
            MapChannel _2TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 119273
            _2TopologyChannel = TopologyChannel(_39SetMapChannel);
            _2TopologyChannel;
            }else
          {
            MapChannel _3GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 119274
            _3GetMapChannel = GetMapChannel(_39SetMapChannel, x0);
            _3GetMapChannel;
            };
        _5Null = Null();
        _6As = As(_4Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 119266
            _0IgnoreFirst = IgnoreFirst(x0, _5Null);
            _0IgnoreFirst;
            });
        _7Equal = Equal(_6As, _5Null);
        _8Not = Not(_7Equal);
        _8Not;
        });
    _45GetMapChannel = GetMapChannel(_39SetMapChannel, channel);
    _46MapChannelVertexBuffer = MapChannelVertexBuffer(_45GetMapChannel);
    _47Count = Count(_46MapChannelVertexBuffer);
    _48Constant = 4;
    _49Divide = Divide(_47Count, _48Constant);
    _50Range = Range(_49Divide);
    _51Map = Map(_50Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 119315
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 119314
        _0Multiply = Multiply(_48Constant, x0);
        _1Slice = Slice(_46MapChannelVertexBuffer, _0Multiply, _48Constant);
        _1Slice;
        });
    _52Map = Map(_51Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 119327
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 119328
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 119332
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 119331
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 119326
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 119329
        Int32 _6One;// 8:PlusOne->1:One 119336
        Int32 _7Add;// 8:PlusOne->0:Add 119335
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 119333
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 119325
        Int32 _10Constant;// 25:Three->0:Constant 119330
        Int32 _11One;// 9:PlusOne->1:One 119340
        Int32 _12Add;// 9:PlusOne->0:Add 119339
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 119337
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 119324
        Int32 _15One;// 10:PlusOne->1:One 119344
        Int32 _16Add;// 10:PlusOne->0:Add 119343
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 119341
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 119320
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _53Constant = 0;
    _54Vector3 = Vector3(_53Constant, _53Constant, _53Constant);
    _55Constant = 2;
    _56Divide = Divide(box radius, _55Constant);
    _57Sphere = Sphere(_54Vector3, _56Divide);
    _58BoxFromSphere = BoxFromSphere(_57Sphere);
    _59BoxQuadMesh = BoxQuadMesh(_58BoxFromSphere);
    _60Triangulate = Triangulate(_59BoxQuadMesh);
    _61MeshIndices = MeshIndices(_60Triangulate);
    _62Indices = Indices(_61MeshIndices);
    _63Constant = 6;
    _64Constant = 2;
    _65Constant = 3;
    _66Map = Map(_62Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 7:QuadToTriMesh-ext->14:Modulo 119363
        Boolean _1Equal;// 7:QuadToTriMesh-ext->7:Equal 119362
        Boolean _2Equal;// 7:QuadToTriMesh-ext->13:Equal 119366
        Boolean _3OrElse;// 7:QuadToTriMesh-ext->12:OrElse 119361
        Boolean _4Not;// 7:QuadToTriMesh-ext->10:Not 119360
        _0Modulo = Modulo(x0, _63Constant);
        _1Equal = Equal(_0Modulo, _64Constant);
        _2Equal = Equal(_0Modulo, _65Constant);
        _3OrElse = OrElse(_1Equal, _2Equal);
        _4Not = Not(_3OrElse);
        _4Not;
        });
    _67SetVisibleEdges = SetVisibleEdges(_60Triangulate, _66Map);
    _68Map = Map(_52Map, (Matrix x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 119351
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 119348
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 119350
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 119349
        _0MeshVertices = MeshVertices(_67SetVisibleEdges);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 36:TransformMesh->0:Transform 119352
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(_67SetVisibleEdges, _2Map);
        _3SetMeshVertices;
        });
    _69CombineAllMeshes = CombineAllMeshes(_68Map);
    _70Aggregate = Aggregate(_44Filter, _69CombineAllMeshes, (TriMesh x0, Int32 x1) => 
      {
        TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer-ext->10:TryCatch 119278
        _0TryCatch = TryCatch(() => 
          {
            Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->7:IgnoreFirst 119300
            Int32 _1Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 119292
            Boolean _2Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 119291
            MapChannel _5Pass-through: any;// 0:Pass-through: any 119283
            Object _6Null;// 6:IsNullFix2-ext->3:Null 119287
            Object _7As;// 6:IsNullFix2-ext->23:As 119285
            Boolean _8Equal;// 6:IsNullFix2-ext->1:Equal 119284
            Boolean _9Not;// 5:MapChannelExists-ext->4:Not 119282
            _0IgnoreFirst = IgnoreFirst(x0, x1);
            _1Constant = -3;
            _2Equal = Equal(_0IgnoreFirst, _1Constant);
            _5Pass-through: any = if (_2Equal)
              {
                MapChannel _3TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 119293
                _3TopologyChannel = TopologyChannel(_39SetMapChannel);
                _3TopologyChannel;
                }else
              {
                MapChannel _4GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 119294
                _4GetMapChannel = GetMapChannel(_39SetMapChannel, _0IgnoreFirst);
                _4GetMapChannel;
                };
            _6Null = Null();
            _7As = As(_5Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 119286
                _0IgnoreFirst = IgnoreFirst(x0, _6Null);
                _0IgnoreFirst;
                });
            _8Equal = Equal(_7As, _6Null);
            _9Not = Not(_8Equal);
            if (_9Not)
              {
                MapChannel _10GetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->1:GetMapChannel 119297
                IArray[Vector3] _11MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer-ext->8:MapChannelVertexBuffer 119296
                IArray[Int32] _12MeshIndices;// 10:MapChannelCopyVertexBuffer-ext->0:MeshIndices 119298
                TriMesh _13SetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->7:SetMapChannel 119295
                _10GetMapChannel = GetMapChannel(_39SetMapChannel, _0IgnoreFirst);
                _11MapChannelVertexBuffer = MapChannelVertexBuffer(_10GetMapChannel);
                _12MeshIndices = MeshIndices(x0);
                _13SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _11MapChannelVertexBuffer, _12MeshIndices);
                _13SetMapChannel;
                }else
              {
                x0;
                };
            }, (Exception x0) => 
          {
            TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer-ext->11:IgnoreFirst 119299
            _0IgnoreFirst = IgnoreFirst(x0, x0);
            _0IgnoreFirst;
            });
        _0TryCatch;
        });
    _71IgnoreFirst = IgnoreFirst(_39SetMapChannel, _70Aggregate);
    _71IgnoreFirst;
    }