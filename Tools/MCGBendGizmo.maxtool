<?xml version="1.0" encoding="utf-8"?>
<graph version="0.50" uuid="9b65a586-4e58-4dcf-a122-86e0a0d97067">
  <meta_info>
    <graph_version guid="64d81665-0afa-4238-bfed-2e23cabe3b8c" number="0.0.11" />
    <customui>--*****************************************************************************************************************
-- MCG Bend Gizmo Rollout
-----------------------------------
-- The following rollout template is intended to be copied into the Custom UI definition of an MCG .maxtool file:
-- Edit &gt; Edit Graph Properties &gt; Custom UI &gt; Paste this code.
-- 
-- To adapt this template to your own needs, modify the code contained within the "Modifier Creation and Parameter Wiring"
-- section below. This rollout template assumes the parameters exposed by your gizmo match the ones defined on the 
-- modifier (so that they may be wired correctly).
--*****************************************************************************************************************
rollout params "Parameters" width:160 height:128
(	
	-- Define a  filter function to ensure the pick buttons below can only select geometry.
	fn IsGeometry obj = (superclassof obj == GeometryClass)
	
	-- The string below will be replaced by the auto-generated UI definitions from MCG.
	-- This way, we do not have to redefine the spinners and other UI elements expected by the plugin's parameter block.
	&lt;&lt;ParamUIDefs&gt;&gt;
	
	-- Add the custom UI elements after the MCG UI definitions.
	pickbutton 'updatePickBtn' "Update Box from Object" width:155 height:16 message:"Pick a Mesh" filter:IsGeometry align:#left
	pickbutton 'applyPickBtn' "Apply to Object" width:155 height:16 message:"Pick a Mesh" filter:IsGeometry align:#left
	
	-- The string below will be replaced by the auto-generated UI element event handlers from MCG.
	&lt;&lt;RolloutParamsHandlers&gt;&gt;
	
	-- Update the box corners with the given object's bounding box. This affects how the spline is generated within MCG.
	fn UpdateBoundingBoxParams obj = (
		bb = nodeGetBoundingBox obj obj.transform
		min_point = bb[1]
		max_point = bb[2]
		
		-- minCorner and maxCorner correspond to the Vector3 parameters defined inside the MCG graph,
		-- which subsequently translate into entries inside this plugin's parameter block.
		minCorner.X = min_point[1]
		minCorner.Y = min_point[2]
		minCorner.Z = min_point[3]
		
		maxCorner.X = max_point[1]
		maxCorner.Y = max_point[2]
		maxCorner.Z = max_point[3]
	)
	
	-- Apply the modifier to the given object.
	fn ApplyMCGModifier obj = (
		
		-- Update the local bounding box parameters.
		UpdateBoundingBoxParams obj
		
		--*****************************************************************************************************************
		-- Modifier Creation and Parameter Wiring                                                                                                               *
		--*****************************************************************************************************************
		-- Create an instance of the associated modifier.
		-- If you are using this file as a template, change this to an instance of your custom modifier
		newMod = MCGBend() 
		
		-- Wire the current gizmo's parameters to the modifier's parameters.
		-- If you are using this file as a template, change the parameter wiring below to suit the parameters on your own modifier.
		--
		-- (!) Note: Due to a recently discovered issue (from Max 2014 through 2017),  paramWire.connect2way causes a crash
		-- when a wired object is cloned (this applies to non-MCG objects as well). As a workaround, we're using the more stable 
		-- paramWire.connect instead. The limitation is that the modifier's parameters will now be driven by the gizmo exclusively.
 		paramWire.connect owningNode.baseObject[#axis] newMod[#axis] "axis"
 		paramWire.connect owningNode.baseObject[#angle] newMod[#angle] "angle"
 		paramWire.connect owningNode.baseObject[#direction] newMod[#direction] "direction"
		--*****************************************************************************************************************
		
		-- Add the instance of the modifier
		addModifier obj newMod
		
		newMod.gizmo = owningNode
	)
	
	-- Apply pick button event handler.
	on applyPickBtn picked obj do
	(
		ApplyMCGModifier obj
	)
	
	-- Update pick button event handler.
	on updatePickBtn picked obj do
	(
		UpdateBoundingBoxParams obj
	)
)
</customui>
  </meta_info>
  <nodes>
    <node operator="Output: shape" id="1" position="1640:800" size="140:70" />
    <node operator="SplineBoxPrimitive" id="2" position="780:600" size="140:154" />
    <node operator="IgnoreSecond" id="17" position="1460:760" size="140:133" />
    <node operator="Shape: Matrix" id="3" position="1269:949" size="140:91" />
    <node operator="Parameter: Int32" id="14" name="numSubdivisions" min_value="2" max_value="100" default_value="20" position="600:700" size="140:175" />
    <node operator="MatrixIdentity" id="16" position="940:1120" size="140:91" />
    <node operator="Parameter: Single" id="24" name="angle" min_value="-10000" max_value="10000" default_value="15" system_units_value="false" position="780:760" size="140:196" />
    <node operator="ToRadians" id="25" position="940:840" size="140:112" />
    <node operator="Parameter: Int32" id="26" name="axis" min_value="0" max_value="2" default_value="2" position="940:960" size="140:175" />
    <node operator="ToRadians" id="4" position="940:1200" size="140:112" />
    <node operator="Parameter: Single" id="21" name="direction" min_value="-10000" max_value="10000" default_value="0" system_units_value="false" position="780:1120" size="140:196" />
    <node operator="BendSpline-ext" id="10" position="1260:660" size="140:196" />
    <node operator="Parameter: Vector3" id="15" name="minCorner" min_value="[-1000000,-1000000,-1000000]" max_value="[1000000,1000000,1000000]" default_value="[-10,-10,0]" position="600:360" size="140:175" />
    <node operator="Parameter: Vector3" id="0" name="maxCorner" min_value="[-1000000,-1000000,-1000000]" max_value="[1000000,1000000,1000000]" default_value="[10,10,40]" position="600:540" size="140:175" />
    <node groupnode="Required" id="22" position="1260:860" size="158:189" bg_color="#ffc0c0c0">
      <comment>We need this node to ensure the plugin's owningNode variable gets instantiated.</comment>
      <nodes>3</nodes>
    </node>
  </nodes>
  <connections>
    <connection sourcenode="17" sourceport="0" destnode="1" destport="0" />
    <connection sourcenode="15" sourceport="0" destnode="2" destport="0" />
    <connection sourcenode="0" sourceport="0" destnode="2" destport="1" />
    <connection sourcenode="14" sourceport="0" destnode="2" destport="2" />
    <connection sourcenode="10" sourceport="0" destnode="17" destport="0" />
    <connection sourcenode="3" sourceport="0" destnode="17" destport="1" />
    <connection sourcenode="24" sourceport="0" destnode="25" destport="0" />
    <connection sourcenode="21" sourceport="0" destnode="4" destport="0" />
    <connection sourcenode="2" sourceport="0" destnode="10" destport="0" />
    <connection sourcenode="25" sourceport="0" destnode="10" destport="1" />
    <connection sourcenode="26" sourceport="0" destnode="10" destport="2" />
    <connection sourcenode="16" sourceport="0" destnode="10" destport="3" />
    <connection sourcenode="4" sourceport="0" destnode="10" destport="4" />
  </connections>
</graph>