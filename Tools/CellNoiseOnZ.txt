(InstanceState state, TriMesh mesh, Int32 seed, Int32 feature points, Int32 distance metric, Single strength) => 
  {
    IArray[Vector3] _0MeshVertices;// 5:MeshVertices 92151
    MapChannel _1UVChannel;// 22:UVChannel 92175
    IArray[Vector3] _2MapChannelVertexBuffer;// 27:MapChannelVertexBuffer 92174
    Func[Random, Vector3] _3Pass-through: function1;// 0:Pass-through: function1 92177
    Random _4RandomNumberGenerator;// 3:RandomNumberGenerator 92185
    Func[Vector3] _5Bind;// 17:RandomArray-ext->4:Bind 92181
    IArray[Vector3] _6ArrayOfFunction;// 17:RandomArray-ext->5:ArrayOfFunction 92180
    Single _7FloatZero;// 25:FloatZero 92193
    IArray[Vector3] _8Map;// 4:Map 92176
    Func[Vector3, Vector3, Single] _9Pass-through: any;// 0:Pass-through: any 92195
    IArray[Func[Vector3, Vector3, Single]] _10Unit;// 19:Array3-ext->2:Unit 92200
    Func[Vector3, Vector3, Single] _11Pass-through: any;// 0:Pass-through: any 92196
    IArray[Func[Vector3, Vector3, Single]] _12Append;// 19:Array3-ext->3:Append 92199
    Func[Vector3, Vector3, Single] _13Pass-through: any;// 0:Pass-through: any 92197
    IArray[Func[Vector3, Vector3, Single]] _14Append;// 19:Array3-ext->6:Append 92198
    Func[Vector3, Vector3, Single] _15At;// 20:At 92194
    IArray[Single] _16Map;// 1:NoiseWorley-ext->11:Map 92155
    IArray[Vector3] _17Combine;// 12:Combine 92150
    TriMesh _18SetMeshVertices;// 8:SetMeshVertices 92148
    _0MeshVertices = MeshVertices(mesh);
    _1UVChannel = UVChannel(mesh);
    _2MapChannelVertexBuffer = MapChannelVertexBuffer(_1UVChannel);
    _3Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 23:PseudoRandomVector->1:Vector3 92183
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _0Vector3;
        };
    _4RandomNumberGenerator = RandomNumberGenerator(seed);
    _5Bind = Bind(_3Pass-through: function1, _4RandomNumberGenerator);
    _6ArrayOfFunction = ArrayOfFunction(_5Bind, feature points);
    _7FloatZero = FloatZero();
    _8Map = Map(_6ArrayOfFunction, (Vector3 x0) => 
      {
        Single _0X;// 24:SetZ->4:X 92191
        Single _1Y;// 24:SetZ->5:Y 92192
        Vector3 _2Vector3;// 24:SetZ->2:Vector3 92190
        _0X = X(x0);
        _1Y = Y(x0);
        _2Vector3 = Vector3(_0X, _1Y, _7FloatZero);
        _2Vector3;
        });
    _9Pass-through: any = (Vector3 x0, Vector3 x1) => 
      {
        Single _0Distance;// 14:Distance 92201
        _0Distance = Distance(x0, x1);
        _0Distance;
        };
    _10Unit = Unit(_9Pass-through: any);
    _11Pass-through: any = (Vector3 x0, Vector3 x1) => 
      {
        Single _0DistanceSquared;// 7:DistanceSquared 92202
        _0DistanceSquared = DistanceSquared(x0, x1);
        _0DistanceSquared;
        };
    _12Append = Append(_10Unit, _11Pass-through: any);
    _13Pass-through: any = (Vector3 x0, Vector3 x1) => 
      {
        Vector3 _0Subtract;// 18:ManhattanDistance-ext->2:Subtract 92214
        Single _1X;// 3:VectorComponentSum-ext->0:X 92211
        Single _2Y;// 3:VectorComponentSum-ext->2:Y 92212
        Single _3Add;// 4:Add3-ext->5:Add 92210
        Single _4Z;// 3:VectorComponentSum-ext->3:Z 92213
        Single _5Add;// 4:Add3-ext->7:Add 92209
        _0Subtract = Subtract(x0, x1);
        _1X = X(_0Subtract);
        _2Y = Y(_0Subtract);
        _3Add = Add(_1X, _2Y);
        _4Z = Z(_0Subtract);
        _5Add = Add(_3Add, _4Z);
        _5Add;
        };
    _14Append = Append(_12Append, _13Pass-through: any);
    _15At = At(_14Append, distance metric);
    _16Map = Map(_2MapChannelVertexBuffer, (Vector3 x0) => 
      {
        IArray[Single] _0Map;// 3:ClosestDistance-ext->2:Map 92172
        IArray[Int32] _1Indices;// 3:IndexOfMinimum->1:Indices 92163
        Int32 _2Zero;// 3:IndexOfMinimum->3:Zero 92164
        Int32 _3Aggregate;// 3:IndexOfMinimum->2:Aggregate 92162
        Single _4At;// 5:MinimumElement->0:At 92160
        _0Map = Map(_8Map, (Vector3 x0) => 
          {
            Single _0Apply2;// 3:ClosestDistance-ext->4:Apply2 92173
            _0Apply2 = Apply2(_15At, x0, x0);
            _0Apply2;
            });
        _1Indices = Indices(_0Map);
        _2Zero = Zero();
        _3Aggregate = Aggregate(_1Indices, _2Zero, (Int32 x0, Int32 x1) => 
          {
            Single _0At;// 4:IndexOfLesserElement->4:At 92170
            Single _1At;// 4:IndexOfLesserElement->5:At 92171
            Boolean _2LessThanOrEqual;// 4:IndexOfLesserElement->2:LessThanOrEqual 92169
            _0At = At(_0Map, x0);
            _1At = At(_0Map, x1);
            _2LessThanOrEqual = LessThanOrEqual(_0At, _1At);
            if (_2LessThanOrEqual)
              {
                x0;
                }else
              {
                x1;
                };
            });
        _4At = At(_0Map, _3Aggregate);
        _4At;
        });
    _17Combine = Combine(_0MeshVertices, _16Map, (Vector3 x0, Single x1) => 
      {
        Single _0X;// 13:SetZ->4:X 92219
        Single _1Y;// 13:SetZ->5:Y 92220
        Single _2Multiply;// 15:Multiply 92221
        Vector3 _3Vector3;// 13:SetZ->2:Vector3 92218
        _0X = X(x0);
        _1Y = Y(x0);
        _2Multiply = Multiply(x1, strength);
        _3Vector3 = Vector3(_0X, _1Y, _2Multiply);
        _3Vector3;
        });
    _18SetMeshVertices = SetMeshVertices(mesh, _17Combine);
    _18SetMeshVertices;
    }