(InstanceState state, TriMesh mesh, Int32 flux channel, Int32 count, Boolean relative, Single x, Single y, Single z) => 
  {
    MapChannel _0GetMapChannel;// 5:MatricesFromMapChannel-ext->9:GetMapChannel 98986
    IArray[Vector3] _1MapChannelVertexBuffer;// 5:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 98985
    Int32 _2Count;// 2:Slices->2:Count 98982
    Int32 _3Constant;// 5:MatricesFromMapChannel-ext->0:Constant 98987
    Int32 _4Divide;// 2:Slices->3:Divide 98981
    IArray[Int32] _5Range;// 2:Slices->4:Range 98980
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 98979
    IArray[Matrix] _7Map;// 5:MatricesFromMapChannel-ext->5:Map 98976
    IArray[IArray[Matrix]] _8GenerateN;// 18:GenerateN 98973
    IArray[Matrix] _9Flatten;// 19:Flatten 98972
    Func[Matrix, IArray[Vector3]] _10Pass-through: function1;// 0:Pass-through: function1 98958
    IArray[IArray[Vector3]] _11Map;// 5:FlatMap->4:Map 98960
    IArray[Vector3] _12Flatten;// 5:FlatMap->3:Flatten 98959
    IArray[Int32] _13MeshIndices;// 3:MapChannelStoreMatrices-ext->0:MeshIndices 98969
    TriMesh _14SetMapChannel;// 3:MapChannelStoreMatrices-ext->7:SetMapChannel 98956
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 98984
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 98983
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 98996
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 98997
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 99001
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 99000
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 98995
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 98998
        Int32 _6One;// 8:PlusOne->1:One 99005
        Int32 _7Add;// 8:PlusOne->0:Add 99004
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 99002
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 98994
        Int32 _10Constant;// 25:Three->0:Constant 98999
        Int32 _11One;// 9:PlusOne->1:One 99009
        Int32 _12Add;// 9:PlusOne->0:Add 99008
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 99006
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 98993
        Int32 _15One;// 10:PlusOne->1:One 99013
        Int32 _16Add;// 10:PlusOne->0:Add 99012
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 99010
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 98989
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8GenerateN = GenerateN(_7Map, count, (IArray[Matrix] x0) => 
      {
        Vector3 _0Vector3;// 4:Vector3 99027
        IArray[Matrix] _1Map;// 11:Map 99015
        _0Vector3 = Vector3(x, y, z);
        _1Map = Map(x0, (Matrix x0) => 
          {
            Matrix _0TranslationMatrix;// 12:MatrixTranslate-ext->10:TranslationMatrix 99025
            _0TranslationMatrix = TranslationMatrix(_0Vector3);
            if (relative)
              {
                Matrix _1Multiply;// 6:MatrixApplyTransform-ext->4:Multiply 99023
                _1Multiply = Multiply(_0TranslationMatrix, x0);
                _1Multiply;
                }else
              {
                Matrix _2Multiply;// 6:MatrixApplyTransform-ext->9:Multiply 99024
                _2Multiply = Multiply(x0, _0TranslationMatrix);
                _2Multiply;
                };
            });
        _1Map;
        });
    _9Flatten = Flatten(_8GenerateN);
    _10Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 98964
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 98963
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 98962
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 98968
            Int32 _1Add;// 5:PlusOne->0:Add 98967
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 98965
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _11Map = Map(_9Flatten, _10Pass-through: function1);
    _12Flatten = Flatten(_11Map);
    _13MeshIndices = MeshIndices(mesh);
    _14SetMapChannel = SetMapChannel(mesh, flux channel, _12Flatten, _13MeshIndices);
    _14SetMapChannel;
    }