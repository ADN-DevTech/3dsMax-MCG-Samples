(InstanceState state, INode target, INode cloner, Int32 channel) => 
  {
    Func[INode] _0Bind;// 0:ClonerInstanceNodeWithController-ext->6:Bind 72847
    Boolean _1IsValidNode;// 1:CheckNodeValidity->0:IsValidNode 72894
    Boolean _2Not;// 1:CheckNodeValidity->1:Not 72893
    INode _3ExitIf;// 1:CheckNodeValidity->2:ExitIf 72892
    TriMesh _4MeshFromNode;// 0:ClonerInstanceNodeWithController-ext->2:MeshFromNode 72890
    MapChannel _5GetMapChannel;// 3:MatricesFromMapChannel-ext->9:GetMapChannel 72862
    IArray[Vector3] _6MapChannelVertexBuffer;// 3:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 72861
    Int32 _7Count;// 2:Slices->2:Count 72858
    Int32 _8Constant;// 3:MatricesFromMapChannel-ext->0:Constant 72863
    Int32 _9Divide;// 2:Slices->3:Divide 72857
    IArray[Int32] _10Range;// 2:Slices->4:Range 72856
    IArray[IArray[Vector3]] _11Map;// 2:Slices->5:Map 72855
    IArray[Matrix] _12Map;// 3:MatricesFromMapChannel-ext->5:Map 72852
    Int32 _13Count;// 0:ClonerInstanceNodeWithController-ext->7:Count 72849
    IArray[INode] _14ArrayOfFunction;// 0:ClonerInstanceNodeWithController-ext->34:ArrayOfFunction 72846
    IArray[INode] _15Combine;// 0:ClonerInstanceNodeWithController-ext->13:Combine 72845
    IArray[Int32] _16Indices;// 30:MapWithIndexes->3:Indices 72844
    String _17Constant;// 0:ClonerInstanceNodeWithController-ext->0:Constant 72901
    String _18Constant;// 0:ClonerInstanceNodeWithController-ext->0:Constant 72902
    String _19Constant;// 0:ClonerInstanceNodeWithController-ext->0:Constant 72909
    String _20Constant;// 31:NodeNameToMAXScript-ext->0:Constant 72913
    String _21NodeName;// 0:ClonerInstanceNodeWithController-ext->27:NodeName 72915
    String _22ConcatenateStrings;// 31:NodeNameToMAXScript-ext->1:ConcatenateStrings 72912
    String _23Constant;// 31:NodeNameToMAXScript-ext->0:Constant 72914
    String _24ConcatenateStrings;// 31:NodeNameToMAXScript-ext->5:ConcatenateStrings 72911
    String _25Constant;// 0:ClonerInstanceNodeWithController-ext->0:Constant 72916
    String _26ToString;// 0:ClonerInstanceNodeWithController-ext->28:ToString 72917
    String _27Constant;// 0:ClonerInstanceNodeWithController-ext->0:Constant 72918
    Func[INode, Int32, FPValue] _28Pass-through: any;// 0:Pass-through: any 72842
    IArray[FPValue] _29Combine;// 30:MapWithIndexes->2:Combine 72843
    _0Bind = Bind((INode x0) => 
      {
        INode _0CloneAsInstance;// 0:ClonerInstanceNodeWithController-ext->33:CloneAsInstance 72848
        _0CloneAsInstance = CloneAsInstance(x0);
        _0CloneAsInstance;
        }, target);
    _1IsValidNode = IsValidNode(cloner);
    _2Not = Not(_1IsValidNode);
    _3ExitIf = ExitIf(cloner, _2Not);
    _4MeshFromNode = MeshFromNode(_3ExitIf);
    _5GetMapChannel = GetMapChannel(_4MeshFromNode, channel);
    _6MapChannelVertexBuffer = MapChannelVertexBuffer(_5GetMapChannel);
    _7Count = Count(_6MapChannelVertexBuffer);
    _8Constant = 4;
    _9Divide = Divide(_7Count, _8Constant);
    _10Range = Range(_9Divide);
    _11Map = Map(_10Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 72860
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 72859
        _0Multiply = Multiply(_8Constant, x0);
        _1Slice = Slice(_6MapChannelVertexBuffer, _0Multiply, _8Constant);
        _1Slice;
        });
    _12Map = Map(_11Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 72872
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 72873
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 72877
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 72876
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 72871
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 72874
        Int32 _6One;// 8:PlusOne->1:One 72881
        Int32 _7Add;// 8:PlusOne->0:Add 72880
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 72878
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 72870
        Int32 _10Constant;// 25:Three->0:Constant 72875
        Int32 _11One;// 9:PlusOne->1:One 72885
        Int32 _12Add;// 9:PlusOne->0:Add 72884
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 72882
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 72869
        Int32 _15One;// 10:PlusOne->1:One 72889
        Int32 _16Add;// 10:PlusOne->0:Add 72888
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 72886
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 72865
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _13Count = Count(_12Map);
    _14ArrayOfFunction = ArrayOfFunction(_0Bind, _13Count);
    _15Combine = Combine(_14ArrayOfFunction, _12Map, (INode x0, Matrix x1) => 
      {
        INode _0SetNodeTransform;// 0:ClonerInstanceNodeWithController-ext->5:SetNodeTransform 72895
        _0SetNodeTransform = SetNodeTransform(x0, x1);
        _0SetNodeTransform;
        });
    _16Indices = Indices(_15Combine);
    _17Constant = $current.transform.controller = Flux2_Controller source:$source channel:$channel n:$n;
    _18Constant = $current;
    _19Constant = $source;
    _20Constant = $';
    _21NodeName = NodeName(cloner);
    _22ConcatenateStrings = ConcatenateStrings(_20Constant, _21NodeName);
    _23Constant = ';
    _24ConcatenateStrings = ConcatenateStrings(_22ConcatenateStrings, _23Constant);
    _25Constant = $channel;
    _26ToString = ToString(channel);
    _27Constant = $n;
    _28Pass-through: any = (INode x0, Int32 x1) => 
      {
        String _0Constant;// 14:NodeNameToMAXScript-ext->0:Constant 72906
        String _1NodeName;// 0:ClonerInstanceNodeWithController-ext->15:NodeName 72908
        String _2ConcatenateStrings;// 14:NodeNameToMAXScript-ext->1:ConcatenateStrings 72905
        String _3Constant;// 14:NodeNameToMAXScript-ext->0:Constant 72907
        String _4ConcatenateStrings;// 14:NodeNameToMAXScript-ext->5:ConcatenateStrings 72904
        String _5ReplaceString;// 0:ClonerInstanceNodeWithController-ext->20:ReplaceString 72900
        String _6ReplaceString;// 0:ClonerInstanceNodeWithController-ext->16:ReplaceString 72899
        String _7ReplaceString;// 0:ClonerInstanceNodeWithController-ext->18:ReplaceString 72898
        String _8ToString;// 0:ClonerInstanceNodeWithController-ext->26:ToString 72919
        String _9ReplaceString;// 0:ClonerInstanceNodeWithController-ext->22:ReplaceString 72897
        FPValue _10EvalMAXScript;// 0:ClonerInstanceNodeWithController-ext->29:EvalMAXScript 72896
        _0Constant = $';
        _1NodeName = NodeName(x0);
        _2ConcatenateStrings = ConcatenateStrings(_0Constant, _1NodeName);
        _3Constant = ';
        _4ConcatenateStrings = ConcatenateStrings(_2ConcatenateStrings, _3Constant);
        _5ReplaceString = ReplaceString(_17Constant, _18Constant, _4ConcatenateStrings);
        _6ReplaceString = ReplaceString(_5ReplaceString, _19Constant, _24ConcatenateStrings);
        _7ReplaceString = ReplaceString(_6ReplaceString, _25Constant, _26ToString);
        _8ToString = ToString(x1);
        _9ReplaceString = ReplaceString(_7ReplaceString, _27Constant, _8ToString);
        _10EvalMAXScript = EvalMAXScript(_9ReplaceString);
        _10EvalMAXScript;
        };
    _29Combine = Combine(_15Combine, _16Indices, _28Pass-through: any);
    _29Combine;
    }