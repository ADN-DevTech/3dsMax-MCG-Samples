(InstanceState state, Int32 subobject, TriMesh mesh, Int32 offset, Int32 count, Boolean invert, Int32 selectionMethod, Boolean statistics) => 
  {
    Int32 _0Zero;// 2:Switch3-ext->5:Zero 106659
    Boolean _1Equal;// 2:Switch3-ext->4:Equal 106658
    TriMesh _2IfThen;// 2:Switch3-ext->6:IfThen 106657
    String _3Constant;// 0:Constant 106780
    String _4Constant;// 20:SelectionStatsString-ext->0:Constant 106797
    Int32 _5Zero;// 2:Switch3-ext->5:Zero 106761
    Boolean _6Equal;// 2:Switch3-ext->4:Equal 106760
    IArray[Boolean] _7IfThen;// 2:Switch3-ext->6:IfThen 106759
    IArray[Int32] _8Map;// 14:BooleansToInts-ext->6:Map 106812
    Int32 _9Count;// 20:SelectionStatsString-ext->3:Count 106810
    String _10ToString;// 20:SelectionStatsString-ext->10:ToString 106809
    IArray[String] _11Unit;// 4:Array3->2:Unit 106808
    Int32 _12DefaultValueOfElement;// 6:Sum->4:DefaultValueOfElement 106820
    Int32 _13Aggregate;// 6:Sum->0:Aggregate 106819
    String _14ToString;// 20:SelectionStatsString-ext->9:ToString 106817
    IArray[String] _15Append;// 4:Array3->3:Append 106807
    Int32 _16Subtract;// 20:SelectionStatsString-ext->4:Subtract 106823
    String _17ToString;// 20:SelectionStatsString-ext->8:ToString 106822
    IArray[String] _18Append;// 4:Array3->6:Append 106806
    Int32 _19Count;// 1:StringEllidedJoin-ext->7:Count 106829
    Int32 _20Ten;// 20:SelectionStatsString-ext->5:Ten 106871
    Boolean _21GreaterThan;// 1:StringEllidedJoin-ext->9:GreaterThan 106828
    String _22IfThen;// 1:StringEllidedJoin-ext->16:IfThen 106827
    IArray[String] _23Append;// 11:Array4->5:Append 106802
    Int32 _24Count;// 13:StringFormat-ext->4:Count 106785
    String _25Repeat;// 13:StringFormat-ext->2:Repeat 106784
    String _26ConcatenateStrings;// 16:ConcatenateStrings 106779
    String _27Constant;// 19:StringNewLine-ext->0:Constant 106873
    String _28ConcatenateStrings;// 18:StringsConcatenate3-ext->3:ConcatenateStrings 106778
    String _29Constant;// 0:Constant 106875
    String _30Constant;// 22:SelectionStatsString-ext->0:Constant 106892
    Int32 _31Zero;// 2:Switch3-ext->5:Zero 106976
    Boolean _32Equal;// 2:Switch3-ext->4:Equal 106975
    IArray[Boolean] _33IfThen;// 2:Switch3-ext->6:IfThen 106974
    IArray[Int32] _34Map;// 14:BooleansToInts-ext->6:Map 106907
    Int32 _35Count;// 22:SelectionStatsString-ext->3:Count 106905
    String _36ToString;// 22:SelectionStatsString-ext->10:ToString 106904
    IArray[String] _37Unit;// 4:Array3->2:Unit 106903
    Int32 _38DefaultValueOfElement;// 6:Sum->4:DefaultValueOfElement 106915
    Int32 _39Aggregate;// 6:Sum->0:Aggregate 106914
    String _40ToString;// 22:SelectionStatsString-ext->9:ToString 106912
    IArray[String] _41Append;// 4:Array3->3:Append 106902
    Int32 _42Subtract;// 22:SelectionStatsString-ext->4:Subtract 106918
    String _43ToString;// 22:SelectionStatsString-ext->8:ToString 106917
    IArray[String] _44Append;// 4:Array3->6:Append 106901
    Int32 _45Count;// 1:StringEllidedJoin-ext->7:Count 106924
    Int32 _46Ten;// 22:SelectionStatsString-ext->5:Ten 106966
    Boolean _47GreaterThan;// 1:StringEllidedJoin-ext->9:GreaterThan 106923
    String _48IfThen;// 1:StringEllidedJoin-ext->16:IfThen 106922
    IArray[String] _49Append;// 11:Array4->5:Append 106897
    Int32 _50Count;// 13:StringFormat-ext->4:Count 106880
    String _51Repeat;// 13:StringFormat-ext->2:Repeat 106879
    String _52ConcatenateStrings;// 17:ConcatenateStrings 106874
    String _53ConcatenateStrings;// 18:StringsConcatenate3-ext->4:ConcatenateStrings 106777
    TriMesh _55IgnoreSecond;// 6:PrintOnSignal-ext->1:IgnoreSecond 106646
    _0Zero = Zero();
    _1Equal = Equal(subobject, _0Zero);
    _2IfThen = IfThen(_1Equal, () => 
      {
        Int32 _0Zero;// 2:Switch3-ext->5:Zero 106761
        Boolean _1Equal;// 2:Switch3-ext->4:Equal 106760
        IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 106759
        Int32 _3Count;// 12:ArraySetRange-ext->8:Count 106749
        Int32 _4LesserInt;// 12:ArraySetRange-ext->6:LesserInt 106748
        IArray[Boolean] _5Take;// 9:ArrayReplaceRange-ext->5:Take 106744
        Int32 _6Subtract;// 12:ArraySetRange-ext->10:Subtract 106751
        Int32 _7LesserInt;// 12:ArraySetRange-ext->1:LesserInt 106750
        Boolean _8Not;// 13:Not 106770
        IArray[Boolean] _9ArrayOf;// 12:ArraySetRange-ext->7:ArrayOf 106752
        IArray[Boolean] _10IgnoreFirst;// 9:ArrayReplaceRange-ext->6:IgnoreFirst 106745
        IArray[Boolean] _11Concatenate;// 8:Concatenate3-ext->3:Concatenate 106743
        Int32 _12Add;// 9:ArrayReplaceRange-ext->4:Add 106747
        IArray[Boolean] _13Skip;// 9:ArrayReplaceRange-ext->7:Skip 106746
        IArray[Boolean] _14Concatenate;// 8:Concatenate3-ext->4:Concatenate 106742
        IArray[Boolean] _15VertexSelection;// 3:MeshScaleVertices-ext->2:VertexSelection 106668
        IArray[Boolean] _16Combine;// 3:MeshScaleVertices-ext->10:Combine 106667
        TriMesh _17SetVertexSelection;// 3:MeshScaleVertices-ext->5:SetVertexSelection 106666
        _0Zero = Zero();
        _1Equal = Equal(subobject, _0Zero);
        _2IfThen = IfThen(_1Equal, () => 
          {
            IArray[Boolean] _0VertexSelection;// 14:SubObjectSelection-ext->9:VertexSelection 106765
            _0VertexSelection = VertexSelection(mesh);
            _0VertexSelection;
            }, () => 
          {
            Int32 _0One;// 2:Switch3-ext->2:One 106764
            Boolean _1Equal;// 2:Switch3-ext->7:Equal 106763
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 106762
            _0One = One();
            _1Equal = Equal(subobject, _0One);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0EdgeSelection;// 14:SubObjectSelection-ext->8:EdgeSelection 106766
                _0EdgeSelection = EdgeSelection(mesh);
                _0EdgeSelection;
                }, () => 
              {
                IArray[Boolean] _0FaceSelection;// 14:SubObjectSelection-ext->5:FaceSelection 106767
                _0FaceSelection = FaceSelection(mesh);
                _0FaceSelection;
                });
            _2IfThen;
            });
        _3Count = Count(_2IfThen);
        _4LesserInt = LesserInt(offset, _3Count);
        _5Take = Take(_2IfThen, _4LesserInt);
        _6Subtract = Subtract(_3Count, _4LesserInt);
        _7LesserInt = LesserInt(_6Subtract, count);
        _8Not = Not(invert);
        _9ArrayOf = ArrayOf(_8Not, _7LesserInt);
        _10IgnoreFirst = IgnoreFirst(_7LesserInt, _9ArrayOf);
        _11Concatenate = Concatenate(_5Take, _10IgnoreFirst);
        _12Add = Add(_4LesserInt, _7LesserInt);
        _13Skip = Skip(_2IfThen, _12Add);
        _14Concatenate = Concatenate(_11Concatenate, _13Skip);
        _15VertexSelection = VertexSelection(mesh);
        _16Combine = Combine(_14Concatenate, _15VertexSelection, (Boolean x0, Boolean x1) => 
          {
            Int32 _0Zero;// 3:Switch3-ext->5:Zero 106678
            Boolean _1Equal;// 3:Switch3-ext->4:Equal 106677
            Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 106676
            _0Zero = Zero();
            _1Equal = Equal(selectionMethod, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                x0;
                }, () => 
              {
                Int32 _0One;// 3:Switch3-ext->2:One 106681
                Boolean _1Equal;// 3:Switch3-ext->7:Equal 106680
                Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 106679
                _0One = One();
                _1Equal = Equal(selectionMethod, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 106682
                    _0OrElse = OrElse(x0, x1);
                    _0OrElse;
                    }, () => 
                  {
                    Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 106684
                    Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 106683
                    _0Not = Not(x0);
                    _1AndAlso = AndAlso(x1, _0Not);
                    _1AndAlso;
                    });
                _2IfThen;
                });
            _2IfThen;
            });
        _17SetVertexSelection = SetVertexSelection(mesh, _16Combine);
        _17SetVertexSelection;
        }, () => 
      {
        Int32 _0One;// 2:Switch3-ext->2:One 106662
        Boolean _1Equal;// 2:Switch3-ext->7:Equal 106661
        TriMesh _2IfThen;// 2:Switch3-ext->8:IfThen 106660
        _0One = One();
        _1Equal = Equal(subobject, _0One);
        _2IfThen = IfThen(_1Equal, () => 
          {
            Int32 _0Zero;// 2:Switch3-ext->5:Zero 106761
            Boolean _1Equal;// 2:Switch3-ext->4:Equal 106760
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 106759
            Int32 _3Count;// 12:ArraySetRange-ext->8:Count 106749
            Int32 _4LesserInt;// 12:ArraySetRange-ext->6:LesserInt 106748
            IArray[Boolean] _5Take;// 9:ArrayReplaceRange-ext->5:Take 106744
            Int32 _6Subtract;// 12:ArraySetRange-ext->10:Subtract 106751
            Int32 _7LesserInt;// 12:ArraySetRange-ext->1:LesserInt 106750
            Boolean _8Not;// 13:Not 106770
            IArray[Boolean] _9ArrayOf;// 12:ArraySetRange-ext->7:ArrayOf 106752
            IArray[Boolean] _10IgnoreFirst;// 9:ArrayReplaceRange-ext->6:IgnoreFirst 106745
            IArray[Boolean] _11Concatenate;// 8:Concatenate3-ext->3:Concatenate 106743
            Int32 _12Add;// 9:ArrayReplaceRange-ext->4:Add 106747
            IArray[Boolean] _13Skip;// 9:ArrayReplaceRange-ext->7:Skip 106746
            IArray[Boolean] _14Concatenate;// 8:Concatenate3-ext->4:Concatenate 106742
            IArray[Boolean] _15EdgeSelection;// 4:SelectEdges-ext->5:EdgeSelection 106690
            IArray[Boolean] _16Combine;// 4:SelectEdges-ext->10:Combine 106689
            TriMesh _17SetEdgeSelection;// 4:SelectEdges-ext->2:SetEdgeSelection 106688
            _0Zero = Zero();
            _1Equal = Equal(subobject, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0VertexSelection;// 14:SubObjectSelection-ext->9:VertexSelection 106765
                _0VertexSelection = VertexSelection(mesh);
                _0VertexSelection;
                }, () => 
              {
                Int32 _0One;// 2:Switch3-ext->2:One 106764
                Boolean _1Equal;// 2:Switch3-ext->7:Equal 106763
                IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 106762
                _0One = One();
                _1Equal = Equal(subobject, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    IArray[Boolean] _0EdgeSelection;// 14:SubObjectSelection-ext->8:EdgeSelection 106766
                    _0EdgeSelection = EdgeSelection(mesh);
                    _0EdgeSelection;
                    }, () => 
                  {
                    IArray[Boolean] _0FaceSelection;// 14:SubObjectSelection-ext->5:FaceSelection 106767
                    _0FaceSelection = FaceSelection(mesh);
                    _0FaceSelection;
                    });
                _2IfThen;
                });
            _3Count = Count(_2IfThen);
            _4LesserInt = LesserInt(offset, _3Count);
            _5Take = Take(_2IfThen, _4LesserInt);
            _6Subtract = Subtract(_3Count, _4LesserInt);
            _7LesserInt = LesserInt(_6Subtract, count);
            _8Not = Not(invert);
            _9ArrayOf = ArrayOf(_8Not, _7LesserInt);
            _10IgnoreFirst = IgnoreFirst(_7LesserInt, _9ArrayOf);
            _11Concatenate = Concatenate(_5Take, _10IgnoreFirst);
            _12Add = Add(_4LesserInt, _7LesserInt);
            _13Skip = Skip(_2IfThen, _12Add);
            _14Concatenate = Concatenate(_11Concatenate, _13Skip);
            _15EdgeSelection = EdgeSelection(mesh);
            _16Combine = Combine(_14Concatenate, _15EdgeSelection, (Boolean x0, Boolean x1) => 
              {
                Int32 _0Zero;// 3:Switch3-ext->5:Zero 106700
                Boolean _1Equal;// 3:Switch3-ext->4:Equal 106699
                Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 106698
                _0Zero = Zero();
                _1Equal = Equal(selectionMethod, _0Zero);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    x0;
                    }, () => 
                  {
                    Int32 _0One;// 3:Switch3-ext->2:One 106703
                    Boolean _1Equal;// 3:Switch3-ext->7:Equal 106702
                    Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 106701
                    _0One = One();
                    _1Equal = Equal(selectionMethod, _0One);
                    _2IfThen = IfThen(_1Equal, () => 
                      {
                        Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 106704
                        _0OrElse = OrElse(x0, x1);
                        _0OrElse;
                        }, () => 
                      {
                        Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 106706
                        Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 106705
                        _0Not = Not(x0);
                        _1AndAlso = AndAlso(x1, _0Not);
                        _1AndAlso;
                        });
                    _2IfThen;
                    });
                _2IfThen;
                });
            _17SetEdgeSelection = SetEdgeSelection(mesh, _16Combine);
            _17SetEdgeSelection;
            }, () => 
          {
            Int32 _0Zero;// 2:Switch3-ext->5:Zero 106761
            Boolean _1Equal;// 2:Switch3-ext->4:Equal 106760
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 106759
            Int32 _3Count;// 12:ArraySetRange-ext->8:Count 106749
            Int32 _4LesserInt;// 12:ArraySetRange-ext->6:LesserInt 106748
            IArray[Boolean] _5Take;// 9:ArrayReplaceRange-ext->5:Take 106744
            Int32 _6Subtract;// 12:ArraySetRange-ext->10:Subtract 106751
            Int32 _7LesserInt;// 12:ArraySetRange-ext->1:LesserInt 106750
            Boolean _8Not;// 13:Not 106770
            IArray[Boolean] _9ArrayOf;// 12:ArraySetRange-ext->7:ArrayOf 106752
            IArray[Boolean] _10IgnoreFirst;// 9:ArrayReplaceRange-ext->6:IgnoreFirst 106745
            IArray[Boolean] _11Concatenate;// 8:Concatenate3-ext->3:Concatenate 106743
            Int32 _12Add;// 9:ArrayReplaceRange-ext->4:Add 106747
            IArray[Boolean] _13Skip;// 9:ArrayReplaceRange-ext->7:Skip 106746
            IArray[Boolean] _14Concatenate;// 8:Concatenate3-ext->4:Concatenate 106742
            IArray[Boolean] _15FaceSelection;// 6:SelectFaces-ext->2:FaceSelection 106712
            IArray[Boolean] _16Combine;// 6:SelectFaces-ext->10:Combine 106711
            TriMesh _17SetFaceSelection;// 6:SelectFaces-ext->11:SetFaceSelection 106710
            _0Zero = Zero();
            _1Equal = Equal(subobject, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0VertexSelection;// 14:SubObjectSelection-ext->9:VertexSelection 106765
                _0VertexSelection = VertexSelection(mesh);
                _0VertexSelection;
                }, () => 
              {
                Int32 _0One;// 2:Switch3-ext->2:One 106764
                Boolean _1Equal;// 2:Switch3-ext->7:Equal 106763
                IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 106762
                _0One = One();
                _1Equal = Equal(subobject, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    IArray[Boolean] _0EdgeSelection;// 14:SubObjectSelection-ext->8:EdgeSelection 106766
                    _0EdgeSelection = EdgeSelection(mesh);
                    _0EdgeSelection;
                    }, () => 
                  {
                    IArray[Boolean] _0FaceSelection;// 14:SubObjectSelection-ext->5:FaceSelection 106767
                    _0FaceSelection = FaceSelection(mesh);
                    _0FaceSelection;
                    });
                _2IfThen;
                });
            _3Count = Count(_2IfThen);
            _4LesserInt = LesserInt(offset, _3Count);
            _5Take = Take(_2IfThen, _4LesserInt);
            _6Subtract = Subtract(_3Count, _4LesserInt);
            _7LesserInt = LesserInt(_6Subtract, count);
            _8Not = Not(invert);
            _9ArrayOf = ArrayOf(_8Not, _7LesserInt);
            _10IgnoreFirst = IgnoreFirst(_7LesserInt, _9ArrayOf);
            _11Concatenate = Concatenate(_5Take, _10IgnoreFirst);
            _12Add = Add(_4LesserInt, _7LesserInt);
            _13Skip = Skip(_2IfThen, _12Add);
            _14Concatenate = Concatenate(_11Concatenate, _13Skip);
            _15FaceSelection = FaceSelection(mesh);
            _16Combine = Combine(_14Concatenate, _15FaceSelection, (Boolean x0, Boolean x1) => 
              {
                Int32 _0Zero;// 3:Switch3-ext->5:Zero 106722
                Boolean _1Equal;// 3:Switch3-ext->4:Equal 106721
                Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 106720
                _0Zero = Zero();
                _1Equal = Equal(selectionMethod, _0Zero);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    x0;
                    }, () => 
                  {
                    Int32 _0One;// 3:Switch3-ext->2:One 106725
                    Boolean _1Equal;// 3:Switch3-ext->7:Equal 106724
                    Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 106723
                    _0One = One();
                    _1Equal = Equal(selectionMethod, _0One);
                    _2IfThen = IfThen(_1Equal, () => 
                      {
                        Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 106726
                        _0OrElse = OrElse(x0, x1);
                        _0OrElse;
                        }, () => 
                      {
                        Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 106728
                        Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 106727
                        _0Not = Not(x0);
                        _1AndAlso = AndAlso(x1, _0Not);
                        _1AndAlso;
                        });
                    _2IfThen;
                    });
                _2IfThen;
                });
            _17SetFaceSelection = SetFaceSelection(mesh, _16Combine);
            _17SetFaceSelection;
            });
        _2IfThen;
        });
    _3Constant = before = ;
    _4Constant = Count = {0}, true count = {1}, false count = {2}, values = {3};
    _5Zero = Zero();
    _6Equal = Equal(subobject, _5Zero);
    _7IfThen = IfThen(_6Equal, () => 
      {
        IArray[Boolean] _0VertexSelection;// 14:SubObjectSelection-ext->9:VertexSelection 106765
        _0VertexSelection = VertexSelection(mesh);
        _0VertexSelection;
        }, () => 
      {
        Int32 _0One;// 2:Switch3-ext->2:One 106764
        Boolean _1Equal;// 2:Switch3-ext->7:Equal 106763
        IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 106762
        _0One = One();
        _1Equal = Equal(subobject, _0One);
        _2IfThen = IfThen(_1Equal, () => 
          {
            IArray[Boolean] _0EdgeSelection;// 14:SubObjectSelection-ext->8:EdgeSelection 106766
            _0EdgeSelection = EdgeSelection(mesh);
            _0EdgeSelection;
            }, () => 
          {
            IArray[Boolean] _0FaceSelection;// 14:SubObjectSelection-ext->5:FaceSelection 106767
            _0FaceSelection = FaceSelection(mesh);
            _0FaceSelection;
            });
        _2IfThen;
        });
    _8Map = Map(_7IfThen, (Boolean x0) => 
      {
        if (x0)
          {
            Int32 _0One;// 7:BooleanToInt-ext->2:One 106815
            _0One = One();
            _0One;
            }else
          {
            Int32 _1Zero;// 7:BooleanToInt-ext->3:Zero 106816
            _1Zero = Zero();
            _1Zero;
            };
        });
    _9Count = Count(_8Map);
    _10ToString = ToString(_9Count);
    _11Unit = Unit(_10ToString);
    _12DefaultValueOfElement = DefaultValueOfElement(_8Map);
    _13Aggregate = Aggregate(_8Map, _12DefaultValueOfElement, (Int32 x0, Int32 x1) => 
      {
        Int32 _0Add;// 6:Sum->2:Add 106821
        _0Add = Add(x0, x1);
        _0Add;
        });
    _14ToString = ToString(_13Aggregate);
    _15Append = Append(_11Unit, _14ToString);
    _16Subtract = Subtract(_9Count, _13Aggregate);
    _17ToString = ToString(_16Subtract);
    _18Append = Append(_15Append, _17ToString);
    _19Count = Count(_8Map);
    _20Ten = Ten();
    _21GreaterThan = GreaterThan(_19Count, _20Ten);
    _22IfThen = IfThen(_21GreaterThan, () => 
      {
        Int32 _0One;// 0:MinusOne->2:One 106848
        Int32 _1Subtract;// 0:MinusOne->1:Subtract 106847
        IArray[Int32] _2Take;// 1:StringEllidedJoin-ext->5:Take 106845
        IArray[String] _3Map;// 6:StringJoin->7:Map 106838
        Int32 _4One;// 10:SkipOne->2:One 106837
        IArray[String] _5Skip;// 10:SkipOne->3:Skip 106836
        Int32 _6Zero;// 3:First->2:Zero 106842
        String _7At;// 3:First->0:At 106841
        String _8Constant;// 20:SelectionStatsString-ext->0:Constant 106872
        String _9Aggregate;// 6:StringJoin->2:Aggregate 106834
        String _10Constant;// 1:StringEllidedJoin-ext->0:Constant 106849
        String _11ConcatenateStrings;// 1:StringEllidedJoin-ext->10:ConcatenateStrings 106831
        Int32 _12Count;// 3:LastIndex->2:Count 106857
        Int32 _13One;// 3:MinusOne->2:One 106856
        Int32 _14Subtract;// 3:MinusOne->1:Subtract 106855
        Int32 _15At;// 14:Last->0:At 106852
        String _16ToString;// 1:StringEllidedJoin-ext->13:ToString 106850
        String _17ConcatenateStrings;// 1:StringEllidedJoin-ext->12:ConcatenateStrings 106830
        _0One = One();
        _1Subtract = Subtract(_20Ten, _0One);
        _2Take = Take(_8Map, _1Subtract);
        _3Map = Map(_2Take, (Int32 x0) => 
          {
            String _0ToString;// 6:StringJoin->8:ToString 106839
            _0ToString = ToString(x0);
            _0ToString;
            });
        _4One = One();
        _5Skip = Skip(_3Map, _4One);
        _6Zero = Zero();
        _7At = At(_3Map, _6Zero);
        _8Constant = , ;
        _9Aggregate = Aggregate(_5Skip, _7At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 6:StringJoin->4:ConcatenateStrings 106844
            String _1ConcatenateStrings;// 6:StringJoin->5:ConcatenateStrings 106843
            _0ConcatenateStrings = ConcatenateStrings(x0, _8Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _10Constant =  ... ;
        _11ConcatenateStrings = ConcatenateStrings(_9Aggregate, _10Constant);
        _12Count = Count(_8Map);
        _13One = One();
        _14Subtract = Subtract(_12Count, _13One);
        _15At = At(_8Map, _14Subtract);
        _16ToString = ToString(_15At);
        _17ConcatenateStrings = ConcatenateStrings(_11ConcatenateStrings, _16ToString);
        _17ConcatenateStrings;
        }, () => 
      {
        IArray[String] _0Map;// 2:StringJoin->7:Map 106864
        Int32 _1One;// 10:SkipOne->2:One 106863
        IArray[String] _2Skip;// 10:SkipOne->3:Skip 106862
        Int32 _3Zero;// 3:First->2:Zero 106868
        String _4At;// 3:First->0:At 106867
        String _5Constant;// 20:SelectionStatsString-ext->0:Constant 106872
        String _6Aggregate;// 2:StringJoin->2:Aggregate 106860
        _0Map = Map(_8Map, (Int32 x0) => 
          {
            String _0ToString;// 2:StringJoin->8:ToString 106865
            _0ToString = ToString(x0);
            _0ToString;
            });
        _1One = One();
        _2Skip = Skip(_0Map, _1One);
        _3Zero = Zero();
        _4At = At(_0Map, _3Zero);
        _5Constant = , ;
        _6Aggregate = Aggregate(_2Skip, _4At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 2:StringJoin->4:ConcatenateStrings 106870
            String _1ConcatenateStrings;// 2:StringJoin->5:ConcatenateStrings 106869
            _0ConcatenateStrings = ConcatenateStrings(x0, _5Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _6Aggregate;
        });
    _23Append = Append(_18Append, _22IfThen);
    _24Count = Count(_23Append);
    _25Repeat = Repeat(_4Constant, _24Count, (String x0, Int32 x1) => 
      {
        String _0Constant;// 13:StringFormat-ext->0:Constant 106792
        String _1ToString;// 13:StringFormat-ext->8:ToString 106793
        String _2ConcatenateStrings;// 9:StringsConcatenate3-ext->3:ConcatenateStrings 106791
        String _3Constant;// 13:StringFormat-ext->0:Constant 106795
        String _4ConcatenateStrings;// 9:StringsConcatenate3-ext->4:ConcatenateStrings 106790
        String _5At;// 13:StringFormat-ext->3:At 106796
        String _6ReplaceString;// 13:StringFormat-ext->6:ReplaceString 106786
        _0Constant = {;
        _1ToString = ToString(x1);
        _2ConcatenateStrings = ConcatenateStrings(_0Constant, _1ToString);
        _3Constant = };
        _4ConcatenateStrings = ConcatenateStrings(_2ConcatenateStrings, _3Constant);
        _5At = At(_23Append, x1);
        _6ReplaceString = ReplaceString(x0, _4ConcatenateStrings, _5At);
        _6ReplaceString;
        });
    _26ConcatenateStrings = ConcatenateStrings(_3Constant, _25Repeat);
    _27Constant = \n;
    _28ConcatenateStrings = ConcatenateStrings(_26ConcatenateStrings, _27Constant);
    _29Constant = after = ;
    _30Constant = Count = {0}, true count = {1}, false count = {2}, values = {3};
    _31Zero = Zero();
    _32Equal = Equal(subobject, _31Zero);
    _33IfThen = IfThen(_32Equal, () => 
      {
        IArray[Boolean] _0VertexSelection;// 8:SubObjectSelection-ext->9:VertexSelection 106980
        _0VertexSelection = VertexSelection(_2IfThen);
        _0VertexSelection;
        }, () => 
      {
        Int32 _0One;// 2:Switch3-ext->2:One 106979
        Boolean _1Equal;// 2:Switch3-ext->7:Equal 106978
        IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 106977
        _0One = One();
        _1Equal = Equal(subobject, _0One);
        _2IfThen = IfThen(_1Equal, () => 
          {
            IArray[Boolean] _0EdgeSelection;// 8:SubObjectSelection-ext->8:EdgeSelection 106981
            _0EdgeSelection = EdgeSelection(_2IfThen);
            _0EdgeSelection;
            }, () => 
          {
            IArray[Boolean] _0FaceSelection;// 8:SubObjectSelection-ext->5:FaceSelection 106982
            _0FaceSelection = FaceSelection(_2IfThen);
            _0FaceSelection;
            });
        _2IfThen;
        });
    _34Map = Map(_33IfThen, (Boolean x0) => 
      {
        if (x0)
          {
            Int32 _0One;// 7:BooleanToInt-ext->2:One 106910
            _0One = One();
            _0One;
            }else
          {
            Int32 _1Zero;// 7:BooleanToInt-ext->3:Zero 106911
            _1Zero = Zero();
            _1Zero;
            };
        });
    _35Count = Count(_34Map);
    _36ToString = ToString(_35Count);
    _37Unit = Unit(_36ToString);
    _38DefaultValueOfElement = DefaultValueOfElement(_34Map);
    _39Aggregate = Aggregate(_34Map, _38DefaultValueOfElement, (Int32 x0, Int32 x1) => 
      {
        Int32 _0Add;// 6:Sum->2:Add 106916
        _0Add = Add(x0, x1);
        _0Add;
        });
    _40ToString = ToString(_39Aggregate);
    _41Append = Append(_37Unit, _40ToString);
    _42Subtract = Subtract(_35Count, _39Aggregate);
    _43ToString = ToString(_42Subtract);
    _44Append = Append(_41Append, _43ToString);
    _45Count = Count(_34Map);
    _46Ten = Ten();
    _47GreaterThan = GreaterThan(_45Count, _46Ten);
    _48IfThen = IfThen(_47GreaterThan, () => 
      {
        Int32 _0One;// 0:MinusOne->2:One 106943
        Int32 _1Subtract;// 0:MinusOne->1:Subtract 106942
        IArray[Int32] _2Take;// 1:StringEllidedJoin-ext->5:Take 106940
        IArray[String] _3Map;// 6:StringJoin->7:Map 106933
        Int32 _4One;// 10:SkipOne->2:One 106932
        IArray[String] _5Skip;// 10:SkipOne->3:Skip 106931
        Int32 _6Zero;// 3:First->2:Zero 106937
        String _7At;// 3:First->0:At 106936
        String _8Constant;// 22:SelectionStatsString-ext->0:Constant 106967
        String _9Aggregate;// 6:StringJoin->2:Aggregate 106929
        String _10Constant;// 1:StringEllidedJoin-ext->0:Constant 106944
        String _11ConcatenateStrings;// 1:StringEllidedJoin-ext->10:ConcatenateStrings 106926
        Int32 _12Count;// 3:LastIndex->2:Count 106952
        Int32 _13One;// 3:MinusOne->2:One 106951
        Int32 _14Subtract;// 3:MinusOne->1:Subtract 106950
        Int32 _15At;// 14:Last->0:At 106947
        String _16ToString;// 1:StringEllidedJoin-ext->13:ToString 106945
        String _17ConcatenateStrings;// 1:StringEllidedJoin-ext->12:ConcatenateStrings 106925
        _0One = One();
        _1Subtract = Subtract(_46Ten, _0One);
        _2Take = Take(_34Map, _1Subtract);
        _3Map = Map(_2Take, (Int32 x0) => 
          {
            String _0ToString;// 6:StringJoin->8:ToString 106934
            _0ToString = ToString(x0);
            _0ToString;
            });
        _4One = One();
        _5Skip = Skip(_3Map, _4One);
        _6Zero = Zero();
        _7At = At(_3Map, _6Zero);
        _8Constant = , ;
        _9Aggregate = Aggregate(_5Skip, _7At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 6:StringJoin->4:ConcatenateStrings 106939
            String _1ConcatenateStrings;// 6:StringJoin->5:ConcatenateStrings 106938
            _0ConcatenateStrings = ConcatenateStrings(x0, _8Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _10Constant =  ... ;
        _11ConcatenateStrings = ConcatenateStrings(_9Aggregate, _10Constant);
        _12Count = Count(_34Map);
        _13One = One();
        _14Subtract = Subtract(_12Count, _13One);
        _15At = At(_34Map, _14Subtract);
        _16ToString = ToString(_15At);
        _17ConcatenateStrings = ConcatenateStrings(_11ConcatenateStrings, _16ToString);
        _17ConcatenateStrings;
        }, () => 
      {
        IArray[String] _0Map;// 2:StringJoin->7:Map 106959
        Int32 _1One;// 10:SkipOne->2:One 106958
        IArray[String] _2Skip;// 10:SkipOne->3:Skip 106957
        Int32 _3Zero;// 3:First->2:Zero 106963
        String _4At;// 3:First->0:At 106962
        String _5Constant;// 22:SelectionStatsString-ext->0:Constant 106967
        String _6Aggregate;// 2:StringJoin->2:Aggregate 106955
        _0Map = Map(_34Map, (Int32 x0) => 
          {
            String _0ToString;// 2:StringJoin->8:ToString 106960
            _0ToString = ToString(x0);
            _0ToString;
            });
        _1One = One();
        _2Skip = Skip(_0Map, _1One);
        _3Zero = Zero();
        _4At = At(_0Map, _3Zero);
        _5Constant = , ;
        _6Aggregate = Aggregate(_2Skip, _4At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 2:StringJoin->4:ConcatenateStrings 106965
            String _1ConcatenateStrings;// 2:StringJoin->5:ConcatenateStrings 106964
            _0ConcatenateStrings = ConcatenateStrings(x0, _5Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _6Aggregate;
        });
    _49Append = Append(_44Append, _48IfThen);
    _50Count = Count(_49Append);
    _51Repeat = Repeat(_30Constant, _50Count, (String x0, Int32 x1) => 
      {
        String _0Constant;// 13:StringFormat-ext->0:Constant 106887
        String _1ToString;// 13:StringFormat-ext->8:ToString 106888
        String _2ConcatenateStrings;// 9:StringsConcatenate3-ext->3:ConcatenateStrings 106886
        String _3Constant;// 13:StringFormat-ext->0:Constant 106890
        String _4ConcatenateStrings;// 9:StringsConcatenate3-ext->4:ConcatenateStrings 106885
        String _5At;// 13:StringFormat-ext->3:At 106891
        String _6ReplaceString;// 13:StringFormat-ext->6:ReplaceString 106881
        _0Constant = {;
        _1ToString = ToString(x1);
        _2ConcatenateStrings = ConcatenateStrings(_0Constant, _1ToString);
        _3Constant = };
        _4ConcatenateStrings = ConcatenateStrings(_2ConcatenateStrings, _3Constant);
        _5At = At(_49Append, x1);
        _6ReplaceString = ReplaceString(x0, _4ConcatenateStrings, _5At);
        _6ReplaceString;
        });
    _52ConcatenateStrings = ConcatenateStrings(_29Constant, _51Repeat);
    _53ConcatenateStrings = ConcatenateStrings(_28ConcatenateStrings, _52ConcatenateStrings);
    _55IgnoreSecond = IgnoreSecond(_2IfThen, if (statistics)
      {
        String _54Print;// 6:PrintOnSignal-ext->3:Print 106648
        _54Print = Print(_53ConcatenateStrings);
        _54Print;
        }else
      {
        _53ConcatenateStrings;
        });
    _55IgnoreSecond;
    }