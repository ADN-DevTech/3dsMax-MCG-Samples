(InstanceState state, Int32 subobject, TriMesh mesh, Int32 offset, Int32 count, Boolean invert, Int32 selectionMethod, Boolean statistics) => 
  {
    Int32 _0Zero;// 2:Switch3-ext->5:Zero 108795
    Boolean _1Equal;// 2:Switch3-ext->4:Equal 108794
    TriMesh _2IfThen;// 2:Switch3-ext->6:IfThen 108793
    String _3Constant;// 0:Constant 108916
    String _4Constant;// 20:SelectionStatsString-ext->0:Constant 108933
    Int32 _5Zero;// 2:Switch3-ext->5:Zero 108897
    Boolean _6Equal;// 2:Switch3-ext->4:Equal 108896
    IArray[Boolean] _7IfThen;// 2:Switch3-ext->6:IfThen 108895
    IArray[Int32] _8Map;// 14:BooleansToInts-ext->6:Map 108948
    Int32 _9Count;// 20:SelectionStatsString-ext->3:Count 108946
    String _10ToString;// 20:SelectionStatsString-ext->10:ToString 108945
    IArray[String] _11Unit;// 4:Array3->2:Unit 108944
    Int32 _12DefaultValueOfElement;// 6:Sum->4:DefaultValueOfElement 108956
    Int32 _13Aggregate;// 6:Sum->0:Aggregate 108955
    String _14ToString;// 20:SelectionStatsString-ext->9:ToString 108953
    IArray[String] _15Append;// 4:Array3->3:Append 108943
    Int32 _16Subtract;// 20:SelectionStatsString-ext->4:Subtract 108959
    String _17ToString;// 20:SelectionStatsString-ext->8:ToString 108958
    IArray[String] _18Append;// 4:Array3->6:Append 108942
    Int32 _19Count;// 1:StringEllidedJoin-ext->7:Count 108965
    Int32 _20Ten;// 20:SelectionStatsString-ext->5:Ten 109007
    Boolean _21GreaterThan;// 1:StringEllidedJoin-ext->9:GreaterThan 108964
    String _22IfThen;// 1:StringEllidedJoin-ext->16:IfThen 108963
    IArray[String] _23Append;// 11:Array4->5:Append 108938
    Int32 _24Count;// 13:StringFormat-ext->4:Count 108921
    String _25Repeat;// 13:StringFormat-ext->2:Repeat 108920
    String _26ConcatenateStrings;// 16:ConcatenateStrings 108915
    String _27Constant;// 19:StringNewLine-ext->0:Constant 109009
    String _28ConcatenateStrings;// 18:StringsConcatenate3-ext->3:ConcatenateStrings 108914
    String _29Constant;// 0:Constant 109011
    String _30Constant;// 22:SelectionStatsString-ext->0:Constant 109028
    Int32 _31Zero;// 2:Switch3-ext->5:Zero 109112
    Boolean _32Equal;// 2:Switch3-ext->4:Equal 109111
    IArray[Boolean] _33IfThen;// 2:Switch3-ext->6:IfThen 109110
    IArray[Int32] _34Map;// 14:BooleansToInts-ext->6:Map 109043
    Int32 _35Count;// 22:SelectionStatsString-ext->3:Count 109041
    String _36ToString;// 22:SelectionStatsString-ext->10:ToString 109040
    IArray[String] _37Unit;// 4:Array3->2:Unit 109039
    Int32 _38DefaultValueOfElement;// 6:Sum->4:DefaultValueOfElement 109051
    Int32 _39Aggregate;// 6:Sum->0:Aggregate 109050
    String _40ToString;// 22:SelectionStatsString-ext->9:ToString 109048
    IArray[String] _41Append;// 4:Array3->3:Append 109038
    Int32 _42Subtract;// 22:SelectionStatsString-ext->4:Subtract 109054
    String _43ToString;// 22:SelectionStatsString-ext->8:ToString 109053
    IArray[String] _44Append;// 4:Array3->6:Append 109037
    Int32 _45Count;// 1:StringEllidedJoin-ext->7:Count 109060
    Int32 _46Ten;// 22:SelectionStatsString-ext->5:Ten 109102
    Boolean _47GreaterThan;// 1:StringEllidedJoin-ext->9:GreaterThan 109059
    String _48IfThen;// 1:StringEllidedJoin-ext->16:IfThen 109058
    IArray[String] _49Append;// 11:Array4->5:Append 109033
    Int32 _50Count;// 13:StringFormat-ext->4:Count 109016
    String _51Repeat;// 13:StringFormat-ext->2:Repeat 109015
    String _52ConcatenateStrings;// 17:ConcatenateStrings 109010
    String _53ConcatenateStrings;// 18:StringsConcatenate3-ext->4:ConcatenateStrings 108913
    TriMesh _55IgnoreSecond;// 6:PrintOnSignal-ext->1:IgnoreSecond 108782
    _0Zero = Zero();
    _1Equal = Equal(subobject, _0Zero);
    _2IfThen = IfThen(_1Equal, () => 
      {
        Int32 _0Zero;// 2:Switch3-ext->5:Zero 108897
        Boolean _1Equal;// 2:Switch3-ext->4:Equal 108896
        IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 108895
        Int32 _3Count;// 12:ArraySetRange-ext->8:Count 108885
        Int32 _4LesserInt;// 12:ArraySetRange-ext->6:LesserInt 108884
        IArray[Boolean] _5Take;// 9:ArrayReplaceRange-ext->5:Take 108880
        Int32 _6Subtract;// 12:ArraySetRange-ext->10:Subtract 108887
        Int32 _7LesserInt;// 12:ArraySetRange-ext->1:LesserInt 108886
        Boolean _8Not;// 13:Not 108906
        IArray[Boolean] _9ArrayOf;// 12:ArraySetRange-ext->7:ArrayOf 108888
        IArray[Boolean] _10IgnoreFirst;// 9:ArrayReplaceRange-ext->6:IgnoreFirst 108881
        IArray[Boolean] _11Concatenate;// 8:Concatenate3-ext->3:Concatenate 108879
        Int32 _12Add;// 9:ArrayReplaceRange-ext->4:Add 108883
        IArray[Boolean] _13Skip;// 9:ArrayReplaceRange-ext->7:Skip 108882
        IArray[Boolean] _14Concatenate;// 8:Concatenate3-ext->4:Concatenate 108878
        IArray[Boolean] _15VertexSelection;// 3:MeshScaleVertices-ext->2:VertexSelection 108804
        IArray[Boolean] _16Combine;// 3:MeshScaleVertices-ext->10:Combine 108803
        TriMesh _17SetVertexSelection;// 3:MeshScaleVertices-ext->5:SetVertexSelection 108802
        _0Zero = Zero();
        _1Equal = Equal(subobject, _0Zero);
        _2IfThen = IfThen(_1Equal, () => 
          {
            IArray[Boolean] _0VertexSelection;// 14:SubObjectSelection-ext->9:VertexSelection 108901
            _0VertexSelection = VertexSelection(mesh);
            _0VertexSelection;
            }, () => 
          {
            Int32 _0One;// 2:Switch3-ext->2:One 108900
            Boolean _1Equal;// 2:Switch3-ext->7:Equal 108899
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 108898
            _0One = One();
            _1Equal = Equal(subobject, _0One);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0EdgeSelection;// 14:SubObjectSelection-ext->8:EdgeSelection 108902
                _0EdgeSelection = EdgeSelection(mesh);
                _0EdgeSelection;
                }, () => 
              {
                IArray[Boolean] _0FaceSelection;// 14:SubObjectSelection-ext->5:FaceSelection 108903
                _0FaceSelection = FaceSelection(mesh);
                _0FaceSelection;
                });
            _2IfThen;
            });
        _3Count = Count(_2IfThen);
        _4LesserInt = LesserInt(offset, _3Count);
        _5Take = Take(_2IfThen, _4LesserInt);
        _6Subtract = Subtract(_3Count, _4LesserInt);
        _7LesserInt = LesserInt(_6Subtract, count);
        _8Not = Not(invert);
        _9ArrayOf = ArrayOf(_8Not, _7LesserInt);
        _10IgnoreFirst = IgnoreFirst(_7LesserInt, _9ArrayOf);
        _11Concatenate = Concatenate(_5Take, _10IgnoreFirst);
        _12Add = Add(_4LesserInt, _7LesserInt);
        _13Skip = Skip(_2IfThen, _12Add);
        _14Concatenate = Concatenate(_11Concatenate, _13Skip);
        _15VertexSelection = VertexSelection(mesh);
        _16Combine = Combine(_14Concatenate, _15VertexSelection, (Boolean x0, Boolean x1) => 
          {
            Int32 _0Zero;// 3:Switch3-ext->5:Zero 108814
            Boolean _1Equal;// 3:Switch3-ext->4:Equal 108813
            Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 108812
            _0Zero = Zero();
            _1Equal = Equal(selectionMethod, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                x0;
                }, () => 
              {
                Int32 _0One;// 3:Switch3-ext->2:One 108817
                Boolean _1Equal;// 3:Switch3-ext->7:Equal 108816
                Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 108815
                _0One = One();
                _1Equal = Equal(selectionMethod, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 108818
                    _0OrElse = OrElse(x0, x1);
                    _0OrElse;
                    }, () => 
                  {
                    Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 108820
                    Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 108819
                    _0Not = Not(x0);
                    _1AndAlso = AndAlso(x1, _0Not);
                    _1AndAlso;
                    });
                _2IfThen;
                });
            _2IfThen;
            });
        _17SetVertexSelection = SetVertexSelection(mesh, _16Combine);
        _17SetVertexSelection;
        }, () => 
      {
        Int32 _0One;// 2:Switch3-ext->2:One 108798
        Boolean _1Equal;// 2:Switch3-ext->7:Equal 108797
        TriMesh _2IfThen;// 2:Switch3-ext->8:IfThen 108796
        _0One = One();
        _1Equal = Equal(subobject, _0One);
        _2IfThen = IfThen(_1Equal, () => 
          {
            Int32 _0Zero;// 2:Switch3-ext->5:Zero 108897
            Boolean _1Equal;// 2:Switch3-ext->4:Equal 108896
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 108895
            Int32 _3Count;// 12:ArraySetRange-ext->8:Count 108885
            Int32 _4LesserInt;// 12:ArraySetRange-ext->6:LesserInt 108884
            IArray[Boolean] _5Take;// 9:ArrayReplaceRange-ext->5:Take 108880
            Int32 _6Subtract;// 12:ArraySetRange-ext->10:Subtract 108887
            Int32 _7LesserInt;// 12:ArraySetRange-ext->1:LesserInt 108886
            Boolean _8Not;// 13:Not 108906
            IArray[Boolean] _9ArrayOf;// 12:ArraySetRange-ext->7:ArrayOf 108888
            IArray[Boolean] _10IgnoreFirst;// 9:ArrayReplaceRange-ext->6:IgnoreFirst 108881
            IArray[Boolean] _11Concatenate;// 8:Concatenate3-ext->3:Concatenate 108879
            Int32 _12Add;// 9:ArrayReplaceRange-ext->4:Add 108883
            IArray[Boolean] _13Skip;// 9:ArrayReplaceRange-ext->7:Skip 108882
            IArray[Boolean] _14Concatenate;// 8:Concatenate3-ext->4:Concatenate 108878
            IArray[Boolean] _15EdgeSelection;// 4:SelectEdges-ext->5:EdgeSelection 108826
            IArray[Boolean] _16Combine;// 4:SelectEdges-ext->10:Combine 108825
            TriMesh _17SetEdgeSelection;// 4:SelectEdges-ext->2:SetEdgeSelection 108824
            _0Zero = Zero();
            _1Equal = Equal(subobject, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0VertexSelection;// 14:SubObjectSelection-ext->9:VertexSelection 108901
                _0VertexSelection = VertexSelection(mesh);
                _0VertexSelection;
                }, () => 
              {
                Int32 _0One;// 2:Switch3-ext->2:One 108900
                Boolean _1Equal;// 2:Switch3-ext->7:Equal 108899
                IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 108898
                _0One = One();
                _1Equal = Equal(subobject, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    IArray[Boolean] _0EdgeSelection;// 14:SubObjectSelection-ext->8:EdgeSelection 108902
                    _0EdgeSelection = EdgeSelection(mesh);
                    _0EdgeSelection;
                    }, () => 
                  {
                    IArray[Boolean] _0FaceSelection;// 14:SubObjectSelection-ext->5:FaceSelection 108903
                    _0FaceSelection = FaceSelection(mesh);
                    _0FaceSelection;
                    });
                _2IfThen;
                });
            _3Count = Count(_2IfThen);
            _4LesserInt = LesserInt(offset, _3Count);
            _5Take = Take(_2IfThen, _4LesserInt);
            _6Subtract = Subtract(_3Count, _4LesserInt);
            _7LesserInt = LesserInt(_6Subtract, count);
            _8Not = Not(invert);
            _9ArrayOf = ArrayOf(_8Not, _7LesserInt);
            _10IgnoreFirst = IgnoreFirst(_7LesserInt, _9ArrayOf);
            _11Concatenate = Concatenate(_5Take, _10IgnoreFirst);
            _12Add = Add(_4LesserInt, _7LesserInt);
            _13Skip = Skip(_2IfThen, _12Add);
            _14Concatenate = Concatenate(_11Concatenate, _13Skip);
            _15EdgeSelection = EdgeSelection(mesh);
            _16Combine = Combine(_14Concatenate, _15EdgeSelection, (Boolean x0, Boolean x1) => 
              {
                Int32 _0Zero;// 3:Switch3-ext->5:Zero 108836
                Boolean _1Equal;// 3:Switch3-ext->4:Equal 108835
                Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 108834
                _0Zero = Zero();
                _1Equal = Equal(selectionMethod, _0Zero);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    x0;
                    }, () => 
                  {
                    Int32 _0One;// 3:Switch3-ext->2:One 108839
                    Boolean _1Equal;// 3:Switch3-ext->7:Equal 108838
                    Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 108837
                    _0One = One();
                    _1Equal = Equal(selectionMethod, _0One);
                    _2IfThen = IfThen(_1Equal, () => 
                      {
                        Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 108840
                        _0OrElse = OrElse(x0, x1);
                        _0OrElse;
                        }, () => 
                      {
                        Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 108842
                        Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 108841
                        _0Not = Not(x0);
                        _1AndAlso = AndAlso(x1, _0Not);
                        _1AndAlso;
                        });
                    _2IfThen;
                    });
                _2IfThen;
                });
            _17SetEdgeSelection = SetEdgeSelection(mesh, _16Combine);
            _17SetEdgeSelection;
            }, () => 
          {
            Int32 _0Zero;// 2:Switch3-ext->5:Zero 108897
            Boolean _1Equal;// 2:Switch3-ext->4:Equal 108896
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 108895
            Int32 _3Count;// 12:ArraySetRange-ext->8:Count 108885
            Int32 _4LesserInt;// 12:ArraySetRange-ext->6:LesserInt 108884
            IArray[Boolean] _5Take;// 9:ArrayReplaceRange-ext->5:Take 108880
            Int32 _6Subtract;// 12:ArraySetRange-ext->10:Subtract 108887
            Int32 _7LesserInt;// 12:ArraySetRange-ext->1:LesserInt 108886
            Boolean _8Not;// 13:Not 108906
            IArray[Boolean] _9ArrayOf;// 12:ArraySetRange-ext->7:ArrayOf 108888
            IArray[Boolean] _10IgnoreFirst;// 9:ArrayReplaceRange-ext->6:IgnoreFirst 108881
            IArray[Boolean] _11Concatenate;// 8:Concatenate3-ext->3:Concatenate 108879
            Int32 _12Add;// 9:ArrayReplaceRange-ext->4:Add 108883
            IArray[Boolean] _13Skip;// 9:ArrayReplaceRange-ext->7:Skip 108882
            IArray[Boolean] _14Concatenate;// 8:Concatenate3-ext->4:Concatenate 108878
            IArray[Boolean] _15FaceSelection;// 6:SelectFaces-ext->2:FaceSelection 108848
            IArray[Boolean] _16Combine;// 6:SelectFaces-ext->10:Combine 108847
            TriMesh _17SetFaceSelection;// 6:SelectFaces-ext->11:SetFaceSelection 108846
            _0Zero = Zero();
            _1Equal = Equal(subobject, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0VertexSelection;// 14:SubObjectSelection-ext->9:VertexSelection 108901
                _0VertexSelection = VertexSelection(mesh);
                _0VertexSelection;
                }, () => 
              {
                Int32 _0One;// 2:Switch3-ext->2:One 108900
                Boolean _1Equal;// 2:Switch3-ext->7:Equal 108899
                IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 108898
                _0One = One();
                _1Equal = Equal(subobject, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    IArray[Boolean] _0EdgeSelection;// 14:SubObjectSelection-ext->8:EdgeSelection 108902
                    _0EdgeSelection = EdgeSelection(mesh);
                    _0EdgeSelection;
                    }, () => 
                  {
                    IArray[Boolean] _0FaceSelection;// 14:SubObjectSelection-ext->5:FaceSelection 108903
                    _0FaceSelection = FaceSelection(mesh);
                    _0FaceSelection;
                    });
                _2IfThen;
                });
            _3Count = Count(_2IfThen);
            _4LesserInt = LesserInt(offset, _3Count);
            _5Take = Take(_2IfThen, _4LesserInt);
            _6Subtract = Subtract(_3Count, _4LesserInt);
            _7LesserInt = LesserInt(_6Subtract, count);
            _8Not = Not(invert);
            _9ArrayOf = ArrayOf(_8Not, _7LesserInt);
            _10IgnoreFirst = IgnoreFirst(_7LesserInt, _9ArrayOf);
            _11Concatenate = Concatenate(_5Take, _10IgnoreFirst);
            _12Add = Add(_4LesserInt, _7LesserInt);
            _13Skip = Skip(_2IfThen, _12Add);
            _14Concatenate = Concatenate(_11Concatenate, _13Skip);
            _15FaceSelection = FaceSelection(mesh);
            _16Combine = Combine(_14Concatenate, _15FaceSelection, (Boolean x0, Boolean x1) => 
              {
                Int32 _0Zero;// 3:Switch3-ext->5:Zero 108858
                Boolean _1Equal;// 3:Switch3-ext->4:Equal 108857
                Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 108856
                _0Zero = Zero();
                _1Equal = Equal(selectionMethod, _0Zero);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    x0;
                    }, () => 
                  {
                    Int32 _0One;// 3:Switch3-ext->2:One 108861
                    Boolean _1Equal;// 3:Switch3-ext->7:Equal 108860
                    Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 108859
                    _0One = One();
                    _1Equal = Equal(selectionMethod, _0One);
                    _2IfThen = IfThen(_1Equal, () => 
                      {
                        Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 108862
                        _0OrElse = OrElse(x0, x1);
                        _0OrElse;
                        }, () => 
                      {
                        Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 108864
                        Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 108863
                        _0Not = Not(x0);
                        _1AndAlso = AndAlso(x1, _0Not);
                        _1AndAlso;
                        });
                    _2IfThen;
                    });
                _2IfThen;
                });
            _17SetFaceSelection = SetFaceSelection(mesh, _16Combine);
            _17SetFaceSelection;
            });
        _2IfThen;
        });
    _3Constant = before = ;
    _4Constant = Count = {0}, true count = {1}, false count = {2}, values = {3};
    _5Zero = Zero();
    _6Equal = Equal(subobject, _5Zero);
    _7IfThen = IfThen(_6Equal, () => 
      {
        IArray[Boolean] _0VertexSelection;// 14:SubObjectSelection-ext->9:VertexSelection 108901
        _0VertexSelection = VertexSelection(mesh);
        _0VertexSelection;
        }, () => 
      {
        Int32 _0One;// 2:Switch3-ext->2:One 108900
        Boolean _1Equal;// 2:Switch3-ext->7:Equal 108899
        IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 108898
        _0One = One();
        _1Equal = Equal(subobject, _0One);
        _2IfThen = IfThen(_1Equal, () => 
          {
            IArray[Boolean] _0EdgeSelection;// 14:SubObjectSelection-ext->8:EdgeSelection 108902
            _0EdgeSelection = EdgeSelection(mesh);
            _0EdgeSelection;
            }, () => 
          {
            IArray[Boolean] _0FaceSelection;// 14:SubObjectSelection-ext->5:FaceSelection 108903
            _0FaceSelection = FaceSelection(mesh);
            _0FaceSelection;
            });
        _2IfThen;
        });
    _8Map = Map(_7IfThen, (Boolean x0) => 
      {
        if (x0)
          {
            Int32 _0One;// 7:BooleanToInt-ext->2:One 108951
            _0One = One();
            _0One;
            }else
          {
            Int32 _1Zero;// 7:BooleanToInt-ext->3:Zero 108952
            _1Zero = Zero();
            _1Zero;
            };
        });
    _9Count = Count(_8Map);
    _10ToString = ToString(_9Count);
    _11Unit = Unit(_10ToString);
    _12DefaultValueOfElement = DefaultValueOfElement(_8Map);
    _13Aggregate = Aggregate(_8Map, _12DefaultValueOfElement, (Int32 x0, Int32 x1) => 
      {
        Int32 _0Add;// 6:Sum->2:Add 108957
        _0Add = Add(x0, x1);
        _0Add;
        });
    _14ToString = ToString(_13Aggregate);
    _15Append = Append(_11Unit, _14ToString);
    _16Subtract = Subtract(_9Count, _13Aggregate);
    _17ToString = ToString(_16Subtract);
    _18Append = Append(_15Append, _17ToString);
    _19Count = Count(_8Map);
    _20Ten = Ten();
    _21GreaterThan = GreaterThan(_19Count, _20Ten);
    _22IfThen = IfThen(_21GreaterThan, () => 
      {
        Int32 _0One;// 0:MinusOne->2:One 108984
        Int32 _1Subtract;// 0:MinusOne->1:Subtract 108983
        IArray[Int32] _2Take;// 1:StringEllidedJoin-ext->5:Take 108981
        IArray[String] _3Map;// 6:StringJoin->7:Map 108974
        Int32 _4One;// 10:SkipOne->2:One 108973
        IArray[String] _5Skip;// 10:SkipOne->3:Skip 108972
        Int32 _6Zero;// 3:First->2:Zero 108978
        String _7At;// 3:First->0:At 108977
        String _8Constant;// 20:SelectionStatsString-ext->0:Constant 109008
        String _9Aggregate;// 6:StringJoin->2:Aggregate 108970
        String _10Constant;// 1:StringEllidedJoin-ext->0:Constant 108985
        String _11ConcatenateStrings;// 1:StringEllidedJoin-ext->10:ConcatenateStrings 108967
        Int32 _12Count;// 3:LastIndex->2:Count 108993
        Int32 _13One;// 3:MinusOne->2:One 108992
        Int32 _14Subtract;// 3:MinusOne->1:Subtract 108991
        Int32 _15At;// 14:Last->0:At 108988
        String _16ToString;// 1:StringEllidedJoin-ext->13:ToString 108986
        String _17ConcatenateStrings;// 1:StringEllidedJoin-ext->12:ConcatenateStrings 108966
        _0One = One();
        _1Subtract = Subtract(_20Ten, _0One);
        _2Take = Take(_8Map, _1Subtract);
        _3Map = Map(_2Take, (Int32 x0) => 
          {
            String _0ToString;// 6:StringJoin->8:ToString 108975
            _0ToString = ToString(x0);
            _0ToString;
            });
        _4One = One();
        _5Skip = Skip(_3Map, _4One);
        _6Zero = Zero();
        _7At = At(_3Map, _6Zero);
        _8Constant = , ;
        _9Aggregate = Aggregate(_5Skip, _7At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 6:StringJoin->4:ConcatenateStrings 108980
            String _1ConcatenateStrings;// 6:StringJoin->5:ConcatenateStrings 108979
            _0ConcatenateStrings = ConcatenateStrings(x0, _8Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _10Constant =  ... ;
        _11ConcatenateStrings = ConcatenateStrings(_9Aggregate, _10Constant);
        _12Count = Count(_8Map);
        _13One = One();
        _14Subtract = Subtract(_12Count, _13One);
        _15At = At(_8Map, _14Subtract);
        _16ToString = ToString(_15At);
        _17ConcatenateStrings = ConcatenateStrings(_11ConcatenateStrings, _16ToString);
        _17ConcatenateStrings;
        }, () => 
      {
        IArray[String] _0Map;// 2:StringJoin->7:Map 109000
        Int32 _1One;// 10:SkipOne->2:One 108999
        IArray[String] _2Skip;// 10:SkipOne->3:Skip 108998
        Int32 _3Zero;// 3:First->2:Zero 109004
        String _4At;// 3:First->0:At 109003
        String _5Constant;// 20:SelectionStatsString-ext->0:Constant 109008
        String _6Aggregate;// 2:StringJoin->2:Aggregate 108996
        _0Map = Map(_8Map, (Int32 x0) => 
          {
            String _0ToString;// 2:StringJoin->8:ToString 109001
            _0ToString = ToString(x0);
            _0ToString;
            });
        _1One = One();
        _2Skip = Skip(_0Map, _1One);
        _3Zero = Zero();
        _4At = At(_0Map, _3Zero);
        _5Constant = , ;
        _6Aggregate = Aggregate(_2Skip, _4At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 2:StringJoin->4:ConcatenateStrings 109006
            String _1ConcatenateStrings;// 2:StringJoin->5:ConcatenateStrings 109005
            _0ConcatenateStrings = ConcatenateStrings(x0, _5Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _6Aggregate;
        });
    _23Append = Append(_18Append, _22IfThen);
    _24Count = Count(_23Append);
    _25Repeat = Repeat(_4Constant, _24Count, (String x0, Int32 x1) => 
      {
        String _0Constant;// 13:StringFormat-ext->0:Constant 108928
        String _1ToString;// 13:StringFormat-ext->8:ToString 108929
        String _2ConcatenateStrings;// 9:StringsConcatenate3-ext->3:ConcatenateStrings 108927
        String _3Constant;// 13:StringFormat-ext->0:Constant 108931
        String _4ConcatenateStrings;// 9:StringsConcatenate3-ext->4:ConcatenateStrings 108926
        String _5At;// 13:StringFormat-ext->3:At 108932
        String _6ReplaceString;// 13:StringFormat-ext->6:ReplaceString 108922
        _0Constant = {;
        _1ToString = ToString(x1);
        _2ConcatenateStrings = ConcatenateStrings(_0Constant, _1ToString);
        _3Constant = };
        _4ConcatenateStrings = ConcatenateStrings(_2ConcatenateStrings, _3Constant);
        _5At = At(_23Append, x1);
        _6ReplaceString = ReplaceString(x0, _4ConcatenateStrings, _5At);
        _6ReplaceString;
        });
    _26ConcatenateStrings = ConcatenateStrings(_3Constant, _25Repeat);
    _27Constant = \n;
    _28ConcatenateStrings = ConcatenateStrings(_26ConcatenateStrings, _27Constant);
    _29Constant = after = ;
    _30Constant = Count = {0}, true count = {1}, false count = {2}, values = {3};
    _31Zero = Zero();
    _32Equal = Equal(subobject, _31Zero);
    _33IfThen = IfThen(_32Equal, () => 
      {
        IArray[Boolean] _0VertexSelection;// 8:SubObjectSelection-ext->9:VertexSelection 109116
        _0VertexSelection = VertexSelection(_2IfThen);
        _0VertexSelection;
        }, () => 
      {
        Int32 _0One;// 2:Switch3-ext->2:One 109115
        Boolean _1Equal;// 2:Switch3-ext->7:Equal 109114
        IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 109113
        _0One = One();
        _1Equal = Equal(subobject, _0One);
        _2IfThen = IfThen(_1Equal, () => 
          {
            IArray[Boolean] _0EdgeSelection;// 8:SubObjectSelection-ext->8:EdgeSelection 109117
            _0EdgeSelection = EdgeSelection(_2IfThen);
            _0EdgeSelection;
            }, () => 
          {
            IArray[Boolean] _0FaceSelection;// 8:SubObjectSelection-ext->5:FaceSelection 109118
            _0FaceSelection = FaceSelection(_2IfThen);
            _0FaceSelection;
            });
        _2IfThen;
        });
    _34Map = Map(_33IfThen, (Boolean x0) => 
      {
        if (x0)
          {
            Int32 _0One;// 7:BooleanToInt-ext->2:One 109046
            _0One = One();
            _0One;
            }else
          {
            Int32 _1Zero;// 7:BooleanToInt-ext->3:Zero 109047
            _1Zero = Zero();
            _1Zero;
            };
        });
    _35Count = Count(_34Map);
    _36ToString = ToString(_35Count);
    _37Unit = Unit(_36ToString);
    _38DefaultValueOfElement = DefaultValueOfElement(_34Map);
    _39Aggregate = Aggregate(_34Map, _38DefaultValueOfElement, (Int32 x0, Int32 x1) => 
      {
        Int32 _0Add;// 6:Sum->2:Add 109052
        _0Add = Add(x0, x1);
        _0Add;
        });
    _40ToString = ToString(_39Aggregate);
    _41Append = Append(_37Unit, _40ToString);
    _42Subtract = Subtract(_35Count, _39Aggregate);
    _43ToString = ToString(_42Subtract);
    _44Append = Append(_41Append, _43ToString);
    _45Count = Count(_34Map);
    _46Ten = Ten();
    _47GreaterThan = GreaterThan(_45Count, _46Ten);
    _48IfThen = IfThen(_47GreaterThan, () => 
      {
        Int32 _0One;// 0:MinusOne->2:One 109079
        Int32 _1Subtract;// 0:MinusOne->1:Subtract 109078
        IArray[Int32] _2Take;// 1:StringEllidedJoin-ext->5:Take 109076
        IArray[String] _3Map;// 6:StringJoin->7:Map 109069
        Int32 _4One;// 10:SkipOne->2:One 109068
        IArray[String] _5Skip;// 10:SkipOne->3:Skip 109067
        Int32 _6Zero;// 3:First->2:Zero 109073
        String _7At;// 3:First->0:At 109072
        String _8Constant;// 22:SelectionStatsString-ext->0:Constant 109103
        String _9Aggregate;// 6:StringJoin->2:Aggregate 109065
        String _10Constant;// 1:StringEllidedJoin-ext->0:Constant 109080
        String _11ConcatenateStrings;// 1:StringEllidedJoin-ext->10:ConcatenateStrings 109062
        Int32 _12Count;// 3:LastIndex->2:Count 109088
        Int32 _13One;// 3:MinusOne->2:One 109087
        Int32 _14Subtract;// 3:MinusOne->1:Subtract 109086
        Int32 _15At;// 14:Last->0:At 109083
        String _16ToString;// 1:StringEllidedJoin-ext->13:ToString 109081
        String _17ConcatenateStrings;// 1:StringEllidedJoin-ext->12:ConcatenateStrings 109061
        _0One = One();
        _1Subtract = Subtract(_46Ten, _0One);
        _2Take = Take(_34Map, _1Subtract);
        _3Map = Map(_2Take, (Int32 x0) => 
          {
            String _0ToString;// 6:StringJoin->8:ToString 109070
            _0ToString = ToString(x0);
            _0ToString;
            });
        _4One = One();
        _5Skip = Skip(_3Map, _4One);
        _6Zero = Zero();
        _7At = At(_3Map, _6Zero);
        _8Constant = , ;
        _9Aggregate = Aggregate(_5Skip, _7At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 6:StringJoin->4:ConcatenateStrings 109075
            String _1ConcatenateStrings;// 6:StringJoin->5:ConcatenateStrings 109074
            _0ConcatenateStrings = ConcatenateStrings(x0, _8Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _10Constant =  ... ;
        _11ConcatenateStrings = ConcatenateStrings(_9Aggregate, _10Constant);
        _12Count = Count(_34Map);
        _13One = One();
        _14Subtract = Subtract(_12Count, _13One);
        _15At = At(_34Map, _14Subtract);
        _16ToString = ToString(_15At);
        _17ConcatenateStrings = ConcatenateStrings(_11ConcatenateStrings, _16ToString);
        _17ConcatenateStrings;
        }, () => 
      {
        IArray[String] _0Map;// 2:StringJoin->7:Map 109095
        Int32 _1One;// 10:SkipOne->2:One 109094
        IArray[String] _2Skip;// 10:SkipOne->3:Skip 109093
        Int32 _3Zero;// 3:First->2:Zero 109099
        String _4At;// 3:First->0:At 109098
        String _5Constant;// 22:SelectionStatsString-ext->0:Constant 109103
        String _6Aggregate;// 2:StringJoin->2:Aggregate 109091
        _0Map = Map(_34Map, (Int32 x0) => 
          {
            String _0ToString;// 2:StringJoin->8:ToString 109096
            _0ToString = ToString(x0);
            _0ToString;
            });
        _1One = One();
        _2Skip = Skip(_0Map, _1One);
        _3Zero = Zero();
        _4At = At(_0Map, _3Zero);
        _5Constant = , ;
        _6Aggregate = Aggregate(_2Skip, _4At, (String x0, String x1) => 
          {
            String _0ConcatenateStrings;// 2:StringJoin->4:ConcatenateStrings 109101
            String _1ConcatenateStrings;// 2:StringJoin->5:ConcatenateStrings 109100
            _0ConcatenateStrings = ConcatenateStrings(x0, _5Constant);
            _1ConcatenateStrings = ConcatenateStrings(_0ConcatenateStrings, x1);
            _1ConcatenateStrings;
            });
        _6Aggregate;
        });
    _49Append = Append(_44Append, _48IfThen);
    _50Count = Count(_49Append);
    _51Repeat = Repeat(_30Constant, _50Count, (String x0, Int32 x1) => 
      {
        String _0Constant;// 13:StringFormat-ext->0:Constant 109023
        String _1ToString;// 13:StringFormat-ext->8:ToString 109024
        String _2ConcatenateStrings;// 9:StringsConcatenate3-ext->3:ConcatenateStrings 109022
        String _3Constant;// 13:StringFormat-ext->0:Constant 109026
        String _4ConcatenateStrings;// 9:StringsConcatenate3-ext->4:ConcatenateStrings 109021
        String _5At;// 13:StringFormat-ext->3:At 109027
        String _6ReplaceString;// 13:StringFormat-ext->6:ReplaceString 109017
        _0Constant = {;
        _1ToString = ToString(x1);
        _2ConcatenateStrings = ConcatenateStrings(_0Constant, _1ToString);
        _3Constant = };
        _4ConcatenateStrings = ConcatenateStrings(_2ConcatenateStrings, _3Constant);
        _5At = At(_49Append, x1);
        _6ReplaceString = ReplaceString(x0, _4ConcatenateStrings, _5At);
        _6ReplaceString;
        });
    _52ConcatenateStrings = ConcatenateStrings(_29Constant, _51Repeat);
    _53ConcatenateStrings = ConcatenateStrings(_28ConcatenateStrings, _52ConcatenateStrings);
    _55IgnoreSecond = IgnoreSecond(_2IfThen, if (statistics)
      {
        String _54Print;// 6:PrintOnSignal-ext->3:Print 108784
        _54Print = Print(_53ConcatenateStrings);
        _54Print;
        }else
      {
        _53ConcatenateStrings;
        });
    _55IgnoreSecond;
    }