(InstanceState state, Boolean apply spacing, TriMesh mesh, Int32 flux channel, Boolean bidirectional, INode spline, Boolean world space, Matrix modifierTransform, Single cornerA offset, Single cornerB offset, Boolean scale when spacing, Single max distance, Boolean create mesh, Single box radius) => 
  {
    Boolean _0CanGetSplineFromNode;// 13:SplineFromNodeOrExit.ext->3:CanGetSplineFromNode 48816
    Boolean _1Not;// 13:SplineFromNodeOrExit.ext->5:Not 48815
    INode _2ExitIf;// 13:SplineFromNodeOrExit.ext->4:ExitIf 48814
    Spline _3SplineFromNode;// 13:SplineFromNodeOrExit.ext->0:SplineFromNode 48813
    IArray[Int32] _4SplineSegmentIndices;// 9:SplineLinesInLocalSpace.ext->1:SplineSegmentIndices 48811
    IArray[Vector3] _5SplineVerticesBuffer;// 9:SplineLinesInLocalSpace.ext->2:SplineVerticesBuffer 48826
    IArray[Vector3] _8Pass-through: array;// 0:Pass-through: array 48817
    Matrix _9InvertMatrix;// 9:SplineLinesInLocalSpace.ext->8:InvertMatrix 48828
    IArray[Vector3] _10Map;// 7:TransformPoints->3:Map 48819
    IArray[Vector3] _11Map;// 3:SelectByIndex->2:Map 48809
    Int32 _12Zero;// 4:CombineEveryTwoElements.ext->7:Zero 48803
    Int32 _13Two;// 4:CombineEveryTwoElements.ext->6:Two 48804
    IArray[Vector3] _14Stride;// 4:CombineEveryTwoElements.ext->1:Stride 48802
    Int32 _15One;// 4:CombineEveryTwoElements.ext->8:One 48806
    IArray[Vector3] _16Stride;// 4:CombineEveryTwoElements.ext->2:Stride 48805
    Func[Vector3, Vector3, Line] _17Pass-through: function2;// 0:Pass-through: function2 48800
    IArray[Line] _18Combine;// 4:CombineEveryTwoElements.ext->3:Combine 48801
    IArray[Line] _22Pass-through: array;// 0:Pass-through: array 48788
    Func[Line, IArray[Matrix]] _23Pass-through: function1;// 0:Pass-through: function1 48789
    IArray[IArray[Matrix]] _24Map;// 3:FlatMap->4:Map 48791
    IArray[Matrix] _25Flatten;// 3:FlatMap->3:Flatten 48790
    IArray[Int32] _26Indices;// 43:MapWithIndexes->3:Indices 48787
    Boolean _27True;// 50:True 48971
    Int32 _28Two;// 48:Two 48985
    Func[Matrix, Int32, Matrix] _29Pass-through: any;// 0:Pass-through: any 48785
    IArray[Matrix] _30Combine;// 43:MapWithIndexes->2:Combine 48786
    Func[Matrix, IArray[Vector3]] _31Pass-through: function1;// 0:Pass-through: function1 48770
    IArray[IArray[Vector3]] _32Map;// 5:FlatMap->4:Map 48772
    IArray[Vector3] _33Flatten;// 5:FlatMap->3:Flatten 48771
    IArray[Int32] _34MeshIndices;// 0:StoreMatricesInMapChannel.ext->0:MeshIndices 48781
    TriMesh _35SetMapChannel;// 0:StoreMatricesInMapChannel.ext->7:SetMapChannel 48768
    TriMesh _60Pass-through: TriMesh;// 0:Pass-through: TriMesh 48475
    MapChannel _88GetMapChannel;// 4:MatricesFromMapChannel.ext->9:GetMapChannel 48651
    IArray[Vector3] _89MapChannelVertexBuffer;// 4:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 48650
    Int32 _90Count;// 2:Slices->2:Count 48647
    Int32 _91Constant;// 4:MatricesFromMapChannel.ext->0:Constant 48652
    Int32 _92Divide;// 2:Slices->3:Divide 48646
    IArray[Int32] _93Range;// 2:Slices->4:Range 48645
    IArray[IArray[Vector3]] _94Map;// 2:Slices->5:Map 48644
    IArray[Matrix] _95Map;// 4:MatricesFromMapChannel.ext->5:Map 48641
    Int32 _96Zero;// 1:CombineEveryTwoElements.ext->7:Zero 48635
    Int32 _97Two;// 1:CombineEveryTwoElements.ext->6:Two 48636
    IArray[Matrix] _98Stride;// 1:CombineEveryTwoElements.ext->1:Stride 48634
    Int32 _99One;// 1:CombineEveryTwoElements.ext->8:One 48638
    IArray[Matrix] _100Stride;// 1:CombineEveryTwoElements.ext->2:Stride 48637
    Func[Matrix, Matrix, IArray[Matrix]] _101Pass-through: function2;// 0:Pass-through: function2 48632
    IArray[IArray[Matrix]] _102Combine;// 1:CombineEveryTwoElements.ext->3:Combine 48633
    IArray[Matrix] _103Flatten;// 25:ClonerSpacing.ext->16:Flatten 48630
    TriMesh _132IgnoreFirst;// 1:ClonerMeshAsBoxes.ext->7:IgnoreFirst 48479
    _0CanGetSplineFromNode = CanGetSplineFromNode(spline);
    _1Not = Not(_0CanGetSplineFromNode);
    _2ExitIf = ExitIf(spline, _1Not);
    _3SplineFromNode = SplineFromNode(_2ExitIf);
    _4SplineSegmentIndices = SplineSegmentIndices(_3SplineFromNode);
    _5SplineVerticesBuffer = SplineVerticesBuffer(_3SplineFromNode);
    _8Pass-through: array = if (world space)
      {
        Matrix _6ObjectTransformBeforeWSM;// 9:SplineLinesInLocalSpace.ext->12:ObjectTransformBeforeWSM 48827
        IArray[Vector3] _7Map;// 10:TransformPoints->3:Map 48824
        _6ObjectTransformBeforeWSM = ObjectTransformBeforeWSM(spline);
        _7Map = Map(_5SplineVerticesBuffer, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 10:TransformPoints->4:Transform 48825
            _0Transform = Transform(x0, _6ObjectTransformBeforeWSM);
            _0Transform;
            });
        _7Map;
        }else
      {
        _5SplineVerticesBuffer;
        };
    _9InvertMatrix = InvertMatrix(modifierTransform);
    _10Map = Map(_8Pass-through: array, (Vector3 x0) => 
      {
        Vector3 _0Transform;// 7:TransformPoints->4:Transform 48820
        _0Transform = Transform(x0, _9InvertMatrix);
        _0Transform;
        });
    _11Map = Map(_4SplineSegmentIndices, (Int32 x0) => 
      {
        Vector3 _0At;// 3:SelectByIndex->3:At 48810
        _0At = At(_10Map, x0);
        _0At;
        });
    _12Zero = Zero();
    _13Two = Two();
    _14Stride = Stride(_11Map, _12Zero, _13Two);
    _15One = One();
    _16Stride = Stride(_11Map, _15One, _13Two);
    _17Pass-through: function2 = (Vector3 x0, Vector3 x1) => 
      {
        Line _0Line;// 9:SplineLinesInLocalSpace.ext->5:Line 48829
        _0Line = Line(x0, x1);
        _0Line;
        };
    _18Combine = Combine(_14Stride, _16Stride, _17Pass-through: function2);
    _22Pass-through: array = if (bidirectional)
      {
        IArray[Line] _19Reverse;// 18:Reverse 48834
        IArray[Line] _20Map;// 19:Map 48833
        IArray[Line] _21Concatenate;// 15:Concatenate 48794
        _19Reverse = Reverse(_18Combine);
        _20Map = Map(_19Reverse, (Line x0) => 
          {
            Vector3 _0LineB;// 12:LineReverse.ext->2:LineB 48837
            Vector3 _1LineA;// 12:LineReverse.ext->3:LineA 48838
            Line _2Line;// 12:LineReverse.ext->1:Line 48836
            _0LineB = LineB(x0);
            _1LineA = LineA(x0);
            _2Line = Line(_0LineB, _1LineA);
            _2Line;
            });
        _21Concatenate = Concatenate(_18Combine, _20Map);
        _21Concatenate;
        }else
      {
        _18Combine;
        };
    _23Pass-through: function1 = (Line x0) => 
      {
        Vector3 _0LineB;// 12:LineVector.ext->2:LineB 48953
        Vector3 _1LineA;// 12:LineVector.ext->1:LineA 48954
        Vector3 _2Subtract;// 12:LineVector.ext->3:Subtract 48952
        Single _3Length;// 8:VectorIsSmall.ext->3:Length 48855
        Single _4Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48856
        Boolean _5LessThan;// 8:VectorIsSmall.ext->5:LessThan 48854
        Matrix _6MatrixIdentity;// 5:LineMatrices.ext->2:MatrixIdentity 48955
        Vector3 _106LineA;// 5:LineMatrices.ext->4:LineA 48956
        Matrix _107SetMatrixTranslation;// 5:LineMatrices.ext->3:SetMatrixTranslation 48844
        IArray[Matrix] _108Unit;// 7:Array2->2:Unit 48843
        Vector3 _208LineB;// 5:LineMatrices.ext->9:LineB 48958
        Matrix _209SetMatrixTranslation;// 5:LineMatrices.ext->8:SetMatrixTranslation 48957
        IArray[Matrix] _210Append;// 7:Array2->3:Append 48842
        _0LineB = LineB(x0);
        _1LineA = LineA(x0);
        _2Subtract = Subtract(_0LineB, _1LineA);
        _3Length = Length(_2Subtract);
        _4Constant = 1E-06;
        _5LessThan = LessThan(_3Length, _4Constant);
        _6MatrixIdentity = MatrixIdentity();
        _106LineA = LineA(x0);
        _107SetMatrixTranslation = SetMatrixTranslation(if (_5LessThan)
          {
            _6MatrixIdentity;
            }else
          {
            Vector3 _7ZAxis;// 11:MatrixLookatDefault.ext->1:ZAxis 48948
            Vector3 _8YAxis;// 11:MatrixLookatDefault.ext->3:YAxis 48949
            Vector3 _9IgnoreFirst;// 0:MatrixLookat.ext->4:IgnoreFirst 48902
            Matrix _10InvertMatrix;// 0:MatrixOrientAroundAxis.ext->16:InvertMatrix 48947
            Vector3 _11Transform;// 0:MatrixOrientAroundAxis.ext->13:Transform 48946
            Vector3 _12Normalize;// 0:MatrixOrientAroundAxis.ext->15:Normalize 48945
            Single _13Dot;// 5:Projection->3:Dot 48943
            Single _14LengthSquared;// 5:Projection->4:LengthSquared 48944
            Single _15Divide;// 5:Projection->5:Divide 48942
            Vector3 _16MultiplyByScalar;// 5:Projection->2:MultiplyByScalar 48941
            Vector3 _17Subtract;// 6:ProjectionOntoPlaneSpecifiedByNormal.ext->3:Subtract 48938
            Vector3 _18XAxis;// 11:MatrixLookatDefault.ext->2:XAxis 48950
            Vector3 _19Cross;// 12:VectorAngleSigned.ext->5:Cross 48917
            Single _20Dot;// 12:VectorAngleSigned.ext->4:Dot 48916
            Single _21FloatZero;// 7:GtEqZ.ext->1:FloatZero 48915
            Boolean _22GreaterThanOrEqual;// 7:GtEqZ.ext->2:GreaterThanOrEqual 48914
            Single _23Length;// 8:VectorIsSmall.ext->3:Length 48925
            Single _24Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48926
            Boolean _25LessThan;// 8:VectorIsSmall.ext->5:LessThan 48924
            Single _26Length;// 9:VectorIsSmall.ext->3:Length 48929
            Single _27Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48930
            Boolean _28LessThan;// 9:VectorIsSmall.ext->5:LessThan 48928
            Boolean _29OrElse;// 3:AngleOfVectorsFix.ext->10:OrElse 48922
            Matrix _46MatrixFromAxisAngle;// 0:MatrixOrientAroundAxis.ext->10:MatrixFromAxisAngle 48908
            Matrix _47Multiply;// 0:MatrixOrientAroundAxis.ext->9:Multiply 48907
            Matrix _48InvertMatrix;// 6:MatrixOrientAroundAxis.ext->16:InvertMatrix 48901
            Vector3 _49Transform;// 6:MatrixOrientAroundAxis.ext->13:Transform 48900
            Vector3 _50Normalize;// 6:MatrixOrientAroundAxis.ext->15:Normalize 48899
            Single _51Dot;// 5:Projection->3:Dot 48897
            Single _52LengthSquared;// 5:Projection->4:LengthSquared 48898
            Single _53Divide;// 5:Projection->5:Divide 48896
            Vector3 _54MultiplyByScalar;// 5:Projection->2:MultiplyByScalar 48895
            Vector3 _55Subtract;// 6:ProjectionOntoPlaneSpecifiedByNormal.ext->3:Subtract 48892
            Vector3 _56Cross;// 12:VectorAngleSigned.ext->5:Cross 48871
            Single _57Dot;// 12:VectorAngleSigned.ext->4:Dot 48870
            Single _58FloatZero;// 7:GtEqZ.ext->1:FloatZero 48869
            Boolean _59GreaterThanOrEqual;// 7:GtEqZ.ext->2:GreaterThanOrEqual 48868
            Single _60Length;// 8:VectorIsSmall.ext->3:Length 48879
            Single _61Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48880
            Boolean _62LessThan;// 8:VectorIsSmall.ext->5:LessThan 48878
            Single _63Length;// 9:VectorIsSmall.ext->3:Length 48883
            Single _64Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48884
            Boolean _65LessThan;// 9:VectorIsSmall.ext->5:LessThan 48882
            Boolean _66OrElse;// 3:AngleOfVectorsFix.ext->10:OrElse 48876
            Matrix _104MatrixFromAxisAngle;// 6:MatrixOrientAroundAxis.ext->10:MatrixFromAxisAngle 48862
            Matrix _105Multiply;// 6:MatrixOrientAroundAxis.ext->9:Multiply 48861
            _7ZAxis = ZAxis();
            _8YAxis = YAxis();
            _9IgnoreFirst = IgnoreFirst(_7ZAxis, _8YAxis);
            _10InvertMatrix = InvertMatrix(_6MatrixIdentity);
            _11Transform = Transform(_2Subtract, _10InvertMatrix);
            _12Normalize = Normalize(_11Transform);
            _13Dot = Dot(_12Normalize, _7ZAxis);
            _14LengthSquared = LengthSquared(_7ZAxis);
            _15Divide = Divide(_13Dot, _14LengthSquared);
            _16MultiplyByScalar = MultiplyByScalar(_7ZAxis, _15Divide);
            _17Subtract = Subtract(_12Normalize, _16MultiplyByScalar);
            _18XAxis = XAxis();
            _19Cross = Cross(_17Subtract, _18XAxis);
            _20Dot = Dot(_7ZAxis, _19Cross);
            _21FloatZero = FloatZero();
            _22GreaterThanOrEqual = GreaterThanOrEqual(_20Dot, _21FloatZero);
            _23Length = Length(_17Subtract);
            _24Constant = 1E-06;
            _25LessThan = LessThan(_23Length, _24Constant);
            _26Length = Length(_18XAxis);
            _27Constant = 1E-06;
            _28LessThan = LessThan(_26Length, _27Constant);
            _29OrElse = OrElse(_25LessThan, _28LessThan);
            _46MatrixFromAxisAngle = MatrixFromAxisAngle(_7ZAxis, if (_22GreaterThanOrEqual)
              {
                Single _40NegativeFloat;// 12:VectorAngleSigned.ext->6:NegativeFloat 48918
                _40NegativeFloat = NegativeFloat(if (_29OrElse)
                  {
                    Single _35FloatZero;// 3:AngleOfVectorsFix.ext->5:FloatZero 48931
                    _35FloatZero = FloatZero();
                    _35FloatZero;
                    }else
                  {
                    Vector3 _36Cross;// 3:AngleOfVectorsFix.ext->11:Cross 48934
                    Single _37Length;// 3:AngleOfVectorsFix.ext->3:Length 48933
                    Single _38Dot;// 3:AngleOfVectorsFix.ext->12:Dot 48935
                    Single _39Atan2;// 3:AngleOfVectorsFix.ext->2:Atan2 48932
                    _36Cross = Cross(_17Subtract, _18XAxis);
                    _37Length = Length(_36Cross);
                    _38Dot = Dot(_17Subtract, _18XAxis);
                    _39Atan2 = Atan2(_37Length, _38Dot);
                    _39Atan2;
                    });
                _40NegativeFloat;
                }else
              {
                if (_29OrElse)
                  {
                    Single _41FloatZero;// 3:AngleOfVectorsFix.ext->5:FloatZero 48931
                    _41FloatZero = FloatZero();
                    _41FloatZero;
                    }else
                  {
                    Vector3 _42Cross;// 3:AngleOfVectorsFix.ext->11:Cross 48934
                    Single _43Length;// 3:AngleOfVectorsFix.ext->3:Length 48933
                    Single _44Dot;// 3:AngleOfVectorsFix.ext->12:Dot 48935
                    Single _45Atan2;// 3:AngleOfVectorsFix.ext->2:Atan2 48932
                    _42Cross = Cross(_17Subtract, _18XAxis);
                    _43Length = Length(_42Cross);
                    _44Dot = Dot(_17Subtract, _18XAxis);
                    _45Atan2 = Atan2(_43Length, _44Dot);
                    _45Atan2;
                    };
                });
            _47Multiply = Multiply(_46MatrixFromAxisAngle, _6MatrixIdentity);
            _48InvertMatrix = InvertMatrix(_47Multiply);
            _49Transform = Transform(_2Subtract, _48InvertMatrix);
            _50Normalize = Normalize(_49Transform);
            _51Dot = Dot(_50Normalize, _9IgnoreFirst);
            _52LengthSquared = LengthSquared(_9IgnoreFirst);
            _53Divide = Divide(_51Dot, _52LengthSquared);
            _54MultiplyByScalar = MultiplyByScalar(_9IgnoreFirst, _53Divide);
            _55Subtract = Subtract(_50Normalize, _54MultiplyByScalar);
            _56Cross = Cross(_55Subtract, _18XAxis);
            _57Dot = Dot(_9IgnoreFirst, _56Cross);
            _58FloatZero = FloatZero();
            _59GreaterThanOrEqual = GreaterThanOrEqual(_57Dot, _58FloatZero);
            _60Length = Length(_55Subtract);
            _61Constant = 1E-06;
            _62LessThan = LessThan(_60Length, _61Constant);
            _63Length = Length(_18XAxis);
            _64Constant = 1E-06;
            _65LessThan = LessThan(_63Length, _64Constant);
            _66OrElse = OrElse(_62LessThan, _65LessThan);
            _104MatrixFromAxisAngle = MatrixFromAxisAngle(_9IgnoreFirst, if (_59GreaterThanOrEqual)
              {
                Single _98NegativeFloat;// 12:VectorAngleSigned.ext->6:NegativeFloat 48872
                _98NegativeFloat = NegativeFloat(if (_66OrElse)
                  {
                    Single _93FloatZero;// 3:AngleOfVectorsFix.ext->5:FloatZero 48885
                    _93FloatZero = FloatZero();
                    _93FloatZero;
                    }else
                  {
                    Vector3 _94Cross;// 3:AngleOfVectorsFix.ext->11:Cross 48888
                    Single _95Length;// 3:AngleOfVectorsFix.ext->3:Length 48887
                    Single _96Dot;// 3:AngleOfVectorsFix.ext->12:Dot 48889
                    Single _97Atan2;// 3:AngleOfVectorsFix.ext->2:Atan2 48886
                    _94Cross = Cross(_55Subtract, _18XAxis);
                    _95Length = Length(_94Cross);
                    _96Dot = Dot(_55Subtract, _18XAxis);
                    _97Atan2 = Atan2(_95Length, _96Dot);
                    _97Atan2;
                    });
                _98NegativeFloat;
                }else
              {
                if (_66OrElse)
                  {
                    Single _99FloatZero;// 3:AngleOfVectorsFix.ext->5:FloatZero 48885
                    _99FloatZero = FloatZero();
                    _99FloatZero;
                    }else
                  {
                    Vector3 _100Cross;// 3:AngleOfVectorsFix.ext->11:Cross 48888
                    Single _101Length;// 3:AngleOfVectorsFix.ext->3:Length 48887
                    Single _102Dot;// 3:AngleOfVectorsFix.ext->12:Dot 48889
                    Single _103Atan2;// 3:AngleOfVectorsFix.ext->2:Atan2 48886
                    _100Cross = Cross(_55Subtract, _18XAxis);
                    _101Length = Length(_100Cross);
                    _102Dot = Dot(_55Subtract, _18XAxis);
                    _103Atan2 = Atan2(_101Length, _102Dot);
                    _103Atan2;
                    };
                });
            _105Multiply = Multiply(_104MatrixFromAxisAngle, _47Multiply);
            _105Multiply;
            }, _106LineA);
        _108Unit = Unit(_107SetMatrixTranslation);
        _208LineB = LineB(x0);
        _209SetMatrixTranslation = SetMatrixTranslation(if (_5LessThan)
          {
            _6MatrixIdentity;
            }else
          {
            Vector3 _109ZAxis;// 11:MatrixLookatDefault.ext->1:ZAxis 48948
            Vector3 _110YAxis;// 11:MatrixLookatDefault.ext->3:YAxis 48949
            Vector3 _111IgnoreFirst;// 0:MatrixLookat.ext->4:IgnoreFirst 48902
            Matrix _112InvertMatrix;// 0:MatrixOrientAroundAxis.ext->16:InvertMatrix 48947
            Vector3 _113Transform;// 0:MatrixOrientAroundAxis.ext->13:Transform 48946
            Vector3 _114Normalize;// 0:MatrixOrientAroundAxis.ext->15:Normalize 48945
            Single _115Dot;// 5:Projection->3:Dot 48943
            Single _116LengthSquared;// 5:Projection->4:LengthSquared 48944
            Single _117Divide;// 5:Projection->5:Divide 48942
            Vector3 _118MultiplyByScalar;// 5:Projection->2:MultiplyByScalar 48941
            Vector3 _119Subtract;// 6:ProjectionOntoPlaneSpecifiedByNormal.ext->3:Subtract 48938
            Vector3 _120XAxis;// 11:MatrixLookatDefault.ext->2:XAxis 48950
            Vector3 _121Cross;// 12:VectorAngleSigned.ext->5:Cross 48917
            Single _122Dot;// 12:VectorAngleSigned.ext->4:Dot 48916
            Single _123FloatZero;// 7:GtEqZ.ext->1:FloatZero 48915
            Boolean _124GreaterThanOrEqual;// 7:GtEqZ.ext->2:GreaterThanOrEqual 48914
            Single _125Length;// 8:VectorIsSmall.ext->3:Length 48925
            Single _126Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48926
            Boolean _127LessThan;// 8:VectorIsSmall.ext->5:LessThan 48924
            Single _128Length;// 9:VectorIsSmall.ext->3:Length 48929
            Single _129Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48930
            Boolean _130LessThan;// 9:VectorIsSmall.ext->5:LessThan 48928
            Boolean _131OrElse;// 3:AngleOfVectorsFix.ext->10:OrElse 48922
            Matrix _148MatrixFromAxisAngle;// 0:MatrixOrientAroundAxis.ext->10:MatrixFromAxisAngle 48908
            Matrix _149Multiply;// 0:MatrixOrientAroundAxis.ext->9:Multiply 48907
            Matrix _150InvertMatrix;// 6:MatrixOrientAroundAxis.ext->16:InvertMatrix 48901
            Vector3 _151Transform;// 6:MatrixOrientAroundAxis.ext->13:Transform 48900
            Vector3 _152Normalize;// 6:MatrixOrientAroundAxis.ext->15:Normalize 48899
            Single _153Dot;// 5:Projection->3:Dot 48897
            Single _154LengthSquared;// 5:Projection->4:LengthSquared 48898
            Single _155Divide;// 5:Projection->5:Divide 48896
            Vector3 _156MultiplyByScalar;// 5:Projection->2:MultiplyByScalar 48895
            Vector3 _157Subtract;// 6:ProjectionOntoPlaneSpecifiedByNormal.ext->3:Subtract 48892
            Vector3 _158Cross;// 12:VectorAngleSigned.ext->5:Cross 48871
            Single _159Dot;// 12:VectorAngleSigned.ext->4:Dot 48870
            Single _160FloatZero;// 7:GtEqZ.ext->1:FloatZero 48869
            Boolean _161GreaterThanOrEqual;// 7:GtEqZ.ext->2:GreaterThanOrEqual 48868
            Single _162Length;// 8:VectorIsSmall.ext->3:Length 48879
            Single _163Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48880
            Boolean _164LessThan;// 8:VectorIsSmall.ext->5:LessThan 48878
            Single _165Length;// 9:VectorIsSmall.ext->3:Length 48883
            Single _166Constant;// 4:VectorLengthEpsilon.ext->0:Constant 48884
            Boolean _167LessThan;// 9:VectorIsSmall.ext->5:LessThan 48882
            Boolean _168OrElse;// 3:AngleOfVectorsFix.ext->10:OrElse 48876
            Matrix _206MatrixFromAxisAngle;// 6:MatrixOrientAroundAxis.ext->10:MatrixFromAxisAngle 48862
            Matrix _207Multiply;// 6:MatrixOrientAroundAxis.ext->9:Multiply 48861
            _109ZAxis = ZAxis();
            _110YAxis = YAxis();
            _111IgnoreFirst = IgnoreFirst(_109ZAxis, _110YAxis);
            _112InvertMatrix = InvertMatrix(_6MatrixIdentity);
            _113Transform = Transform(_2Subtract, _112InvertMatrix);
            _114Normalize = Normalize(_113Transform);
            _115Dot = Dot(_114Normalize, _109ZAxis);
            _116LengthSquared = LengthSquared(_109ZAxis);
            _117Divide = Divide(_115Dot, _116LengthSquared);
            _118MultiplyByScalar = MultiplyByScalar(_109ZAxis, _117Divide);
            _119Subtract = Subtract(_114Normalize, _118MultiplyByScalar);
            _120XAxis = XAxis();
            _121Cross = Cross(_119Subtract, _120XAxis);
            _122Dot = Dot(_109ZAxis, _121Cross);
            _123FloatZero = FloatZero();
            _124GreaterThanOrEqual = GreaterThanOrEqual(_122Dot, _123FloatZero);
            _125Length = Length(_119Subtract);
            _126Constant = 1E-06;
            _127LessThan = LessThan(_125Length, _126Constant);
            _128Length = Length(_120XAxis);
            _129Constant = 1E-06;
            _130LessThan = LessThan(_128Length, _129Constant);
            _131OrElse = OrElse(_127LessThan, _130LessThan);
            _148MatrixFromAxisAngle = MatrixFromAxisAngle(_109ZAxis, if (_124GreaterThanOrEqual)
              {
                Single _142NegativeFloat;// 12:VectorAngleSigned.ext->6:NegativeFloat 48918
                _142NegativeFloat = NegativeFloat(if (_131OrElse)
                  {
                    Single _137FloatZero;// 3:AngleOfVectorsFix.ext->5:FloatZero 48931
                    _137FloatZero = FloatZero();
                    _137FloatZero;
                    }else
                  {
                    Vector3 _138Cross;// 3:AngleOfVectorsFix.ext->11:Cross 48934
                    Single _139Length;// 3:AngleOfVectorsFix.ext->3:Length 48933
                    Single _140Dot;// 3:AngleOfVectorsFix.ext->12:Dot 48935
                    Single _141Atan2;// 3:AngleOfVectorsFix.ext->2:Atan2 48932
                    _138Cross = Cross(_119Subtract, _120XAxis);
                    _139Length = Length(_138Cross);
                    _140Dot = Dot(_119Subtract, _120XAxis);
                    _141Atan2 = Atan2(_139Length, _140Dot);
                    _141Atan2;
                    });
                _142NegativeFloat;
                }else
              {
                if (_131OrElse)
                  {
                    Single _143FloatZero;// 3:AngleOfVectorsFix.ext->5:FloatZero 48931
                    _143FloatZero = FloatZero();
                    _143FloatZero;
                    }else
                  {
                    Vector3 _144Cross;// 3:AngleOfVectorsFix.ext->11:Cross 48934
                    Single _145Length;// 3:AngleOfVectorsFix.ext->3:Length 48933
                    Single _146Dot;// 3:AngleOfVectorsFix.ext->12:Dot 48935
                    Single _147Atan2;// 3:AngleOfVectorsFix.ext->2:Atan2 48932
                    _144Cross = Cross(_119Subtract, _120XAxis);
                    _145Length = Length(_144Cross);
                    _146Dot = Dot(_119Subtract, _120XAxis);
                    _147Atan2 = Atan2(_145Length, _146Dot);
                    _147Atan2;
                    };
                });
            _149Multiply = Multiply(_148MatrixFromAxisAngle, _6MatrixIdentity);
            _150InvertMatrix = InvertMatrix(_149Multiply);
            _151Transform = Transform(_2Subtract, _150InvertMatrix);
            _152Normalize = Normalize(_151Transform);
            _153Dot = Dot(_152Normalize, _111IgnoreFirst);
            _154LengthSquared = LengthSquared(_111IgnoreFirst);
            _155Divide = Divide(_153Dot, _154LengthSquared);
            _156MultiplyByScalar = MultiplyByScalar(_111IgnoreFirst, _155Divide);
            _157Subtract = Subtract(_152Normalize, _156MultiplyByScalar);
            _158Cross = Cross(_157Subtract, _120XAxis);
            _159Dot = Dot(_111IgnoreFirst, _158Cross);
            _160FloatZero = FloatZero();
            _161GreaterThanOrEqual = GreaterThanOrEqual(_159Dot, _160FloatZero);
            _162Length = Length(_157Subtract);
            _163Constant = 1E-06;
            _164LessThan = LessThan(_162Length, _163Constant);
            _165Length = Length(_120XAxis);
            _166Constant = 1E-06;
            _167LessThan = LessThan(_165Length, _166Constant);
            _168OrElse = OrElse(_164LessThan, _167LessThan);
            _206MatrixFromAxisAngle = MatrixFromAxisAngle(_111IgnoreFirst, if (_161GreaterThanOrEqual)
              {
                Single _200NegativeFloat;// 12:VectorAngleSigned.ext->6:NegativeFloat 48872
                _200NegativeFloat = NegativeFloat(if (_168OrElse)
                  {
                    Single _195FloatZero;// 3:AngleOfVectorsFix.ext->5:FloatZero 48885
                    _195FloatZero = FloatZero();
                    _195FloatZero;
                    }else
                  {
                    Vector3 _196Cross;// 3:AngleOfVectorsFix.ext->11:Cross 48888
                    Single _197Length;// 3:AngleOfVectorsFix.ext->3:Length 48887
                    Single _198Dot;// 3:AngleOfVectorsFix.ext->12:Dot 48889
                    Single _199Atan2;// 3:AngleOfVectorsFix.ext->2:Atan2 48886
                    _196Cross = Cross(_157Subtract, _120XAxis);
                    _197Length = Length(_196Cross);
                    _198Dot = Dot(_157Subtract, _120XAxis);
                    _199Atan2 = Atan2(_197Length, _198Dot);
                    _199Atan2;
                    });
                _200NegativeFloat;
                }else
              {
                if (_168OrElse)
                  {
                    Single _201FloatZero;// 3:AngleOfVectorsFix.ext->5:FloatZero 48885
                    _201FloatZero = FloatZero();
                    _201FloatZero;
                    }else
                  {
                    Vector3 _202Cross;// 3:AngleOfVectorsFix.ext->11:Cross 48888
                    Single _203Length;// 3:AngleOfVectorsFix.ext->3:Length 48887
                    Single _204Dot;// 3:AngleOfVectorsFix.ext->12:Dot 48889
                    Single _205Atan2;// 3:AngleOfVectorsFix.ext->2:Atan2 48886
                    _202Cross = Cross(_157Subtract, _120XAxis);
                    _203Length = Length(_202Cross);
                    _204Dot = Dot(_157Subtract, _120XAxis);
                    _205Atan2 = Atan2(_203Length, _204Dot);
                    _205Atan2;
                    };
                });
            _207Multiply = Multiply(_206MatrixFromAxisAngle, _149Multiply);
            _207Multiply;
            }, _208LineB);
        _210Append = Append(_108Unit, _209SetMatrixTranslation);
        _210Append;
        };
    _24Map = Map(_22Pass-through: array, _23Pass-through: function1);
    _25Flatten = Flatten(_24Map);
    _26Indices = Indices(_25Flatten);
    _27True = True();
    _28Two = Two();
    _29Pass-through: any = (Matrix x0, Int32 x1) => 
      {
        Boolean _0IgnoreFirst;// 54:IgnoreFirst 48969
        Vector3 _1XAxis;// 51:AlongXAxis->0:XAxis 48974
        Int32 _2Modulo;// 4:ModuloEquals->3:Modulo 48982
        Int32 _3Zero;// 45:ModuloEqualsZero->3:Zero 48983
        Boolean _4Equal;// 4:ModuloEquals->4:Equal 48981
        Single _5Pass-through: Single;// 0:Pass-through: Single 48972
        Vector3 _6MultiplyByScalar;// 51:AlongXAxis->1:MultiplyByScalar 48973
        Matrix _7TranslationMatrix;// 49:MatrixTranslate.ext->10:TranslationMatrix 48968
        _0IgnoreFirst = IgnoreFirst(x0, _27True);
        _1XAxis = XAxis();
        _2Modulo = Modulo(x1, _28Two);
        _3Zero = Zero();
        _4Equal = Equal(_2Modulo, _3Zero);
        _5Pass-through: Single = if (_4Equal)
          {
            cornerA offset;
            }else
          {
            cornerB offset;
            };
        _6MultiplyByScalar = MultiplyByScalar(_1XAxis, _5Pass-through: Single);
        _7TranslationMatrix = TranslationMatrix(_6MultiplyByScalar);
        if (_0IgnoreFirst)
          {
            Matrix _8Multiply;// 6:MatrixApplyTransform.ext->4:Multiply 48966
            _8Multiply = Multiply(_7TranslationMatrix, x0);
            _8Multiply;
            }else
          {
            Matrix _9Multiply;// 6:MatrixApplyTransform.ext->9:Multiply 48967
            _9Multiply = Multiply(x0, _7TranslationMatrix);
            _9Multiply;
            };
        };
    _30Combine = Combine(_25Flatten, _26Indices, _29Pass-through: any);
    _31Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 48776
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 48775
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 48774
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 48780
            Int32 _1Add;// 5:PlusOne->0:Add 48779
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 48777
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _32Map = Map(_30Combine, _31Pass-through: function1);
    _33Flatten = Flatten(_32Map);
    _34MeshIndices = MeshIndices(mesh);
    _35SetMapChannel = SetMapChannel(mesh, flux channel, _33Flatten, _34MeshIndices);
    _60Pass-through: TriMesh = if (apply spacing)
      {
        MapChannel _39GetMapChannel;// 4:MatricesFromMapChannel.ext->9:GetMapChannel 48651
        IArray[Vector3] _40MapChannelVertexBuffer;// 4:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 48650
        Int32 _41Count;// 2:Slices->2:Count 48647
        Int32 _42Constant;// 4:MatricesFromMapChannel.ext->0:Constant 48652
        Int32 _43Divide;// 2:Slices->3:Divide 48646
        IArray[Int32] _44Range;// 2:Slices->4:Range 48645
        IArray[IArray[Vector3]] _45Map;// 2:Slices->5:Map 48644
        IArray[Matrix] _46Map;// 4:MatricesFromMapChannel.ext->5:Map 48641
        Int32 _47Zero;// 1:CombineEveryTwoElements.ext->7:Zero 48635
        Int32 _48Two;// 1:CombineEveryTwoElements.ext->6:Two 48636
        IArray[Matrix] _49Stride;// 1:CombineEveryTwoElements.ext->1:Stride 48634
        Int32 _50One;// 1:CombineEveryTwoElements.ext->8:One 48638
        IArray[Matrix] _51Stride;// 1:CombineEveryTwoElements.ext->2:Stride 48637
        Func[Matrix, Matrix, IArray[Matrix]] _52Pass-through: function2;// 0:Pass-through: function2 48632
        IArray[IArray[Matrix]] _53Combine;// 1:CombineEveryTwoElements.ext->3:Combine 48633
        IArray[Matrix] _54Flatten;// 25:ClonerSpacing.ext->16:Flatten 48630
        Func[Matrix, IArray[Vector3]] _55Pass-through: function1;// 0:Pass-through: function1 48618
        IArray[IArray[Vector3]] _56Map;// 5:FlatMap->4:Map 48620
        IArray[Vector3] _57Flatten;// 5:FlatMap->3:Flatten 48619
        IArray[Int32] _58MeshIndices;// 11:StoreMatricesInMapChannel.ext->0:MeshIndices 48629
        TriMesh _59SetMapChannel;// 11:StoreMatricesInMapChannel.ext->7:SetMapChannel 48616
        _39GetMapChannel = GetMapChannel(_35SetMapChannel, flux channel);
        _40MapChannelVertexBuffer = MapChannelVertexBuffer(_39GetMapChannel);
        _41Count = Count(_40MapChannelVertexBuffer);
        _42Constant = 4;
        _43Divide = Divide(_41Count, _42Constant);
        _44Range = Range(_43Divide);
        _45Map = Map(_44Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 48649
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 48648
            _0Multiply = Multiply(_42Constant, x0);
            _1Slice = Slice(_40MapChannelVertexBuffer, _0Multiply, _42Constant);
            _1Slice;
            });
        _46Map = Map(_45Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 48661
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 48662
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 48666
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 48665
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 48660
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 48663
            Int32 _6One;// 8:PlusOne->1:One 48670
            Int32 _7Add;// 8:PlusOne->0:Add 48669
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 48667
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 48659
            Int32 _10Constant;// 25:Three->0:Constant 48664
            Int32 _11One;// 9:PlusOne->1:One 48674
            Int32 _12Add;// 9:PlusOne->0:Add 48673
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 48671
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 48658
            Int32 _15One;// 10:PlusOne->1:One 48678
            Int32 _16Add;// 10:PlusOne->0:Add 48677
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 48675
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 48654
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _47Zero = Zero();
        _48Two = Two();
        _49Stride = Stride(_46Map, _47Zero, _48Two);
        _50One = One();
        _51Stride = Stride(_46Map, _50One, _48Two);
        _52Pass-through: function2 = (Matrix x0, Matrix x1) => 
          {
            Vector3 _0GetMatrixTranslation;// 6:MatrixDistance.ext->0:GetMatrixTranslation 48710
            Vector3 _1GetMatrixTranslation;// 6:MatrixDistance.ext->1:GetMatrixTranslation 48711
            Single _2Distance;// 6:MatrixDistance.ext->2:Distance 48709
            Single _3Divide;// 6:MatrixInterpolateWithSpacingAndScaling.ext->7:Divide 48706
            Int32 _4Floor;// 6:MatrixInterpolateWithSpacingAndScaling.ext->8:Floor 48705
            Int32 _5One;// 20:PlusOne->1:One 48704
            Int32 _6Add;// 20:PlusOne->0:Add 48703
            IArray[Single] _7RangeInclusiveFloat;// 19:SampleLerp->2:RangeInclusiveFloat 48701
            Func[Single, Matrix] _8Pass-through: function1;// 0:Pass-through: function1 48699
            IArray[Matrix] _9Map;// 19:SampleLerp->3:Map 48700
            Int32 _10Count;// 3:LastIndex->2:Count 48694
            Int32 _11One;// 3:MinusOne->2:One 48693
            Int32 _12Subtract;// 3:MinusOne->1:Subtract 48692
            IArray[Matrix] _13Take;// 1:DropLast->2:Take 48689
            Int32 _14One;// 2:SkipOne->2:One 48697
            IArray[Matrix] _15Skip;// 2:SkipOne->3:Skip 48696
            Single _16Constant;// 6:MatrixInterpolateWithSpacingAndScaling.ext->0:Constant 48748
            Func[Matrix, Matrix, Matrix] _17Pass-through: function2;// 0:Pass-through: function2 48686
            IArray[Matrix] _18Combine;// 21:CombinePairwiseElements.ext->3:Combine 48687
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _1GetMatrixTranslation = GetMatrixTranslation(x1);
            _2Distance = Distance(_0GetMatrixTranslation, _1GetMatrixTranslation);
            _3Divide = Divide(_2Distance, max distance);
            _4Floor = Floor(_3Divide);
            _5One = One();
            _6Add = Add(_4Floor, _5One);
            _7RangeInclusiveFloat = RangeInclusiveFloat(_6Add);
            _8Pass-through: function1 = (Single x0) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp.ext->6:GetMatrixScaling 48722
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp.ext->7:GetMatrixScaling 48723
                Vector3 _2Lerp;// 12:MatrixComponentsLerp.ext->11:Lerp 48721
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp.ext->4:GetMatrixRotation 48725
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp.ext->5:GetMatrixRotation 48726
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp.ext->9:QuaternionLerp 48724
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->2:GetMatrixTranslation 48728
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->3:GetMatrixTranslation 48729
                Vector3 _8Lerp;// 12:MatrixComponentsLerp.ext->10:Lerp 48727
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp.ext->14:ScalingRotationTranslationMatrix 48720
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, x0);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, x0);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, x0);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _9Map = Map(_7RangeInclusiveFloat, _8Pass-through: function1);
            _10Count = Count(_9Map);
            _11One = One();
            _12Subtract = Subtract(_10Count, _11One);
            _13Take = Take(_9Map, _12Subtract);
            _14One = One();
            _15Skip = Skip(_9Map, _14One);
            _16Constant = 0.5;
            _17Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp.ext->6:GetMatrixScaling 48740
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp.ext->7:GetMatrixScaling 48741
                Vector3 _2Lerp;// 12:MatrixComponentsLerp.ext->11:Lerp 48739
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp.ext->4:GetMatrixRotation 48743
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp.ext->5:GetMatrixRotation 48744
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp.ext->9:QuaternionLerp 48742
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->2:GetMatrixTranslation 48746
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->3:GetMatrixTranslation 48747
                Vector3 _8Lerp;// 12:MatrixComponentsLerp.ext->10:Lerp 48745
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp.ext->14:ScalingRotationTranslationMatrix 48738
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _16Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _16Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _16Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _18Combine = Combine(_13Take, _15Skip, _17Pass-through: function2);
            if (scale when spacing)
              {
                Boolean _19True;// 6:MatrixInterpolateWithSpacingAndScaling.ext->18:True 48755
                Single _20IntAsFloat;// 6:MatrixInterpolateWithSpacingAndScaling.ext->16:IntAsFloat 48762
                Single _21Divide;// 6:MatrixInterpolateWithSpacingAndScaling.ext->15:Divide 48761
                Single _22FloatOne;// 6:MatrixInterpolateWithSpacingAndScaling.ext->14:FloatOne 48763
                Vector3 _23Vector3;// 6:MatrixInterpolateWithSpacingAndScaling.ext->12:Vector3 48760
                Single _24Constant;// 8:Origin->0:Constant 48759
                Vector3 _25Vector3;// 8:Origin->1:Vector3 48758
                Matrix _26ScalingTranslationMatrix;// 13:ScalingMatrix.ext->4:ScalingTranslationMatrix 48757
                IArray[Matrix] _27Map;// 6:MatrixInterpolateWithSpacingAndScaling.ext->11:Map 48684
                _19True = True();
                _20IntAsFloat = IntAsFloat(_4Floor);
                _21Divide = Divide(_3Divide, _20IntAsFloat);
                _22FloatOne = FloatOne();
                _23Vector3 = Vector3(_21Divide, _22FloatOne, _22FloatOne);
                _24Constant = 0;
                _25Vector3 = Vector3(_24Constant, _24Constant, _24Constant);
                _26ScalingTranslationMatrix = ScalingTranslationMatrix(_23Vector3, _25Vector3);
                _27Map = Map(_18Combine, (Matrix x0) => 
                  {
                    if (_19True)
                      {
                        Matrix _0Multiply;// 17:MatrixApplyTransform.ext->4:Multiply 48753
                        _0Multiply = Multiply(_26ScalingTranslationMatrix, x0);
                        _0Multiply;
                        }else
                      {
                        Matrix _1Multiply;// 17:MatrixApplyTransform.ext->9:Multiply 48754
                        _1Multiply = Multiply(x0, _26ScalingTranslationMatrix);
                        _1Multiply;
                        };
                    });
                _27Map;
                }else
              {
                _18Combine;
                };
            };
        _53Combine = Combine(_49Stride, _51Stride, _52Pass-through: function2);
        _54Flatten = Flatten(_53Combine);
        _55Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 48624
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 48623
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 48622
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 48628
                Int32 _1Add;// 5:PlusOne->0:Add 48627
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 48625
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _56Map = Map(_54Flatten, _55Pass-through: function1);
        _57Flatten = Flatten(_56Map);
        _58MeshIndices = MeshIndices(_35SetMapChannel);
        _59SetMapChannel = SetMapChannel(_35SetMapChannel, flux channel, _57Flatten, _58MeshIndices);
        _59SetMapChannel;
        }else
      {
        _35SetMapChannel;
        };
    _88GetMapChannel = GetMapChannel(_35SetMapChannel, flux channel);
    _89MapChannelVertexBuffer = MapChannelVertexBuffer(_88GetMapChannel);
    _90Count = Count(_89MapChannelVertexBuffer);
    _91Constant = 4;
    _92Divide = Divide(_90Count, _91Constant);
    _93Range = Range(_92Divide);
    _94Map = Map(_93Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 48649
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 48648
        _0Multiply = Multiply(_91Constant, x0);
        _1Slice = Slice(_89MapChannelVertexBuffer, _0Multiply, _91Constant);
        _1Slice;
        });
    _95Map = Map(_94Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 48661
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 48662
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 48666
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 48665
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 48660
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 48663
        Int32 _6One;// 8:PlusOne->1:One 48670
        Int32 _7Add;// 8:PlusOne->0:Add 48669
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 48667
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 48659
        Int32 _10Constant;// 25:Three->0:Constant 48664
        Int32 _11One;// 9:PlusOne->1:One 48674
        Int32 _12Add;// 9:PlusOne->0:Add 48673
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 48671
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 48658
        Int32 _15One;// 10:PlusOne->1:One 48678
        Int32 _16Add;// 10:PlusOne->0:Add 48677
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 48675
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 48654
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _96Zero = Zero();
    _97Two = Two();
    _98Stride = Stride(_95Map, _96Zero, _97Two);
    _99One = One();
    _100Stride = Stride(_95Map, _99One, _97Two);
    _101Pass-through: function2 = (Matrix x0, Matrix x1) => 
      {
        Vector3 _0GetMatrixTranslation;// 6:MatrixDistance.ext->0:GetMatrixTranslation 48710
        Vector3 _1GetMatrixTranslation;// 6:MatrixDistance.ext->1:GetMatrixTranslation 48711
        Single _2Distance;// 6:MatrixDistance.ext->2:Distance 48709
        Single _3Divide;// 6:MatrixInterpolateWithSpacingAndScaling.ext->7:Divide 48706
        Int32 _4Floor;// 6:MatrixInterpolateWithSpacingAndScaling.ext->8:Floor 48705
        Int32 _5One;// 20:PlusOne->1:One 48704
        Int32 _6Add;// 20:PlusOne->0:Add 48703
        IArray[Single] _7RangeInclusiveFloat;// 19:SampleLerp->2:RangeInclusiveFloat 48701
        Func[Single, Matrix] _8Pass-through: function1;// 0:Pass-through: function1 48699
        IArray[Matrix] _9Map;// 19:SampleLerp->3:Map 48700
        Int32 _10Count;// 3:LastIndex->2:Count 48694
        _0GetMatrixTranslation = GetMatrixTranslation(x0);
        _1GetMatrixTranslation = GetMatrixTranslation(x1);
        _2Distance = Distance(_0GetMatrixTranslation, _1GetMatrixTranslation);
        _3Divide = Divide(_2Distance, max distance);
        _4Floor = Floor(_3Divide);
        _5One = One();
        _6Add = Add(_4Floor, _5One);
        _7RangeInclusiveFloat = RangeInclusiveFloat(_6Add);
        _8Pass-through: function1 = (Single x0) => 
          {
            Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp.ext->6:GetMatrixScaling 48722
            Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp.ext->7:GetMatrixScaling 48723
            Vector3 _2Lerp;// 12:MatrixComponentsLerp.ext->11:Lerp 48721
            Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp.ext->4:GetMatrixRotation 48725
            Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp.ext->5:GetMatrixRotation 48726
            Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp.ext->9:QuaternionLerp 48724
            Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->2:GetMatrixTranslation 48728
            Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->3:GetMatrixTranslation 48729
            Vector3 _8Lerp;// 12:MatrixComponentsLerp.ext->10:Lerp 48727
            Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp.ext->14:ScalingRotationTranslationMatrix 48720
            _0GetMatrixScaling = GetMatrixScaling(x0);
            _1GetMatrixScaling = GetMatrixScaling(x1);
            _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, x0);
            _3GetMatrixRotation = GetMatrixRotation(x0);
            _4GetMatrixRotation = GetMatrixRotation(x1);
            _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, x0);
            _6GetMatrixTranslation = GetMatrixTranslation(x0);
            _7GetMatrixTranslation = GetMatrixTranslation(x1);
            _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, x0);
            _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
            _9ScalingRotationTranslationMatrix;
            };
        _9Map = Map(_7RangeInclusiveFloat, _8Pass-through: function1);
        _10Count = Count(_9Map);
        if (scale when spacing)
          {
            Int32 _11One;// 3:MinusOne->2:One 48693
            Int32 _12Subtract;// 3:MinusOne->1:Subtract 48692
            IArray[Matrix] _13Take;// 1:DropLast->2:Take 48689
            Int32 _14One;// 2:SkipOne->2:One 48697
            IArray[Matrix] _15Skip;// 2:SkipOne->3:Skip 48696
            Single _16Constant;// 6:MatrixInterpolateWithSpacingAndScaling.ext->0:Constant 48748
            Func[Matrix, Matrix, Matrix] _17Pass-through: function2;// 0:Pass-through: function2 48686
            IArray[Matrix] _18Combine;// 21:CombinePairwiseElements.ext->3:Combine 48687
            Boolean _19True;// 6:MatrixInterpolateWithSpacingAndScaling.ext->18:True 48755
            Single _20IntAsFloat;// 6:MatrixInterpolateWithSpacingAndScaling.ext->16:IntAsFloat 48762
            Single _21Divide;// 6:MatrixInterpolateWithSpacingAndScaling.ext->15:Divide 48761
            Single _22FloatOne;// 6:MatrixInterpolateWithSpacingAndScaling.ext->14:FloatOne 48763
            Vector3 _23Vector3;// 6:MatrixInterpolateWithSpacingAndScaling.ext->12:Vector3 48760
            Single _24Constant;// 8:Origin->0:Constant 48759
            Vector3 _25Vector3;// 8:Origin->1:Vector3 48758
            Matrix _26ScalingTranslationMatrix;// 13:ScalingMatrix.ext->4:ScalingTranslationMatrix 48757
            IArray[Matrix] _27Map;// 6:MatrixInterpolateWithSpacingAndScaling.ext->11:Map 48684
            _11One = One();
            _12Subtract = Subtract(_10Count, _11One);
            _13Take = Take(_9Map, _12Subtract);
            _14One = One();
            _15Skip = Skip(_9Map, _14One);
            _16Constant = 0.5;
            _17Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp.ext->6:GetMatrixScaling 48740
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp.ext->7:GetMatrixScaling 48741
                Vector3 _2Lerp;// 12:MatrixComponentsLerp.ext->11:Lerp 48739
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp.ext->4:GetMatrixRotation 48743
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp.ext->5:GetMatrixRotation 48744
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp.ext->9:QuaternionLerp 48742
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->2:GetMatrixTranslation 48746
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->3:GetMatrixTranslation 48747
                Vector3 _8Lerp;// 12:MatrixComponentsLerp.ext->10:Lerp 48745
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp.ext->14:ScalingRotationTranslationMatrix 48738
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _16Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _16Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _16Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _18Combine = Combine(_13Take, _15Skip, _17Pass-through: function2);
            _19True = True();
            _20IntAsFloat = IntAsFloat(_4Floor);
            _21Divide = Divide(_3Divide, _20IntAsFloat);
            _22FloatOne = FloatOne();
            _23Vector3 = Vector3(_21Divide, _22FloatOne, _22FloatOne);
            _24Constant = 0;
            _25Vector3 = Vector3(_24Constant, _24Constant, _24Constant);
            _26ScalingTranslationMatrix = ScalingTranslationMatrix(_23Vector3, _25Vector3);
            _27Map = Map(_18Combine, (Matrix x0) => 
              {
                if (_19True)
                  {
                    Matrix _0Multiply;// 17:MatrixApplyTransform.ext->4:Multiply 48753
                    _0Multiply = Multiply(_26ScalingTranslationMatrix, x0);
                    _0Multiply;
                    }else
                  {
                    Matrix _1Multiply;// 17:MatrixApplyTransform.ext->9:Multiply 48754
                    _1Multiply = Multiply(x0, _26ScalingTranslationMatrix);
                    _1Multiply;
                    };
                });
            _27Map;
            }else
          {
            Int32 _28One;// 3:MinusOne->2:One 48693
            Int32 _29Subtract;// 3:MinusOne->1:Subtract 48692
            IArray[Matrix] _30Take;// 1:DropLast->2:Take 48689
            Int32 _31One;// 2:SkipOne->2:One 48697
            IArray[Matrix] _32Skip;// 2:SkipOne->3:Skip 48696
            Single _33Constant;// 6:MatrixInterpolateWithSpacingAndScaling.ext->0:Constant 48748
            Func[Matrix, Matrix, Matrix] _34Pass-through: function2;// 0:Pass-through: function2 48686
            IArray[Matrix] _35Combine;// 21:CombinePairwiseElements.ext->3:Combine 48687
            _28One = One();
            _29Subtract = Subtract(_10Count, _28One);
            _30Take = Take(_9Map, _29Subtract);
            _31One = One();
            _32Skip = Skip(_9Map, _31One);
            _33Constant = 0.5;
            _34Pass-through: function2 = (Matrix x0, Matrix x1) => 
              {
                Vector3 _0GetMatrixScaling;// 12:MatrixComponentsLerp.ext->6:GetMatrixScaling 48740
                Vector3 _1GetMatrixScaling;// 12:MatrixComponentsLerp.ext->7:GetMatrixScaling 48741
                Vector3 _2Lerp;// 12:MatrixComponentsLerp.ext->11:Lerp 48739
                Quaternion _3GetMatrixRotation;// 12:MatrixComponentsLerp.ext->4:GetMatrixRotation 48743
                Quaternion _4GetMatrixRotation;// 12:MatrixComponentsLerp.ext->5:GetMatrixRotation 48744
                Quaternion _5QuaternionLerp;// 12:MatrixComponentsLerp.ext->9:QuaternionLerp 48742
                Vector3 _6GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->2:GetMatrixTranslation 48746
                Vector3 _7GetMatrixTranslation;// 12:MatrixComponentsLerp.ext->3:GetMatrixTranslation 48747
                Vector3 _8Lerp;// 12:MatrixComponentsLerp.ext->10:Lerp 48745
                Matrix _9ScalingRotationTranslationMatrix;// 12:MatrixComponentsLerp.ext->14:ScalingRotationTranslationMatrix 48738
                _0GetMatrixScaling = GetMatrixScaling(x0);
                _1GetMatrixScaling = GetMatrixScaling(x1);
                _2Lerp = Lerp(_0GetMatrixScaling, _1GetMatrixScaling, _33Constant);
                _3GetMatrixRotation = GetMatrixRotation(x0);
                _4GetMatrixRotation = GetMatrixRotation(x1);
                _5QuaternionLerp = QuaternionLerp(_3GetMatrixRotation, _4GetMatrixRotation, _33Constant);
                _6GetMatrixTranslation = GetMatrixTranslation(x0);
                _7GetMatrixTranslation = GetMatrixTranslation(x1);
                _8Lerp = Lerp(_6GetMatrixTranslation, _7GetMatrixTranslation, _33Constant);
                _9ScalingRotationTranslationMatrix = ScalingRotationTranslationMatrix(_2Lerp, _5QuaternionLerp, _8Lerp);
                _9ScalingRotationTranslationMatrix;
                };
            _35Combine = Combine(_30Take, _32Skip, _34Pass-through: function2);
            _35Combine;
            };
        };
    _102Combine = Combine(_98Stride, _100Stride, _101Pass-through: function2);
    _103Flatten = Flatten(_102Combine);
    _132IgnoreFirst = IgnoreFirst(_60Pass-through: TriMesh, if (create mesh)
      {
        Int32 _104Constant;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->0:Constant 48487
        IArray[Int32] _105Range;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->1:Range 48486
        Int32 _106Two;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->4:Two 48488
        IArray[Int32] _107Skip;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->3:Skip 48485
        IArray[Int32] _108Filter;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->13:Filter 48484
        MapChannel _109GetMapChannel;// 34:MatricesFromMapChannel.ext->9:GetMapChannel 48546
        IArray[Vector3] _110MapChannelVertexBuffer;// 34:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 48545
        Int32 _111Count;// 2:Slices->2:Count 48542
        Int32 _112Constant;// 34:MatricesFromMapChannel.ext->0:Constant 48547
        Int32 _113Divide;// 2:Slices->3:Divide 48541
        IArray[Int32] _114Range;// 2:Slices->4:Range 48540
        IArray[IArray[Vector3]] _115Map;// 2:Slices->5:Map 48539
        IArray[Matrix] _116Map;// 34:MatricesFromMapChannel.ext->5:Map 48536
        Single _117Constant;// 1:Origin->0:Constant 48604
        Vector3 _118Vector3;// 1:Origin->1:Vector3 48603
        BoundingSphere _119Sphere;// 0:BoxFromPointAndRadius->3:Sphere 48602
        BoundingBox _120BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 48601
        QuadMesh _121BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 48597
        TriMesh _122Triangulate;// 29:BoxTriMesh->3:Triangulate 48596
        IArray[Int32] _123MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 48587
        IArray[Int32] _124Indices;// 4:HideEveryThirdEdge->8:Indices 48586
        Int32 _125Constant;// 4:HideEveryThirdEdge->0:Constant 48594
        Int32 _126Constant;// 4:HideEveryThirdEdge->0:Constant 48595
        IArray[Boolean] _127Map;// 4:HideEveryThirdEdge->5:Map 48585
        TriMesh _128SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 48584
        IArray[TriMesh] _129Map;// 1:ClonerMeshAsBoxes.ext->16:Map 48533
        TriMesh _130CombineAllMeshes;// 1:ClonerMeshAsBoxes.ext->2:CombineAllMeshes 48532
        TriMesh _131Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->6:Aggregate 48483
        _104Constant = 100;
        _105Range = Range(_104Constant);
        _106Two = Two();
        _107Skip = Skip(_105Range, _106Two);
        _108Filter = Filter(_107Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 48501
            Boolean _1Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 48500
            MapChannel _15Pass-through: any;// 0:Pass-through: any 48492
            Object _16Null;// 6:IsNullFix2.ext->3:Null 48496
            Object _17As;// 6:IsNullFix2.ext->23:As 48494
            Boolean _18Equal;// 6:IsNullFix2.ext->1:Equal 48493
            Boolean _19Not;// 12:MapChannelExists.ext->4:Not 48491
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _15Pass-through: any = if (_1Equal)
              {
                MapChannel _13TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 48502
                _13TopologyChannel = TopologyChannel(_60Pass-through: TriMesh);
                _13TopologyChannel;
                }else
              {
                MapChannel _14GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 48503
                _14GetMapChannel = GetMapChannel(_60Pass-through: TriMesh, x0);
                _14GetMapChannel;
                };
            _16Null = Null();
            _17As = As(_15Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 48495
                _0IgnoreFirst = IgnoreFirst(x0, _16Null);
                _0IgnoreFirst;
                });
            _18Equal = Equal(_17As, _16Null);
            _19Not = Not(_18Equal);
            _19Not;
            });
        _109GetMapChannel = GetMapChannel(_60Pass-through: TriMesh, flux channel);
        _110MapChannelVertexBuffer = MapChannelVertexBuffer(_109GetMapChannel);
        _111Count = Count(_110MapChannelVertexBuffer);
        _112Constant = 4;
        _113Divide = Divide(_111Count, _112Constant);
        _114Range = Range(_113Divide);
        _115Map = Map(_114Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 48544
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 48543
            _0Multiply = Multiply(_112Constant, x0);
            _1Slice = Slice(_110MapChannelVertexBuffer, _0Multiply, _112Constant);
            _1Slice;
            });
        _116Map = Map(_115Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 48556
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 48557
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 48561
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 48560
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 48555
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 48558
            Int32 _6One;// 8:PlusOne->1:One 48565
            Int32 _7Add;// 8:PlusOne->0:Add 48564
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 48562
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 48554
            Int32 _10Constant;// 25:Three->0:Constant 48559
            Int32 _11One;// 9:PlusOne->1:One 48569
            Int32 _12Add;// 9:PlusOne->0:Add 48568
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 48566
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 48553
            Int32 _15One;// 10:PlusOne->1:One 48573
            Int32 _16Add;// 10:PlusOne->0:Add 48572
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 48570
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 48549
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _117Constant = 0;
        _118Vector3 = Vector3(_117Constant, _117Constant, _117Constant);
        _119Sphere = Sphere(_118Vector3, box radius);
        _120BoxFromSphere = BoxFromSphere(_119Sphere);
        _121BoxQuadMesh = BoxQuadMesh(_120BoxFromSphere);
        _122Triangulate = Triangulate(_121BoxQuadMesh);
        _123MeshIndices = MeshIndices(_122Triangulate);
        _124Indices = Indices(_123MeshIndices);
        _125Constant = 3;
        _126Constant = 2;
        _127Map = Map(_124Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 48593
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 48592
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 48588
            _0Modulo = Modulo(x0, _125Constant);
            _1Equal = Equal(_0Modulo, _126Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _128SetVisibleEdges = SetVisibleEdges(_122Triangulate, _127Map);
        _129Map = Map(_116Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 48580
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 48577
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 48579
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 48578
            _0MeshVertices = MeshVertices(_128SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 48581
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_128SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _130CombineAllMeshes = CombineAllMeshes(_129Map);
        _131Aggregate = Aggregate(_108Filter, _130CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer.ext->10:TryCatch 48507
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->7:IgnoreFirst 48529
                Int32 _1Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 48521
                Boolean _2Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 48520
                MapChannel _16Pass-through: any;// 0:Pass-through: any 48512
                Object _17Null;// 6:IsNullFix2.ext->3:Null 48516
                Object _18As;// 6:IsNullFix2.ext->23:As 48514
                Boolean _19Equal;// 6:IsNullFix2.ext->1:Equal 48513
                Boolean _20Not;// 5:MapChannelExists.ext->4:Not 48511
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _16Pass-through: any = if (_2Equal)
                  {
                    MapChannel _14TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 48522
                    _14TopologyChannel = TopologyChannel(_60Pass-through: TriMesh);
                    _14TopologyChannel;
                    }else
                  {
                    MapChannel _15GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 48523
                    _15GetMapChannel = GetMapChannel(_60Pass-through: TriMesh, _0IgnoreFirst);
                    _15GetMapChannel;
                    };
                _17Null = Null();
                _18As = As(_16Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 48515
                    _0IgnoreFirst = IgnoreFirst(x0, _17Null);
                    _0IgnoreFirst;
                    });
                _19Equal = Equal(_18As, _17Null);
                _20Not = Not(_19Equal);
                if (_20Not)
                  {
                    MapChannel _21GetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->1:GetMapChannel 48526
                    IArray[Vector3] _22MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer.ext->8:MapChannelVertexBuffer 48525
                    IArray[Int32] _23MeshIndices;// 10:MapChannelCopyVertexBuffer.ext->0:MeshIndices 48527
                    TriMesh _24SetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->7:SetMapChannel 48524
                    _21GetMapChannel = GetMapChannel(_60Pass-through: TriMesh, _0IgnoreFirst);
                    _22MapChannelVertexBuffer = MapChannelVertexBuffer(_21GetMapChannel);
                    _23MeshIndices = MeshIndices(x0);
                    _24SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _22MapChannelVertexBuffer, _23MeshIndices);
                    _24SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer.ext->11:IgnoreFirst 48528
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _131Aggregate;
        }else
      {
        _60Pass-through: TriMesh;
        });
    _132IgnoreFirst;
    }