(InstanceState state, TriMesh mesh, Int32 channel ID, INode node, Int32 method) => 
  {
    Int32 _0Zero;// 5:Zero 109260
    Int32 _1Constant;// 0:MapChannelOrGeometryOrCreate-ext->0:Constant 109276
    Boolean _2Equal;// 0:MapChannelOrGeometryOrCreate-ext->4:Equal 109275
    Boolean _3IsValidNode;// 1:NodeMeshOrDefault-ext->1:IsValidNode 109334
    TriMesh _5Pass-through: TriMesh;// 0:Pass-through: TriMesh 109273
    MapChannel _48Pass-through: MapChannel;// 0:Pass-through: MapChannel 109262
    IArray[Int32] _49MapChannelIndexBuffer;// 15:MapChannelFaceVertexValues-ext->3:MapChannelIndexBuffer 109267
    IArray[Vector3] _50MapChannelVertexBuffer;// 15:MapChannelFaceVertexValues-ext->0:MapChannelVertexBuffer 109268
    IArray[Vector3] _51Map;// 2:SelectByIndex->2:Map 109265
    Func[Vector3, Single] _52Pass-through: any;// 0:Pass-through: any 109339
    IArray[Func[Vector3, Single]] _53Unit;// 4:Array3->2:Unit 109349
    Func[Vector3, Single] _54Pass-through: any;// 0:Pass-through: any 109340
    IArray[Func[Vector3, Single]] _55Append;// 4:Array3->3:Append 109348
    Func[Vector3, Single] _56Pass-through: any;// 0:Pass-through: any 109341
    IArray[Func[Vector3, Single]] _57Append;// 4:Array3->6:Append 109347
    Func[Vector3, Single] _58Pass-through: any;// 0:Pass-through: any 109342
    IArray[Func[Vector3, Single]] _59Append;// 0:Array4->5:Append 109343
    Func[Vector3, Single] _60At;// 3:At 109338
    IArray[Single] _61Map;// 16:Map 109261
    TriMesh _62SetPerVertexData;// 6:SetPerVertexData 109258
    _0Zero = Zero();
    _1Constant = -3;
    _2Equal = Equal(channel ID, _1Constant);
    _3IsValidNode = IsValidNode(node);
    _5Pass-through: TriMesh = if (_3IsValidNode)
      {
        TriMesh _4MeshFromNode;// 1:NodeMeshOrDefault-ext->2:MeshFromNode 109335
        _4MeshFromNode = MeshFromNode(node);
        _4MeshFromNode;
        }else
      {
        mesh;
        };
    _48Pass-through: MapChannel = if (_2Equal)
      {
        MapChannel _7TopologyChannel;// 0:MapChannelOrGeometryOrCreate-ext->6:TopologyChannel 109277
        _7TopologyChannel = TopologyChannel(_5Pass-through: TriMesh);
        _7TopologyChannel;
        }else
      {
        Int32 _8Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 109293
        Boolean _9Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 109292
        MapChannel _13Pass-through: any;// 0:Pass-through: any 109284
        Object _14Null;// 6:IsNullFix2-ext->3:Null 109288
        Object _15As;// 6:IsNullFix2-ext->23:As 109286
        Boolean _16Equal;// 6:IsNullFix2-ext->1:Equal 109285
        Boolean _17Not;// 1:MapChannelExists-ext->4:Not 109283
        _8Constant = -3;
        _9Equal = Equal(channel ID, _8Constant);
        _13Pass-through: any = if (_9Equal)
          {
            MapChannel _11TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 109294
            _11TopologyChannel = TopologyChannel(_5Pass-through: TriMesh);
            _11TopologyChannel;
            }else
          {
            MapChannel _12GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 109295
            _12GetMapChannel = GetMapChannel(_5Pass-through: TriMesh, channel ID);
            _12GetMapChannel;
            };
        _14Null = Null();
        _15As = As(_13Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 109287
            _0IgnoreFirst = IgnoreFirst(x0, _14Null);
            _0IgnoreFirst;
            });
        _16Equal = Equal(_15As, _14Null);
        _17Not = Not(_16Equal);
        if (_17Not)
          {
            Int32 _19Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 109300
            Boolean _20Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 109299
            _19Constant = -3;
            _20Equal = Equal(channel ID, _19Constant);
            if (_20Equal)
              {
                MapChannel _22TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 109301
                _22TopologyChannel = TopologyChannel(_5Pass-through: TriMesh);
                _22TopologyChannel;
                }else
              {
                MapChannel _23GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 109302
                _23GetMapChannel = GetMapChannel(_5Pass-through: TriMesh, channel ID);
                _23GetMapChannel;
                };
            }else
          {
            Int32 _24Constant;// 8:MapChannelOrGeometryGet-ext->0:Constant 109307
            Boolean _25Equal;// 8:MapChannelOrGeometryGet-ext->4:Equal 109306
            Int32 _26Constant;// 10:MapChannelOrGeometrySet-ext->0:Constant 109318
            Boolean _27Equal;// 10:MapChannelOrGeometrySet-ext->6:Equal 109317
            Single _28Constant;// 5:Origin->0:Constant 109324
            Vector3 _29Vector3;// 5:Origin->1:Vector3 109323
            IArray[Vector3] _30Unit;// 4:MapChannelClear-ext->4:Unit 109322
            Int32 _31Zero;// 4:MapChannelClear-ext->9:Zero 109326
            Int32 _32FaceCount;// 4:MapChannelClear-ext->6:FaceCount 109330
            Int32 _33Constant;// 1:Three->0:Constant 109329
            Int32 _34Multiply;// 7:MultiplyByThree->2:Multiply 109328
            IArray[Int32] _35ArrayOf;// 4:MapChannelClear-ext->8:ArrayOf 109325
            TriMesh _40Pass-through: TriMesh;// 0:Pass-through: TriMesh 109304
            _24Constant = -3;
            _25Equal = Equal(channel ID, _24Constant);
            _26Constant = -3;
            _27Equal = Equal(_26Constant, channel ID);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30Unit = Unit(_29Vector3);
            _31Zero = Zero();
            _32FaceCount = FaceCount(_5Pass-through: TriMesh);
            _33Constant = 3;
            _34Multiply = Multiply(_32FaceCount, _33Constant);
            _35ArrayOf = ArrayOf(_31Zero, _34Multiply);
            _40Pass-through: TriMesh = if (_27Equal)
              {
                MeshData _37MeshData;// 10:MapChannelOrGeometrySet-ext->9:MeshData 109320
                TriMesh _38CreateMeshWithMeshData;// 10:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 109319
                _37MeshData = MeshData(_5Pass-through: TriMesh);
                _38CreateMeshWithMeshData = CreateMeshWithMeshData(_30Unit, _35ArrayOf, _37MeshData);
                _38CreateMeshWithMeshData;
                }else
              {
                TriMesh _39SetMapChannel;// 10:MapChannelOrGeometrySet-ext->0:SetMapChannel 109321
                _39SetMapChannel = SetMapChannel(_5Pass-through: TriMesh, channel ID, _30Unit, _35ArrayOf);
                _39SetMapChannel;
                };
            if (_25Equal)
              {
                MapChannel _46TopologyChannel;// 8:MapChannelOrGeometryGet-ext->6:TopologyChannel 109308
                _46TopologyChannel = TopologyChannel(_40Pass-through: TriMesh);
                _46TopologyChannel;
                }else
              {
                MapChannel _47GetMapChannel;// 8:MapChannelOrGeometryGet-ext->3:GetMapChannel 109309
                _47GetMapChannel = GetMapChannel(_40Pass-through: TriMesh, channel ID);
                _47GetMapChannel;
                };
            };
        };
    _49MapChannelIndexBuffer = MapChannelIndexBuffer(_48Pass-through: MapChannel);
    _50MapChannelVertexBuffer = MapChannelVertexBuffer(_48Pass-through: MapChannel);
    _51Map = Map(_49MapChannelIndexBuffer, (Int32 x0) => 
      {
        Vector3 _0At;// 2:SelectByIndex->3:At 109266
        _0At = At(_50MapChannelVertexBuffer, x0);
        _0At;
        });
    _52Pass-through: any = (Vector3 x0) => 
      {
        Single _0X;// 1:X 109350
        _0X = X(x0);
        _0X;
        };
    _53Unit = Unit(_52Pass-through: any);
    _54Pass-through: any = (Vector3 x0) => 
      {
        Single _0Y;// 7:Y 109351
        _0Y = Y(x0);
        _0Y;
        };
    _55Append = Append(_53Unit, _54Pass-through: any);
    _56Pass-through: any = (Vector3 x0) => 
      {
        Single _0Z;// 8:Z 109352
        _0Z = Z(x0);
        _0Z;
        };
    _57Append = Append(_55Append, _56Pass-through: any);
    _58Pass-through: any = (Vector3 x0) => 
      {
        Single _0X;// 1:VectorAsArray->1:X 109369
        IArray[Single] _1Unit;// 4:Array3->2:Unit 109368
        Single _2Y;// 1:VectorAsArray->2:Y 109370
        IArray[Single] _3Append;// 4:Array3->3:Append 109367
        Single _4Z;// 1:VectorAsArray->3:Z 109371
        IArray[Single] _5Append;// 4:Array3->6:Append 109366
        Single _6DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 109358
        Single _7Aggregate;// 2:Sum->0:Aggregate 109357
        Int32 _8Count;// 2:Average->3:Count 109361
        Single _9AsFloat;// 2:Average->5:AsFloat 109360
        Single _10Divide;// 2:Average->1:Divide 109355
        _0X = X(x0);
        _1Unit = Unit(_0X);
        _2Y = Y(x0);
        _3Append = Append(_1Unit, _2Y);
        _4Z = Z(x0);
        _5Append = Append(_3Append, _4Z);
        _6DefaultValueOfElement = DefaultValueOfElement(_5Append);
        _7Aggregate = Aggregate(_5Append, _6DefaultValueOfElement, (Single x0, Single x1) => 
          {
            Single _0Add;// 2:Sum->2:Add 109359
            _0Add = Add(x0, x1);
            _0Add;
            });
        _8Count = Count(_5Append);
        _9AsFloat = AsFloat(_8Count);
        _10Divide = Divide(_7Aggregate, _9AsFloat);
        _10Divide;
        };
    _59Append = Append(_57Append, _58Pass-through: any);
    _60At = At(_59Append, method);
    _61Map = Map(_51Map, _60At);
    _62SetPerVertexData = SetPerVertexData(mesh, _0Zero, _61Map);
    _62SetPerVertexData;
    }