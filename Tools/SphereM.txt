(InstanceState state, Int32 segments, Single radius) => 
  {
    IArray[Single] _0RangeExclusiveFloat;// 0:QuadMeshFromUVs-ext->9:RangeExclusiveFloat 87040
    IArray[Single] _1Reverse;// 0:QuadMeshFromUVPoints-ext->13:Reverse 87034
    IArray[Single] _2RangeExclusiveFloat;// 0:QuadMeshFromUVs-ext->4:RangeExclusiveFloat 87041
    Func[Single, Single, Vector3] _3Pass-through: function2;// 0:Pass-through: function2 87016
    Func[Single, Single, Vector3] _4Pass-through: function2;// 0:Pass-through: function2 87027
    Func[Single, IArray[Vector3]] _5Pass-through: function1;// 0:Pass-through: function1 87029
    IArray[IArray[Vector3]] _6Map;// 4:FlatMap->4:Map 87031
    IArray[Vector3] _7Flatten;// 4:FlatMap->3:Flatten 87030
    Int32 _8Count;// 0:QuadMeshFromUVPoints-ext->14:Count 87039
    Boolean _9False;// 1:CreateSphere-ext->3:False 87057
    Boolean _10True;// 1:CreateSphere-ext->1:True 87058
    QuadMesh _11QuadMeshStrip;// 0:QuadMeshFromUVPoints-ext->5:QuadMeshStrip 87024
    TriMesh _12Triangulate;// 2:QuadToTriMesh-ext->4:Triangulate 87001
    IArray[Int32] _13MeshIndices;// 2:QuadToTriMesh-ext->3:MeshIndices 87004
    IArray[Int32] _14Indices;// 2:QuadToTriMesh-ext->8:Indices 87003
    Int32 _15Constant;// 2:QuadToTriMesh-ext->0:Constant 87009
    Int32 _16Constant;// 2:QuadToTriMesh-ext->0:Constant 87010
    Int32 _17Constant;// 2:QuadToTriMesh-ext->0:Constant 87012
    IArray[Boolean] _18Map;// 2:QuadToTriMesh-ext->5:Map 87002
    TriMesh _19SetVisibleEdges;// 2:QuadToTriMesh-ext->9:SetVisibleEdges 87000
    IArray[Vector3] _20MeshVertices;// 1:DeformMeshPoints->0:MeshVertices 86997
    Vector3 _21Vector3;// 5:ScalarToVector-ext->1:Vector3 87061
    Func[Vector3, Vector3] _22Pass-through: function1;// 0:Pass-through: function1 86994
    IArray[Vector3] _23Map;// 1:DeformMeshPoints->1:Map 86996
    TriMesh _24SetMeshVertices;// 1:DeformMeshPoints->4:SetMeshVertices 86995
    _0RangeExclusiveFloat = RangeExclusiveFloat(segments);
    _1Reverse = Reverse(_0RangeExclusiveFloat);
    _2RangeExclusiveFloat = RangeExclusiveFloat(segments);
    _3Pass-through: function2 = (Single x0, Single x1) => 
      {
        Single _0TwoPi;// 4:SpherePointFromUV-ext->7:TwoPi 87048
        Single _1Multiply;// 4:SpherePointFromUV-ext->6:Multiply 87047
        Single _2Cos;// 4:SpherePointFromUV-ext->14:Cos 87046
        Single _3Pi;// 4:SpherePointFromUV-ext->9:Pi 87052
        Single _4Multiply;// 4:SpherePointFromUV-ext->8:Multiply 87051
        Single _5HalfPi;// 4:SpherePointFromUV-ext->3:HalfPi 87053
        Single _6Subtract;// 4:SpherePointFromUV-ext->10:Subtract 87050
        Single _7Cos;// 4:SpherePointFromUV-ext->13:Cos 87049
        Single _8Multiply;// 4:SpherePointFromUV-ext->18:Multiply 87045
        Single _9Sin;// 4:SpherePointFromUV-ext->15:Sin 87055
        Single _10Multiply;// 4:SpherePointFromUV-ext->19:Multiply 87054
        Single _11Sin;// 4:SpherePointFromUV-ext->20:Sin 87056
        Vector3 _12Vector3;// 4:SpherePointFromUV-ext->12:Vector3 87044
        _0TwoPi = TwoPi();
        _1Multiply = Multiply(x0, _0TwoPi);
        _2Cos = Cos(_1Multiply);
        _3Pi = Pi();
        _4Multiply = Multiply(x1, _3Pi);
        _5HalfPi = HalfPi();
        _6Subtract = Subtract(_4Multiply, _5HalfPi);
        _7Cos = Cos(_6Subtract);
        _8Multiply = Multiply(_2Cos, _7Cos);
        _9Sin = Sin(_1Multiply);
        _10Multiply = Multiply(_9Sin, _7Cos);
        _11Sin = Sin(_6Subtract);
        _12Vector3 = Vector3(_8Multiply, _10Multiply, _11Sin);
        _12Vector3;
        };
    _4Pass-through: function2 = (Single x0, Single x1) => 
      {
        Single _0IgnoreFirst;// 0:QuadMeshFromUVPoints-ext->10:IgnoreFirst 87036
        Vector3 _1Apply2;// 0:QuadMeshFromUVPoints-ext->9:Apply2 87035
        _0IgnoreFirst = IgnoreFirst(x0, x1);
        _1Apply2 = Apply2(_3Pass-through: function2, _0IgnoreFirst, x0);
        _1Apply2;
        };
    _5Pass-through: function1 = (Single x0) => 
      {
        Func[Single, Vector3] _0Bind1of2;// 6:CartesianProduct->5:Bind1of2 87033
        IArray[Vector3] _1Map;// 6:CartesianProduct->1:Map 87032
        _0Bind1of2 = Bind1of2(_4Pass-through: function2, x0);
        _1Map = Map(_2RangeExclusiveFloat, _0Bind1of2);
        _1Map;
        };
    _6Map = Map(_1Reverse, _5Pass-through: function1);
    _7Flatten = Flatten(_6Map);
    _8Count = Count(_0RangeExclusiveFloat);
    _9False = False();
    _10True = True();
    _11QuadMeshStrip = QuadMeshStrip(_7Flatten, _8Count, _9False, _10True);
    _12Triangulate = Triangulate(_11QuadMeshStrip);
    _13MeshIndices = MeshIndices(_12Triangulate);
    _14Indices = Indices(_13MeshIndices);
    _15Constant = 6;
    _16Constant = 2;
    _17Constant = 3;
    _18Map = Map(_14Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 2:QuadToTriMesh-ext->14:Modulo 87008
        Boolean _1Equal;// 2:QuadToTriMesh-ext->7:Equal 87007
        Boolean _2Equal;// 2:QuadToTriMesh-ext->13:Equal 87011
        Boolean _3OrElse;// 2:QuadToTriMesh-ext->12:OrElse 87006
        Boolean _4Not;// 2:QuadToTriMesh-ext->10:Not 87005
        _0Modulo = Modulo(x0, _15Constant);
        _1Equal = Equal(_0Modulo, _16Constant);
        _2Equal = Equal(_0Modulo, _17Constant);
        _3OrElse = OrElse(_1Equal, _2Equal);
        _4Not = Not(_3OrElse);
        _4Not;
        });
    _19SetVisibleEdges = SetVisibleEdges(_12Triangulate, _18Map);
    _20MeshVertices = MeshVertices(_19SetVisibleEdges);
    _21Vector3 = Vector3(radius, radius, radius);
    _22Pass-through: function1 = (Vector3 x0) => 
      {
        Vector3 _0Multiply;// 4:MeshScale-ext->2:Multiply 86998
        _0Multiply = Multiply(x0, _21Vector3);
        _0Multiply;
        };
    _23Map = Map(_20MeshVertices, _22Pass-through: function1);
    _24SetMeshVertices = SetMeshVertices(_19SetVisibleEdges, _23Map);
    _24SetMeshVertices;
    }