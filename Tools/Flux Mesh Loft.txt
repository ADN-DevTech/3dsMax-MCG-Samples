(InstanceState state, Boolean keep original, TriMesh mesh, Int32 flux channel, INode shape, Boolean closePath, Boolean closeShape) => 
  {
    MapChannel _0GetMapChannel;// 4:MatricesFromMapChannel-ext->9:GetMapChannel 100595
    IArray[Vector3] _1MapChannelVertexBuffer;// 4:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 100594
    Int32 _2Count;// 2:Slices->2:Count 100591
    Int32 _3Constant;// 4:MatricesFromMapChannel-ext->0:Constant 100596
    Int32 _4Divide;// 2:Slices->3:Divide 100590
    IArray[Int32] _5Range;// 2:Slices->4:Range 100589
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 100588
    IArray[Matrix] _7Map;// 4:MatricesFromMapChannel-ext->5:Map 100585
    Boolean _8IsValidNode;// 14:NodeMeshOrExit-ext->1:IsValidNode 100629
    Boolean _9CanGetMeshFromNode;// 14:NodeMeshOrExit-ext->2:CanGetMeshFromNode 100630
    Boolean _10AndAlso;// 14:NodeMeshOrExit-ext->3:AndAlso 100628
    IArray[Vector3] _15MeshVertices;// 2:MeshVertices 100625
    IArray[Vector3] _16Map;// 5:PointsXYToYZ-ext->0:Map 100576
    Func[Matrix, IArray[Vector3]] _17Pass-through: function1;// 0:Pass-through: function1 100568
    IArray[IArray[Vector3]] _18Map;// 8:FlatMap->4:Map 100570
    IArray[Vector3] _19Flatten;// 8:FlatMap->3:Flatten 100569
    Int32 _20Count;// 3:ShapeLoftMatrices-ext->4:Count 100582
    QuadMesh _21QuadMeshStrip;// 3:ShapeLoftMatrices-ext->6:QuadMeshStrip 100566
    TriMesh _22Triangulate;// 6:ToTriMesh->2:Triangulate 100561
    IArray[Int32] _23MeshIndices;// 3:HideEveryThirdEdge->2:MeshIndices 100552
    IArray[Int32] _24Indices;// 3:HideEveryThirdEdge->8:Indices 100551
    Int32 _25Constant;// 3:HideEveryThirdEdge->0:Constant 100559
    Int32 _26Constant;// 3:HideEveryThirdEdge->0:Constant 100560
    IArray[Boolean] _27Map;// 3:HideEveryThirdEdge->5:Map 100550
    TriMesh _28SetVisibleEdges;// 3:HideEveryThirdEdge->9:SetVisibleEdges 100549
    TriMesh _30Pass-through: TriMesh;// 0:Pass-through: TriMesh 100527
    MapChannel _31GetMapChannel;// 10:MatricesFromMapChannel-ext->9:GetMapChannel 100650
    IArray[Vector3] _32MapChannelVertexBuffer;// 10:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 100649
    Int32 _33Count;// 2:Slices->2:Count 100646
    Int32 _34Constant;// 10:MatricesFromMapChannel-ext->0:Constant 100651
    Int32 _35Divide;// 2:Slices->3:Divide 100645
    IArray[Int32] _36Range;// 2:Slices->4:Range 100644
    IArray[IArray[Vector3]] _37Map;// 2:Slices->5:Map 100643
    IArray[Matrix] _38Map;// 10:MatricesFromMapChannel-ext->5:Map 100640
    Func[Matrix, IArray[Vector3]] _39Pass-through: function1;// 0:Pass-through: function1 100532
    IArray[IArray[Vector3]] _40Map;// 5:FlatMap->4:Map 100534
    IArray[Vector3] _41Flatten;// 5:FlatMap->3:Flatten 100533
    IArray[Int32] _42MeshIndices;// 9:MapChannelStoreMatrices-ext->0:MeshIndices 100543
    TriMesh _43SetMapChannel;// 9:MapChannelStoreMatrices-ext->7:SetMapChannel 100530
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 100593
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 100592
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 100605
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 100606
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 100610
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 100609
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 100604
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 100607
        Int32 _6One;// 8:PlusOne->1:One 100614
        Int32 _7Add;// 8:PlusOne->0:Add 100613
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 100611
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 100603
        Int32 _10Constant;// 25:Three->0:Constant 100608
        Int32 _11One;// 9:PlusOne->1:One 100618
        Int32 _12Add;// 9:PlusOne->0:Add 100617
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 100615
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 100602
        Int32 _15One;// 10:PlusOne->1:One 100622
        Int32 _16Add;// 10:PlusOne->0:Add 100621
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 100619
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 100598
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _8IsValidNode = IsValidNode(shape);
    _9CanGetMeshFromNode = CanGetMeshFromNode(shape);
    _10AndAlso = AndAlso(_8IsValidNode, _9CanGetMeshFromNode);
    _15MeshVertices = MeshVertices(if (_10AndAlso)
      {
        TriMesh _11MeshFromNode;// 14:NodeMeshOrExit-ext->4:MeshFromNode 100631
        _11MeshFromNode = MeshFromNode(shape);
        _11MeshFromNode;
        }else
      {
        TriMesh _12EmptyMesh;// 14:NodeMeshOrExit-ext->8:EmptyMesh 100633
        Boolean _13True;// 14:NodeMeshOrExit-ext->7:True 100634
        TriMesh _14ExitIf;// 14:NodeMeshOrExit-ext->6:ExitIf 100632
        _12EmptyMesh = EmptyMesh();
        _13True = True();
        _14ExitIf = ExitIf(_12EmptyMesh, _13True);
        _14ExitIf;
        });
    _16Map = Map(_15MeshVertices, (Vector3 x0) => 
      {
        Single _0Z;// 5:PointsXYToYZ-ext->7:Z 100578
        Single _1X;// 5:PointsXYToYZ-ext->3:X 100580
        Single _2Y;// 5:PointsXYToYZ-ext->4:Y 100581
        Vector3 _3Vector3;// 5:PointsXYToYZ-ext->5:Vector3 100577
        _0Z = Z(x0);
        _1X = X(x0);
        _2Y = Y(x0);
        _3Vector3 = Vector3(_0Z, _1X, _2Y);
        _3Vector3;
        });
    _17Pass-through: function1 = (Matrix x0) => 
      {
        IArray[Vector3] _0Map;// 7:TransformPoints->3:Map 100573
        _0Map = Map(_16Map, (Vector3 x0) => 
          {
            Vector3 _0Transform;// 7:TransformPoints->4:Transform 100574
            _0Transform = Transform(x0, x0);
            _0Transform;
            });
        _0Map;
        };
    _18Map = Map(_7Map, _17Pass-through: function1);
    _19Flatten = Flatten(_18Map);
    _20Count = Count(_7Map);
    _21QuadMeshStrip = QuadMeshStrip(_19Flatten, _20Count, closePath, closeShape);
    _22Triangulate = Triangulate(_21QuadMeshStrip);
    _23MeshIndices = MeshIndices(_22Triangulate);
    _24Indices = Indices(_23MeshIndices);
    _25Constant = 3;
    _26Constant = 2;
    _27Map = Map(_24Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 100558
        Boolean _1Equal;// 6:ModuloEquals->4:Equal 100557
        Boolean _2Not;// 3:HideEveryThirdEdge->7:Not 100553
        _0Modulo = Modulo(x0, _25Constant);
        _1Equal = Equal(_0Modulo, _26Constant);
        _2Not = Not(_1Equal);
        _2Not;
        });
    _28SetVisibleEdges = SetVisibleEdges(_22Triangulate, _27Map);
    _30Pass-through: TriMesh = if (keep original)
      {
        TriMesh _29CombineMeshes;// 15:CombineMeshes 100546
        _29CombineMeshes = CombineMeshes(_28SetVisibleEdges, mesh);
        _29CombineMeshes;
        }else
      {
        _28SetVisibleEdges;
        };
    _31GetMapChannel = GetMapChannel(mesh, flux channel);
    _32MapChannelVertexBuffer = MapChannelVertexBuffer(_31GetMapChannel);
    _33Count = Count(_32MapChannelVertexBuffer);
    _34Constant = 4;
    _35Divide = Divide(_33Count, _34Constant);
    _36Range = Range(_35Divide);
    _37Map = Map(_36Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 100648
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 100647
        _0Multiply = Multiply(_34Constant, x0);
        _1Slice = Slice(_32MapChannelVertexBuffer, _0Multiply, _34Constant);
        _1Slice;
        });
    _38Map = Map(_37Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 100660
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 100661
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 100665
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 100664
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 100659
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 100662
        Int32 _6One;// 8:PlusOne->1:One 100669
        Int32 _7Add;// 8:PlusOne->0:Add 100668
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 100666
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 100658
        Int32 _10Constant;// 25:Three->0:Constant 100663
        Int32 _11One;// 9:PlusOne->1:One 100673
        Int32 _12Add;// 9:PlusOne->0:Add 100672
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 100670
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 100657
        Int32 _15One;// 10:PlusOne->1:One 100677
        Int32 _16Add;// 10:PlusOne->0:Add 100676
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 100674
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 100653
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _39Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 100538
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 100537
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 100536
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 100542
            Int32 _1Add;// 5:PlusOne->0:Add 100541
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 100539
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _40Map = Map(_38Map, _39Pass-through: function1);
    _41Flatten = Flatten(_40Map);
    _42MeshIndices = MeshIndices(_30Pass-through: TriMesh);
    _43SetMapChannel = SetMapChannel(_30Pass-through: TriMesh, flux channel, _41Flatten, _42MeshIndices);
    _43SetMapChannel;
    }