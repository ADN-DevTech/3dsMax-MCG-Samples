(InstanceState state, Int32 channelA, INode sourceA, TriMesh mesh, Int32 channelB, INode sourceB, Int32 targetChannel, Boolean useSoftSelection, Single weight) => 
  {
    Int32 _0Constant;// 0:MapChannelOrGeometryOrCreate-ext->0:Constant 90821
    Boolean _1Equal;// 0:MapChannelOrGeometryOrCreate-ext->4:Equal 90820
    Boolean _2IsValidNode;// 1:NodeMeshOrDefault-ext->1:IsValidNode 90879
    TriMesh _4Pass-through: TriMesh;// 0:Pass-through: TriMesh 90818
    MapChannel _47Pass-through: MapChannel;// 0:Pass-through: MapChannel 90740
    Object _48Null;// 11:IsNullFix2-ext->3:Null 90752
    Object _49As;// 11:IsNullFix2-ext->23:As 90750
    Boolean _50Equal;// 11:IsNullFix2-ext->1:Equal 90749
    Int32 _51Constant;// 0:MapChannelOrGeometryOrCreate-ext->0:Constant 90891
    Boolean _52Equal;// 0:MapChannelOrGeometryOrCreate-ext->4:Equal 90890
    Boolean _53IsValidNode;// 1:NodeMeshOrDefault-ext->1:IsValidNode 90949
    TriMesh _55Pass-through: TriMesh;// 0:Pass-through: TriMesh 90888
    MapChannel _98Pass-through: MapChannel;// 0:Pass-through: MapChannel 90741
    Object _99Null;// 16:IsNullFix2-ext->3:Null 90757
    Object _100As;// 16:IsNullFix2-ext->23:As 90755
    Boolean _101Equal;// 16:IsNullFix2-ext->1:Equal 90754
    Boolean _102OrElse;// 7:MapChannelLerp-ext->12:OrElse 90747
    _0Constant = -3;
    _1Equal = Equal(channelA, _0Constant);
    _2IsValidNode = IsValidNode(sourceA);
    _4Pass-through: TriMesh = if (_2IsValidNode)
      {
        TriMesh _3MeshFromNode;// 1:NodeMeshOrDefault-ext->2:MeshFromNode 90880
        _3MeshFromNode = MeshFromNode(sourceA);
        _3MeshFromNode;
        }else
      {
        mesh;
        };
    _47Pass-through: MapChannel = if (_1Equal)
      {
        MapChannel _6TopologyChannel;// 0:MapChannelOrGeometryOrCreate-ext->6:TopologyChannel 90822
        _6TopologyChannel = TopologyChannel(_4Pass-through: TriMesh);
        _6TopologyChannel;
        }else
      {
        Int32 _7Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 90838
        Boolean _8Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 90837
        MapChannel _12Pass-through: any;// 0:Pass-through: any 90829
        Object _13Null;// 6:IsNullFix2-ext->3:Null 90833
        Object _14As;// 6:IsNullFix2-ext->23:As 90831
        Boolean _15Equal;// 6:IsNullFix2-ext->1:Equal 90830
        Boolean _16Not;// 1:MapChannelExists-ext->4:Not 90828
        _7Constant = -3;
        _8Equal = Equal(channelA, _7Constant);
        _12Pass-through: any = if (_8Equal)
          {
            MapChannel _10TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 90839
            _10TopologyChannel = TopologyChannel(_4Pass-through: TriMesh);
            _10TopologyChannel;
            }else
          {
            MapChannel _11GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 90840
            _11GetMapChannel = GetMapChannel(_4Pass-through: TriMesh, channelA);
            _11GetMapChannel;
            };
        _13Null = Null();
        _14As = As(_12Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 90832
            _0IgnoreFirst = IgnoreFirst(x0, _13Null);
            _0IgnoreFirst;
            });
        _15Equal = Equal(_14As, _13Null);
        _16Not = Not(_15Equal);
        if (_16Not)
          {
            Int32 _18Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 90845
            Boolean _19Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 90844
            _18Constant = -3;
            _19Equal = Equal(channelA, _18Constant);
            if (_19Equal)
              {
                MapChannel _21TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 90846
                _21TopologyChannel = TopologyChannel(_4Pass-through: TriMesh);
                _21TopologyChannel;
                }else
              {
                MapChannel _22GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 90847
                _22GetMapChannel = GetMapChannel(_4Pass-through: TriMesh, channelA);
                _22GetMapChannel;
                };
            }else
          {
            Int32 _23Constant;// 8:MapChannelOrGeometryGet-ext->0:Constant 90852
            Boolean _24Equal;// 8:MapChannelOrGeometryGet-ext->4:Equal 90851
            Int32 _25Constant;// 10:MapChannelOrGeometrySet-ext->0:Constant 90863
            Boolean _26Equal;// 10:MapChannelOrGeometrySet-ext->6:Equal 90862
            Single _27Constant;// 5:Origin->0:Constant 90869
            Vector3 _28Vector3;// 5:Origin->1:Vector3 90868
            IArray[Vector3] _29Unit;// 4:MapChannelClear-ext->4:Unit 90867
            Int32 _30Zero;// 4:MapChannelClear-ext->9:Zero 90871
            Int32 _31FaceCount;// 4:MapChannelClear-ext->6:FaceCount 90875
            Int32 _32Constant;// 1:Three->0:Constant 90874
            Int32 _33Multiply;// 7:MultiplyByThree->2:Multiply 90873
            IArray[Int32] _34ArrayOf;// 4:MapChannelClear-ext->8:ArrayOf 90870
            TriMesh _39Pass-through: TriMesh;// 0:Pass-through: TriMesh 90849
            _23Constant = -3;
            _24Equal = Equal(channelA, _23Constant);
            _25Constant = -3;
            _26Equal = Equal(_25Constant, channelA);
            _27Constant = 0;
            _28Vector3 = Vector3(_27Constant, _27Constant, _27Constant);
            _29Unit = Unit(_28Vector3);
            _30Zero = Zero();
            _31FaceCount = FaceCount(_4Pass-through: TriMesh);
            _32Constant = 3;
            _33Multiply = Multiply(_31FaceCount, _32Constant);
            _34ArrayOf = ArrayOf(_30Zero, _33Multiply);
            _39Pass-through: TriMesh = if (_26Equal)
              {
                MeshData _36MeshData;// 10:MapChannelOrGeometrySet-ext->9:MeshData 90865
                TriMesh _37CreateMeshWithMeshData;// 10:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 90864
                _36MeshData = MeshData(_4Pass-through: TriMesh);
                _37CreateMeshWithMeshData = CreateMeshWithMeshData(_29Unit, _34ArrayOf, _36MeshData);
                _37CreateMeshWithMeshData;
                }else
              {
                TriMesh _38SetMapChannel;// 10:MapChannelOrGeometrySet-ext->0:SetMapChannel 90866
                _38SetMapChannel = SetMapChannel(_4Pass-through: TriMesh, channelA, _29Unit, _34ArrayOf);
                _38SetMapChannel;
                };
            if (_24Equal)
              {
                MapChannel _45TopologyChannel;// 8:MapChannelOrGeometryGet-ext->6:TopologyChannel 90853
                _45TopologyChannel = TopologyChannel(_39Pass-through: TriMesh);
                _45TopologyChannel;
                }else
              {
                MapChannel _46GetMapChannel;// 8:MapChannelOrGeometryGet-ext->3:GetMapChannel 90854
                _46GetMapChannel = GetMapChannel(_39Pass-through: TriMesh, channelA);
                _46GetMapChannel;
                };
            };
        };
    _48Null = Null();
    _49As = As(_47Pass-through: MapChannel, (Object x0) => 
      {
        Object _0IgnoreFirst;// 11:IsNullFix2-ext->5:IgnoreFirst 90751
        _0IgnoreFirst = IgnoreFirst(x0, _48Null);
        _0IgnoreFirst;
        });
    _50Equal = Equal(_49As, _48Null);
    _51Constant = -3;
    _52Equal = Equal(channelB, _51Constant);
    _53IsValidNode = IsValidNode(sourceB);
    _55Pass-through: TriMesh = if (_53IsValidNode)
      {
        TriMesh _54MeshFromNode;// 1:NodeMeshOrDefault-ext->2:MeshFromNode 90950
        _54MeshFromNode = MeshFromNode(sourceB);
        _54MeshFromNode;
        }else
      {
        mesh;
        };
    _98Pass-through: MapChannel = if (_52Equal)
      {
        MapChannel _57TopologyChannel;// 0:MapChannelOrGeometryOrCreate-ext->6:TopologyChannel 90892
        _57TopologyChannel = TopologyChannel(_55Pass-through: TriMesh);
        _57TopologyChannel;
        }else
      {
        Int32 _58Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 90908
        Boolean _59Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 90907
        MapChannel _63Pass-through: any;// 0:Pass-through: any 90899
        Object _64Null;// 6:IsNullFix2-ext->3:Null 90903
        Object _65As;// 6:IsNullFix2-ext->23:As 90901
        Boolean _66Equal;// 6:IsNullFix2-ext->1:Equal 90900
        Boolean _67Not;// 1:MapChannelExists-ext->4:Not 90898
        _58Constant = -3;
        _59Equal = Equal(channelB, _58Constant);
        _63Pass-through: any = if (_59Equal)
          {
            MapChannel _61TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 90909
            _61TopologyChannel = TopologyChannel(_55Pass-through: TriMesh);
            _61TopologyChannel;
            }else
          {
            MapChannel _62GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 90910
            _62GetMapChannel = GetMapChannel(_55Pass-through: TriMesh, channelB);
            _62GetMapChannel;
            };
        _64Null = Null();
        _65As = As(_63Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 90902
            _0IgnoreFirst = IgnoreFirst(x0, _64Null);
            _0IgnoreFirst;
            });
        _66Equal = Equal(_65As, _64Null);
        _67Not = Not(_66Equal);
        if (_67Not)
          {
            Int32 _69Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 90915
            Boolean _70Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 90914
            _69Constant = -3;
            _70Equal = Equal(channelB, _69Constant);
            if (_70Equal)
              {
                MapChannel _72TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 90916
                _72TopologyChannel = TopologyChannel(_55Pass-through: TriMesh);
                _72TopologyChannel;
                }else
              {
                MapChannel _73GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 90917
                _73GetMapChannel = GetMapChannel(_55Pass-through: TriMesh, channelB);
                _73GetMapChannel;
                };
            }else
          {
            Int32 _74Constant;// 8:MapChannelOrGeometryGet-ext->0:Constant 90922
            Boolean _75Equal;// 8:MapChannelOrGeometryGet-ext->4:Equal 90921
            Int32 _76Constant;// 10:MapChannelOrGeometrySet-ext->0:Constant 90933
            Boolean _77Equal;// 10:MapChannelOrGeometrySet-ext->6:Equal 90932
            Single _78Constant;// 5:Origin->0:Constant 90939
            Vector3 _79Vector3;// 5:Origin->1:Vector3 90938
            IArray[Vector3] _80Unit;// 4:MapChannelClear-ext->4:Unit 90937
            Int32 _81Zero;// 4:MapChannelClear-ext->9:Zero 90941
            Int32 _82FaceCount;// 4:MapChannelClear-ext->6:FaceCount 90945
            Int32 _83Constant;// 1:Three->0:Constant 90944
            Int32 _84Multiply;// 7:MultiplyByThree->2:Multiply 90943
            IArray[Int32] _85ArrayOf;// 4:MapChannelClear-ext->8:ArrayOf 90940
            TriMesh _90Pass-through: TriMesh;// 0:Pass-through: TriMesh 90919
            _74Constant = -3;
            _75Equal = Equal(channelB, _74Constant);
            _76Constant = -3;
            _77Equal = Equal(_76Constant, channelB);
            _78Constant = 0;
            _79Vector3 = Vector3(_78Constant, _78Constant, _78Constant);
            _80Unit = Unit(_79Vector3);
            _81Zero = Zero();
            _82FaceCount = FaceCount(_55Pass-through: TriMesh);
            _83Constant = 3;
            _84Multiply = Multiply(_82FaceCount, _83Constant);
            _85ArrayOf = ArrayOf(_81Zero, _84Multiply);
            _90Pass-through: TriMesh = if (_77Equal)
              {
                MeshData _87MeshData;// 10:MapChannelOrGeometrySet-ext->9:MeshData 90935
                TriMesh _88CreateMeshWithMeshData;// 10:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 90934
                _87MeshData = MeshData(_55Pass-through: TriMesh);
                _88CreateMeshWithMeshData = CreateMeshWithMeshData(_80Unit, _85ArrayOf, _87MeshData);
                _88CreateMeshWithMeshData;
                }else
              {
                TriMesh _89SetMapChannel;// 10:MapChannelOrGeometrySet-ext->0:SetMapChannel 90936
                _89SetMapChannel = SetMapChannel(_55Pass-through: TriMesh, channelB, _80Unit, _85ArrayOf);
                _89SetMapChannel;
                };
            if (_75Equal)
              {
                MapChannel _96TopologyChannel;// 8:MapChannelOrGeometryGet-ext->6:TopologyChannel 90923
                _96TopologyChannel = TopologyChannel(_90Pass-through: TriMesh);
                _96TopologyChannel;
                }else
              {
                MapChannel _97GetMapChannel;// 8:MapChannelOrGeometryGet-ext->3:GetMapChannel 90924
                _97GetMapChannel = GetMapChannel(_90Pass-through: TriMesh, channelB);
                _97GetMapChannel;
                };
            };
        };
    _99Null = Null();
    _100As = As(_98Pass-through: MapChannel, (Object x0) => 
      {
        Object _0IgnoreFirst;// 16:IsNullFix2-ext->5:IgnoreFirst 90756
        _0IgnoreFirst = IgnoreFirst(x0, _99Null);
        _0IgnoreFirst;
        });
    _101Equal = Equal(_100As, _99Null);
    _102OrElse = OrElse(_50Equal, _101Equal);
    if (_102OrElse)
      {
        mesh;
        }else
      {
        Int32 _103Constant;// 6:MapChannelOrGeometrySet-ext->0:Constant 90764
        Boolean _104Equal;// 6:MapChannelOrGeometrySet-ext->6:Equal 90763
        IArray[Int32] _105MapChannelIndexBuffer;// 3:MapChannelFaceVertexValues-ext->3:MapChannelIndexBuffer 90774
        IArray[Vector3] _106MapChannelVertexBuffer;// 3:MapChannelFaceVertexValues-ext->0:MapChannelVertexBuffer 90775
        IArray[Vector3] _107Map;// 2:SelectByIndex->2:Map 90772
        IArray[Int32] _108MapChannelIndexBuffer;// 4:MapChannelFaceVertexValues-ext->3:MapChannelIndexBuffer 90781
        IArray[Vector3] _109MapChannelVertexBuffer;// 4:MapChannelFaceVertexValues-ext->0:MapChannelVertexBuffer 90782
        IArray[Vector3] _110Map;// 2:SelectByIndex->2:Map 90779
        IArray[Int32] _111MeshIndices;// 18:MeshVertexDataToFaceVertices-ext->3:MeshIndices 90789
        String _112Constant;// 0:HasPerVertexChannel->0:Constant 90800
        Int32 _113Zero;// 14:HasSoftSelection->3:Zero 90802
        String _114ToString;// 0:HasPerVertexChannel->7:ToString 90801
        String _115ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 90799
        Boolean _116IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 90798
        Boolean _117AndAlso;// 17:SoftSelectionOrDefault-ext->15:AndAlso 90794
        IArray[Single] _123Pass-through: array;// 0:Pass-through: array 90784
        IArray[Single] _124Map;// 2:SelectByIndex->2:Map 90787
        IArray[Vector3] _125Combine3;// 7:MapChannelLerp-ext->15:Combine3 90768
        Int32 _174Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 90838
        Boolean _175Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 90837
        MapChannel _179Pass-through: any;// 0:Pass-through: any 90829
        Object _180Null;// 6:IsNullFix2-ext->3:Null 90833
        Object _181As;// 6:IsNullFix2-ext->23:As 90831
        Boolean _182Equal;// 6:IsNullFix2-ext->1:Equal 90830
        Boolean _183Not;// 1:MapChannelExists-ext->4:Not 90828
        Int32 _222Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 90845
        Boolean _223Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 90844
        Int32 _227Constant;// 8:MapChannelOrGeometryGet-ext->0:Constant 90852
        Boolean _228Equal;// 8:MapChannelOrGeometryGet-ext->4:Equal 90851
        Int32 _229Constant;// 10:MapChannelOrGeometrySet-ext->0:Constant 90863
        Boolean _230Equal;// 10:MapChannelOrGeometrySet-ext->6:Equal 90862
        Single _231Constant;// 5:Origin->0:Constant 90869
        Vector3 _232Vector3;// 5:Origin->1:Vector3 90868
        IArray[Vector3] _233Unit;// 4:MapChannelClear-ext->4:Unit 90867
        Int32 _234Zero;// 4:MapChannelClear-ext->9:Zero 90871
        Int32 _235FaceCount;// 4:MapChannelClear-ext->6:FaceCount 90875
        Int32 _236Constant;// 1:Three->0:Constant 90874
        Int32 _237Multiply;// 7:MultiplyByThree->2:Multiply 90873
        IArray[Int32] _238ArrayOf;// 4:MapChannelClear-ext->8:ArrayOf 90870
        Int32 _308Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 90908
        Boolean _309Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 90907
        MapChannel _313Pass-through: any;// 0:Pass-through: any 90899
        Object _314Null;// 6:IsNullFix2-ext->3:Null 90903
        Object _315As;// 6:IsNullFix2-ext->23:As 90901
        Boolean _316Equal;// 6:IsNullFix2-ext->1:Equal 90900
        Boolean _317Not;// 1:MapChannelExists-ext->4:Not 90898
        Int32 _356Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 90915
        Boolean _357Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 90914
        Int32 _361Constant;// 8:MapChannelOrGeometryGet-ext->0:Constant 90922
        Boolean _362Equal;// 8:MapChannelOrGeometryGet-ext->4:Equal 90921
        Int32 _363Constant;// 10:MapChannelOrGeometrySet-ext->0:Constant 90933
        Boolean _364Equal;// 10:MapChannelOrGeometrySet-ext->6:Equal 90932
        Single _365Constant;// 5:Origin->0:Constant 90939
        Vector3 _366Vector3;// 5:Origin->1:Vector3 90938
        IArray[Vector3] _367Unit;// 4:MapChannelClear-ext->4:Unit 90937
        Int32 _368Zero;// 4:MapChannelClear-ext->9:Zero 90941
        Int32 _369FaceCount;// 4:MapChannelClear-ext->6:FaceCount 90945
        Int32 _370Constant;// 1:Three->0:Constant 90944
        Int32 _371Multiply;// 7:MultiplyByThree->2:Multiply 90943
        IArray[Int32] _372ArrayOf;// 4:MapChannelClear-ext->8:ArrayOf 90940
        IArray[Int32] _394MeshIndices;// 7:MapChannelLerp-ext->7:MeshIndices 90813
        IArray[Int32] _395Indices;// 7:MapChannelLerp-ext->14:Indices 90812
        _103Constant = -3;
        _104Equal = Equal(_103Constant, targetChannel);
        _105MapChannelIndexBuffer = MapChannelIndexBuffer(_47Pass-through: MapChannel);
        _106MapChannelVertexBuffer = MapChannelVertexBuffer(_47Pass-through: MapChannel);
        _107Map = Map(_105MapChannelIndexBuffer, (Int32 x0) => 
          {
            Vector3 _0At;// 2:SelectByIndex->3:At 90773
            _0At = At(_106MapChannelVertexBuffer, x0);
            _0At;
            });
        _108MapChannelIndexBuffer = MapChannelIndexBuffer(_98Pass-through: MapChannel);
        _109MapChannelVertexBuffer = MapChannelVertexBuffer(_98Pass-through: MapChannel);
        _110Map = Map(_108MapChannelIndexBuffer, (Int32 x0) => 
          {
            Vector3 _0At;// 2:SelectByIndex->3:At 90780
            _0At = At(_109MapChannelVertexBuffer, x0);
            _0At;
            });
        _111MeshIndices = MeshIndices(mesh);
        _112Constant = per-vertex data channel ;
        _113Zero = Zero();
        _114ToString = ToString(_113Zero);
        _115ConcatenateStrings = ConcatenateStrings(_112Constant, _114ToString);
        _116IsChannelAvailable = IsChannelAvailable(mesh, _115ConcatenateStrings);
        _117AndAlso = AndAlso(_116IsChannelAvailable, useSoftSelection);
        _123Pass-through: array = if (_117AndAlso)
          {
            Int32 _118Zero;// 7:SoftSelection->2:Zero 90805
            IArray[Single] _119PerVertexData;// 7:SoftSelection->3:PerVertexData 90804
            _118Zero = Zero();
            _119PerVertexData = PerVertexData(mesh, _118Zero);
            _119PerVertexData;
            }else
          {
            IArray[Vector3] _120MeshVertices;// 3:ArrayPerVertex-ext->1:MeshVertices 90810
            Int32 _121Count;// 3:ArrayPerVertex-ext->2:Count 90809
            IArray[Single] _122ArrayOf;// 3:ArrayPerVertex-ext->3:ArrayOf 90808
            _120MeshVertices = MeshVertices(mesh);
            _121Count = Count(_120MeshVertices);
            _122ArrayOf = ArrayOf(weight, _121Count);
            _122ArrayOf;
            };
        _124Map = Map(_111MeshIndices, (Int32 x0) => 
          {
            Single _0At;// 2:SelectByIndex->3:At 90788
            _0At = At(_123Pass-through: array, x0);
            _0At;
            });
        _125Combine3 = Combine3(_107Map, _110Map, _124Map, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 7:MapChannelLerp-ext->19:Lerp 90811
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _174Constant = -3;
        _175Equal = Equal(channelA, _174Constant);
        _179Pass-through: any = if (_175Equal)
          {
            MapChannel _177TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 90839
            _177TopologyChannel = TopologyChannel(_4Pass-through: TriMesh);
            _177TopologyChannel;
            }else
          {
            MapChannel _178GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 90840
            _178GetMapChannel = GetMapChannel(_4Pass-through: TriMesh, channelA);
            _178GetMapChannel;
            };
        _180Null = Null();
        _181As = As(_179Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 90832
            _0IgnoreFirst = IgnoreFirst(x0, _180Null);
            _0IgnoreFirst;
            });
        _182Equal = Equal(_181As, _180Null);
        _183Not = Not(_182Equal);
        _222Constant = -3;
        _223Equal = Equal(channelA, _222Constant);
        _227Constant = -3;
        _228Equal = Equal(channelA, _227Constant);
        _229Constant = -3;
        _230Equal = Equal(_229Constant, channelA);
        _231Constant = 0;
        _232Vector3 = Vector3(_231Constant, _231Constant, _231Constant);
        _233Unit = Unit(_232Vector3);
        _234Zero = Zero();
        _235FaceCount = FaceCount(_4Pass-through: TriMesh);
        _236Constant = 3;
        _237Multiply = Multiply(_235FaceCount, _236Constant);
        _238ArrayOf = ArrayOf(_234Zero, _237Multiply);
        _308Constant = -3;
        _309Equal = Equal(channelB, _308Constant);
        _313Pass-through: any = if (_309Equal)
          {
            MapChannel _311TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 90909
            _311TopologyChannel = TopologyChannel(_55Pass-through: TriMesh);
            _311TopologyChannel;
            }else
          {
            MapChannel _312GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 90910
            _312GetMapChannel = GetMapChannel(_55Pass-through: TriMesh, channelB);
            _312GetMapChannel;
            };
        _314Null = Null();
        _315As = As(_313Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 90902
            _0IgnoreFirst = IgnoreFirst(x0, _314Null);
            _0IgnoreFirst;
            });
        _316Equal = Equal(_315As, _314Null);
        _317Not = Not(_316Equal);
        _356Constant = -3;
        _357Equal = Equal(channelB, _356Constant);
        _361Constant = -3;
        _362Equal = Equal(channelB, _361Constant);
        _363Constant = -3;
        _364Equal = Equal(_363Constant, channelB);
        _365Constant = 0;
        _366Vector3 = Vector3(_365Constant, _365Constant, _365Constant);
        _367Unit = Unit(_366Vector3);
        _368Zero = Zero();
        _369FaceCount = FaceCount(_55Pass-through: TriMesh);
        _370Constant = 3;
        _371Multiply = Multiply(_369FaceCount, _370Constant);
        _372ArrayOf = ArrayOf(_368Zero, _371Multiply);
        _394MeshIndices = MeshIndices(mesh);
        _395Indices = Indices(_394MeshIndices);
        if (_104Equal)
          {
            MeshData _396MeshData;// 6:MapChannelOrGeometrySet-ext->9:MeshData 90766
            TriMesh _397CreateMeshWithMeshData;// 6:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 90765
            _396MeshData = MeshData(mesh);
            _397CreateMeshWithMeshData = CreateMeshWithMeshData(_125Combine3, _395Indices, _396MeshData);
            _397CreateMeshWithMeshData;
            }else
          {
            TriMesh _398SetMapChannel;// 6:MapChannelOrGeometrySet-ext->0:SetMapChannel 90767
            _398SetMapChannel = SetMapChannel(mesh, targetChannel, _125Combine3, _395Indices);
            _398SetMapChannel;
            };
        };
    }