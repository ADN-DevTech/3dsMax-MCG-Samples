(InstanceState state, TriMesh mesh, Int32 axis, Single location, Boolean direction, Single distance) => 
  {
    Single _0Constant;// 5:Origin-ext->0:Constant 89436
    Vector3 _1Vector3;// 5:Origin-ext->1:Vector3 89435
    Int32 _2Zero;// 6:AxisChoose-ext->9:Zero 89441
    Boolean _3GreaterThanOrEqual;// 6:AxisChoose-ext->8:GreaterThanOrEqual 89440
    Vector3 _4XAxis;// 6:AxisChoose-ext->3:XAxis 89449
    IArray[Vector3] _5Unit;// 2:Array3->2:Unit 89448
    Vector3 _6YAxis;// 6:AxisChoose-ext->4:YAxis 89450
    IArray[Vector3] _7Append;// 2:Array3->3:Append 89447
    Vector3 _8ZAxis;// 6:AxisChoose-ext->5:ZAxis 89451
    IArray[Vector3] _9Append;// 2:Array3->6:Append 89446
    Vector3 _16MultiplyByScalar;// 12:MultiplyByScalar 89437
    Vector3 _17Add;// 11:Add 89434
    Vector3 _24Pass-through: Vector3;// 0:Pass-through: Vector3 89461
    Ray _32Ray;// 4:Ray 89433
    Plane _33Plane;// 3:Plane 89432
    IArray[TriMesh] _34SliceMesh;// 0:SliceMesh 89430
    Int32 _35Count;// 17:MeshesPositionAlongLine-ext->7:Count 89429
    IArray[Single] _36RangeInclusiveFloat;// 5:SampleLerp->2:RangeInclusiveFloat 89423
    Single _43Constant;// 0:Constant 89469
    Single _44Divide;// 14:Divide 89467
    Vector3 _45MultiplyByScalar;// 19:MultiplyByScalar 89466
    Vector3 _46Negate;// 18:Negate 89470
    Line _47Line;// 16:Line 89465
    Func[Single, Vector3] _48Pass-through: function1;// 0:Pass-through: function1 89421
    IArray[Vector3] _49Map;// 5:SampleLerp->3:Map 89422
    IArray[TriMesh] _50Combine;// 3:MeshesMoveToPoints-ext->3:Combine 89409
    TriMesh _51CombineAllMeshes;// 23:CombineAllMeshes 89404
    _0Constant = 0;
    _1Vector3 = Vector3(_0Constant, _0Constant, _0Constant);
    _2Zero = Zero();
    _3GreaterThanOrEqual = GreaterThanOrEqual(axis, _2Zero);
    _4XAxis = XAxis();
    _5Unit = Unit(_4XAxis);
    _6YAxis = YAxis();
    _7Append = Append(_5Unit, _6YAxis);
    _8ZAxis = ZAxis();
    _9Append = Append(_7Append, _8ZAxis);
    _16MultiplyByScalar = MultiplyByScalar(if (_3GreaterThanOrEqual)
      {
        Vector3 _10At;// 6:AxisChoose-ext->1:At 89442
        _10At = At(_9Append, axis);
        _10At;
        }else
      {
        Int32 _11One;// 10:PlusOne->1:One 89457
        Int32 _12Add;// 10:PlusOne->0:Add 89456
        Int32 _13Negative;// 6:AxisChoose-ext->11:Negative 89454
        Vector3 _14At;// 6:AxisChoose-ext->12:At 89453
        Vector3 _15Negate;// 6:AxisChoose-ext->13:Negate 89452
        _11One = One();
        _12Add = Add(axis, _11One);
        _13Negative = Negative(_12Add);
        _14At = At(_9Append, _13Negative);
        _15Negate = Negate(_14At);
        _15Negate;
        }, location);
    _17Add = Add(_1Vector3, _16MultiplyByScalar);
    _24Pass-through: Vector3 = if (_3GreaterThanOrEqual)
      {
        Vector3 _18At;// 6:AxisChoose-ext->1:At 89442
        _18At = At(_9Append, axis);
        _18At;
        }else
      {
        Int32 _19One;// 10:PlusOne->1:One 89457
        Int32 _20Add;// 10:PlusOne->0:Add 89456
        Int32 _21Negative;// 6:AxisChoose-ext->11:Negative 89454
        Vector3 _22At;// 6:AxisChoose-ext->12:At 89453
        Vector3 _23Negate;// 6:AxisChoose-ext->13:Negate 89452
        _19One = One();
        _20Add = Add(axis, _19One);
        _21Negative = Negative(_20Add);
        _22At = At(_9Append, _21Negative);
        _23Negate = Negate(_22At);
        _23Negate;
        };
    _32Ray = Ray(_17Add, if (direction)
      {
        Vector3 _31Negate;// 21:NegateIf-ext->0:Negate 89463
        _31Negate = Negate(_24Pass-through: Vector3);
        _31Negate;
        }else
      {
        _24Pass-through: Vector3;
        });
    _33Plane = Plane(_32Ray);
    _34SliceMesh = SliceMesh(mesh, _33Plane);
    _35Count = Count(_34SliceMesh);
    _36RangeInclusiveFloat = RangeInclusiveFloat(_35Count);
    _43Constant = 2;
    _44Divide = Divide(distance, _43Constant);
    _45MultiplyByScalar = MultiplyByScalar(if (_3GreaterThanOrEqual)
      {
        Vector3 _37At;// 6:AxisChoose-ext->1:At 89442
        _37At = At(_9Append, axis);
        _37At;
        }else
      {
        Int32 _38One;// 10:PlusOne->1:One 89457
        Int32 _39Add;// 10:PlusOne->0:Add 89456
        Int32 _40Negative;// 6:AxisChoose-ext->11:Negative 89454
        Vector3 _41At;// 6:AxisChoose-ext->12:At 89453
        Vector3 _42Negate;// 6:AxisChoose-ext->13:Negate 89452
        _38One = One();
        _39Add = Add(axis, _38One);
        _40Negative = Negative(_39Add);
        _41At = At(_9Append, _40Negative);
        _42Negate = Negate(_41At);
        _42Negate;
        }, _44Divide);
    _46Negate = Negate(_45MultiplyByScalar);
    _47Line = Line(_45MultiplyByScalar, _46Negate);
    _48Pass-through: function1 = (Single x0) => 
      {
        Vector3 _0LineA;// 7:LerpAlongLine->2:LineA 89427
        Vector3 _1LineB;// 7:LerpAlongLine->3:LineB 89428
        Vector3 _2Lerp;// 7:LerpAlongLine->4:Lerp 89426
        _0LineA = LineA(_47Line);
        _1LineB = LineB(_47Line);
        _2Lerp = Lerp(_0LineA, _1LineB, x0);
        _2Lerp;
        };
    _49Map = Map(_36RangeInclusiveFloat, _48Pass-through: function1);
    _50Combine = Combine(_34SliceMesh, _49Map, (TriMesh x0, Vector3 x1) => 
      {
        IArray[Vector3] _0MeshVertices;// 0:DeformMeshPoints->0:MeshVertices 89416
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 89413
        IArray[Vector3] _2Map;// 0:DeformMeshPoints->1:Map 89415
        TriMesh _3SetMeshVertices;// 0:DeformMeshPoints->4:SetMeshVertices 89414
        _0MeshVertices = MeshVertices(x0);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Add;// 2:OffsetMesh->2:Add 89417
            _0Add = Add(x0, x1);
            _0Add;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(x0, _2Map);
        _3SetMeshVertices;
        });
    _51CombineAllMeshes = CombineAllMeshes(_50Combine);
    _51CombineAllMeshes;
    }