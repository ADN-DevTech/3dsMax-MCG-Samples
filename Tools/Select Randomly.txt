(InstanceState state, Int32 subobject, TriMesh mesh, Int32 seed, Single probability, Int32 sel method) => 
  {
    Int32 _0Zero;// 2:Switch3-ext->5:Zero 108629
    Boolean _1Equal;// 2:Switch3-ext->4:Equal 108628
    TriMesh _2IfThen;// 2:Switch3-ext->6:IfThen 108627
    _0Zero = Zero();
    _1Equal = Equal(subobject, _0Zero);
    _2IfThen = IfThen(_1Equal, () => 
      {
        Int32 _0Zero;// 2:Switch3-ext->5:Zero 108722
        Boolean _1Equal;// 2:Switch3-ext->4:Equal 108721
        IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 108720
        Int32 _3Count;// 9:Count 108713
        IArray[Int32] _4Range;// 7:MapRange-ext->2:Range 108707
        Single _5Constant;// 6:DivideBy100Float->0:Constant 108732
        Single _6Divide;// 6:DivideBy100Float->1:Divide 108731
        Func[Int32, Boolean] _7Pass-through: function1;// 0:Pass-through: function1 108705
        IArray[Boolean] _8Map;// 7:MapRange-ext->3:Map 108706
        IArray[Boolean] _9VertexSelection;// 3:MeshScaleVertices-ext->2:VertexSelection 108638
        IArray[Boolean] _10Combine;// 3:MeshScaleVertices-ext->10:Combine 108637
        TriMesh _11SetVertexSelection;// 3:MeshScaleVertices-ext->5:SetVertexSelection 108636
        _0Zero = Zero();
        _1Equal = Equal(subobject, _0Zero);
        _2IfThen = IfThen(_1Equal, () => 
          {
            IArray[Boolean] _0VertexSelection;// 0:SubObjectSelection-ext->9:VertexSelection 108726
            _0VertexSelection = VertexSelection(mesh);
            _0VertexSelection;
            }, () => 
          {
            Int32 _0One;// 2:Switch3-ext->2:One 108725
            Boolean _1Equal;// 2:Switch3-ext->7:Equal 108724
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 108723
            _0One = One();
            _1Equal = Equal(subobject, _0One);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0EdgeSelection;// 0:SubObjectSelection-ext->8:EdgeSelection 108727
                _0EdgeSelection = EdgeSelection(mesh);
                _0EdgeSelection;
                }, () => 
              {
                IArray[Boolean] _0FaceSelection;// 0:SubObjectSelection-ext->5:FaceSelection 108728
                _0FaceSelection = FaceSelection(mesh);
                _0FaceSelection;
                });
            _2IfThen;
            });
        _3Count = Count(_2IfThen);
        _4Range = Range(_3Count);
        _5Constant = 100;
        _6Divide = Divide(probability, _5Constant);
        _7Pass-through: function1 = (Int32 x0) => 
          {
            Single _0RandFloat;// 2:RandBool-ext->2:RandFloat 108712
            Boolean _1LessThan;// 2:RandBool-ext->4:LessThan 108711
            _0RandFloat = RandFloat(seed, x0);
            _1LessThan = LessThan(_0RandFloat, _6Divide);
            _1LessThan;
            };
        _8Map = Map(_4Range, _7Pass-through: function1);
        _9VertexSelection = VertexSelection(mesh);
        _10Combine = Combine(_8Map, _9VertexSelection, (Boolean x0, Boolean x1) => 
          {
            Int32 _0Zero;// 3:Switch3-ext->5:Zero 108648
            Boolean _1Equal;// 3:Switch3-ext->4:Equal 108647
            Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 108646
            _0Zero = Zero();
            _1Equal = Equal(sel method, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                x0;
                }, () => 
              {
                Int32 _0One;// 3:Switch3-ext->2:One 108651
                Boolean _1Equal;// 3:Switch3-ext->7:Equal 108650
                Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 108649
                _0One = One();
                _1Equal = Equal(sel method, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 108652
                    _0OrElse = OrElse(x0, x1);
                    _0OrElse;
                    }, () => 
                  {
                    Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 108654
                    Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 108653
                    _0Not = Not(x0);
                    _1AndAlso = AndAlso(x1, _0Not);
                    _1AndAlso;
                    });
                _2IfThen;
                });
            _2IfThen;
            });
        _11SetVertexSelection = SetVertexSelection(mesh, _10Combine);
        _11SetVertexSelection;
        }, () => 
      {
        Int32 _0One;// 2:Switch3-ext->2:One 108632
        Boolean _1Equal;// 2:Switch3-ext->7:Equal 108631
        TriMesh _2IfThen;// 2:Switch3-ext->8:IfThen 108630
        _0One = One();
        _1Equal = Equal(subobject, _0One);
        _2IfThen = IfThen(_1Equal, () => 
          {
            Int32 _0Zero;// 2:Switch3-ext->5:Zero 108722
            Boolean _1Equal;// 2:Switch3-ext->4:Equal 108721
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 108720
            Int32 _3Count;// 9:Count 108713
            IArray[Int32] _4Range;// 7:MapRange-ext->2:Range 108707
            Single _5Constant;// 6:DivideBy100Float->0:Constant 108732
            Single _6Divide;// 6:DivideBy100Float->1:Divide 108731
            Func[Int32, Boolean] _7Pass-through: function1;// 0:Pass-through: function1 108705
            IArray[Boolean] _8Map;// 7:MapRange-ext->3:Map 108706
            IArray[Boolean] _9EdgeSelection;// 4:SelectEdges-ext->5:EdgeSelection 108660
            IArray[Boolean] _10Combine;// 4:SelectEdges-ext->10:Combine 108659
            TriMesh _11SetEdgeSelection;// 4:SelectEdges-ext->2:SetEdgeSelection 108658
            _0Zero = Zero();
            _1Equal = Equal(subobject, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0VertexSelection;// 0:SubObjectSelection-ext->9:VertexSelection 108726
                _0VertexSelection = VertexSelection(mesh);
                _0VertexSelection;
                }, () => 
              {
                Int32 _0One;// 2:Switch3-ext->2:One 108725
                Boolean _1Equal;// 2:Switch3-ext->7:Equal 108724
                IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 108723
                _0One = One();
                _1Equal = Equal(subobject, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    IArray[Boolean] _0EdgeSelection;// 0:SubObjectSelection-ext->8:EdgeSelection 108727
                    _0EdgeSelection = EdgeSelection(mesh);
                    _0EdgeSelection;
                    }, () => 
                  {
                    IArray[Boolean] _0FaceSelection;// 0:SubObjectSelection-ext->5:FaceSelection 108728
                    _0FaceSelection = FaceSelection(mesh);
                    _0FaceSelection;
                    });
                _2IfThen;
                });
            _3Count = Count(_2IfThen);
            _4Range = Range(_3Count);
            _5Constant = 100;
            _6Divide = Divide(probability, _5Constant);
            _7Pass-through: function1 = (Int32 x0) => 
              {
                Single _0RandFloat;// 2:RandBool-ext->2:RandFloat 108712
                Boolean _1LessThan;// 2:RandBool-ext->4:LessThan 108711
                _0RandFloat = RandFloat(seed, x0);
                _1LessThan = LessThan(_0RandFloat, _6Divide);
                _1LessThan;
                };
            _8Map = Map(_4Range, _7Pass-through: function1);
            _9EdgeSelection = EdgeSelection(mesh);
            _10Combine = Combine(_8Map, _9EdgeSelection, (Boolean x0, Boolean x1) => 
              {
                Int32 _0Zero;// 3:Switch3-ext->5:Zero 108670
                Boolean _1Equal;// 3:Switch3-ext->4:Equal 108669
                Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 108668
                _0Zero = Zero();
                _1Equal = Equal(sel method, _0Zero);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    x0;
                    }, () => 
                  {
                    Int32 _0One;// 3:Switch3-ext->2:One 108673
                    Boolean _1Equal;// 3:Switch3-ext->7:Equal 108672
                    Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 108671
                    _0One = One();
                    _1Equal = Equal(sel method, _0One);
                    _2IfThen = IfThen(_1Equal, () => 
                      {
                        Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 108674
                        _0OrElse = OrElse(x0, x1);
                        _0OrElse;
                        }, () => 
                      {
                        Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 108676
                        Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 108675
                        _0Not = Not(x0);
                        _1AndAlso = AndAlso(x1, _0Not);
                        _1AndAlso;
                        });
                    _2IfThen;
                    });
                _2IfThen;
                });
            _11SetEdgeSelection = SetEdgeSelection(mesh, _10Combine);
            _11SetEdgeSelection;
            }, () => 
          {
            Int32 _0Zero;// 2:Switch3-ext->5:Zero 108722
            Boolean _1Equal;// 2:Switch3-ext->4:Equal 108721
            IArray[Boolean] _2IfThen;// 2:Switch3-ext->6:IfThen 108720
            Int32 _3Count;// 9:Count 108713
            IArray[Int32] _4Range;// 7:MapRange-ext->2:Range 108707
            Single _5Constant;// 6:DivideBy100Float->0:Constant 108732
            Single _6Divide;// 6:DivideBy100Float->1:Divide 108731
            Func[Int32, Boolean] _7Pass-through: function1;// 0:Pass-through: function1 108705
            IArray[Boolean] _8Map;// 7:MapRange-ext->3:Map 108706
            IArray[Boolean] _9FaceSelection;// 6:SelectFaces-ext->2:FaceSelection 108682
            IArray[Boolean] _10Combine;// 6:SelectFaces-ext->10:Combine 108681
            TriMesh _11SetFaceSelection;// 6:SelectFaces-ext->11:SetFaceSelection 108680
            _0Zero = Zero();
            _1Equal = Equal(subobject, _0Zero);
            _2IfThen = IfThen(_1Equal, () => 
              {
                IArray[Boolean] _0VertexSelection;// 0:SubObjectSelection-ext->9:VertexSelection 108726
                _0VertexSelection = VertexSelection(mesh);
                _0VertexSelection;
                }, () => 
              {
                Int32 _0One;// 2:Switch3-ext->2:One 108725
                Boolean _1Equal;// 2:Switch3-ext->7:Equal 108724
                IArray[Boolean] _2IfThen;// 2:Switch3-ext->8:IfThen 108723
                _0One = One();
                _1Equal = Equal(subobject, _0One);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    IArray[Boolean] _0EdgeSelection;// 0:SubObjectSelection-ext->8:EdgeSelection 108727
                    _0EdgeSelection = EdgeSelection(mesh);
                    _0EdgeSelection;
                    }, () => 
                  {
                    IArray[Boolean] _0FaceSelection;// 0:SubObjectSelection-ext->5:FaceSelection 108728
                    _0FaceSelection = FaceSelection(mesh);
                    _0FaceSelection;
                    });
                _2IfThen;
                });
            _3Count = Count(_2IfThen);
            _4Range = Range(_3Count);
            _5Constant = 100;
            _6Divide = Divide(probability, _5Constant);
            _7Pass-through: function1 = (Int32 x0) => 
              {
                Single _0RandFloat;// 2:RandBool-ext->2:RandFloat 108712
                Boolean _1LessThan;// 2:RandBool-ext->4:LessThan 108711
                _0RandFloat = RandFloat(seed, x0);
                _1LessThan = LessThan(_0RandFloat, _6Divide);
                _1LessThan;
                };
            _8Map = Map(_4Range, _7Pass-through: function1);
            _9FaceSelection = FaceSelection(mesh);
            _10Combine = Combine(_8Map, _9FaceSelection, (Boolean x0, Boolean x1) => 
              {
                Int32 _0Zero;// 3:Switch3-ext->5:Zero 108692
                Boolean _1Equal;// 3:Switch3-ext->4:Equal 108691
                Boolean _2IfThen;// 3:Switch3-ext->6:IfThen 108690
                _0Zero = Zero();
                _1Equal = Equal(sel method, _0Zero);
                _2IfThen = IfThen(_1Equal, () => 
                  {
                    x0;
                    }, () => 
                  {
                    Int32 _0One;// 3:Switch3-ext->2:One 108695
                    Boolean _1Equal;// 3:Switch3-ext->7:Equal 108694
                    Boolean _2IfThen;// 3:Switch3-ext->8:IfThen 108693
                    _0One = One();
                    _1Equal = Equal(sel method, _0One);
                    _2IfThen = IfThen(_1Equal, () => 
                      {
                        Boolean _0OrElse;// 4:SelectionUpdateFunction-ext->4:OrElse 108696
                        _0OrElse = OrElse(x0, x1);
                        _0OrElse;
                        }, () => 
                      {
                        Boolean _0Not;// 4:SelectionUpdateFunction-ext->6:Not 108698
                        Boolean _1AndAlso;// 4:SelectionUpdateFunction-ext->5:AndAlso 108697
                        _0Not = Not(x0);
                        _1AndAlso = AndAlso(x1, _0Not);
                        _1AndAlso;
                        });
                    _2IfThen;
                    });
                _2IfThen;
                });
            _11SetFaceSelection = SetFaceSelection(mesh, _10Combine);
            _11SetFaceSelection;
            });
        _2IfThen;
        });
    _2IfThen;
    }