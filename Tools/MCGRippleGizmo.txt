(InstanceState state, Vector3 minCorner, Vector3 maxCorner, Int32 numSubdivisions, Single amplitude1, Single amplitude2, Single waveLength, Single phase, Single decay, Matrix shapeTransform) => 
  {
    IArray[Vector3] _0Unit;// 11:Array2->2:Unit 75595
    IArray[Vector3] _1Append;// 11:Array2->3:Append 75594
    BoundingBox _2BoxFromPoints;// 2:SplineBoxPrimitive->10:BoxFromPoints 75591
    IArray[Vector3] _3BoxCorners;// 2:SplineBoxPrimitive->4:BoxCorners 75590
    Int32 _4Constant;// 2:SplineBoxPrimitive->0:Constant 75596
    IArray[Vector3] _5Take;// 2:SplineBoxPrimitive->20:Take 75589
    IArray[IArray[Vector3]] _6Apply1;// 2:SplineBoxPrimitive->33:Apply1 75532
    IArray[IArray[IArray[Vector3]]] _7Unit;// 37:Array3->2:Unit 75531
    IArray[Vector3] _8Skip;// 2:SplineBoxPrimitive->21:Skip 75598
    IArray[IArray[Vector3]] _9Apply1;// 2:SplineBoxPrimitive->34:Apply1 75597
    IArray[IArray[IArray[Vector3]]] _10Append;// 37:Array3->3:Append 75530
    IArray[IArray[Vector3]] _11Combine;// 35:CombineToSubArray->2:Combine 75601
    IArray[IArray[IArray[Vector3]]] _12Append;// 37:Array3->6:Append 75529
    IArray[IArray[Vector3]] _13Flatten;// 2:SplineBoxPrimitive->38:Flatten 75525
    IArray[Single] _14RangeInclusiveFloat;// 2:SplineBoxPrimitive->9:RangeInclusiveFloat 75608
    Boolean _15False;// 2:SplineBoxPrimitive->6:False 75618
    IArray[Spline] _16Map;// 2:SplineBoxPrimitive->8:Map 75524
    Spline _17CombineSplines;// 2:SplineBoxPrimitive->7:CombineSplines 75523
    IArray[Vector3] _18SplineVerticesBuffer;// 2:SplineDeformKnots->10:SplineVerticesBuffer 75436
    Matrix _19MatrixIdentity;// 29:MatrixIdentity 75622
    Single _20Constant;// 0:Constant 75629
    Single _21Divide;// 19:Divide 75627
    Func[Vector3, Vector3] _22Pass-through: function1;// 0:Pass-through: function1 75433
    IArray[Vector3] _23Map;// 2:SplineDeformKnots->15:Map 75435
    IArray[Int32] _24SplineSegmentIndices;// 2:SplineDeformKnots->11:SplineSegmentIndices 75437
    IArray[Vector3] _25SplineTangentsBuffer;// 2:SplineDeformKnots->12:SplineTangentsBuffer 75438
    IArray[Int32] _26SplineTangentIndices;// 2:SplineDeformKnots->13:SplineTangentIndices 75439
    IArray[Int32] _27SplineSegmentTypes;// 2:SplineDeformKnots->14:SplineSegmentTypes 75440
    Spline _28CreateSplineFromBuffers;// 2:SplineDeformKnots->9:CreateSplineFromBuffers 75434
    Spline _29IgnoreSecond;// 17:IgnoreSecond 75424
    _0Unit = Unit(minCorner);
    _1Append = Append(_0Unit, maxCorner);
    _2BoxFromPoints = BoxFromPoints(_1Append);
    _3BoxCorners = BoxCorners(_2BoxFromPoints);
    _4Constant = 4;
    _5Take = Take(_3BoxCorners, _4Constant);
    _6Apply1 = Apply1((IArray[Vector3] x0) => 
      {
        IArray[Vector3] _0Map;// 42:VectorArrayType-ext->1:Map 75572
        IArray[Vector3] _1IgnoreSecond;// 42:VectorArrayType-ext->2:IgnoreSecond 75571
        IArray[Int32] _2Indices;// 25:ArraySlidingWindow->8:Indices 75541
        Int32 _3Two;// 2:SplineBoxPrimitive->31:Two 75574
        IArray[IArray[Int32]] _4Map;// 25:ArraySlidingWindow->3:Map 75540
        IArray[IArray[Int32]] _5Filter;// 25:ArraySlidingWindow->16:Filter 75538
        IArray[IArray[Vector3]] _6Map;// 25:ArraySlidingWindow->36:Map 75536
        Int32 _7Count;// 3:LastIndex->2:Count 75585
        Int32 _8One;// 3:MinusOne->2:One 75584
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 75583
        Vector3 _10At;// 29:Last->0:At 75580
        IArray[Vector3] _11Unit;// 27:Array2->2:Unit 75578
        Int32 _12Zero;// 28:First->2:Zero 75588
        Vector3 _13At;// 28:First->0:At 75587
        IArray[Vector3] _14Append;// 27:Array2->3:Append 75577
        IArray[IArray[Vector3]] _15Append;// 2:SplineBoxPrimitive->30:Append 75533
        _0Map = Map(x0, (Vector3 x0) => 
          {
            x0;
            });
        _1IgnoreSecond = IgnoreSecond(x0, () => 
          {
            _0Map;
            });
        _2Indices = Indices(_1IgnoreSecond);
        _3Two = Two();
        _4Map = Map(_2Indices, (Int32 x0) => 
          {
            IArray[Int32] _0GenerateN;// 25:ArraySlidingWindow->14:GenerateN 75545
            Int32 _1Count;// 25:ArraySlidingWindow->24:Count 75553
            Int32 _2Zero;// 25:ArraySlidingWindow->23:Zero 75555
            IArray[Int32] _3Filter;// 25:ArraySlidingWindow->15:Filter 75543
            _0GenerateN = GenerateN(x0, _3Two, (Int32 x0) => 
              {
                Int32 _0One;// 2:PlusOne->1:One 75549
                Int32 _1Add;// 2:PlusOne->0:Add 75548
                _0One = One();
                _1Add = Add(x0, _0One);
                _1Add;
                });
            _1Count = Count(_1IgnoreSecond);
            _2Zero = Zero();
            _3Filter = Filter(_0GenerateN, (Int32 x0) => 
              {
                Boolean _0LessThan;// 25:ArraySlidingWindow->20:LessThan 75551
                Boolean _1GreaterThanOrEqual;// 25:ArraySlidingWindow->22:GreaterThanOrEqual 75554
                Boolean _2AndAlso;// 25:ArraySlidingWindow->21:AndAlso 75550
                _0LessThan = LessThan(x0, _1Count);
                _1GreaterThanOrEqual = GreaterThanOrEqual(x0, _2Zero);
                _2AndAlso = AndAlso(_0LessThan, _1GreaterThanOrEqual);
                _2AndAlso;
                });
            _3Filter;
            });
        _5Filter = Filter(_4Map, (IArray[Int32] x0) => 
          {
            IArray[Int32] _0Map;// 39:Int32ArrayType->2:Map 75560
            IArray[Int32] _1IgnoreSecond;// 39:Int32ArrayType->1:IgnoreSecond 75559
            Int32 _2Count;// 25:ArraySlidingWindow->25:Count 75557
            Boolean _3Equal;// 25:ArraySlidingWindow->30:Equal 75556
            _0Map = Map(x0, (Int32 x0) => 
              {
                x0;
                });
            _1IgnoreSecond = IgnoreSecond(x0, () => 
              {
                _0Map;
                });
            _2Count = Count(_1IgnoreSecond);
            _3Equal = Equal(_2Count, _3Two);
            _3Equal;
            });
        _6Map = Map(_5Filter, (IArray[Int32] x0) => 
          {
            IArray[Vector3] _0Map;// 38:SelectByIndex->2:Map 75566
            _0Map = Map(x0, (Int32 x0) => 
              {
                Vector3 _0At;// 38:SelectByIndex->3:At 75567
                _0At = At(_1IgnoreSecond, x0);
                _0At;
                });
            _0Map;
            });
        _7Count = Count(_1IgnoreSecond);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10At = At(_1IgnoreSecond, _9Subtract);
        _11Unit = Unit(_10At);
        _12Zero = Zero();
        _13At = At(_1IgnoreSecond, _12Zero);
        _14Append = Append(_11Unit, _13At);
        _15Append = Append(_6Map, _14Append);
        _15Append;
        }, _5Take);
    _7Unit = Unit(_6Apply1);
    _8Skip = Skip(_3BoxCorners, _4Constant);
    _9Apply1 = Apply1((IArray[Vector3] x0) => 
      {
        IArray[Vector3] _0Map;// 42:VectorArrayType-ext->1:Map 75572
        IArray[Vector3] _1IgnoreSecond;// 42:VectorArrayType-ext->2:IgnoreSecond 75571
        IArray[Int32] _2Indices;// 25:ArraySlidingWindow->8:Indices 75541
        Int32 _3Two;// 2:SplineBoxPrimitive->31:Two 75574
        IArray[IArray[Int32]] _4Map;// 25:ArraySlidingWindow->3:Map 75540
        IArray[IArray[Int32]] _5Filter;// 25:ArraySlidingWindow->16:Filter 75538
        IArray[IArray[Vector3]] _6Map;// 25:ArraySlidingWindow->36:Map 75536
        Int32 _7Count;// 3:LastIndex->2:Count 75585
        Int32 _8One;// 3:MinusOne->2:One 75584
        Int32 _9Subtract;// 3:MinusOne->1:Subtract 75583
        Vector3 _10At;// 29:Last->0:At 75580
        IArray[Vector3] _11Unit;// 27:Array2->2:Unit 75578
        Int32 _12Zero;// 28:First->2:Zero 75588
        Vector3 _13At;// 28:First->0:At 75587
        IArray[Vector3] _14Append;// 27:Array2->3:Append 75577
        IArray[IArray[Vector3]] _15Append;// 2:SplineBoxPrimitive->30:Append 75533
        _0Map = Map(x0, (Vector3 x0) => 
          {
            x0;
            });
        _1IgnoreSecond = IgnoreSecond(x0, () => 
          {
            _0Map;
            });
        _2Indices = Indices(_1IgnoreSecond);
        _3Two = Two();
        _4Map = Map(_2Indices, (Int32 x0) => 
          {
            IArray[Int32] _0GenerateN;// 25:ArraySlidingWindow->14:GenerateN 75545
            Int32 _1Count;// 25:ArraySlidingWindow->24:Count 75553
            Int32 _2Zero;// 25:ArraySlidingWindow->23:Zero 75555
            IArray[Int32] _3Filter;// 25:ArraySlidingWindow->15:Filter 75543
            _0GenerateN = GenerateN(x0, _3Two, (Int32 x0) => 
              {
                Int32 _0One;// 2:PlusOne->1:One 75549
                Int32 _1Add;// 2:PlusOne->0:Add 75548
                _0One = One();
                _1Add = Add(x0, _0One);
                _1Add;
                });
            _1Count = Count(_1IgnoreSecond);
            _2Zero = Zero();
            _3Filter = Filter(_0GenerateN, (Int32 x0) => 
              {
                Boolean _0LessThan;// 25:ArraySlidingWindow->20:LessThan 75551
                Boolean _1GreaterThanOrEqual;// 25:ArraySlidingWindow->22:GreaterThanOrEqual 75554
                Boolean _2AndAlso;// 25:ArraySlidingWindow->21:AndAlso 75550
                _0LessThan = LessThan(x0, _1Count);
                _1GreaterThanOrEqual = GreaterThanOrEqual(x0, _2Zero);
                _2AndAlso = AndAlso(_0LessThan, _1GreaterThanOrEqual);
                _2AndAlso;
                });
            _3Filter;
            });
        _5Filter = Filter(_4Map, (IArray[Int32] x0) => 
          {
            IArray[Int32] _0Map;// 39:Int32ArrayType->2:Map 75560
            IArray[Int32] _1IgnoreSecond;// 39:Int32ArrayType->1:IgnoreSecond 75559
            Int32 _2Count;// 25:ArraySlidingWindow->25:Count 75557
            Boolean _3Equal;// 25:ArraySlidingWindow->30:Equal 75556
            _0Map = Map(x0, (Int32 x0) => 
              {
                x0;
                });
            _1IgnoreSecond = IgnoreSecond(x0, () => 
              {
                _0Map;
                });
            _2Count = Count(_1IgnoreSecond);
            _3Equal = Equal(_2Count, _3Two);
            _3Equal;
            });
        _6Map = Map(_5Filter, (IArray[Int32] x0) => 
          {
            IArray[Vector3] _0Map;// 38:SelectByIndex->2:Map 75566
            _0Map = Map(x0, (Int32 x0) => 
              {
                Vector3 _0At;// 38:SelectByIndex->3:At 75567
                _0At = At(_1IgnoreSecond, x0);
                _0At;
                });
            _0Map;
            });
        _7Count = Count(_1IgnoreSecond);
        _8One = One();
        _9Subtract = Subtract(_7Count, _8One);
        _10At = At(_1IgnoreSecond, _9Subtract);
        _11Unit = Unit(_10At);
        _12Zero = Zero();
        _13At = At(_1IgnoreSecond, _12Zero);
        _14Append = Append(_11Unit, _13At);
        _15Append = Append(_6Map, _14Append);
        _15Append;
        }, _8Skip);
    _10Append = Append(_7Unit, _9Apply1);
    _11Combine = Combine(_5Take, _8Skip, (Vector3 x0, Vector3 x1) => 
      {
        IArray[Vector3] _0Unit;// 3:Array2->2:Unit 75605
        IArray[Vector3] _1Append;// 3:Array2->3:Append 75604
        _0Unit = Unit(x0);
        _1Append = Append(_0Unit, x1);
        _1Append;
        });
    _12Append = Append(_10Append, _11Combine);
    _13Flatten = Flatten(_12Append);
    _14RangeInclusiveFloat = RangeInclusiveFloat(numSubdivisions);
    _15False = False();
    _16Map = Map(_13Flatten, (IArray[Vector3] x0) => 
      {
        Func[Single, Vector3] _0Bind1of2;// 2:SplineBoxPrimitive->15:Bind1of2 75609
        IArray[Vector3] _1Map;// 2:SplineBoxPrimitive->13:Map 75607
        Spline _2CreateSplineFromKnots;// 2:SplineBoxPrimitive->5:CreateSplineFromKnots 75606
        _0Bind1of2 = Bind1of2((IArray[Vector3] x0, Single x1) => 
          {
            Int32 _0Zero;// 18:First->2:Zero 75613
            Vector3 _1At;// 18:First->0:At 75612
            Int32 _2One;// 19:Second->2:One 75617
            Vector3 _3At;// 19:Second->0:At 75616
            Vector3 _4Lerp;// 2:SplineBoxPrimitive->16:Lerp 75610
            _0Zero = Zero();
            _1At = At(x0, _0Zero);
            _2One = One();
            _3At = At(x0, _2One);
            _4Lerp = Lerp(_1At, _3At, x1);
            _4Lerp;
            }, x0);
        _1Map = Map(_14RangeInclusiveFloat, _0Bind1of2);
        _2CreateSplineFromKnots = CreateSplineFromKnots(_1Map, _15False);
        _2CreateSplineFromKnots;
        });
    _17CombineSplines = CombineSplines(_16Map);
    _18SplineVerticesBuffer = SplineVerticesBuffer(_17CombineSplines);
    _19MatrixIdentity = MatrixIdentity();
    _20Constant = 1000;
    _21Divide = Divide(decay, _20Constant);
    _22Pass-through: function1 = (Vector3 x0) => 
      {
        Matrix _0InvertMatrix;// 9:SineWaveDeformer->46:InvertMatrix 75455
        Vector3 _1Transform;// 9:SineWaveDeformer->37:Transform 75454
        Single _2X;// 9:SineWaveDeformer->40:X 75452
        Single _3Y;// 9:SineWaveDeformer->41:Y 75457
        Boolean _4NotEqual;// 14:SineWaveDeformerWeightedAmplitude->0:NotEqual 75484
        Single _27Pass-through: Single;// 0:Pass-through: Single 75460
        Single _28TwoPi;// 7:WaveDeformerWaveFunc->10:TwoPi 75469
        Single _29Constant;// 0:Vector3FromXY->0:Constant 75517
        Vector3 _30Vector3;// 0:Vector3FromXY->0:Vector3 75516
        Single _31Length;// 9:SineWaveDeformer->6:Length 75513
        Single _32FloatZero;// 7:WaveDeformerWaveFunc->2:FloatZero 75474
        Boolean _33Equal;// 7:WaveDeformerWaveFunc->1:Equal 75473
        Single _35Divide;// 7:WaveDeformerWaveFunc->13:Divide 75471
        Single _36Add;// 7:WaveDeformerWaveFunc->14:Add 75470
        Single _37Multiply;// 7:WaveDeformerWaveFunc->20:Multiply 75468
        Single _38Sin;// 7:WaveDeformerWaveFunc->21:Sin 75467
        Single _39Abs;// 7:WaveDeformerWaveFunc->18:Abs 75478
        Single _40NegativeFloat;// 7:WaveDeformerWaveFunc->16:NegativeFloat 75479
        Single _41Multiply;// 7:WaveDeformerWaveFunc->17:Multiply 75477
        Single _42Exp;// 7:WaveDeformerWaveFunc->15:Exp 75476
        Single _43Multiply;// 7:WaveDeformerWaveFunc->19:Multiply 75466
        Single _44Multiply;// 7:WaveDeformerWaveFunc->11:Multiply 75465
        Single _45Z;// 9:SineWaveDeformer->38:Z 75518
        Single _46Add;// 9:SineWaveDeformer->8:Add 75459
        Vector3 _47Vector3;// 9:SineWaveDeformer->36:Vector3 75450
        Vector3 _48Transform;// 9:SineWaveDeformer->9:Transform 75448
        _0InvertMatrix = InvertMatrix(_19MatrixIdentity);
        _1Transform = Transform(x0, _0InvertMatrix);
        _2X = X(_1Transform);
        _3Y = Y(_1Transform);
        _4NotEqual = NotEqual(amplitude1, amplitude2);
        _27Pass-through: Single = if (_4NotEqual)
          {
            Single _5Length;// 14:SineWaveDeformerWeightedAmplitude->10:Length 75487
            Single _6FloatZero;// 14:SineWaveDeformerWeightedAmplitude->12:FloatZero 75489
            Boolean _7Equal;// 14:SineWaveDeformerWeightedAmplitude->11:Equal 75486
            _5Length = Length(_1Transform);
            _6FloatZero = FloatZero();
            _7Equal = Equal(_5Length, _6FloatZero);
            if (_7Equal)
              {
                amplitude1;
                }else
              {
                Single _8FloatOne;// 14:SineWaveDeformerWeightedAmplitude->31:FloatOne 75494
                Single _9FloatZero;// 14:SineWaveDeformerWeightedAmplitude->30:FloatZero 75496
                Single _10FloatOne;// 14:SineWaveDeformerWeightedAmplitude->29:FloatOne 75497
                Single _11X;// 14:SineWaveDeformerWeightedAmplitude->17:X 75504
                Single _12Divide;// 14:SineWaveDeformerWeightedAmplitude->18:Divide 75503
                Single _13Acos;// 14:SineWaveDeformerWeightedAmplitude->16:Acos 75502
                Single _14Pi;// 14:SineWaveDeformerWeightedAmplitude->20:Pi 75505
                Single _15Divide;// 14:SineWaveDeformerWeightedAmplitude->19:Divide 75501
                Single _16Constant;// 14:SineWaveDeformerWeightedAmplitude->0:Constant 75506
                Boolean _17GreaterThan;// 14:SineWaveDeformerWeightedAmplitude->22:GreaterThan 75500
                Single _20Constant;// 14:SineWaveDeformerWeightedAmplitude->0:Constant 75509
                Single _21Multiply;// 14:SineWaveDeformerWeightedAmplitude->26:Multiply 75498
                Single _22SmoothStepFloat;// 14:SineWaveDeformerWeightedAmplitude->28:SmoothStepFloat 75495
                Single _23Subtract;// 14:SineWaveDeformerWeightedAmplitude->32:Subtract 75493
                Single _24Multiply;// 14:SineWaveDeformerWeightedAmplitude->37:Multiply 75492
                Single _25Multiply;// 14:SineWaveDeformerWeightedAmplitude->39:Multiply 75511
                Single _26Add;// 14:SineWaveDeformerWeightedAmplitude->40:Add 75491
                _8FloatOne = FloatOne();
                _9FloatZero = FloatZero();
                _10FloatOne = FloatOne();
                _11X = X(_1Transform);
                _12Divide = Divide(_11X, _5Length);
                _13Acos = Acos(_12Divide);
                _14Pi = Pi();
                _15Divide = Divide(_13Acos, _14Pi);
                _16Constant = 0.5;
                _17GreaterThan = GreaterThan(_15Divide, _16Constant);
                _20Constant = 2;
                _21Multiply = Multiply(if (_17GreaterThan)
                    {
                      Single _18FloatOne;// 14:SineWaveDeformerWeightedAmplitude->24:FloatOne 75508
                      Single _19Subtract;// 14:SineWaveDeformerWeightedAmplitude->25:Subtract 75507
                      _18FloatOne = FloatOne();
                      _19Subtract = Subtract(_18FloatOne, _15Divide);
                      _19Subtract;
                      }else
                    {
                      _15Divide;
                      }, _20Constant);
                _22SmoothStepFloat = SmoothStepFloat(_9FloatZero, _10FloatOne, _21Multiply);
                _23Subtract = Subtract(_8FloatOne, _22SmoothStepFloat);
                _24Multiply = Multiply(_23Subtract, amplitude1);
                _25Multiply = Multiply(amplitude2, _22SmoothStepFloat);
                _26Add = Add(_24Multiply, _25Multiply);
                _26Add;
                };
            }else
          {
            amplitude1;
            };
        _28TwoPi = TwoPi();
        _29Constant = 0;
        _30Vector3 = Vector3(_2X, _3Y, _29Constant);
        _31Length = Length(_30Vector3);
        _32FloatZero = FloatZero();
        _33Equal = Equal(_32FloatZero, waveLength);
        _35Divide = Divide(_31Length, if (_33Equal)
            {
              Single _34Constant;// 7:WaveDeformerWaveFunc->0:Constant 75475
              _34Constant = 1E-07;
              _34Constant;
              }else
            {
              waveLength;
              });
        _36Add = Add(_35Divide, phase);
        _37Multiply = Multiply(_28TwoPi, _36Add);
        _38Sin = Sin(_37Multiply);
        _39Abs = Abs(_31Length);
        _40NegativeFloat = NegativeFloat(_21Divide);
        _41Multiply = Multiply(_39Abs, _40NegativeFloat);
        _42Exp = Exp(_41Multiply);
        _43Multiply = Multiply(_38Sin, _42Exp);
        _44Multiply = Multiply(_27Pass-through: Single, _43Multiply);
        _45Z = Z(_1Transform);
        _46Add = Add(_44Multiply, _45Z);
        _47Vector3 = Vector3(_2X, _3Y, _46Add);
        _48Transform = Transform(_47Vector3, _19MatrixIdentity);
        _48Transform;
        };
    _23Map = Map(_18SplineVerticesBuffer, _22Pass-through: function1);
    _24SplineSegmentIndices = SplineSegmentIndices(_17CombineSplines);
    _25SplineTangentsBuffer = SplineTangentsBuffer(_17CombineSplines);
    _26SplineTangentIndices = SplineTangentIndices(_17CombineSplines);
    _27SplineSegmentTypes = SplineSegmentTypes(_17CombineSplines);
    _28CreateSplineFromBuffers = CreateSplineFromBuffers(_23Map, _24SplineSegmentIndices, _25SplineTangentsBuffer, _26SplineTangentIndices, _27SplineSegmentTypes);
    _29IgnoreSecond = IgnoreSecond(_28CreateSplineFromBuffers, shapeTransform);
    _29IgnoreSecond;
    }