(InstanceState state, TriMesh mesh, Int32 flux channel, Boolean keep only overlapping) => 
  {
    MapChannel _0GetMapChannel;// 19:MatricesFromMapChannel-ext->9:GetMapChannel 99492
    IArray[Vector3] _1MapChannelVertexBuffer;// 19:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 99491
    Int32 _2Count;// 2:Slices->2:Count 99488
    Int32 _3Constant;// 19:MatricesFromMapChannel-ext->0:Constant 99493
    Int32 _4Divide;// 2:Slices->3:Divide 99487
    IArray[Int32] _5Range;// 2:Slices->4:Range 99486
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 99485
    IArray[Matrix] _7Map;// 19:MatricesFromMapChannel-ext->5:Map 99482
    IArray[Matrix] _51Pass-through: array;// 0:Pass-through: array 99387
    Func[Matrix, IArray[Vector3]] _52Pass-through: function1;// 0:Pass-through: function1 99390
    IArray[IArray[Vector3]] _53Map;// 5:FlatMap->4:Map 99392
    IArray[Vector3] _54Flatten;// 5:FlatMap->3:Flatten 99391
    IArray[Int32] _55MeshIndices;// 6:MapChannelStoreMatrices-ext->0:MeshIndices 99401
    TriMesh _56SetMapChannel;// 6:MapChannelStoreMatrices-ext->7:SetMapChannel 99388
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 99490
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 99489
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 99502
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 99503
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 99507
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 99506
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 99501
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 99504
        Int32 _6One;// 8:PlusOne->1:One 99511
        Int32 _7Add;// 8:PlusOne->0:Add 99510
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 99508
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 99500
        Int32 _10Constant;// 25:Three->0:Constant 99505
        Int32 _11One;// 9:PlusOne->1:One 99515
        Int32 _12Add;// 9:PlusOne->0:Add 99514
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 99512
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 99499
        Int32 _15One;// 10:PlusOne->1:One 99519
        Int32 _16Add;// 10:PlusOne->0:Add 99518
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 99516
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 99495
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _51Pass-through: array = if (keep only overlapping)
      {
        IArray[Int32] _8Indices;// 0:ZipWithIndices->2:Indices 99418
        IArray[Tuple[Matrix, Int32]] _9Combine;// 0:ZipToTuple->0:Combine 99416
        IArray[Vector3] _10Map;// 14:MatrixPositions-ext->1:Map 99478
        Int32 _11Count;// 3:LastIndex->2:Count 99464
        Int32 _12One;// 3:MinusOne->2:One 99463
        Int32 _13Subtract;// 3:MinusOne->1:Subtract 99462
        IArray[Vector3] _14Take;// 1:DropLast->2:Take 99459
        Int32 _15One;// 2:SkipOne->2:One 99467
        IArray[Vector3] _16Skip;// 2:SkipOne->3:Skip 99466
        Func[Vector3, Vector3, Vector3] _17Pass-through: function2;// 0:Pass-through: function2 99456
        IArray[Vector3] _18Combine;// 1:CombinePairwiseElements-ext->3:Combine 99457
        IArray[Boolean] _19Map;// 0:PointsOverlappingNeighbours-ext->1:Map 99453
        Boolean _20True;// 0:PointsOverlappingNeighbours-ext->6:True 99474
        IArray[Boolean] _21Append;// 0:PointsOverlappingNeighbours-ext->4:Append 99452
        IArray[Boolean] _22Prepend;// 0:PointsOverlappingNeighbours-ext->9:Prepend 99475
        IArray[Boolean] _23Combine;// 0:PointsOverlappingNeighbours-ext->10:Combine 99451
        IArray[Boolean] _24Map;// 4:NegateBooleanValues-ext->2:Map 99448
        Func[Int32, Boolean] _25Pass-through: function1;// 0:Pass-through: function1 99410
        Int32 _26Zero;// 16:First->2:Zero 99432
        Matrix _27At;// 16:First->0:At 99431
        IArray[Tuple[Matrix, Int32]] _28Filter;// 2:FilterIndices-ext->1:Filter 99412
        IArray[Matrix] _29Map;// 2:FilterIndices-ext->13:Map 99411
        _8Indices = Indices(_7Map);
        _9Combine = Combine(_7Map, _8Indices, (Matrix x0, Int32 x1) => 
          {
            Tuple[Matrix, Int32] _0Pair;// 0:ZipToTuple->4:Pair 99417
            _0Pair = Pair(x0, x1);
            _0Pair;
            });
        _10Map = Map(_7Map, (Matrix x0) => 
          {
            Vector3 _0GetMatrixTranslation;// 14:MatrixPositions-ext->2:GetMatrixTranslation 99479
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _0GetMatrixTranslation;
            });
        _11Count = Count(_10Map);
        _12One = One();
        _13Subtract = Subtract(_11Count, _12One);
        _14Take = Take(_10Map, _13Subtract);
        _15One = One();
        _16Skip = Skip(_10Map, _15One);
        _17Pass-through: function2 = (Vector3 x0, Vector3 x1) => 
          {
            Vector3 _0Subtract;// 7:AdjacentDifferences-ext->2:Subtract 99468
            _0Subtract = Subtract(x0, x1);
            _0Subtract;
            };
        _18Combine = Combine(_14Take, _16Skip, _17Pass-through: function2);
        _19Map = Map(_18Combine, (Vector3 x0) => 
          {
            Single _0Length;// 2:VectorIsSmall-ext->3:Length 99472
            Single _1Constant;// 4:VectorLengthEpsilon-ext->0:Constant 99473
            Boolean _2LessThan;// 2:VectorIsSmall-ext->5:LessThan 99471
            Boolean _3Not;// 0:PointsOverlappingNeighbours-ext->8:Not 99469
            _0Length = Length(x0);
            _1Constant = 1E-06;
            _2LessThan = LessThan(_0Length, _1Constant);
            _3Not = Not(_2LessThan);
            _3Not;
            });
        _20True = True();
        _21Append = Append(_19Map, _20True);
        _22Prepend = Prepend(_19Map, _20True);
        _23Combine = Combine(_21Append, _22Prepend, (Boolean x0, Boolean x1) => 
          {
            Boolean _0AndAlso;// 0:PointsOverlappingNeighbours-ext->11:AndAlso 99476
            _0AndAlso = AndAlso(x0, x1);
            _0AndAlso;
            });
        _24Map = Map(_23Combine, (Boolean x0) => 
          {
            Boolean _0Not;// 4:NegateBooleanValues-ext->3:Not 99449
            _0Not = Not(x0);
            _0Not;
            });
        _25Pass-through: function1 = (Int32 x0) => 
          {
            Boolean _0At;// 12:FilterUsingBooleans-ext->4:At 99446
            _0At = At(_24Map, x0);
            _0At;
            };
        _26Zero = Zero();
        _27At = At(_7Map, _26Zero);
        _28Filter = Filter(_9Combine, (Tuple[Matrix, Int32] x0) => 
          {
            Matrix _0PairItem1;// 2:FilterIndices-ext->7:PairItem1 99428
            Matrix _1Apply1;// 5:IgnoreSecondSameType-ext->6:Apply1 99425
            Matrix _2Apply1;// 5:IgnoreSecondSameType-ext->2:Apply1 99427
            Matrix _3IgnoreSecond;// 5:IgnoreSecondSameType-ext->3:IgnoreSecond 99424
            Int32 _4PairItem2;// 2:FilterIndices-ext->8:PairItem2 99434
            Int32 _5IgnoreFirst;// 2:FilterIndices-ext->11:IgnoreFirst 99421
            Boolean _6Apply1;// 2:FilterIndices-ext->6:Apply1 99420
            _0PairItem1 = PairItem1(x0);
            _1Apply1 = Apply1((Matrix x0) => 
              {
                Matrix _0Identity;// 5:IgnoreSecondSameType-ext->7:Identity 99426
                _0Identity = Identity(x0);
                _0Identity;
                }, _0PairItem1);
            _2Apply1 = Apply1((Matrix x0) => 
              {
                Matrix _0Identity;// 5:IgnoreSecondSameType-ext->7:Identity 99426
                _0Identity = Identity(x0);
                _0Identity;
                }, _27At);
            _3IgnoreSecond = IgnoreSecond(_1Apply1, _2Apply1);
            _4PairItem2 = PairItem2(x0);
            _5IgnoreFirst = IgnoreFirst(_3IgnoreSecond, _4PairItem2);
            _6Apply1 = Apply1(_25Pass-through: function1, _5IgnoreFirst);
            _6Apply1;
            });
        _29Map = Map(_28Filter, (Tuple[Matrix, Int32] x0) => 
          {
            Matrix _0PairItem1;// 2:FilterIndices-ext->14:PairItem1 99442
            Int32 _1PairItem2;// 2:FilterIndices-ext->19:PairItem2 99445
            Matrix _2IgnoreSecond;// 2:FilterIndices-ext->20:IgnoreSecond 99441
            Matrix _3Apply1;// 15:IgnoreSecondSameType-ext->6:Apply1 99438
            Matrix _4Apply1;// 15:IgnoreSecondSameType-ext->2:Apply1 99440
            Matrix _5IgnoreSecond;// 15:IgnoreSecondSameType-ext->3:IgnoreSecond 99437
            _0PairItem1 = PairItem1(x0);
            _1PairItem2 = PairItem2(x0);
            _2IgnoreSecond = IgnoreSecond(_0PairItem1, _1PairItem2);
            _3Apply1 = Apply1((Matrix x0) => 
              {
                Matrix _0Identity;// 15:IgnoreSecondSameType-ext->7:Identity 99439
                _0Identity = Identity(x0);
                _0Identity;
                }, _2IgnoreSecond);
            _4Apply1 = Apply1((Matrix x0) => 
              {
                Matrix _0Identity;// 15:IgnoreSecondSameType-ext->7:Identity 99439
                _0Identity = Identity(x0);
                _0Identity;
                }, _27At);
            _5IgnoreSecond = IgnoreSecond(_3Apply1, _4Apply1);
            _5IgnoreSecond;
            });
        _29Map;
        }else
      {
        IArray[Int32] _30Indices;// 0:ZipWithIndices->2:Indices 99532
        IArray[Tuple[Matrix, Int32]] _31Combine;// 0:ZipToTuple->0:Combine 99530
        IArray[Vector3] _32Map;// 14:MatrixPositions-ext->1:Map 99589
        Int32 _33Count;// 3:LastIndex->2:Count 99575
        Int32 _34One;// 3:MinusOne->2:One 99574
        Int32 _35Subtract;// 3:MinusOne->1:Subtract 99573
        IArray[Vector3] _36Take;// 1:DropLast->2:Take 99570
        Int32 _37One;// 2:SkipOne->2:One 99578
        IArray[Vector3] _38Skip;// 2:SkipOne->3:Skip 99577
        Func[Vector3, Vector3, Vector3] _39Pass-through: function2;// 0:Pass-through: function2 99567
        IArray[Vector3] _40Combine;// 1:CombinePairwiseElements-ext->3:Combine 99568
        IArray[Boolean] _41Map;// 0:PointsOverlappingNeighbours-ext->1:Map 99564
        Boolean _42True;// 0:PointsOverlappingNeighbours-ext->6:True 99585
        IArray[Boolean] _43Append;// 0:PointsOverlappingNeighbours-ext->4:Append 99563
        IArray[Boolean] _44Prepend;// 0:PointsOverlappingNeighbours-ext->9:Prepend 99586
        IArray[Boolean] _45Combine;// 0:PointsOverlappingNeighbours-ext->10:Combine 99562
        Func[Int32, Boolean] _46Pass-through: function1;// 0:Pass-through: function1 99524
        Int32 _47Zero;// 16:First->2:Zero 99546
        Matrix _48At;// 16:First->0:At 99545
        IArray[Tuple[Matrix, Int32]] _49Filter;// 2:FilterIndices-ext->1:Filter 99526
        IArray[Matrix] _50Map;// 2:FilterIndices-ext->13:Map 99525
        _30Indices = Indices(_7Map);
        _31Combine = Combine(_7Map, _30Indices, (Matrix x0, Int32 x1) => 
          {
            Tuple[Matrix, Int32] _0Pair;// 0:ZipToTuple->4:Pair 99531
            _0Pair = Pair(x0, x1);
            _0Pair;
            });
        _32Map = Map(_7Map, (Matrix x0) => 
          {
            Vector3 _0GetMatrixTranslation;// 14:MatrixPositions-ext->2:GetMatrixTranslation 99590
            _0GetMatrixTranslation = GetMatrixTranslation(x0);
            _0GetMatrixTranslation;
            });
        _33Count = Count(_32Map);
        _34One = One();
        _35Subtract = Subtract(_33Count, _34One);
        _36Take = Take(_32Map, _35Subtract);
        _37One = One();
        _38Skip = Skip(_32Map, _37One);
        _39Pass-through: function2 = (Vector3 x0, Vector3 x1) => 
          {
            Vector3 _0Subtract;// 7:AdjacentDifferences-ext->2:Subtract 99579
            _0Subtract = Subtract(x0, x1);
            _0Subtract;
            };
        _40Combine = Combine(_36Take, _38Skip, _39Pass-through: function2);
        _41Map = Map(_40Combine, (Vector3 x0) => 
          {
            Single _0Length;// 2:VectorIsSmall-ext->3:Length 99583
            Single _1Constant;// 4:VectorLengthEpsilon-ext->0:Constant 99584
            Boolean _2LessThan;// 2:VectorIsSmall-ext->5:LessThan 99582
            Boolean _3Not;// 0:PointsOverlappingNeighbours-ext->8:Not 99580
            _0Length = Length(x0);
            _1Constant = 1E-06;
            _2LessThan = LessThan(_0Length, _1Constant);
            _3Not = Not(_2LessThan);
            _3Not;
            });
        _42True = True();
        _43Append = Append(_41Map, _42True);
        _44Prepend = Prepend(_41Map, _42True);
        _45Combine = Combine(_43Append, _44Prepend, (Boolean x0, Boolean x1) => 
          {
            Boolean _0AndAlso;// 0:PointsOverlappingNeighbours-ext->11:AndAlso 99587
            _0AndAlso = AndAlso(x0, x1);
            _0AndAlso;
            });
        _46Pass-through: function1 = (Int32 x0) => 
          {
            Boolean _0At;// 12:FilterUsingBooleans-ext->4:At 99560
            _0At = At(_45Combine, x0);
            _0At;
            };
        _47Zero = Zero();
        _48At = At(_7Map, _47Zero);
        _49Filter = Filter(_31Combine, (Tuple[Matrix, Int32] x0) => 
          {
            Matrix _0PairItem1;// 2:FilterIndices-ext->7:PairItem1 99542
            Matrix _1Apply1;// 5:IgnoreSecondSameType-ext->6:Apply1 99539
            Matrix _2Apply1;// 5:IgnoreSecondSameType-ext->2:Apply1 99541
            Matrix _3IgnoreSecond;// 5:IgnoreSecondSameType-ext->3:IgnoreSecond 99538
            Int32 _4PairItem2;// 2:FilterIndices-ext->8:PairItem2 99548
            Int32 _5IgnoreFirst;// 2:FilterIndices-ext->11:IgnoreFirst 99535
            Boolean _6Apply1;// 2:FilterIndices-ext->6:Apply1 99534
            _0PairItem1 = PairItem1(x0);
            _1Apply1 = Apply1((Matrix x0) => 
              {
                Matrix _0Identity;// 5:IgnoreSecondSameType-ext->7:Identity 99540
                _0Identity = Identity(x0);
                _0Identity;
                }, _0PairItem1);
            _2Apply1 = Apply1((Matrix x0) => 
              {
                Matrix _0Identity;// 5:IgnoreSecondSameType-ext->7:Identity 99540
                _0Identity = Identity(x0);
                _0Identity;
                }, _48At);
            _3IgnoreSecond = IgnoreSecond(_1Apply1, _2Apply1);
            _4PairItem2 = PairItem2(x0);
            _5IgnoreFirst = IgnoreFirst(_3IgnoreSecond, _4PairItem2);
            _6Apply1 = Apply1(_46Pass-through: function1, _5IgnoreFirst);
            _6Apply1;
            });
        _50Map = Map(_49Filter, (Tuple[Matrix, Int32] x0) => 
          {
            Matrix _0PairItem1;// 2:FilterIndices-ext->14:PairItem1 99556
            Int32 _1PairItem2;// 2:FilterIndices-ext->19:PairItem2 99559
            Matrix _2IgnoreSecond;// 2:FilterIndices-ext->20:IgnoreSecond 99555
            Matrix _3Apply1;// 15:IgnoreSecondSameType-ext->6:Apply1 99552
            Matrix _4Apply1;// 15:IgnoreSecondSameType-ext->2:Apply1 99554
            Matrix _5IgnoreSecond;// 15:IgnoreSecondSameType-ext->3:IgnoreSecond 99551
            _0PairItem1 = PairItem1(x0);
            _1PairItem2 = PairItem2(x0);
            _2IgnoreSecond = IgnoreSecond(_0PairItem1, _1PairItem2);
            _3Apply1 = Apply1((Matrix x0) => 
              {
                Matrix _0Identity;// 15:IgnoreSecondSameType-ext->7:Identity 99553
                _0Identity = Identity(x0);
                _0Identity;
                }, _2IgnoreSecond);
            _4Apply1 = Apply1((Matrix x0) => 
              {
                Matrix _0Identity;// 15:IgnoreSecondSameType-ext->7:Identity 99553
                _0Identity = Identity(x0);
                _0Identity;
                }, _48At);
            _5IgnoreSecond = IgnoreSecond(_3Apply1, _4Apply1);
            _5IgnoreSecond;
            });
        _50Map;
        };
    _52Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 99396
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 99395
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 99394
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 99400
            Int32 _1Add;// 5:PlusOne->0:Add 99399
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 99397
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _53Map = Map(_51Pass-through: array, _52Pass-through: function1);
    _54Flatten = Flatten(_53Map);
    _55MeshIndices = MeshIndices(mesh);
    _56SetMapChannel = SetMapChannel(mesh, flux channel, _54Flatten, _55MeshIndices);
    _56SetMapChannel;
    }