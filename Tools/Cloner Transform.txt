(InstanceState state, TriMesh mesh, Int32 channel id, Int32 duplicates, Boolean relative, Single translation x, Single translation y, Single translation z, Single rotation x, Single rotation y, Single rotation z, Single scaling x, Single scaling y, Single scaling z, Int32 random seed, Single rand offset  x, Single rand offset y, Single rand offset z, Single rand rotation x, Single rand rotation y, Single rand rotation z, Single rand scaling x, Single rand scaling y, Single rand scaling z, Single radius) => 
  {
    Int32 _0One;// 4:GreaterThanOne-ext->1:One 29877
    Boolean _1GreaterThan;// 4:GreaterThanOne-ext->0:GreaterThan 29876
    Int32 _2Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 29944
    Boolean _3Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 29943
    MapChannel _6Pass-through: any;// 0:Pass-through: any 29935
    Object _7Null;// 6:IsNullFix2-ext->3:Null 29939
    Object _8As;// 6:IsNullFix2-ext->23:As 29937
    Boolean _9Equal;// 6:IsNullFix2-ext->1:Equal 29936
    Boolean _10Not;// 3:MapChannelExists-ext->4:Not 29934
    Boolean _11Not;// 4:IfNot-ext->1:Not 29931
    TriMesh _19Pass-through: TriMesh;// 0:Pass-through: TriMesh 29887
    MapChannel _20GetMapChannel;// 0:MatricesFromMapChannel-ext->9:GetMapChannel 29899
    IArray[Vector3] _21MapChannelVertexBuffer;// 0:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 29898
    Int32 _22Count;// 2:Slices->2:Count 29895
    Int32 _23Constant;// 0:MatricesFromMapChannel-ext->0:Constant 29900
    Int32 _24Divide;// 2:Slices->3:Divide 29894
    IArray[Int32] _25Range;// 2:Slices->4:Range 29893
    IArray[IArray[Vector3]] _26Map;// 2:Slices->5:Map 29892
    IArray[Matrix] _27Map;// 0:MatricesFromMapChannel-ext->5:Map 29889
    Matrix _37MatrixIdentity;// 0:ClonerMatricesOrIdentity-ext->5:MatrixIdentity 29965
    IArray[Matrix] _38Unit;// 0:ClonerMatricesOrIdentity-ext->6:Unit 29964
    Func[Matrix, IArray[Vector3]] _39Pass-through: function1;// 0:Pass-through: function1 29952
    IArray[IArray[Vector3]] _40Map;// 5:FlatMap->4:Map 29954
    IArray[Vector3] _41Flatten;// 5:FlatMap->3:Flatten 29953
    IArray[Int32] _42MeshIndices;// 8:StoreMatricesInMapChannel-ext->0:MeshIndices 29963
    TriMesh _43SetMapChannel;// 8:StoreMatricesInMapChannel-ext->7:SetMapChannel 29950
    Vector3 _47Vector3;// 22:Vector3 29988
    Matrix _48TranslationMatrix;// 18:PositionRotationScaleMatrix-ext->3:TranslationMatrix 29982
    Vector3 _49Vector3;// 31:Vector3 30025
    Single _50X;// 1:VectorAsArray->1:X 30021
    IArray[Single] _51Unit;// 4:Array3->2:Unit 30020
    Single _52Y;// 1:VectorAsArray->2:Y 30022
    IArray[Single] _53Append;// 4:Array3->3:Append 30019
    Single _54Z;// 1:VectorAsArray->3:Z 30023
    IArray[Single] _55Append;// 4:Array3->6:Append 30018
    Func[Single, Single] _56Pass-through: function1;// 0:Pass-through: function1 30000
    IArray[Single] _57Map;// 1:VectorMapComponents-ext->2:Map 30013
    Int32 _58Zero;// 3:ArrayToVector-ext->5:Zero 30004
    Single _59At;// 3:ArrayToVector-ext->1:At 30003
    Int32 _60One;// 6:PlusOne->1:One 30008
    Int32 _61Add;// 6:PlusOne->0:Add 30007
    Single _62At;// 3:ArrayToVector-ext->2:At 30005
    Int32 _63One;// 7:PlusOne->1:One 30012
    Int32 _64Add;// 7:PlusOne->0:Add 30011
    Single _65At;// 3:ArrayToVector-ext->3:At 30009
    Vector3 _66Vector3;// 3:ArrayToVector-ext->4:Vector3 30002
    Single _67Y;// 2:QuaternionFromVector3-ext->7:Y 29995
    Single _68X;// 2:QuaternionFromVector3-ext->6:X 29996
    Single _69Z;// 2:QuaternionFromVector3-ext->8:Z 29997
    Quaternion _70QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 29994
    Matrix _71MatrixFromQuaternion;// 18:PositionRotationScaleMatrix-ext->4:MatrixFromQuaternion 29983
    Matrix _72Multiply;// 6:Multiply3-ext->3:Multiply 29981
    Vector3 _73Vector3;// 36:Vector3 30029
    Single _74Constant;// 8:Origin->0:Constant 29987
    Vector3 _75Vector3;// 8:Origin->1:Vector3 29986
    Matrix _76ScalingTranslationMatrix;// 5:ScalingMatrix-ext->4:ScalingTranslationMatrix 29985
    Matrix _77Multiply;// 6:Multiply3-ext->4:Multiply 29980
    IArray[Matrix] _78ParallelMap;// 2:ParallelMap 29870
    Vector3 _79Vector3;// 48:Vector3 30034
    Func[Random, Vector3] _80Pass-through: function1;// 0:Pass-through: function1 29750
    Int32 _81One;// 3:PlusOne->1:One 29782
    Int32 _82Add;// 3:PlusOne->0:Add 29781
    Int32 _83One;// 4:PlusOne->1:One 29779
    Int32 _84Add;// 4:PlusOne->0:Add 29778
    Random _85RandomNumberGenerator;// 14:MatricesRandomize-ext->1:RandomNumberGenerator 29776
    Func[Vector3] _86Bind;// 6:RandomArray-ext->4:Bind 29754
    Vector3 _87Vector3;// 55:Vector3 30038
    Func[Random, Vector3] _88Pass-through: function1;// 0:Pass-through: function1 29787
    Random _89RandomNumberGenerator;// 14:MatricesRandomize-ext->0:RandomNumberGenerator 29840
    Func[Vector3] _90Bind;// 6:RandomArray-ext->4:Bind 29791
    Vector3 _91Vector3;// 44:Vector3 30042
    Single _92FloatOne;// 14:VectorUnit-ext->2:FloatOne 29862
    Vector3 _93Vector3;// 1:ScalarToVector-ext->1:Vector3 29861
    Func[Random, Vector3] _94Pass-through: function1;// 0:Pass-through: function1 29845
    Random _95RandomNumberGenerator;// 14:MatricesRandomize-ext->57:RandomNumberGenerator 29869
    Func[Vector3] _96Bind;// 6:RandomArray-ext->4:Bind 29849
    Int32 _97Count;// 60:ScaleMatricesRandomly-ext->7:Count 29863
    IArray[Vector3] _98ArrayOfFunction;// 6:RandomArray-ext->5:ArrayOfFunction 29848
    IArray[Matrix] _99Combine;// 60:ScaleMatricesRandomly-ext->8:Combine 29844
    Int32 _100Count;// 30:RotateMatricesRandomly-ext->7:Count 29801
    IArray[Vector3] _101ArrayOfFunction;// 6:RandomArray-ext->5:ArrayOfFunction 29790
    IArray[Matrix] _102Combine;// 30:RotateMatricesRandomly-ext->8:Combine 29786
    Int32 _103Count;// 31:TranslateMatricesRandomly-ext->7:Count 29764
    IArray[Vector3] _104ArrayOfFunction;// 6:RandomArray-ext->5:ArrayOfFunction 29753
    Boolean _105True;// 31:TranslateMatricesRandomly-ext->10:True 29775
    IArray[Matrix] _106Combine;// 31:TranslateMatricesRandomly-ext->8:Combine 29749
    IArray[Matrix] _107IgnoreFirst;// 14:MatricesRandomize-ext->10:IgnoreFirst 29745
    IArray[Matrix] _108IgnoreFirst;// 14:MatricesRandomize-ext->11:IgnoreFirst 29744
    Func[Matrix, IArray[Vector3]] _109Pass-through: function1;// 0:Pass-through: function1 29725
    IArray[IArray[Vector3]] _110Map;// 5:FlatMap->4:Map 29727
    IArray[Vector3] _111Flatten;// 5:FlatMap->3:Flatten 29726
    IArray[Int32] _112MeshIndices;// 60:StoreMatricesInMapChannel-ext->0:MeshIndices 29736
    TriMesh _113SetMapChannel;// 60:StoreMatricesInMapChannel-ext->7:SetMapChannel 29723
    Int32 _114Constant;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->0:Constant 29599
    IArray[Int32] _115Range;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->1:Range 29598
    Int32 _116Two;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->4:Two 29600
    IArray[Int32] _117Skip;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->3:Skip 29597
    IArray[Int32] _118Filter;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->13:Filter 29596
    MapChannel _119GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 29658
    IArray[Vector3] _120MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 29657
    Int32 _121Count;// 2:Slices->2:Count 29654
    Int32 _122Constant;// 34:MatricesFromMapChannel-ext->0:Constant 29659
    Int32 _123Divide;// 2:Slices->3:Divide 29653
    IArray[Int32] _124Range;// 2:Slices->4:Range 29652
    IArray[IArray[Vector3]] _125Map;// 2:Slices->5:Map 29651
    IArray[Matrix] _126Map;// 34:MatricesFromMapChannel-ext->5:Map 29648
    Single _127Constant;// 1:Origin->0:Constant 29716
    Vector3 _128Vector3;// 1:Origin->1:Vector3 29715
    Single _129Constant;// 3:DivideByTwoFloat->0:Constant 29719
    Single _130Divide;// 3:DivideByTwoFloat->2:Divide 29718
    BoundingSphere _131Sphere;// 0:BoxFromPointAndRadius->3:Sphere 29714
    BoundingBox _132BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 29713
    QuadMesh _133BoxQuadMesh;// 3:CubeMesh-ext->5:BoxQuadMesh 29709
    TriMesh _134Triangulate;// 7:QuadToTriMesh-ext->4:Triangulate 29697
    IArray[Int32] _135MeshIndices;// 7:QuadToTriMesh-ext->3:MeshIndices 29700
    IArray[Int32] _136Indices;// 7:QuadToTriMesh-ext->8:Indices 29699
    Int32 _137Constant;// 7:QuadToTriMesh-ext->0:Constant 29705
    Int32 _138Constant;// 7:QuadToTriMesh-ext->0:Constant 29706
    Int32 _139Constant;// 7:QuadToTriMesh-ext->0:Constant 29708
    IArray[Boolean] _140Map;// 7:QuadToTriMesh-ext->5:Map 29698
    TriMesh _141SetVisibleEdges;// 7:QuadToTriMesh-ext->9:SetVisibleEdges 29696
    IArray[TriMesh] _142Map;// 23:ClonerMeshAsBoxes-ext->16:Map 29645
    TriMesh _143CombineAllMeshes;// 23:ClonerMeshAsBoxes-ext->2:CombineAllMeshes 29644
    TriMesh _144Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->6:Aggregate 29595
    TriMesh _145IgnoreFirst;// 23:ClonerMeshAsBoxes-ext->7:IgnoreFirst 29592
    _0One = One();
    _1GreaterThan = GreaterThan(duplicates, _0One);
    _2Constant = -3;
    _3Equal = Equal(channel id, _2Constant);
    _6Pass-through: any = if (_3Equal)
      {
        MapChannel _4TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 29945
        _4TopologyChannel = TopologyChannel(mesh);
        _4TopologyChannel;
        }else
      {
        MapChannel _5GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 29946
        _5GetMapChannel = GetMapChannel(mesh, channel id);
        _5GetMapChannel;
        };
    _7Null = Null();
    _8As = As(_6Pass-through: any, (Object x0) => 
      {
        Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 29938
        _0IgnoreFirst = IgnoreFirst(x0, _7Null);
        _0IgnoreFirst;
        });
    _9Equal = Equal(_8As, _7Null);
    _10Not = Not(_9Equal);
    _11Not = Not(_10Not);
    _19Pass-through: TriMesh = if (_11Not)
      {
        Matrix _12MatrixIdentity;// 0:ClonerMatricesOrIdentity-ext->5:MatrixIdentity 29965
        IArray[Matrix] _13Unit;// 0:ClonerMatricesOrIdentity-ext->6:Unit 29964
        Func[Matrix, IArray[Vector3]] _14Pass-through: function1;// 0:Pass-through: function1 29952
        IArray[IArray[Vector3]] _15Map;// 5:FlatMap->4:Map 29954
        IArray[Vector3] _16Flatten;// 5:FlatMap->3:Flatten 29953
        IArray[Int32] _17MeshIndices;// 8:StoreMatricesInMapChannel-ext->0:MeshIndices 29963
        TriMesh _18SetMapChannel;// 8:StoreMatricesInMapChannel-ext->7:SetMapChannel 29950
        _12MatrixIdentity = MatrixIdentity();
        _13Unit = Unit(_12MatrixIdentity);
        _14Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 29958
            IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 29957
            IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 29956
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 29962
                Int32 _1Add;// 5:PlusOne->0:Add 29961
                Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 29959
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _15Map = Map(_13Unit, _14Pass-through: function1);
        _16Flatten = Flatten(_15Map);
        _17MeshIndices = MeshIndices(mesh);
        _18SetMapChannel = SetMapChannel(mesh, channel id, _16Flatten, _17MeshIndices);
        _18SetMapChannel;
        }else
      {
        mesh;
        };
    _20GetMapChannel = GetMapChannel(_19Pass-through: TriMesh, channel id);
    _21MapChannelVertexBuffer = MapChannelVertexBuffer(_20GetMapChannel);
    _22Count = Count(_21MapChannelVertexBuffer);
    _23Constant = 4;
    _24Divide = Divide(_22Count, _23Constant);
    _25Range = Range(_24Divide);
    _26Map = Map(_25Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 29897
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 29896
        _0Multiply = Multiply(_23Constant, x0);
        _1Slice = Slice(_21MapChannelVertexBuffer, _0Multiply, _23Constant);
        _1Slice;
        });
    _27Map = Map(_26Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 29909
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 29910
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 29914
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 29913
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 29908
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 29911
        Int32 _6One;// 8:PlusOne->1:One 29918
        Int32 _7Add;// 8:PlusOne->0:Add 29917
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 29915
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 29907
        Int32 _10Constant;// 25:Three->0:Constant 29912
        Int32 _11One;// 9:PlusOne->1:One 29922
        Int32 _12Add;// 9:PlusOne->0:Add 29921
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 29919
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 29906
        Int32 _15One;// 10:PlusOne->1:One 29926
        Int32 _16Add;// 10:PlusOne->0:Add 29925
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 29923
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 29902
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _37MatrixIdentity = MatrixIdentity();
    _38Unit = Unit(_37MatrixIdentity);
    _39Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 29958
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 29957
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 29956
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 29962
            Int32 _1Add;// 5:PlusOne->0:Add 29961
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 29959
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _40Map = Map(_38Unit, _39Pass-through: function1);
    _41Flatten = Flatten(_40Map);
    _42MeshIndices = MeshIndices(mesh);
    _43SetMapChannel = SetMapChannel(mesh, channel id, _41Flatten, _42MeshIndices);
    _47Vector3 = Vector3(translation x, translation y, translation z);
    _48TranslationMatrix = TranslationMatrix(_47Vector3);
    _49Vector3 = Vector3(rotation x, rotation y, rotation z);
    _50X = X(_49Vector3);
    _51Unit = Unit(_50X);
    _52Y = Y(_49Vector3);
    _53Append = Append(_51Unit, _52Y);
    _54Z = Z(_49Vector3);
    _55Append = Append(_53Append, _54Z);
    _56Pass-through: function1 = (Single x0) => 
      {
        Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 30024
        _0ToRadians = ToRadians(x0);
        _0ToRadians;
        };
    _57Map = Map(_55Append, _56Pass-through: function1);
    _58Zero = Zero();
    _59At = At(_57Map, _58Zero);
    _60One = One();
    _61Add = Add(_58Zero, _60One);
    _62At = At(_57Map, _61Add);
    _63One = One();
    _64Add = Add(_61Add, _63One);
    _65At = At(_57Map, _64Add);
    _66Vector3 = Vector3(_59At, _62At, _65At);
    _67Y = Y(_66Vector3);
    _68X = X(_66Vector3);
    _69Z = Z(_66Vector3);
    _70QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_67Y, _68X, _69Z);
    _71MatrixFromQuaternion = MatrixFromQuaternion(_70QuaternionFromYawPitchRoll);
    _72Multiply = Multiply(_48TranslationMatrix, _71MatrixFromQuaternion);
    _73Vector3 = Vector3(scaling x, scaling y, scaling z);
    _74Constant = 0;
    _75Vector3 = Vector3(_74Constant, _74Constant, _74Constant);
    _76ScalingTranslationMatrix = ScalingTranslationMatrix(_73Vector3, _75Vector3);
    _77Multiply = Multiply(_72Multiply, _76ScalingTranslationMatrix);
    _78ParallelMap = ParallelMap(if (_1GreaterThan)
      {
        Func[Matrix, IArray[Matrix]] _44Pass-through: function1;// 0:Pass-through: function1 29881
        IArray[IArray[Matrix]] _45Map;// 3:FlatMap->4:Map 29883
        IArray[Matrix] _46Flatten;// 3:FlatMap->3:Flatten 29882
        _44Pass-through: function1 = (Matrix x0) => 
          {
            IArray[Matrix] _0ArrayOf;// 6:RepeatElements-ext->4:ArrayOf 29884
            _0ArrayOf = ArrayOf(x0, duplicates);
            _0ArrayOf;
            };
        _45Map = Map(_27Map, _44Pass-through: function1);
        _46Flatten = Flatten(_45Map);
        _46Flatten;
        }else
      {
        _27Map;
        }, (Matrix x0) => 
      {
        if (relative)
          {
            Matrix _0Multiply;// 9:MatrixApplyTransform-ext->4:Multiply 29971
            _0Multiply = Multiply(_77Multiply, x0);
            _0Multiply;
            }else
          {
            Matrix _1Multiply;// 9:MatrixApplyTransform-ext->9:Multiply 29972
            _1Multiply = Multiply(x0, _77Multiply);
            _1Multiply;
            };
        });
    _79Vector3 = Vector3(rand offset  x, rand offset y, rand offset z);
    _80Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 29760
        Vector3 _1Multiply;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->2:Multiply 29758
        Single _2Constant;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->0:Constant 29763
        Vector3 _3MultiplyByScalar;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->11:MultiplyByScalar 29762
        Vector3 _4Subtract;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->10:Subtract 29757
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _79Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_79Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _4Subtract;
        };
    _81One = One();
    _82Add = Add(random seed, _81One);
    _83One = One();
    _84Add = Add(_82Add, _83One);
    _85RandomNumberGenerator = RandomNumberGenerator(_84Add);
    _86Bind = Bind(_80Pass-through: function1, _85RandomNumberGenerator);
    _87Vector3 = Vector3(rand rotation x, rand rotation y, rand rotation z);
    _88Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 29797
        Vector3 _1Multiply;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->2:Multiply 29795
        Single _2Constant;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->0:Constant 29800
        Vector3 _3MultiplyByScalar;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->11:MultiplyByScalar 29799
        Vector3 _4Subtract;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->10:Subtract 29794
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _87Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_87Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _4Subtract;
        };
    _89RandomNumberGenerator = RandomNumberGenerator(_82Add);
    _90Bind = Bind(_88Pass-through: function1, _89RandomNumberGenerator);
    _91Vector3 = Vector3(rand scaling x, rand scaling y, rand scaling z);
    _92FloatOne = FloatOne();
    _93Vector3 = Vector3(_92FloatOne, _92FloatOne, _92FloatOne);
    _94Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 29856
        Vector3 _1Multiply;// 10:PseudoRandomVectorPlusMinusHalfRange-ext->2:Multiply 29854
        Single _2Constant;// 10:PseudoRandomVectorPlusMinusHalfRange-ext->0:Constant 29859
        Vector3 _3MultiplyByScalar;// 10:PseudoRandomVectorPlusMinusHalfRange-ext->11:MultiplyByScalar 29858
        Vector3 _4Subtract;// 10:PseudoRandomVectorPlusMinusHalfRange-ext->10:Subtract 29853
        Vector3 _5Add;// 60:ScaleMatricesRandomly-ext->16:Add 29850
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _91Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_91Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _5Add = Add(_4Subtract, _93Vector3);
        _5Add;
        };
    _95RandomNumberGenerator = RandomNumberGenerator(random seed);
    _96Bind = Bind(_94Pass-through: function1, _95RandomNumberGenerator);
    _97Count = Count(_78ParallelMap);
    _98ArrayOfFunction = ArrayOfFunction(_96Bind, _97Count);
    _99Combine = Combine(_98ArrayOfFunction, _78ParallelMap, (Vector3 x0, Matrix x1) => 
      {
        Single _0Constant;// 8:Origin->0:Constant 29868
        Vector3 _1Vector3;// 8:Origin->1:Vector3 29867
        Matrix _2ScalingTranslationMatrix;// 4:ScalingMatrix-ext->4:ScalingTranslationMatrix 29866
        Matrix _3Multiply;// 60:ScaleMatricesRandomly-ext->9:Multiply 29864
        _0Constant = 0;
        _1Vector3 = Vector3(_0Constant, _0Constant, _0Constant);
        _2ScalingTranslationMatrix = ScalingTranslationMatrix(x0, _1Vector3);
        _3Multiply = Multiply(_2ScalingTranslationMatrix, x1);
        _3Multiply;
        });
    _100Count = Count(_99Combine);
    _101ArrayOfFunction = ArrayOfFunction(_90Bind, _100Count);
    _102Combine = Combine(_101ArrayOfFunction, _99Combine, (Vector3 x0, Matrix x1) => 
      {
        Single _0X;// 1:VectorAsArray->1:X 29836
        IArray[Single] _1Unit;// 4:Array3->2:Unit 29835
        Single _2Y;// 1:VectorAsArray->2:Y 29837
        IArray[Single] _3Append;// 4:Array3->3:Append 29834
        Single _4Z;// 1:VectorAsArray->3:Z 29838
        IArray[Single] _5Append;// 4:Array3->6:Append 29833
        Func[Single, Single] _6Pass-through: function1;// 0:Pass-through: function1 29815
        IArray[Single] _7Map;// 1:VectorMapComponents-ext->2:Map 29828
        Int32 _8Zero;// 3:ArrayToVector-ext->5:Zero 29819
        Single _9At;// 3:ArrayToVector-ext->1:At 29818
        Int32 _10One;// 6:PlusOne->1:One 29823
        Int32 _11Add;// 6:PlusOne->0:Add 29822
        Single _12At;// 3:ArrayToVector-ext->2:At 29820
        Int32 _13One;// 7:PlusOne->1:One 29827
        Int32 _14Add;// 7:PlusOne->0:Add 29826
        Single _15At;// 3:ArrayToVector-ext->3:At 29824
        Vector3 _16Vector3;// 3:ArrayToVector-ext->4:Vector3 29817
        Single _17Y;// 2:QuaternionFromVector3-ext->7:Y 29810
        Single _18X;// 2:QuaternionFromVector3-ext->6:X 29811
        Single _19Z;// 2:QuaternionFromVector3-ext->8:Z 29812
        Quaternion _20QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 29809
        Matrix _21MatrixFromQuaternion;// 6:EulerDegreesToMatrix-ext->4:MatrixFromQuaternion 29806
        Matrix _22Multiply;// 9:MatrixRotateUsingEuler-ext->5:Multiply 29804
        _0X = X(x0);
        _1Unit = Unit(_0X);
        _2Y = Y(x0);
        _3Append = Append(_1Unit, _2Y);
        _4Z = Z(x0);
        _5Append = Append(_3Append, _4Z);
        _6Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 29839
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _7Map = Map(_5Append, _6Pass-through: function1);
        _8Zero = Zero();
        _9At = At(_7Map, _8Zero);
        _10One = One();
        _11Add = Add(_8Zero, _10One);
        _12At = At(_7Map, _11Add);
        _13One = One();
        _14Add = Add(_11Add, _13One);
        _15At = At(_7Map, _14Add);
        _16Vector3 = Vector3(_9At, _12At, _15At);
        _17Y = Y(_16Vector3);
        _18X = X(_16Vector3);
        _19Z = Z(_16Vector3);
        _20QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_17Y, _18X, _19Z);
        _21MatrixFromQuaternion = MatrixFromQuaternion(_20QuaternionFromYawPitchRoll);
        _22Multiply = Multiply(_21MatrixFromQuaternion, x1);
        _22Multiply;
        });
    _103Count = Count(_102Combine);
    _104ArrayOfFunction = ArrayOfFunction(_86Bind, _103Count);
    _105True = True();
    _106Combine = Combine(_104ArrayOfFunction, _102Combine, (Vector3 x0, Matrix x1) => 
      {
        Matrix _0TranslationMatrix;// 9:MatrixTranslate-ext->10:TranslationMatrix 29774
        _0TranslationMatrix = TranslationMatrix(x0);
        if (_105True)
          {
            Matrix _1Multiply;// 6:MatrixApplyTransform-ext->4:Multiply 29772
            _1Multiply = Multiply(_0TranslationMatrix, x1);
            _1Multiply;
            }else
          {
            Matrix _2Multiply;// 6:MatrixApplyTransform-ext->9:Multiply 29773
            _2Multiply = Multiply(x1, _0TranslationMatrix);
            _2Multiply;
            };
        });
    _107IgnoreFirst = IgnoreFirst(random seed, _106Combine);
    _108IgnoreFirst = IgnoreFirst(_78ParallelMap, _107IgnoreFirst);
    _109Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 29731
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 29730
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 29729
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 29735
            Int32 _1Add;// 5:PlusOne->0:Add 29734
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 29732
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _110Map = Map(_108IgnoreFirst, _109Pass-through: function1);
    _111Flatten = Flatten(_110Map);
    _112MeshIndices = MeshIndices(mesh);
    _113SetMapChannel = SetMapChannel(mesh, channel id, _111Flatten, _112MeshIndices);
    _114Constant = 100;
    _115Range = Range(_114Constant);
    _116Two = Two();
    _117Skip = Skip(_115Range, _116Two);
    _118Filter = Filter(_117Skip, (Int32 x0) => 
      {
        Int32 _0Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 29613
        Boolean _1Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 29612
        MapChannel _11Pass-through: any;// 0:Pass-through: any 29604
        Object _12Null;// 6:IsNullFix2-ext->3:Null 29608
        Object _13As;// 6:IsNullFix2-ext->23:As 29606
        Boolean _14Equal;// 6:IsNullFix2-ext->1:Equal 29605
        Boolean _15Not;// 12:MapChannelExists-ext->4:Not 29603
        _0Constant = -3;
        _1Equal = Equal(x0, _0Constant);
        _11Pass-through: any = if (_1Equal)
          {
            MapChannel _9TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 29614
            _9TopologyChannel = TopologyChannel(_113SetMapChannel);
            _9TopologyChannel;
            }else
          {
            MapChannel _10GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 29615
            _10GetMapChannel = GetMapChannel(_113SetMapChannel, x0);
            _10GetMapChannel;
            };
        _12Null = Null();
        _13As = As(_11Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 29607
            _0IgnoreFirst = IgnoreFirst(x0, _12Null);
            _0IgnoreFirst;
            });
        _14Equal = Equal(_13As, _12Null);
        _15Not = Not(_14Equal);
        _15Not;
        });
    _119GetMapChannel = GetMapChannel(_113SetMapChannel, channel id);
    _120MapChannelVertexBuffer = MapChannelVertexBuffer(_119GetMapChannel);
    _121Count = Count(_120MapChannelVertexBuffer);
    _122Constant = 4;
    _123Divide = Divide(_121Count, _122Constant);
    _124Range = Range(_123Divide);
    _125Map = Map(_124Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 29656
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 29655
        _0Multiply = Multiply(_122Constant, x0);
        _1Slice = Slice(_120MapChannelVertexBuffer, _0Multiply, _122Constant);
        _1Slice;
        });
    _126Map = Map(_125Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 29668
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 29669
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 29673
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 29672
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 29667
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 29670
        Int32 _6One;// 8:PlusOne->1:One 29677
        Int32 _7Add;// 8:PlusOne->0:Add 29676
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 29674
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 29666
        Int32 _10Constant;// 25:Three->0:Constant 29671
        Int32 _11One;// 9:PlusOne->1:One 29681
        Int32 _12Add;// 9:PlusOne->0:Add 29680
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 29678
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 29665
        Int32 _15One;// 10:PlusOne->1:One 29685
        Int32 _16Add;// 10:PlusOne->0:Add 29684
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 29682
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 29661
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _127Constant = 0;
    _128Vector3 = Vector3(_127Constant, _127Constant, _127Constant);
    _129Constant = 2;
    _130Divide = Divide(radius, _129Constant);
    _131Sphere = Sphere(_128Vector3, _130Divide);
    _132BoxFromSphere = BoxFromSphere(_131Sphere);
    _133BoxQuadMesh = BoxQuadMesh(_132BoxFromSphere);
    _134Triangulate = Triangulate(_133BoxQuadMesh);
    _135MeshIndices = MeshIndices(_134Triangulate);
    _136Indices = Indices(_135MeshIndices);
    _137Constant = 6;
    _138Constant = 2;
    _139Constant = 3;
    _140Map = Map(_136Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 7:QuadToTriMesh-ext->14:Modulo 29704
        Boolean _1Equal;// 7:QuadToTriMesh-ext->7:Equal 29703
        Boolean _2Equal;// 7:QuadToTriMesh-ext->13:Equal 29707
        Boolean _3OrElse;// 7:QuadToTriMesh-ext->12:OrElse 29702
        Boolean _4Not;// 7:QuadToTriMesh-ext->10:Not 29701
        _0Modulo = Modulo(x0, _137Constant);
        _1Equal = Equal(_0Modulo, _138Constant);
        _2Equal = Equal(_0Modulo, _139Constant);
        _3OrElse = OrElse(_1Equal, _2Equal);
        _4Not = Not(_3OrElse);
        _4Not;
        });
    _141SetVisibleEdges = SetVisibleEdges(_134Triangulate, _140Map);
    _142Map = Map(_126Map, (Matrix x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 29692
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 29689
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 29691
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 29690
        _0MeshVertices = MeshVertices(_141SetVisibleEdges);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 36:TransformMesh->0:Transform 29693
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(_141SetVisibleEdges, _2Map);
        _3SetMeshVertices;
        });
    _143CombineAllMeshes = CombineAllMeshes(_142Map);
    _144Aggregate = Aggregate(_118Filter, _143CombineAllMeshes, (TriMesh x0, Int32 x1) => 
      {
        TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer-ext->10:TryCatch 29619
        _0TryCatch = TryCatch(() => 
          {
            Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->7:IgnoreFirst 29641
            Int32 _1Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 29633
            Boolean _2Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 29632
            MapChannel _12Pass-through: any;// 0:Pass-through: any 29624
            Object _13Null;// 6:IsNullFix2-ext->3:Null 29628
            Object _14As;// 6:IsNullFix2-ext->23:As 29626
            Boolean _15Equal;// 6:IsNullFix2-ext->1:Equal 29625
            Boolean _16Not;// 5:MapChannelExists-ext->4:Not 29623
            _0IgnoreFirst = IgnoreFirst(x0, x1);
            _1Constant = -3;
            _2Equal = Equal(_0IgnoreFirst, _1Constant);
            _12Pass-through: any = if (_2Equal)
              {
                MapChannel _10TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 29634
                _10TopologyChannel = TopologyChannel(_113SetMapChannel);
                _10TopologyChannel;
                }else
              {
                MapChannel _11GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 29635
                _11GetMapChannel = GetMapChannel(_113SetMapChannel, _0IgnoreFirst);
                _11GetMapChannel;
                };
            _13Null = Null();
            _14As = As(_12Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 29627
                _0IgnoreFirst = IgnoreFirst(x0, _13Null);
                _0IgnoreFirst;
                });
            _15Equal = Equal(_14As, _13Null);
            _16Not = Not(_15Equal);
            if (_16Not)
              {
                MapChannel _17GetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->1:GetMapChannel 29638
                IArray[Vector3] _18MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer-ext->8:MapChannelVertexBuffer 29637
                IArray[Int32] _19MeshIndices;// 10:MapChannelCopyVertexBuffer-ext->0:MeshIndices 29639
                TriMesh _20SetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->7:SetMapChannel 29636
                _17GetMapChannel = GetMapChannel(_113SetMapChannel, _0IgnoreFirst);
                _18MapChannelVertexBuffer = MapChannelVertexBuffer(_17GetMapChannel);
                _19MeshIndices = MeshIndices(x0);
                _20SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _18MapChannelVertexBuffer, _19MeshIndices);
                _20SetMapChannel;
                }else
              {
                x0;
                };
            }, (Exception x0) => 
          {
            TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer-ext->11:IgnoreFirst 29640
            _0IgnoreFirst = IgnoreFirst(x0, x0);
            _0IgnoreFirst;
            });
        _0TryCatch;
        });
    _145IgnoreFirst = IgnoreFirst(_113SetMapChannel, _144Aggregate);
    _145IgnoreFirst;
    }