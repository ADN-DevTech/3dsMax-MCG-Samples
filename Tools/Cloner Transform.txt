(InstanceState state, TriMesh mesh, Int32 flux channel, Int32 duplicates, Boolean transform overwrite, Single translation x, Single translation y, Single translation z, Single rotation x, Single rotation y, Single rotation z, Single scaling x, Single scaling y, Single scaling z, Boolean transform  local, Int32 random seed, Single rand offset  x, Single rand offset y, Single rand offset z, Single rand rotation x, Single rand rotation y, Single rand rotation z, Single rand scaling x, Single rand scaling y, Single rand scaling z, Boolean createMesh, Single radius) => 
  {
    Int32 _0One;// 4:GreaterThanOne.ext->1:One 48016
    Boolean _1GreaterThan;// 4:GreaterThanOne.ext->0:GreaterThan 48015
    Int32 _2Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 48083
    Boolean _3Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 48082
    MapChannel _6Pass-through: any;// 0:Pass-through: any 48074
    Object _7Null;// 6:IsNullFix2.ext->3:Null 48078
    Object _8As;// 6:IsNullFix2.ext->23:As 48076
    Boolean _9Equal;// 6:IsNullFix2.ext->1:Equal 48075
    Boolean _10Not;// 3:MapChannelExists.ext->4:Not 48073
    Boolean _11Not;// 4:IfNot.ext->1:Not 48070
    TriMesh _19Pass-through: TriMesh;// 0:Pass-through: TriMesh 48026
    MapChannel _20GetMapChannel;// 0:MatricesFromMapChannel.ext->9:GetMapChannel 48038
    IArray[Vector3] _21MapChannelVertexBuffer;// 0:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 48037
    Int32 _22Count;// 2:Slices->2:Count 48034
    Int32 _23Constant;// 0:MatricesFromMapChannel.ext->0:Constant 48039
    Int32 _24Divide;// 2:Slices->3:Divide 48033
    IArray[Int32] _25Range;// 2:Slices->4:Range 48032
    IArray[IArray[Vector3]] _26Map;// 2:Slices->5:Map 48031
    IArray[Matrix] _27Map;// 0:MatricesFromMapChannel.ext->5:Map 48028
    Matrix _37MatrixIdentity;// 0:ClonerMatricesOrIdentity.ext->5:MatrixIdentity 48104
    IArray[Matrix] _38Unit;// 0:ClonerMatricesOrIdentity.ext->6:Unit 48103
    Func[Matrix, IArray[Vector3]] _39Pass-through: function1;// 0:Pass-through: function1 48091
    IArray[IArray[Vector3]] _40Map;// 5:FlatMap->4:Map 48093
    IArray[Vector3] _41Flatten;// 5:FlatMap->3:Flatten 48092
    IArray[Int32] _42MeshIndices;// 8:StoreMatricesInMapChannel.ext->0:MeshIndices 48102
    TriMesh _43SetMapChannel;// 8:StoreMatricesInMapChannel.ext->7:SetMapChannel 48089
    Vector3 _47Vector3;// 22:Vector3 48129
    Matrix _48TranslationMatrix;// 18:PositionRotationScaleMatrix.ext->3:TranslationMatrix 48123
    Vector3 _49Vector3;// 31:Vector3 48166
    Single _50X;// 1:VectorAsArray->1:X 48162
    IArray[Single] _51Unit;// 4:Array3->2:Unit 48161
    Single _52Y;// 1:VectorAsArray->2:Y 48163
    IArray[Single] _53Append;// 4:Array3->3:Append 48160
    Single _54Z;// 1:VectorAsArray->3:Z 48164
    IArray[Single] _55Append;// 4:Array3->6:Append 48159
    Func[Single, Single] _56Pass-through: function1;// 0:Pass-through: function1 48141
    IArray[Single] _57Map;// 1:VectorMapComponents.ext->2:Map 48154
    Int32 _58Zero;// 3:ArrayToVector.ext->5:Zero 48145
    Single _59At;// 3:ArrayToVector.ext->1:At 48144
    Int32 _60One;// 6:PlusOne->1:One 48149
    Int32 _61Add;// 6:PlusOne->0:Add 48148
    Single _62At;// 3:ArrayToVector.ext->2:At 48146
    Int32 _63One;// 7:PlusOne->1:One 48153
    Int32 _64Add;// 7:PlusOne->0:Add 48152
    Single _65At;// 3:ArrayToVector.ext->3:At 48150
    Vector3 _66Vector3;// 3:ArrayToVector.ext->4:Vector3 48143
    Single _67Y;// 2:QuaternionFromVector3.ext->7:Y 48136
    Single _68X;// 2:QuaternionFromVector3.ext->6:X 48137
    Single _69Z;// 2:QuaternionFromVector3.ext->8:Z 48138
    Quaternion _70QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3.ext->3:QuaternionFromYawPitchRoll 48135
    Matrix _71MatrixFromQuaternion;// 18:PositionRotationScaleMatrix.ext->4:MatrixFromQuaternion 48124
    Matrix _72Multiply;// 6:Multiply3.ext->3:Multiply 48122
    Vector3 _73Vector3;// 36:Vector3 48170
    Single _74Constant;// 8:Origin->0:Constant 48128
    Vector3 _75Vector3;// 8:Origin->1:Vector3 48127
    Matrix _76ScalingTranslationMatrix;// 5:ScalingMatrix.ext->4:ScalingTranslationMatrix 48126
    Matrix _77Multiply;// 6:Multiply3.ext->4:Multiply 48121
    IArray[Matrix] _78ParallelMap;// 2:ParallelMap 48009
    Vector3 _79Vector3;// 48:Vector3 48176
    Func[Random, Vector3] _80Pass-through: function1;// 0:Pass-through: function1 47889
    Int32 _81One;// 3:PlusOne->1:One 47921
    Int32 _82Add;// 3:PlusOne->0:Add 47920
    Int32 _83One;// 4:PlusOne->1:One 47918
    Int32 _84Add;// 4:PlusOne->0:Add 47917
    Random _85RandomNumberGenerator;// 14:MatricesRandomize.ext->1:RandomNumberGenerator 47915
    Func[Vector3] _86Bind;// 6:RandomArray.ext->4:Bind 47893
    Vector3 _87Vector3;// 55:Vector3 48180
    Func[Random, Vector3] _88Pass-through: function1;// 0:Pass-through: function1 47926
    Random _89RandomNumberGenerator;// 14:MatricesRandomize.ext->0:RandomNumberGenerator 47979
    Func[Vector3] _90Bind;// 6:RandomArray.ext->4:Bind 47930
    Vector3 _91Vector3;// 44:Vector3 48184
    Single _92FloatOne;// 14:VectorUnit.ext->2:FloatOne 48001
    Vector3 _93Vector3;// 1:ScalarToVector.ext->1:Vector3 48000
    Func[Random, Vector3] _94Pass-through: function1;// 0:Pass-through: function1 47984
    Random _95RandomNumberGenerator;// 14:MatricesRandomize.ext->57:RandomNumberGenerator 48008
    Func[Vector3] _96Bind;// 6:RandomArray.ext->4:Bind 47988
    Int32 _97Count;// 60:ScaleMatricesRandomly.ext->7:Count 48002
    IArray[Vector3] _98ArrayOfFunction;// 6:RandomArray.ext->5:ArrayOfFunction 47987
    IArray[Matrix] _99Combine;// 60:ScaleMatricesRandomly.ext->8:Combine 47983
    Int32 _100Count;// 30:RotateMatricesRandomly.ext->7:Count 47940
    IArray[Vector3] _101ArrayOfFunction;// 6:RandomArray.ext->5:ArrayOfFunction 47929
    IArray[Matrix] _102Combine;// 30:RotateMatricesRandomly.ext->8:Combine 47925
    Int32 _103Count;// 31:TranslateMatricesRandomly.ext->7:Count 47903
    IArray[Vector3] _104ArrayOfFunction;// 6:RandomArray.ext->5:ArrayOfFunction 47892
    Boolean _105True;// 31:TranslateMatricesRandomly.ext->10:True 47914
    IArray[Matrix] _106Combine;// 31:TranslateMatricesRandomly.ext->8:Combine 47888
    IArray[Matrix] _107IgnoreFirst;// 14:MatricesRandomize.ext->10:IgnoreFirst 47884
    IArray[Matrix] _108IgnoreFirst;// 14:MatricesRandomize.ext->11:IgnoreFirst 47883
    Func[Matrix, IArray[Vector3]] _109Pass-through: function1;// 0:Pass-through: function1 47864
    IArray[IArray[Vector3]] _110Map;// 5:FlatMap->4:Map 47866
    IArray[Vector3] _111Flatten;// 5:FlatMap->3:Flatten 47865
    IArray[Int32] _112MeshIndices;// 60:StoreMatricesInMapChannel.ext->0:MeshIndices 47875
    TriMesh _113SetMapChannel;// 60:StoreMatricesInMapChannel.ext->7:SetMapChannel 47862
    TriMesh _149IgnoreFirst;// 23:ClonerMeshAsBoxes.ext->7:IgnoreFirst 47733
    _0One = One();
    _1GreaterThan = GreaterThan(duplicates, _0One);
    _2Constant = -3;
    _3Equal = Equal(flux channel, _2Constant);
    _6Pass-through: any = if (_3Equal)
      {
        MapChannel _4TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 48084
        _4TopologyChannel = TopologyChannel(mesh);
        _4TopologyChannel;
        }else
      {
        MapChannel _5GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 48085
        _5GetMapChannel = GetMapChannel(mesh, flux channel);
        _5GetMapChannel;
        };
    _7Null = Null();
    _8As = As(_6Pass-through: any, (Object x0) => 
      {
        Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 48077
        _0IgnoreFirst = IgnoreFirst(x0, _7Null);
        _0IgnoreFirst;
        });
    _9Equal = Equal(_8As, _7Null);
    _10Not = Not(_9Equal);
    _11Not = Not(_10Not);
    _19Pass-through: TriMesh = if (_11Not)
      {
        Matrix _12MatrixIdentity;// 0:ClonerMatricesOrIdentity.ext->5:MatrixIdentity 48104
        IArray[Matrix] _13Unit;// 0:ClonerMatricesOrIdentity.ext->6:Unit 48103
        Func[Matrix, IArray[Vector3]] _14Pass-through: function1;// 0:Pass-through: function1 48091
        IArray[IArray[Vector3]] _15Map;// 5:FlatMap->4:Map 48093
        IArray[Vector3] _16Flatten;// 5:FlatMap->3:Flatten 48092
        IArray[Int32] _17MeshIndices;// 8:StoreMatricesInMapChannel.ext->0:MeshIndices 48102
        TriMesh _18SetMapChannel;// 8:StoreMatricesInMapChannel.ext->7:SetMapChannel 48089
        _12MatrixIdentity = MatrixIdentity();
        _13Unit = Unit(_12MatrixIdentity);
        _14Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 48097
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 48096
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 48095
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 48101
                Int32 _1Add;// 5:PlusOne->0:Add 48100
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 48098
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _15Map = Map(_13Unit, _14Pass-through: function1);
        _16Flatten = Flatten(_15Map);
        _17MeshIndices = MeshIndices(mesh);
        _18SetMapChannel = SetMapChannel(mesh, flux channel, _16Flatten, _17MeshIndices);
        _18SetMapChannel;
        }else
      {
        mesh;
        };
    _20GetMapChannel = GetMapChannel(_19Pass-through: TriMesh, flux channel);
    _21MapChannelVertexBuffer = MapChannelVertexBuffer(_20GetMapChannel);
    _22Count = Count(_21MapChannelVertexBuffer);
    _23Constant = 4;
    _24Divide = Divide(_22Count, _23Constant);
    _25Range = Range(_24Divide);
    _26Map = Map(_25Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 48036
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 48035
        _0Multiply = Multiply(_23Constant, x0);
        _1Slice = Slice(_21MapChannelVertexBuffer, _0Multiply, _23Constant);
        _1Slice;
        });
    _27Map = Map(_26Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 48048
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 48049
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 48053
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 48052
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 48047
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 48050
        Int32 _6One;// 8:PlusOne->1:One 48057
        Int32 _7Add;// 8:PlusOne->0:Add 48056
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 48054
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 48046
        Int32 _10Constant;// 25:Three->0:Constant 48051
        Int32 _11One;// 9:PlusOne->1:One 48061
        Int32 _12Add;// 9:PlusOne->0:Add 48060
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 48058
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 48045
        Int32 _15One;// 10:PlusOne->1:One 48065
        Int32 _16Add;// 10:PlusOne->0:Add 48064
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 48062
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 48041
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _37MatrixIdentity = MatrixIdentity();
    _38Unit = Unit(_37MatrixIdentity);
    _39Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 48097
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 48096
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 48095
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 48101
            Int32 _1Add;// 5:PlusOne->0:Add 48100
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 48098
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _40Map = Map(_38Unit, _39Pass-through: function1);
    _41Flatten = Flatten(_40Map);
    _42MeshIndices = MeshIndices(mesh);
    _43SetMapChannel = SetMapChannel(mesh, flux channel, _41Flatten, _42MeshIndices);
    _47Vector3 = Vector3(translation x, translation y, translation z);
    _48TranslationMatrix = TranslationMatrix(_47Vector3);
    _49Vector3 = Vector3(rotation x, rotation y, rotation z);
    _50X = X(_49Vector3);
    _51Unit = Unit(_50X);
    _52Y = Y(_49Vector3);
    _53Append = Append(_51Unit, _52Y);
    _54Z = Z(_49Vector3);
    _55Append = Append(_53Append, _54Z);
    _56Pass-through: function1 = (Single x0) => 
      {
        Single _0ToRadians;// 1:EulerDegreesToRadians.ext->2:ToRadians 48165
        _0ToRadians = ToRadians(x0);
        _0ToRadians;
        };
    _57Map = Map(_55Append, _56Pass-through: function1);
    _58Zero = Zero();
    _59At = At(_57Map, _58Zero);
    _60One = One();
    _61Add = Add(_58Zero, _60One);
    _62At = At(_57Map, _61Add);
    _63One = One();
    _64Add = Add(_61Add, _63One);
    _65At = At(_57Map, _64Add);
    _66Vector3 = Vector3(_59At, _62At, _65At);
    _67Y = Y(_66Vector3);
    _68X = X(_66Vector3);
    _69Z = Z(_66Vector3);
    _70QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_67Y, _68X, _69Z);
    _71MatrixFromQuaternion = MatrixFromQuaternion(_70QuaternionFromYawPitchRoll);
    _72Multiply = Multiply(_48TranslationMatrix, _71MatrixFromQuaternion);
    _73Vector3 = Vector3(scaling x, scaling y, scaling z);
    _74Constant = 0;
    _75Vector3 = Vector3(_74Constant, _74Constant, _74Constant);
    _76ScalingTranslationMatrix = ScalingTranslationMatrix(_73Vector3, _75Vector3);
    _77Multiply = Multiply(_72Multiply, _76ScalingTranslationMatrix);
    _78ParallelMap = ParallelMap(if (_1GreaterThan)
      {
        Func[Matrix, IArray[Matrix]] _44Pass-through: function1;// 0:Pass-through: function1 48020
        IArray[IArray[Matrix]] _45Map;// 3:FlatMap->4:Map 48022
        IArray[Matrix] _46Flatten;// 3:FlatMap->3:Flatten 48021
        _44Pass-through: function1 = (Matrix x0) => 
          {
            IArray[Matrix] _0ArrayOf;// 6:RepeatElements.ext->4:ArrayOf 48023
            _0ArrayOf = ArrayOf(x0, duplicates);
            _0ArrayOf;
            };
        _45Map = Map(_27Map, _44Pass-through: function1);
        _46Flatten = Flatten(_45Map);
        _46Flatten;
        }else
      {
        _27Map;
        }, (Matrix x0) => 
      {
        if (transform overwrite)
          {
            _77Multiply;
            }else
          {
            if (transform  local)
              {
                Matrix _0Multiply;// 3:MatrixApplyOrSetTransform.ext->4:Multiply 48112
                _0Multiply = Multiply(_77Multiply, x0);
                _0Multiply;
                }else
              {
                Matrix _1Multiply;// 3:MatrixApplyOrSetTransform.ext->9:Multiply 48113
                _1Multiply = Multiply(x0, _77Multiply);
                _1Multiply;
                };
            };
        });
    _79Vector3 = Vector3(rand offset  x, rand offset y, rand offset z);
    _80Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 47899
        Vector3 _1Multiply;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->2:Multiply 47897
        Single _2Constant;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->0:Constant 47902
        Vector3 _3MultiplyByScalar;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->11:MultiplyByScalar 47901
        Vector3 _4Subtract;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->10:Subtract 47896
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _79Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_79Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _4Subtract;
        };
    _81One = One();
    _82Add = Add(random seed, _81One);
    _83One = One();
    _84Add = Add(_82Add, _83One);
    _85RandomNumberGenerator = RandomNumberGenerator(_84Add);
    _86Bind = Bind(_80Pass-through: function1, _85RandomNumberGenerator);
    _87Vector3 = Vector3(rand rotation x, rand rotation y, rand rotation z);
    _88Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 47936
        Vector3 _1Multiply;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->2:Multiply 47934
        Single _2Constant;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->0:Constant 47939
        Vector3 _3MultiplyByScalar;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->11:MultiplyByScalar 47938
        Vector3 _4Subtract;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->10:Subtract 47933
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _87Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_87Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _4Subtract;
        };
    _89RandomNumberGenerator = RandomNumberGenerator(_82Add);
    _90Bind = Bind(_88Pass-through: function1, _89RandomNumberGenerator);
    _91Vector3 = Vector3(rand scaling x, rand scaling y, rand scaling z);
    _92FloatOne = FloatOne();
    _93Vector3 = Vector3(_92FloatOne, _92FloatOne, _92FloatOne);
    _94Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 47995
        Vector3 _1Multiply;// 10:PseudoRandomVectorPlusMinusHalfRange.ext->2:Multiply 47993
        Single _2Constant;// 10:PseudoRandomVectorPlusMinusHalfRange.ext->0:Constant 47998
        Vector3 _3MultiplyByScalar;// 10:PseudoRandomVectorPlusMinusHalfRange.ext->11:MultiplyByScalar 47997
        Vector3 _4Subtract;// 10:PseudoRandomVectorPlusMinusHalfRange.ext->10:Subtract 47992
        Vector3 _5Add;// 60:ScaleMatricesRandomly.ext->16:Add 47989
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _91Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_91Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _5Add = Add(_4Subtract, _93Vector3);
        _5Add;
        };
    _95RandomNumberGenerator = RandomNumberGenerator(random seed);
    _96Bind = Bind(_94Pass-through: function1, _95RandomNumberGenerator);
    _97Count = Count(_78ParallelMap);
    _98ArrayOfFunction = ArrayOfFunction(_96Bind, _97Count);
    _99Combine = Combine(_98ArrayOfFunction, _78ParallelMap, (Vector3 x0, Matrix x1) => 
      {
        Single _0Constant;// 8:Origin->0:Constant 48007
        Vector3 _1Vector3;// 8:Origin->1:Vector3 48006
        Matrix _2ScalingTranslationMatrix;// 4:ScalingMatrix.ext->4:ScalingTranslationMatrix 48005
        Matrix _3Multiply;// 60:ScaleMatricesRandomly.ext->9:Multiply 48003
        _0Constant = 0;
        _1Vector3 = Vector3(_0Constant, _0Constant, _0Constant);
        _2ScalingTranslationMatrix = ScalingTranslationMatrix(x0, _1Vector3);
        _3Multiply = Multiply(_2ScalingTranslationMatrix, x1);
        _3Multiply;
        });
    _100Count = Count(_99Combine);
    _101ArrayOfFunction = ArrayOfFunction(_90Bind, _100Count);
    _102Combine = Combine(_101ArrayOfFunction, _99Combine, (Vector3 x0, Matrix x1) => 
      {
        Single _0X;// 1:VectorAsArray->1:X 47975
        IArray[Single] _1Unit;// 4:Array3->2:Unit 47974
        Single _2Y;// 1:VectorAsArray->2:Y 47976
        IArray[Single] _3Append;// 4:Array3->3:Append 47973
        Single _4Z;// 1:VectorAsArray->3:Z 47977
        IArray[Single] _5Append;// 4:Array3->6:Append 47972
        Func[Single, Single] _6Pass-through: function1;// 0:Pass-through: function1 47954
        IArray[Single] _7Map;// 1:VectorMapComponents.ext->2:Map 47967
        Int32 _8Zero;// 3:ArrayToVector.ext->5:Zero 47958
        Single _9At;// 3:ArrayToVector.ext->1:At 47957
        Int32 _10One;// 6:PlusOne->1:One 47962
        Int32 _11Add;// 6:PlusOne->0:Add 47961
        Single _12At;// 3:ArrayToVector.ext->2:At 47959
        Int32 _13One;// 7:PlusOne->1:One 47966
        Int32 _14Add;// 7:PlusOne->0:Add 47965
        Single _15At;// 3:ArrayToVector.ext->3:At 47963
        Vector3 _16Vector3;// 3:ArrayToVector.ext->4:Vector3 47956
        Single _17Y;// 2:QuaternionFromVector3.ext->7:Y 47949
        Single _18X;// 2:QuaternionFromVector3.ext->6:X 47950
        Single _19Z;// 2:QuaternionFromVector3.ext->8:Z 47951
        Quaternion _20QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3.ext->3:QuaternionFromYawPitchRoll 47948
        Matrix _21MatrixFromQuaternion;// 6:EulerDegreesToMatrix.ext->4:MatrixFromQuaternion 47945
        Matrix _22Multiply;// 9:MatrixRotateUsingEuler.ext->5:Multiply 47943
        _0X = X(x0);
        _1Unit = Unit(_0X);
        _2Y = Y(x0);
        _3Append = Append(_1Unit, _2Y);
        _4Z = Z(x0);
        _5Append = Append(_3Append, _4Z);
        _6Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 1:EulerDegreesToRadians.ext->2:ToRadians 47978
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _7Map = Map(_5Append, _6Pass-through: function1);
        _8Zero = Zero();
        _9At = At(_7Map, _8Zero);
        _10One = One();
        _11Add = Add(_8Zero, _10One);
        _12At = At(_7Map, _11Add);
        _13One = One();
        _14Add = Add(_11Add, _13One);
        _15At = At(_7Map, _14Add);
        _16Vector3 = Vector3(_9At, _12At, _15At);
        _17Y = Y(_16Vector3);
        _18X = X(_16Vector3);
        _19Z = Z(_16Vector3);
        _20QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_17Y, _18X, _19Z);
        _21MatrixFromQuaternion = MatrixFromQuaternion(_20QuaternionFromYawPitchRoll);
        _22Multiply = Multiply(_21MatrixFromQuaternion, x1);
        _22Multiply;
        });
    _103Count = Count(_102Combine);
    _104ArrayOfFunction = ArrayOfFunction(_86Bind, _103Count);
    _105True = True();
    _106Combine = Combine(_104ArrayOfFunction, _102Combine, (Vector3 x0, Matrix x1) => 
      {
        Matrix _0TranslationMatrix;// 9:MatrixTranslate.ext->10:TranslationMatrix 47913
        _0TranslationMatrix = TranslationMatrix(x0);
        if (_105True)
          {
            Matrix _1Multiply;// 6:MatrixApplyTransform.ext->4:Multiply 47911
            _1Multiply = Multiply(_0TranslationMatrix, x1);
            _1Multiply;
            }else
          {
            Matrix _2Multiply;// 6:MatrixApplyTransform.ext->9:Multiply 47912
            _2Multiply = Multiply(x1, _0TranslationMatrix);
            _2Multiply;
            };
        });
    _107IgnoreFirst = IgnoreFirst(random seed, _106Combine);
    _108IgnoreFirst = IgnoreFirst(_78ParallelMap, _107IgnoreFirst);
    _109Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 47870
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 47869
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 47868
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 47874
            Int32 _1Add;// 5:PlusOne->0:Add 47873
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 47871
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _110Map = Map(_108IgnoreFirst, _109Pass-through: function1);
    _111Flatten = Flatten(_110Map);
    _112MeshIndices = MeshIndices(mesh);
    _113SetMapChannel = SetMapChannel(mesh, flux channel, _111Flatten, _112MeshIndices);
    _149IgnoreFirst = IgnoreFirst(_113SetMapChannel, if (createMesh)
      {
        Int32 _121Constant;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->0:Constant 47741
        IArray[Int32] _122Range;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->1:Range 47740
        Int32 _123Two;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->4:Two 47742
        IArray[Int32] _124Skip;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->3:Skip 47739
        IArray[Int32] _125Filter;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->13:Filter 47738
        MapChannel _126GetMapChannel;// 34:MatricesFromMapChannel.ext->9:GetMapChannel 47800
        IArray[Vector3] _127MapChannelVertexBuffer;// 34:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 47799
        Int32 _128Count;// 2:Slices->2:Count 47796
        Int32 _129Constant;// 34:MatricesFromMapChannel.ext->0:Constant 47801
        Int32 _130Divide;// 2:Slices->3:Divide 47795
        IArray[Int32] _131Range;// 2:Slices->4:Range 47794
        IArray[IArray[Vector3]] _132Map;// 2:Slices->5:Map 47793
        IArray[Matrix] _133Map;// 34:MatricesFromMapChannel.ext->5:Map 47790
        Single _134Constant;// 1:Origin->0:Constant 47858
        Vector3 _135Vector3;// 1:Origin->1:Vector3 47857
        BoundingSphere _136Sphere;// 0:BoxFromPointAndRadius->3:Sphere 47856
        BoundingBox _137BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 47855
        QuadMesh _138BoxQuadMesh;// 29:BoxTriMesh->2:BoxQuadMesh 47851
        TriMesh _139Triangulate;// 29:BoxTriMesh->3:Triangulate 47850
        IArray[Int32] _140MeshIndices;// 4:HideEveryThirdEdge->2:MeshIndices 47841
        IArray[Int32] _141Indices;// 4:HideEveryThirdEdge->8:Indices 47840
        Int32 _142Constant;// 4:HideEveryThirdEdge->0:Constant 47848
        Int32 _143Constant;// 4:HideEveryThirdEdge->0:Constant 47849
        IArray[Boolean] _144Map;// 4:HideEveryThirdEdge->5:Map 47839
        TriMesh _145SetVisibleEdges;// 4:HideEveryThirdEdge->9:SetVisibleEdges 47838
        IArray[TriMesh] _146Map;// 23:ClonerMeshAsBoxes.ext->16:Map 47787
        TriMesh _147CombineAllMeshes;// 23:ClonerMeshAsBoxes.ext->2:CombineAllMeshes 47786
        TriMesh _148Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->6:Aggregate 47737
        _121Constant = 100;
        _122Range = Range(_121Constant);
        _123Two = Two();
        _124Skip = Skip(_122Range, _123Two);
        _125Filter = Filter(_124Skip, (Int32 x0) => 
          {
            Int32 _0Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 47755
            Boolean _1Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 47754
            MapChannel _11Pass-through: any;// 0:Pass-through: any 47746
            Object _12Null;// 6:IsNullFix2.ext->3:Null 47750
            Object _13As;// 6:IsNullFix2.ext->23:As 47748
            Boolean _14Equal;// 6:IsNullFix2.ext->1:Equal 47747
            Boolean _15Not;// 12:MapChannelExists.ext->4:Not 47745
            _0Constant = -3;
            _1Equal = Equal(x0, _0Constant);
            _11Pass-through: any = if (_1Equal)
              {
                MapChannel _9TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 47756
                _9TopologyChannel = TopologyChannel(_113SetMapChannel);
                _9TopologyChannel;
                }else
              {
                MapChannel _10GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 47757
                _10GetMapChannel = GetMapChannel(_113SetMapChannel, x0);
                _10GetMapChannel;
                };
            _12Null = Null();
            _13As = As(_11Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 47749
                _0IgnoreFirst = IgnoreFirst(x0, _12Null);
                _0IgnoreFirst;
                });
            _14Equal = Equal(_13As, _12Null);
            _15Not = Not(_14Equal);
            _15Not;
            });
        _126GetMapChannel = GetMapChannel(_113SetMapChannel, flux channel);
        _127MapChannelVertexBuffer = MapChannelVertexBuffer(_126GetMapChannel);
        _128Count = Count(_127MapChannelVertexBuffer);
        _129Constant = 4;
        _130Divide = Divide(_128Count, _129Constant);
        _131Range = Range(_130Divide);
        _132Map = Map(_131Range, (Int32 x0) => 
          {
            Int32 _0Multiply;// 2:Slices->6:Multiply 47798
            IArray[Vector3] _1Slice;// 2:Slices->0:Slice 47797
            _0Multiply = Multiply(_129Constant, x0);
            _1Slice = Slice(_127MapChannelVertexBuffer, _0Multiply, _129Constant);
            _1Slice;
            });
        _133Map = Map(_132Map, (IArray[Vector3] x0) => 
          {
            Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 47810
            Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 47811
            Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 47815
            Vector3 _3At;// 6:MatrixFromRows.ext->3:At 47814
            Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 47809
            Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 47812
            Int32 _6One;// 8:PlusOne->1:One 47819
            Int32 _7Add;// 8:PlusOne->0:Add 47818
            Vector3 _8At;// 6:MatrixFromRows.ext->4:At 47816
            Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 47808
            Int32 _10Constant;// 25:Three->0:Constant 47813
            Int32 _11One;// 9:PlusOne->1:One 47823
            Int32 _12Add;// 9:PlusOne->0:Add 47822
            Vector3 _13At;// 6:MatrixFromRows.ext->5:At 47820
            Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 47807
            Int32 _15One;// 10:PlusOne->1:One 47827
            Int32 _16Add;// 10:PlusOne->0:Add 47826
            Vector3 _17At;// 6:MatrixFromRows.ext->6:At 47824
            Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 47803
            _0MatrixIdentity = MatrixIdentity();
            _1One = One();
            _2Zero = Zero();
            _3At = At(x0, _2Zero);
            _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
            _5Two = Two();
            _6One = One();
            _7Add = Add(_2Zero, _6One);
            _8At = At(x0, _7Add);
            _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
            _10Constant = 3;
            _11One = One();
            _12Add = Add(_7Add, _11One);
            _13At = At(x0, _12Add);
            _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
            _15One = One();
            _16Add = Add(_12Add, _15One);
            _17At = At(x0, _16Add);
            _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
            _18SetMatrixTranslation;
            });
        _134Constant = 0;
        _135Vector3 = Vector3(_134Constant, _134Constant, _134Constant);
        _136Sphere = Sphere(_135Vector3, radius);
        _137BoxFromSphere = BoxFromSphere(_136Sphere);
        _138BoxQuadMesh = BoxQuadMesh(_137BoxFromSphere);
        _139Triangulate = Triangulate(_138BoxQuadMesh);
        _140MeshIndices = MeshIndices(_139Triangulate);
        _141Indices = Indices(_140MeshIndices);
        _142Constant = 3;
        _143Constant = 2;
        _144Map = Map(_141Indices, (Int32 x0) => 
          {
            Int32 _0Modulo;// 6:ModuloEquals->3:Modulo 47847
            Boolean _1Equal;// 6:ModuloEquals->4:Equal 47846
            Boolean _2Not;// 4:HideEveryThirdEdge->7:Not 47842
            _0Modulo = Modulo(x0, _142Constant);
            _1Equal = Equal(_0Modulo, _143Constant);
            _2Not = Not(_1Equal);
            _2Not;
            });
        _145SetVisibleEdges = SetVisibleEdges(_139Triangulate, _144Map);
        _146Map = Map(_133Map, (Matrix x0) => 
          {
            IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 47834
            Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 47831
            IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 47833
            TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 47832
            _0MeshVertices = MeshVertices(_145SetVisibleEdges);
            _1Pass-through: function1 = (Vector3 x0) => 
              {
                Vector3 _0Transform;// 36:TransformMesh->0:Transform 47835
                _0Transform = Transform(x0, x0);
                _0Transform;
                };
            _2Map = Map(_0MeshVertices, _1Pass-through: function1);
            _3SetMeshVertices = SetMeshVertices(_145SetVisibleEdges, _2Map);
            _3SetMeshVertices;
            });
        _147CombineAllMeshes = CombineAllMeshes(_146Map);
        _148Aggregate = Aggregate(_125Filter, _147CombineAllMeshes, (TriMesh x0, Int32 x1) => 
          {
            TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer.ext->10:TryCatch 47761
            _0TryCatch = TryCatch(() => 
              {
                Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->7:IgnoreFirst 47783
                Int32 _1Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 47775
                Boolean _2Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 47774
                MapChannel _12Pass-through: any;// 0:Pass-through: any 47766
                Object _13Null;// 6:IsNullFix2.ext->3:Null 47770
                Object _14As;// 6:IsNullFix2.ext->23:As 47768
                Boolean _15Equal;// 6:IsNullFix2.ext->1:Equal 47767
                Boolean _16Not;// 5:MapChannelExists.ext->4:Not 47765
                _0IgnoreFirst = IgnoreFirst(x0, x1);
                _1Constant = -3;
                _2Equal = Equal(_0IgnoreFirst, _1Constant);
                _12Pass-through: any = if (_2Equal)
                  {
                    MapChannel _10TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 47776
                    _10TopologyChannel = TopologyChannel(_113SetMapChannel);
                    _10TopologyChannel;
                    }else
                  {
                    MapChannel _11GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 47777
                    _11GetMapChannel = GetMapChannel(_113SetMapChannel, _0IgnoreFirst);
                    _11GetMapChannel;
                    };
                _13Null = Null();
                _14As = As(_12Pass-through: any, (Object x0) => 
                  {
                    Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 47769
                    _0IgnoreFirst = IgnoreFirst(x0, _13Null);
                    _0IgnoreFirst;
                    });
                _15Equal = Equal(_14As, _13Null);
                _16Not = Not(_15Equal);
                if (_16Not)
                  {
                    MapChannel _17GetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->1:GetMapChannel 47780
                    IArray[Vector3] _18MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer.ext->8:MapChannelVertexBuffer 47779
                    IArray[Int32] _19MeshIndices;// 10:MapChannelCopyVertexBuffer.ext->0:MeshIndices 47781
                    TriMesh _20SetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->7:SetMapChannel 47778
                    _17GetMapChannel = GetMapChannel(_113SetMapChannel, _0IgnoreFirst);
                    _18MapChannelVertexBuffer = MapChannelVertexBuffer(_17GetMapChannel);
                    _19MeshIndices = MeshIndices(x0);
                    _20SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _18MapChannelVertexBuffer, _19MeshIndices);
                    _20SetMapChannel;
                    }else
                  {
                    x0;
                    };
                }, (Exception x0) => 
              {
                TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer.ext->11:IgnoreFirst 47782
                _0IgnoreFirst = IgnoreFirst(x0, x0);
                _0IgnoreFirst;
                });
            _0TryCatch;
            });
        _148Aggregate;
        }else
      {
        _113SetMapChannel;
        });
    _149IgnoreFirst;
    }