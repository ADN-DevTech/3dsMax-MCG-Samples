(InstanceState state, TriMesh mesh, Int32 channel id, Int32 duplicates, Boolean absolute , Single translation x, Single translation y, Single translation z, Single rotation x, Single rotation y, Single rotation z, Single scaling x, Single scaling y, Single scaling z, Boolean transform  local, Int32 random seed, Single rand offset  x, Single rand offset y, Single rand offset z, Single rand rotation x, Single rand rotation y, Single rand rotation z, Single rand scaling x, Single rand scaling y, Single rand scaling z, Single radius) => 
  {
    Int32 _0One;// 4:GreaterThanOne.ext->1:One 50633
    Boolean _1GreaterThan;// 4:GreaterThanOne.ext->0:GreaterThan 50632
    Int32 _2Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 50700
    Boolean _3Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 50699
    MapChannel _6Pass-through: any;// 0:Pass-through: any 50691
    Object _7Null;// 6:IsNullFix2.ext->3:Null 50695
    Object _8As;// 6:IsNullFix2.ext->23:As 50693
    Boolean _9Equal;// 6:IsNullFix2.ext->1:Equal 50692
    Boolean _10Not;// 3:MapChannelExists.ext->4:Not 50690
    Boolean _11Not;// 4:IfNot.ext->1:Not 50687
    TriMesh _19Pass-through: TriMesh;// 0:Pass-through: TriMesh 50643
    MapChannel _20GetMapChannel;// 0:MatricesFromMapChannel.ext->9:GetMapChannel 50655
    IArray[Vector3] _21MapChannelVertexBuffer;// 0:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 50654
    Int32 _22Count;// 2:Slices->2:Count 50651
    Int32 _23Constant;// 0:MatricesFromMapChannel.ext->0:Constant 50656
    Int32 _24Divide;// 2:Slices->3:Divide 50650
    IArray[Int32] _25Range;// 2:Slices->4:Range 50649
    IArray[IArray[Vector3]] _26Map;// 2:Slices->5:Map 50648
    IArray[Matrix] _27Map;// 0:MatricesFromMapChannel.ext->5:Map 50645
    Matrix _37MatrixIdentity;// 0:ClonerMatricesOrIdentity.ext->5:MatrixIdentity 50721
    IArray[Matrix] _38Unit;// 0:ClonerMatricesOrIdentity.ext->6:Unit 50720
    Func[Matrix, IArray[Vector3]] _39Pass-through: function1;// 0:Pass-through: function1 50708
    IArray[IArray[Vector3]] _40Map;// 5:FlatMap->4:Map 50710
    IArray[Vector3] _41Flatten;// 5:FlatMap->3:Flatten 50709
    IArray[Int32] _42MeshIndices;// 8:StoreMatricesInMapChannel.ext->0:MeshIndices 50719
    TriMesh _43SetMapChannel;// 8:StoreMatricesInMapChannel.ext->7:SetMapChannel 50706
    Vector3 _47Vector3;// 22:Vector3 50746
    Matrix _48TranslationMatrix;// 18:PositionRotationScaleMatrix.ext->3:TranslationMatrix 50740
    Vector3 _49Vector3;// 31:Vector3 50783
    Single _50X;// 1:VectorAsArray->1:X 50779
    IArray[Single] _51Unit;// 4:Array3->2:Unit 50778
    Single _52Y;// 1:VectorAsArray->2:Y 50780
    IArray[Single] _53Append;// 4:Array3->3:Append 50777
    Single _54Z;// 1:VectorAsArray->3:Z 50781
    IArray[Single] _55Append;// 4:Array3->6:Append 50776
    Func[Single, Single] _56Pass-through: function1;// 0:Pass-through: function1 50758
    IArray[Single] _57Map;// 1:VectorMapComponents.ext->2:Map 50771
    Int32 _58Zero;// 3:ArrayToVector.ext->5:Zero 50762
    Single _59At;// 3:ArrayToVector.ext->1:At 50761
    Int32 _60One;// 6:PlusOne->1:One 50766
    Int32 _61Add;// 6:PlusOne->0:Add 50765
    Single _62At;// 3:ArrayToVector.ext->2:At 50763
    Int32 _63One;// 7:PlusOne->1:One 50770
    Int32 _64Add;// 7:PlusOne->0:Add 50769
    Single _65At;// 3:ArrayToVector.ext->3:At 50767
    Vector3 _66Vector3;// 3:ArrayToVector.ext->4:Vector3 50760
    Single _67Y;// 2:QuaternionFromVector3.ext->7:Y 50753
    Single _68X;// 2:QuaternionFromVector3.ext->6:X 50754
    Single _69Z;// 2:QuaternionFromVector3.ext->8:Z 50755
    Quaternion _70QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3.ext->3:QuaternionFromYawPitchRoll 50752
    Matrix _71MatrixFromQuaternion;// 18:PositionRotationScaleMatrix.ext->4:MatrixFromQuaternion 50741
    Matrix _72Multiply;// 6:Multiply3.ext->3:Multiply 50739
    Vector3 _73Vector3;// 36:Vector3 50787
    Single _74Constant;// 8:Origin->0:Constant 50745
    Vector3 _75Vector3;// 8:Origin->1:Vector3 50744
    Matrix _76ScalingTranslationMatrix;// 5:ScalingMatrix.ext->4:ScalingTranslationMatrix 50743
    Matrix _77Multiply;// 6:Multiply3.ext->4:Multiply 50738
    IArray[Matrix] _78ParallelMap;// 2:ParallelMap 50626
    Vector3 _79Vector3;// 48:Vector3 50793
    Func[Random, Vector3] _80Pass-through: function1;// 0:Pass-through: function1 50506
    Int32 _81One;// 3:PlusOne->1:One 50538
    Int32 _82Add;// 3:PlusOne->0:Add 50537
    Int32 _83One;// 4:PlusOne->1:One 50535
    Int32 _84Add;// 4:PlusOne->0:Add 50534
    Random _85RandomNumberGenerator;// 14:MatricesRandomize.ext->1:RandomNumberGenerator 50532
    Func[Vector3] _86Bind;// 6:RandomArray.ext->4:Bind 50510
    Vector3 _87Vector3;// 55:Vector3 50797
    Func[Random, Vector3] _88Pass-through: function1;// 0:Pass-through: function1 50543
    Random _89RandomNumberGenerator;// 14:MatricesRandomize.ext->0:RandomNumberGenerator 50596
    Func[Vector3] _90Bind;// 6:RandomArray.ext->4:Bind 50547
    Vector3 _91Vector3;// 44:Vector3 50801
    Single _92FloatOne;// 14:VectorUnit.ext->2:FloatOne 50618
    Vector3 _93Vector3;// 1:ScalarToVector.ext->1:Vector3 50617
    Func[Random, Vector3] _94Pass-through: function1;// 0:Pass-through: function1 50601
    Random _95RandomNumberGenerator;// 14:MatricesRandomize.ext->57:RandomNumberGenerator 50625
    Func[Vector3] _96Bind;// 6:RandomArray.ext->4:Bind 50605
    Int32 _97Count;// 60:ScaleMatricesRandomly.ext->7:Count 50619
    IArray[Vector3] _98ArrayOfFunction;// 6:RandomArray.ext->5:ArrayOfFunction 50604
    IArray[Matrix] _99Combine;// 60:ScaleMatricesRandomly.ext->8:Combine 50600
    Int32 _100Count;// 30:RotateMatricesRandomly.ext->7:Count 50557
    IArray[Vector3] _101ArrayOfFunction;// 6:RandomArray.ext->5:ArrayOfFunction 50546
    IArray[Matrix] _102Combine;// 30:RotateMatricesRandomly.ext->8:Combine 50542
    Int32 _103Count;// 31:TranslateMatricesRandomly.ext->7:Count 50520
    IArray[Vector3] _104ArrayOfFunction;// 6:RandomArray.ext->5:ArrayOfFunction 50509
    Boolean _105True;// 31:TranslateMatricesRandomly.ext->10:True 50531
    IArray[Matrix] _106Combine;// 31:TranslateMatricesRandomly.ext->8:Combine 50505
    IArray[Matrix] _107IgnoreFirst;// 14:MatricesRandomize.ext->10:IgnoreFirst 50501
    IArray[Matrix] _108IgnoreFirst;// 14:MatricesRandomize.ext->11:IgnoreFirst 50500
    Func[Matrix, IArray[Vector3]] _109Pass-through: function1;// 0:Pass-through: function1 50481
    IArray[IArray[Vector3]] _110Map;// 5:FlatMap->4:Map 50483
    IArray[Vector3] _111Flatten;// 5:FlatMap->3:Flatten 50482
    IArray[Int32] _112MeshIndices;// 60:StoreMatricesInMapChannel.ext->0:MeshIndices 50492
    TriMesh _113SetMapChannel;// 60:StoreMatricesInMapChannel.ext->7:SetMapChannel 50479
    Int32 _114Constant;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->0:Constant 50355
    IArray[Int32] _115Range;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->1:Range 50354
    Int32 _116Two;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->4:Two 50356
    IArray[Int32] _117Skip;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->3:Skip 50353
    IArray[Int32] _118Filter;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->13:Filter 50352
    MapChannel _119GetMapChannel;// 34:MatricesFromMapChannel.ext->9:GetMapChannel 50414
    IArray[Vector3] _120MapChannelVertexBuffer;// 34:MatricesFromMapChannel.ext->8:MapChannelVertexBuffer 50413
    Int32 _121Count;// 2:Slices->2:Count 50410
    Int32 _122Constant;// 34:MatricesFromMapChannel.ext->0:Constant 50415
    Int32 _123Divide;// 2:Slices->3:Divide 50409
    IArray[Int32] _124Range;// 2:Slices->4:Range 50408
    IArray[IArray[Vector3]] _125Map;// 2:Slices->5:Map 50407
    IArray[Matrix] _126Map;// 34:MatricesFromMapChannel.ext->5:Map 50404
    Single _127Constant;// 1:Origin->0:Constant 50472
    Vector3 _128Vector3;// 1:Origin->1:Vector3 50471
    Single _129Constant;// 3:DivideByTwoFloat->0:Constant 50475
    Single _130Divide;// 3:DivideByTwoFloat->2:Divide 50474
    BoundingSphere _131Sphere;// 0:BoxFromPointAndRadius->3:Sphere 50470
    BoundingBox _132BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 50469
    QuadMesh _133BoxQuadMesh;// 3:CubeMesh.ext->5:BoxQuadMesh 50465
    TriMesh _134Triangulate;// 7:QuadToTriMesh.ext->4:Triangulate 50453
    IArray[Int32] _135MeshIndices;// 7:QuadToTriMesh.ext->3:MeshIndices 50456
    IArray[Int32] _136Indices;// 7:QuadToTriMesh.ext->8:Indices 50455
    Int32 _137Constant;// 7:QuadToTriMesh.ext->0:Constant 50461
    Int32 _138Constant;// 7:QuadToTriMesh.ext->0:Constant 50462
    Int32 _139Constant;// 7:QuadToTriMesh.ext->0:Constant 50464
    IArray[Boolean] _140Map;// 7:QuadToTriMesh.ext->5:Map 50454
    TriMesh _141SetVisibleEdges;// 7:QuadToTriMesh.ext->9:SetVisibleEdges 50452
    IArray[TriMesh] _142Map;// 23:ClonerMeshAsBoxes.ext->16:Map 50401
    TriMesh _143CombineAllMeshes;// 23:ClonerMeshAsBoxes.ext->2:CombineAllMeshes 50400
    TriMesh _144Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->6:Aggregate 50351
    TriMesh _145IgnoreFirst;// 23:ClonerMeshAsBoxes.ext->7:IgnoreFirst 50348
    _0One = One();
    _1GreaterThan = GreaterThan(duplicates, _0One);
    _2Constant = -3;
    _3Equal = Equal(channel id, _2Constant);
    _6Pass-through: any = if (_3Equal)
      {
        MapChannel _4TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 50701
        _4TopologyChannel = TopologyChannel(mesh);
        _4TopologyChannel;
        }else
      {
        MapChannel _5GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 50702
        _5GetMapChannel = GetMapChannel(mesh, channel id);
        _5GetMapChannel;
        };
    _7Null = Null();
    _8As = As(_6Pass-through: any, (Object x0) => 
      {
        Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 50694
        _0IgnoreFirst = IgnoreFirst(x0, _7Null);
        _0IgnoreFirst;
        });
    _9Equal = Equal(_8As, _7Null);
    _10Not = Not(_9Equal);
    _11Not = Not(_10Not);
    _19Pass-through: TriMesh = if (_11Not)
      {
        Matrix _12MatrixIdentity;// 0:ClonerMatricesOrIdentity.ext->5:MatrixIdentity 50721
        IArray[Matrix] _13Unit;// 0:ClonerMatricesOrIdentity.ext->6:Unit 50720
        Func[Matrix, IArray[Vector3]] _14Pass-through: function1;// 0:Pass-through: function1 50708
        IArray[IArray[Vector3]] _15Map;// 5:FlatMap->4:Map 50710
        IArray[Vector3] _16Flatten;// 5:FlatMap->3:Flatten 50709
        IArray[Int32] _17MeshIndices;// 8:StoreMatricesInMapChannel.ext->0:MeshIndices 50719
        TriMesh _18SetMapChannel;// 8:StoreMatricesInMapChannel.ext->7:SetMapChannel 50706
        _12MatrixIdentity = MatrixIdentity();
        _13Unit = Unit(_12MatrixIdentity);
        _14Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 50714
            IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 50713
            IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 50712
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 50718
                Int32 _1Add;// 5:PlusOne->0:Add 50717
                Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 50715
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _15Map = Map(_13Unit, _14Pass-through: function1);
        _16Flatten = Flatten(_15Map);
        _17MeshIndices = MeshIndices(mesh);
        _18SetMapChannel = SetMapChannel(mesh, channel id, _16Flatten, _17MeshIndices);
        _18SetMapChannel;
        }else
      {
        mesh;
        };
    _20GetMapChannel = GetMapChannel(_19Pass-through: TriMesh, channel id);
    _21MapChannelVertexBuffer = MapChannelVertexBuffer(_20GetMapChannel);
    _22Count = Count(_21MapChannelVertexBuffer);
    _23Constant = 4;
    _24Divide = Divide(_22Count, _23Constant);
    _25Range = Range(_24Divide);
    _26Map = Map(_25Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 50653
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 50652
        _0Multiply = Multiply(_23Constant, x0);
        _1Slice = Slice(_21MapChannelVertexBuffer, _0Multiply, _23Constant);
        _1Slice;
        });
    _27Map = Map(_26Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 50665
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 50666
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 50670
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 50669
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 50664
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 50667
        Int32 _6One;// 8:PlusOne->1:One 50674
        Int32 _7Add;// 8:PlusOne->0:Add 50673
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 50671
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 50663
        Int32 _10Constant;// 25:Three->0:Constant 50668
        Int32 _11One;// 9:PlusOne->1:One 50678
        Int32 _12Add;// 9:PlusOne->0:Add 50677
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 50675
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 50662
        Int32 _15One;// 10:PlusOne->1:One 50682
        Int32 _16Add;// 10:PlusOne->0:Add 50681
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 50679
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 50658
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _37MatrixIdentity = MatrixIdentity();
    _38Unit = Unit(_37MatrixIdentity);
    _39Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 50714
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 50713
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 50712
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 50718
            Int32 _1Add;// 5:PlusOne->0:Add 50717
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 50715
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _40Map = Map(_38Unit, _39Pass-through: function1);
    _41Flatten = Flatten(_40Map);
    _42MeshIndices = MeshIndices(mesh);
    _43SetMapChannel = SetMapChannel(mesh, channel id, _41Flatten, _42MeshIndices);
    _47Vector3 = Vector3(translation x, translation y, translation z);
    _48TranslationMatrix = TranslationMatrix(_47Vector3);
    _49Vector3 = Vector3(rotation x, rotation y, rotation z);
    _50X = X(_49Vector3);
    _51Unit = Unit(_50X);
    _52Y = Y(_49Vector3);
    _53Append = Append(_51Unit, _52Y);
    _54Z = Z(_49Vector3);
    _55Append = Append(_53Append, _54Z);
    _56Pass-through: function1 = (Single x0) => 
      {
        Single _0ToRadians;// 1:EulerDegreesToRadians.ext->2:ToRadians 50782
        _0ToRadians = ToRadians(x0);
        _0ToRadians;
        };
    _57Map = Map(_55Append, _56Pass-through: function1);
    _58Zero = Zero();
    _59At = At(_57Map, _58Zero);
    _60One = One();
    _61Add = Add(_58Zero, _60One);
    _62At = At(_57Map, _61Add);
    _63One = One();
    _64Add = Add(_61Add, _63One);
    _65At = At(_57Map, _64Add);
    _66Vector3 = Vector3(_59At, _62At, _65At);
    _67Y = Y(_66Vector3);
    _68X = X(_66Vector3);
    _69Z = Z(_66Vector3);
    _70QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_67Y, _68X, _69Z);
    _71MatrixFromQuaternion = MatrixFromQuaternion(_70QuaternionFromYawPitchRoll);
    _72Multiply = Multiply(_48TranslationMatrix, _71MatrixFromQuaternion);
    _73Vector3 = Vector3(scaling x, scaling y, scaling z);
    _74Constant = 0;
    _75Vector3 = Vector3(_74Constant, _74Constant, _74Constant);
    _76ScalingTranslationMatrix = ScalingTranslationMatrix(_73Vector3, _75Vector3);
    _77Multiply = Multiply(_72Multiply, _76ScalingTranslationMatrix);
    _78ParallelMap = ParallelMap(if (_1GreaterThan)
      {
        Func[Matrix, IArray[Matrix]] _44Pass-through: function1;// 0:Pass-through: function1 50637
        IArray[IArray[Matrix]] _45Map;// 3:FlatMap->4:Map 50639
        IArray[Matrix] _46Flatten;// 3:FlatMap->3:Flatten 50638
        _44Pass-through: function1 = (Matrix x0) => 
          {
            IArray[Matrix] _0ArrayOf;// 6:RepeatElements.ext->4:ArrayOf 50640
            _0ArrayOf = ArrayOf(x0, duplicates);
            _0ArrayOf;
            };
        _45Map = Map(_27Map, _44Pass-through: function1);
        _46Flatten = Flatten(_45Map);
        _46Flatten;
        }else
      {
        _27Map;
        }, (Matrix x0) => 
      {
        if (absolute )
          {
            _77Multiply;
            }else
          {
            if (transform  local)
              {
                Matrix _0Multiply;// 3:MatrixApplyOrSetTransform.ext->4:Multiply 50729
                _0Multiply = Multiply(_77Multiply, x0);
                _0Multiply;
                }else
              {
                Matrix _1Multiply;// 3:MatrixApplyOrSetTransform.ext->9:Multiply 50730
                _1Multiply = Multiply(x0, _77Multiply);
                _1Multiply;
                };
            };
        });
    _79Vector3 = Vector3(rand offset  x, rand offset y, rand offset z);
    _80Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 50516
        Vector3 _1Multiply;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->2:Multiply 50514
        Single _2Constant;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->0:Constant 50519
        Vector3 _3MultiplyByScalar;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->11:MultiplyByScalar 50518
        Vector3 _4Subtract;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->10:Subtract 50513
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _79Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_79Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _4Subtract;
        };
    _81One = One();
    _82Add = Add(random seed, _81One);
    _83One = One();
    _84Add = Add(_82Add, _83One);
    _85RandomNumberGenerator = RandomNumberGenerator(_84Add);
    _86Bind = Bind(_80Pass-through: function1, _85RandomNumberGenerator);
    _87Vector3 = Vector3(rand rotation x, rand rotation y, rand rotation z);
    _88Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 50553
        Vector3 _1Multiply;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->2:Multiply 50551
        Single _2Constant;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->0:Constant 50556
        Vector3 _3MultiplyByScalar;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->11:MultiplyByScalar 50555
        Vector3 _4Subtract;// 13:PseudoRandomVectorPlusMinusHalfRange.ext->10:Subtract 50550
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _87Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_87Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _4Subtract;
        };
    _89RandomNumberGenerator = RandomNumberGenerator(_82Add);
    _90Bind = Bind(_88Pass-through: function1, _89RandomNumberGenerator);
    _91Vector3 = Vector3(rand scaling x, rand scaling y, rand scaling z);
    _92FloatOne = FloatOne();
    _93Vector3 = Vector3(_92FloatOne, _92FloatOne, _92FloatOne);
    _94Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 50612
        Vector3 _1Multiply;// 10:PseudoRandomVectorPlusMinusHalfRange.ext->2:Multiply 50610
        Single _2Constant;// 10:PseudoRandomVectorPlusMinusHalfRange.ext->0:Constant 50615
        Vector3 _3MultiplyByScalar;// 10:PseudoRandomVectorPlusMinusHalfRange.ext->11:MultiplyByScalar 50614
        Vector3 _4Subtract;// 10:PseudoRandomVectorPlusMinusHalfRange.ext->10:Subtract 50609
        Vector3 _5Add;// 60:ScaleMatricesRandomly.ext->16:Add 50606
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _91Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_91Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _5Add = Add(_4Subtract, _93Vector3);
        _5Add;
        };
    _95RandomNumberGenerator = RandomNumberGenerator(random seed);
    _96Bind = Bind(_94Pass-through: function1, _95RandomNumberGenerator);
    _97Count = Count(_78ParallelMap);
    _98ArrayOfFunction = ArrayOfFunction(_96Bind, _97Count);
    _99Combine = Combine(_98ArrayOfFunction, _78ParallelMap, (Vector3 x0, Matrix x1) => 
      {
        Single _0Constant;// 8:Origin->0:Constant 50624
        Vector3 _1Vector3;// 8:Origin->1:Vector3 50623
        Matrix _2ScalingTranslationMatrix;// 4:ScalingMatrix.ext->4:ScalingTranslationMatrix 50622
        Matrix _3Multiply;// 60:ScaleMatricesRandomly.ext->9:Multiply 50620
        _0Constant = 0;
        _1Vector3 = Vector3(_0Constant, _0Constant, _0Constant);
        _2ScalingTranslationMatrix = ScalingTranslationMatrix(x0, _1Vector3);
        _3Multiply = Multiply(_2ScalingTranslationMatrix, x1);
        _3Multiply;
        });
    _100Count = Count(_99Combine);
    _101ArrayOfFunction = ArrayOfFunction(_90Bind, _100Count);
    _102Combine = Combine(_101ArrayOfFunction, _99Combine, (Vector3 x0, Matrix x1) => 
      {
        Single _0X;// 1:VectorAsArray->1:X 50592
        IArray[Single] _1Unit;// 4:Array3->2:Unit 50591
        Single _2Y;// 1:VectorAsArray->2:Y 50593
        IArray[Single] _3Append;// 4:Array3->3:Append 50590
        Single _4Z;// 1:VectorAsArray->3:Z 50594
        IArray[Single] _5Append;// 4:Array3->6:Append 50589
        Func[Single, Single] _6Pass-through: function1;// 0:Pass-through: function1 50571
        IArray[Single] _7Map;// 1:VectorMapComponents.ext->2:Map 50584
        Int32 _8Zero;// 3:ArrayToVector.ext->5:Zero 50575
        Single _9At;// 3:ArrayToVector.ext->1:At 50574
        Int32 _10One;// 6:PlusOne->1:One 50579
        Int32 _11Add;// 6:PlusOne->0:Add 50578
        Single _12At;// 3:ArrayToVector.ext->2:At 50576
        Int32 _13One;// 7:PlusOne->1:One 50583
        Int32 _14Add;// 7:PlusOne->0:Add 50582
        Single _15At;// 3:ArrayToVector.ext->3:At 50580
        Vector3 _16Vector3;// 3:ArrayToVector.ext->4:Vector3 50573
        Single _17Y;// 2:QuaternionFromVector3.ext->7:Y 50566
        Single _18X;// 2:QuaternionFromVector3.ext->6:X 50567
        Single _19Z;// 2:QuaternionFromVector3.ext->8:Z 50568
        Quaternion _20QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3.ext->3:QuaternionFromYawPitchRoll 50565
        Matrix _21MatrixFromQuaternion;// 6:EulerDegreesToMatrix.ext->4:MatrixFromQuaternion 50562
        Matrix _22Multiply;// 9:MatrixRotateUsingEuler.ext->5:Multiply 50560
        _0X = X(x0);
        _1Unit = Unit(_0X);
        _2Y = Y(x0);
        _3Append = Append(_1Unit, _2Y);
        _4Z = Z(x0);
        _5Append = Append(_3Append, _4Z);
        _6Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 1:EulerDegreesToRadians.ext->2:ToRadians 50595
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _7Map = Map(_5Append, _6Pass-through: function1);
        _8Zero = Zero();
        _9At = At(_7Map, _8Zero);
        _10One = One();
        _11Add = Add(_8Zero, _10One);
        _12At = At(_7Map, _11Add);
        _13One = One();
        _14Add = Add(_11Add, _13One);
        _15At = At(_7Map, _14Add);
        _16Vector3 = Vector3(_9At, _12At, _15At);
        _17Y = Y(_16Vector3);
        _18X = X(_16Vector3);
        _19Z = Z(_16Vector3);
        _20QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_17Y, _18X, _19Z);
        _21MatrixFromQuaternion = MatrixFromQuaternion(_20QuaternionFromYawPitchRoll);
        _22Multiply = Multiply(_21MatrixFromQuaternion, x1);
        _22Multiply;
        });
    _103Count = Count(_102Combine);
    _104ArrayOfFunction = ArrayOfFunction(_86Bind, _103Count);
    _105True = True();
    _106Combine = Combine(_104ArrayOfFunction, _102Combine, (Vector3 x0, Matrix x1) => 
      {
        Matrix _0TranslationMatrix;// 9:MatrixTranslate.ext->10:TranslationMatrix 50530
        _0TranslationMatrix = TranslationMatrix(x0);
        if (_105True)
          {
            Matrix _1Multiply;// 6:MatrixApplyTransform.ext->4:Multiply 50528
            _1Multiply = Multiply(_0TranslationMatrix, x1);
            _1Multiply;
            }else
          {
            Matrix _2Multiply;// 6:MatrixApplyTransform.ext->9:Multiply 50529
            _2Multiply = Multiply(x1, _0TranslationMatrix);
            _2Multiply;
            };
        });
    _107IgnoreFirst = IgnoreFirst(random seed, _106Combine);
    _108IgnoreFirst = IgnoreFirst(_78ParallelMap, _107IgnoreFirst);
    _109Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows.ext->0:Constant 50487
        IArray[Int32] _1Range;// 3:MatrixRows.ext->1:Range 50486
        IArray[Vector3] _2Map;// 3:MatrixRows.ext->3:Map 50485
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 50491
            Int32 _1Add;// 5:PlusOne->0:Add 50490
            Vector3 _2MatrixRow;// 3:MatrixRows.ext->4:MatrixRow 50488
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _110Map = Map(_108IgnoreFirst, _109Pass-through: function1);
    _111Flatten = Flatten(_110Map);
    _112MeshIndices = MeshIndices(mesh);
    _113SetMapChannel = SetMapChannel(mesh, channel id, _111Flatten, _112MeshIndices);
    _114Constant = 100;
    _115Range = Range(_114Constant);
    _116Two = Two();
    _117Skip = Skip(_115Range, _116Two);
    _118Filter = Filter(_117Skip, (Int32 x0) => 
      {
        Int32 _0Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 50369
        Boolean _1Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 50368
        MapChannel _11Pass-through: any;// 0:Pass-through: any 50360
        Object _12Null;// 6:IsNullFix2.ext->3:Null 50364
        Object _13As;// 6:IsNullFix2.ext->23:As 50362
        Boolean _14Equal;// 6:IsNullFix2.ext->1:Equal 50361
        Boolean _15Not;// 12:MapChannelExists.ext->4:Not 50359
        _0Constant = -3;
        _1Equal = Equal(x0, _0Constant);
        _11Pass-through: any = if (_1Equal)
          {
            MapChannel _9TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 50370
            _9TopologyChannel = TopologyChannel(_113SetMapChannel);
            _9TopologyChannel;
            }else
          {
            MapChannel _10GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 50371
            _10GetMapChannel = GetMapChannel(_113SetMapChannel, x0);
            _10GetMapChannel;
            };
        _12Null = Null();
        _13As = As(_11Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 50363
            _0IgnoreFirst = IgnoreFirst(x0, _12Null);
            _0IgnoreFirst;
            });
        _14Equal = Equal(_13As, _12Null);
        _15Not = Not(_14Equal);
        _15Not;
        });
    _119GetMapChannel = GetMapChannel(_113SetMapChannel, channel id);
    _120MapChannelVertexBuffer = MapChannelVertexBuffer(_119GetMapChannel);
    _121Count = Count(_120MapChannelVertexBuffer);
    _122Constant = 4;
    _123Divide = Divide(_121Count, _122Constant);
    _124Range = Range(_123Divide);
    _125Map = Map(_124Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 50412
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 50411
        _0Multiply = Multiply(_122Constant, x0);
        _1Slice = Slice(_120MapChannelVertexBuffer, _0Multiply, _122Constant);
        _1Slice;
        });
    _126Map = Map(_125Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 50424
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 50425
        Int32 _2Zero;// 6:MatrixFromRows.ext->7:Zero 50429
        Vector3 _3At;// 6:MatrixFromRows.ext->3:At 50428
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 50423
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 50426
        Int32 _6One;// 8:PlusOne->1:One 50433
        Int32 _7Add;// 8:PlusOne->0:Add 50432
        Vector3 _8At;// 6:MatrixFromRows.ext->4:At 50430
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 50422
        Int32 _10Constant;// 25:Three->0:Constant 50427
        Int32 _11One;// 9:PlusOne->1:One 50437
        Int32 _12Add;// 9:PlusOne->0:Add 50436
        Vector3 _13At;// 6:MatrixFromRows.ext->5:At 50434
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 50421
        Int32 _15One;// 10:PlusOne->1:One 50441
        Int32 _16Add;// 10:PlusOne->0:Add 50440
        Vector3 _17At;// 6:MatrixFromRows.ext->6:At 50438
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows.ext->2:SetMatrixTranslation 50417
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _127Constant = 0;
    _128Vector3 = Vector3(_127Constant, _127Constant, _127Constant);
    _129Constant = 2;
    _130Divide = Divide(radius, _129Constant);
    _131Sphere = Sphere(_128Vector3, _130Divide);
    _132BoxFromSphere = BoxFromSphere(_131Sphere);
    _133BoxQuadMesh = BoxQuadMesh(_132BoxFromSphere);
    _134Triangulate = Triangulate(_133BoxQuadMesh);
    _135MeshIndices = MeshIndices(_134Triangulate);
    _136Indices = Indices(_135MeshIndices);
    _137Constant = 6;
    _138Constant = 2;
    _139Constant = 3;
    _140Map = Map(_136Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 7:QuadToTriMesh.ext->14:Modulo 50460
        Boolean _1Equal;// 7:QuadToTriMesh.ext->7:Equal 50459
        Boolean _2Equal;// 7:QuadToTriMesh.ext->13:Equal 50463
        Boolean _3OrElse;// 7:QuadToTriMesh.ext->12:OrElse 50458
        Boolean _4Not;// 7:QuadToTriMesh.ext->10:Not 50457
        _0Modulo = Modulo(x0, _137Constant);
        _1Equal = Equal(_0Modulo, _138Constant);
        _2Equal = Equal(_0Modulo, _139Constant);
        _3OrElse = OrElse(_1Equal, _2Equal);
        _4Not = Not(_3OrElse);
        _4Not;
        });
    _141SetVisibleEdges = SetVisibleEdges(_134Triangulate, _140Map);
    _142Map = Map(_126Map, (Matrix x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 50448
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 50445
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 50447
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 50446
        _0MeshVertices = MeshVertices(_141SetVisibleEdges);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 36:TransformMesh->0:Transform 50449
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(_141SetVisibleEdges, _2Map);
        _3SetMeshVertices;
        });
    _143CombineAllMeshes = CombineAllMeshes(_142Map);
    _144Aggregate = Aggregate(_118Filter, _143CombineAllMeshes, (TriMesh x0, Int32 x1) => 
      {
        TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer.ext->10:TryCatch 50375
        _0TryCatch = TryCatch(() => 
          {
            Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers.ext->7:IgnoreFirst 50397
            Int32 _1Constant;// 5:GetMapChannelOrGeometry.ext->0:Constant 50389
            Boolean _2Equal;// 5:GetMapChannelOrGeometry.ext->4:Equal 50388
            MapChannel _12Pass-through: any;// 0:Pass-through: any 50380
            Object _13Null;// 6:IsNullFix2.ext->3:Null 50384
            Object _14As;// 6:IsNullFix2.ext->23:As 50382
            Boolean _15Equal;// 6:IsNullFix2.ext->1:Equal 50381
            Boolean _16Not;// 5:MapChannelExists.ext->4:Not 50379
            _0IgnoreFirst = IgnoreFirst(x0, x1);
            _1Constant = -3;
            _2Equal = Equal(_0IgnoreFirst, _1Constant);
            _12Pass-through: any = if (_2Equal)
              {
                MapChannel _10TopologyChannel;// 5:GetMapChannelOrGeometry.ext->6:TopologyChannel 50390
                _10TopologyChannel = TopologyChannel(_113SetMapChannel);
                _10TopologyChannel;
                }else
              {
                MapChannel _11GetMapChannel;// 5:GetMapChannelOrGeometry.ext->3:GetMapChannel 50391
                _11GetMapChannel = GetMapChannel(_113SetMapChannel, _0IgnoreFirst);
                _11GetMapChannel;
                };
            _13Null = Null();
            _14As = As(_12Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2.ext->5:IgnoreFirst 50383
                _0IgnoreFirst = IgnoreFirst(x0, _13Null);
                _0IgnoreFirst;
                });
            _15Equal = Equal(_14As, _13Null);
            _16Not = Not(_15Equal);
            if (_16Not)
              {
                MapChannel _17GetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->1:GetMapChannel 50394
                IArray[Vector3] _18MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer.ext->8:MapChannelVertexBuffer 50393
                IArray[Int32] _19MeshIndices;// 10:MapChannelCopyVertexBuffer.ext->0:MeshIndices 50395
                TriMesh _20SetMapChannel;// 10:MapChannelCopyVertexBuffer.ext->7:SetMapChannel 50392
                _17GetMapChannel = GetMapChannel(_113SetMapChannel, _0IgnoreFirst);
                _18MapChannelVertexBuffer = MapChannelVertexBuffer(_17GetMapChannel);
                _19MeshIndices = MeshIndices(x0);
                _20SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _18MapChannelVertexBuffer, _19MeshIndices);
                _20SetMapChannel;
                }else
              {
                x0;
                };
            }, (Exception x0) => 
          {
            TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer.ext->11:IgnoreFirst 50396
            _0IgnoreFirst = IgnoreFirst(x0, x0);
            _0IgnoreFirst;
            });
        _0TryCatch;
        });
    _145IgnoreFirst = IgnoreFirst(_113SetMapChannel, _144Aggregate);
    _145IgnoreFirst;
    }