(InstanceState state, TriMesh mesh, Int32 channel id, Int32 duplicates, Boolean relative, Single translation x, Single translation y, Single translation z, Single rotation x, Single rotation y, Single rotation z, Single scaling x, Single scaling y, Single scaling z, Int32 random seed, Single rand offset  x, Single rand offset y, Single rand offset z, Single rand rotation x, Single rand rotation y, Single rand rotation z, Single rand scaling x, Single rand scaling y, Single rand scaling z, Single radius) => 
  {
    Int32 _0One;// 4:GreaterThanOne-ext->1:One 75105
    Boolean _1GreaterThan;// 4:GreaterThanOne-ext->0:GreaterThan 75104
    Int32 _2Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 75172
    Boolean _3Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 75171
    MapChannel _6Pass-through: any;// 0:Pass-through: any 75163
    Object _7Null;// 6:IsNullFix2-ext->3:Null 75167
    Object _8As;// 6:IsNullFix2-ext->23:As 75165
    Boolean _9Equal;// 6:IsNullFix2-ext->1:Equal 75164
    Boolean _10Not;// 3:MapChannelExists-ext->4:Not 75162
    Boolean _11Not;// 4:IfNot-ext->1:Not 75159
    TriMesh _19Pass-through: TriMesh;// 0:Pass-through: TriMesh 75115
    MapChannel _20GetMapChannel;// 0:MatricesFromMapChannel-ext->9:GetMapChannel 75127
    IArray[Vector3] _21MapChannelVertexBuffer;// 0:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 75126
    Int32 _22Count;// 2:Slices->2:Count 75123
    Int32 _23Constant;// 0:MatricesFromMapChannel-ext->0:Constant 75128
    Int32 _24Divide;// 2:Slices->3:Divide 75122
    IArray[Int32] _25Range;// 2:Slices->4:Range 75121
    IArray[IArray[Vector3]] _26Map;// 2:Slices->5:Map 75120
    IArray[Matrix] _27Map;// 0:MatricesFromMapChannel-ext->5:Map 75117
    Matrix _37MatrixIdentity;// 0:ClonerMatricesOrIdentity-ext->5:MatrixIdentity 75193
    IArray[Matrix] _38Unit;// 0:ClonerMatricesOrIdentity-ext->6:Unit 75192
    Func[Matrix, IArray[Vector3]] _39Pass-through: function1;// 0:Pass-through: function1 75180
    IArray[IArray[Vector3]] _40Map;// 5:FlatMap->4:Map 75182
    IArray[Vector3] _41Flatten;// 5:FlatMap->3:Flatten 75181
    IArray[Int32] _42MeshIndices;// 8:StoreMatricesInMapChannel-ext->0:MeshIndices 75191
    TriMesh _43SetMapChannel;// 8:StoreMatricesInMapChannel-ext->7:SetMapChannel 75178
    Vector3 _47Vector3;// 22:Vector3 75216
    Matrix _48TranslationMatrix;// 18:PositionRotationScaleMatrix-ext->3:TranslationMatrix 75210
    Vector3 _49Vector3;// 31:Vector3 75253
    Single _50X;// 1:VectorAsArray->1:X 75249
    IArray[Single] _51Unit;// 4:Array3->2:Unit 75248
    Single _52Y;// 1:VectorAsArray->2:Y 75250
    IArray[Single] _53Append;// 4:Array3->3:Append 75247
    Single _54Z;// 1:VectorAsArray->3:Z 75251
    IArray[Single] _55Append;// 4:Array3->6:Append 75246
    Func[Single, Single] _56Pass-through: function1;// 0:Pass-through: function1 75228
    IArray[Single] _57Map;// 1:VectorMapComponents-ext->2:Map 75241
    Int32 _58Zero;// 3:ArrayToVector-ext->5:Zero 75232
    Single _59At;// 3:ArrayToVector-ext->1:At 75231
    Int32 _60One;// 6:PlusOne->1:One 75236
    Int32 _61Add;// 6:PlusOne->0:Add 75235
    Single _62At;// 3:ArrayToVector-ext->2:At 75233
    Int32 _63One;// 7:PlusOne->1:One 75240
    Int32 _64Add;// 7:PlusOne->0:Add 75239
    Single _65At;// 3:ArrayToVector-ext->3:At 75237
    Vector3 _66Vector3;// 3:ArrayToVector-ext->4:Vector3 75230
    Single _67Y;// 2:QuaternionFromVector3-ext->7:Y 75223
    Single _68X;// 2:QuaternionFromVector3-ext->6:X 75224
    Single _69Z;// 2:QuaternionFromVector3-ext->8:Z 75225
    Quaternion _70QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 75222
    Matrix _71MatrixFromQuaternion;// 18:PositionRotationScaleMatrix-ext->4:MatrixFromQuaternion 75211
    Matrix _72Multiply;// 6:Multiply3-ext->3:Multiply 75209
    Vector3 _73Vector3;// 36:Vector3 75257
    Single _74Constant;// 8:Origin->0:Constant 75215
    Vector3 _75Vector3;// 8:Origin->1:Vector3 75214
    Matrix _76ScalingTranslationMatrix;// 5:ScalingMatrix-ext->4:ScalingTranslationMatrix 75213
    Matrix _77Multiply;// 6:Multiply3-ext->4:Multiply 75208
    IArray[Matrix] _78ParallelMap;// 2:ParallelMap 75098
    Vector3 _79Vector3;// 48:Vector3 75262
    Func[Random, Vector3] _80Pass-through: function1;// 0:Pass-through: function1 74978
    Int32 _81One;// 3:PlusOne->1:One 75010
    Int32 _82Add;// 3:PlusOne->0:Add 75009
    Int32 _83One;// 4:PlusOne->1:One 75007
    Int32 _84Add;// 4:PlusOne->0:Add 75006
    Random _85RandomNumberGenerator;// 14:MatricesRandomize-ext->1:RandomNumberGenerator 75004
    Func[Vector3] _86Bind;// 6:RandomArray-ext->4:Bind 74982
    Vector3 _87Vector3;// 55:Vector3 75266
    Func[Random, Vector3] _88Pass-through: function1;// 0:Pass-through: function1 75015
    Random _89RandomNumberGenerator;// 14:MatricesRandomize-ext->0:RandomNumberGenerator 75068
    Func[Vector3] _90Bind;// 6:RandomArray-ext->4:Bind 75019
    Vector3 _91Vector3;// 44:Vector3 75270
    Single _92FloatOne;// 14:VectorUnit-ext->2:FloatOne 75090
    Vector3 _93Vector3;// 1:ScalarToVector-ext->1:Vector3 75089
    Func[Random, Vector3] _94Pass-through: function1;// 0:Pass-through: function1 75073
    Random _95RandomNumberGenerator;// 14:MatricesRandomize-ext->57:RandomNumberGenerator 75097
    Func[Vector3] _96Bind;// 6:RandomArray-ext->4:Bind 75077
    Int32 _97Count;// 60:ScaleMatricesRandomly-ext->7:Count 75091
    IArray[Vector3] _98ArrayOfFunction;// 6:RandomArray-ext->5:ArrayOfFunction 75076
    IArray[Matrix] _99Combine;// 60:ScaleMatricesRandomly-ext->8:Combine 75072
    Int32 _100Count;// 30:RotateMatricesRandomly-ext->7:Count 75029
    IArray[Vector3] _101ArrayOfFunction;// 6:RandomArray-ext->5:ArrayOfFunction 75018
    IArray[Matrix] _102Combine;// 30:RotateMatricesRandomly-ext->8:Combine 75014
    Int32 _103Count;// 31:TranslateMatricesRandomly-ext->7:Count 74992
    IArray[Vector3] _104ArrayOfFunction;// 6:RandomArray-ext->5:ArrayOfFunction 74981
    Boolean _105True;// 31:TranslateMatricesRandomly-ext->10:True 75003
    IArray[Matrix] _106Combine;// 31:TranslateMatricesRandomly-ext->8:Combine 74977
    IArray[Matrix] _107IgnoreFirst;// 14:MatricesRandomize-ext->10:IgnoreFirst 74973
    IArray[Matrix] _108IgnoreFirst;// 14:MatricesRandomize-ext->11:IgnoreFirst 74972
    Func[Matrix, IArray[Vector3]] _109Pass-through: function1;// 0:Pass-through: function1 74953
    IArray[IArray[Vector3]] _110Map;// 5:FlatMap->4:Map 74955
    IArray[Vector3] _111Flatten;// 5:FlatMap->3:Flatten 74954
    IArray[Int32] _112MeshIndices;// 60:StoreMatricesInMapChannel-ext->0:MeshIndices 74964
    TriMesh _113SetMapChannel;// 60:StoreMatricesInMapChannel-ext->7:SetMapChannel 74951
    Int32 _114Constant;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->0:Constant 74827
    IArray[Int32] _115Range;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->1:Range 74826
    Int32 _116Two;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->4:Two 74828
    IArray[Int32] _117Skip;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->3:Skip 74825
    IArray[Int32] _118Filter;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->13:Filter 74824
    MapChannel _119GetMapChannel;// 34:MatricesFromMapChannel-ext->9:GetMapChannel 74886
    IArray[Vector3] _120MapChannelVertexBuffer;// 34:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 74885
    Int32 _121Count;// 2:Slices->2:Count 74882
    Int32 _122Constant;// 34:MatricesFromMapChannel-ext->0:Constant 74887
    Int32 _123Divide;// 2:Slices->3:Divide 74881
    IArray[Int32] _124Range;// 2:Slices->4:Range 74880
    IArray[IArray[Vector3]] _125Map;// 2:Slices->5:Map 74879
    IArray[Matrix] _126Map;// 34:MatricesFromMapChannel-ext->5:Map 74876
    Single _127Constant;// 1:Origin->0:Constant 74944
    Vector3 _128Vector3;// 1:Origin->1:Vector3 74943
    Single _129Constant;// 3:DivideByTwoFloat->0:Constant 74947
    Single _130Divide;// 3:DivideByTwoFloat->2:Divide 74946
    BoundingSphere _131Sphere;// 0:BoxFromPointAndRadius->3:Sphere 74942
    BoundingBox _132BoxFromSphere;// 0:BoxFromPointAndRadius->0:BoxFromSphere 74941
    QuadMesh _133BoxQuadMesh;// 3:CubeMesh-ext->5:BoxQuadMesh 74937
    TriMesh _134Triangulate;// 7:QuadToTriMesh-ext->4:Triangulate 74925
    IArray[Int32] _135MeshIndices;// 7:QuadToTriMesh-ext->3:MeshIndices 74928
    IArray[Int32] _136Indices;// 7:QuadToTriMesh-ext->8:Indices 74927
    Int32 _137Constant;// 7:QuadToTriMesh-ext->0:Constant 74933
    Int32 _138Constant;// 7:QuadToTriMesh-ext->0:Constant 74934
    Int32 _139Constant;// 7:QuadToTriMesh-ext->0:Constant 74936
    IArray[Boolean] _140Map;// 7:QuadToTriMesh-ext->5:Map 74926
    TriMesh _141SetVisibleEdges;// 7:QuadToTriMesh-ext->9:SetVisibleEdges 74924
    IArray[TriMesh] _142Map;// 23:ClonerMeshAsBoxes-ext->16:Map 74873
    TriMesh _143CombineAllMeshes;// 23:ClonerMeshAsBoxes-ext->2:CombineAllMeshes 74872
    TriMesh _144Aggregate;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->6:Aggregate 74823
    TriMesh _145IgnoreFirst;// 23:ClonerMeshAsBoxes-ext->7:IgnoreFirst 74820
    _0One = One();
    _1GreaterThan = GreaterThan(duplicates, _0One);
    _2Constant = -3;
    _3Equal = Equal(channel id, _2Constant);
    _6Pass-through: any = if (_3Equal)
      {
        MapChannel _4TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 75173
        _4TopologyChannel = TopologyChannel(mesh);
        _4TopologyChannel;
        }else
      {
        MapChannel _5GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 75174
        _5GetMapChannel = GetMapChannel(mesh, channel id);
        _5GetMapChannel;
        };
    _7Null = Null();
    _8As = As(_6Pass-through: any, (Object x0) => 
      {
        Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 75166
        _0IgnoreFirst = IgnoreFirst(x0, _7Null);
        _0IgnoreFirst;
        });
    _9Equal = Equal(_8As, _7Null);
    _10Not = Not(_9Equal);
    _11Not = Not(_10Not);
    _19Pass-through: TriMesh = if (_11Not)
      {
        Matrix _12MatrixIdentity;// 0:ClonerMatricesOrIdentity-ext->5:MatrixIdentity 75193
        IArray[Matrix] _13Unit;// 0:ClonerMatricesOrIdentity-ext->6:Unit 75192
        Func[Matrix, IArray[Vector3]] _14Pass-through: function1;// 0:Pass-through: function1 75180
        IArray[IArray[Vector3]] _15Map;// 5:FlatMap->4:Map 75182
        IArray[Vector3] _16Flatten;// 5:FlatMap->3:Flatten 75181
        IArray[Int32] _17MeshIndices;// 8:StoreMatricesInMapChannel-ext->0:MeshIndices 75191
        TriMesh _18SetMapChannel;// 8:StoreMatricesInMapChannel-ext->7:SetMapChannel 75178
        _12MatrixIdentity = MatrixIdentity();
        _13Unit = Unit(_12MatrixIdentity);
        _14Pass-through: function1 = (Matrix x0) => 
          {
            Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 75186
            IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 75185
            IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 75184
            _0Constant = 4;
            _1Range = Range(_0Constant);
            _2Map = Map(_1Range, (Int32 x0) => 
              {
                Int32 _0One;// 5:PlusOne->1:One 75190
                Int32 _1Add;// 5:PlusOne->0:Add 75189
                Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 75187
                _0One = One();
                _1Add = Add(x0, _0One);
                _2MatrixRow = MatrixRow(_1Add, x0);
                _2MatrixRow;
                });
            _2Map;
            };
        _15Map = Map(_13Unit, _14Pass-through: function1);
        _16Flatten = Flatten(_15Map);
        _17MeshIndices = MeshIndices(mesh);
        _18SetMapChannel = SetMapChannel(mesh, channel id, _16Flatten, _17MeshIndices);
        _18SetMapChannel;
        }else
      {
        mesh;
        };
    _20GetMapChannel = GetMapChannel(_19Pass-through: TriMesh, channel id);
    _21MapChannelVertexBuffer = MapChannelVertexBuffer(_20GetMapChannel);
    _22Count = Count(_21MapChannelVertexBuffer);
    _23Constant = 4;
    _24Divide = Divide(_22Count, _23Constant);
    _25Range = Range(_24Divide);
    _26Map = Map(_25Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 75125
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 75124
        _0Multiply = Multiply(_23Constant, x0);
        _1Slice = Slice(_21MapChannelVertexBuffer, _0Multiply, _23Constant);
        _1Slice;
        });
    _27Map = Map(_26Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 75137
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 75138
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 75142
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 75141
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 75136
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 75139
        Int32 _6One;// 8:PlusOne->1:One 75146
        Int32 _7Add;// 8:PlusOne->0:Add 75145
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 75143
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 75135
        Int32 _10Constant;// 25:Three->0:Constant 75140
        Int32 _11One;// 9:PlusOne->1:One 75150
        Int32 _12Add;// 9:PlusOne->0:Add 75149
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 75147
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 75134
        Int32 _15One;// 10:PlusOne->1:One 75154
        Int32 _16Add;// 10:PlusOne->0:Add 75153
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 75151
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 75130
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _37MatrixIdentity = MatrixIdentity();
    _38Unit = Unit(_37MatrixIdentity);
    _39Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 75186
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 75185
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 75184
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 75190
            Int32 _1Add;// 5:PlusOne->0:Add 75189
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 75187
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _40Map = Map(_38Unit, _39Pass-through: function1);
    _41Flatten = Flatten(_40Map);
    _42MeshIndices = MeshIndices(mesh);
    _43SetMapChannel = SetMapChannel(mesh, channel id, _41Flatten, _42MeshIndices);
    _47Vector3 = Vector3(translation x, translation y, translation z);
    _48TranslationMatrix = TranslationMatrix(_47Vector3);
    _49Vector3 = Vector3(rotation x, rotation y, rotation z);
    _50X = X(_49Vector3);
    _51Unit = Unit(_50X);
    _52Y = Y(_49Vector3);
    _53Append = Append(_51Unit, _52Y);
    _54Z = Z(_49Vector3);
    _55Append = Append(_53Append, _54Z);
    _56Pass-through: function1 = (Single x0) => 
      {
        Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 75252
        _0ToRadians = ToRadians(x0);
        _0ToRadians;
        };
    _57Map = Map(_55Append, _56Pass-through: function1);
    _58Zero = Zero();
    _59At = At(_57Map, _58Zero);
    _60One = One();
    _61Add = Add(_58Zero, _60One);
    _62At = At(_57Map, _61Add);
    _63One = One();
    _64Add = Add(_61Add, _63One);
    _65At = At(_57Map, _64Add);
    _66Vector3 = Vector3(_59At, _62At, _65At);
    _67Y = Y(_66Vector3);
    _68X = X(_66Vector3);
    _69Z = Z(_66Vector3);
    _70QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_67Y, _68X, _69Z);
    _71MatrixFromQuaternion = MatrixFromQuaternion(_70QuaternionFromYawPitchRoll);
    _72Multiply = Multiply(_48TranslationMatrix, _71MatrixFromQuaternion);
    _73Vector3 = Vector3(scaling x, scaling y, scaling z);
    _74Constant = 0;
    _75Vector3 = Vector3(_74Constant, _74Constant, _74Constant);
    _76ScalingTranslationMatrix = ScalingTranslationMatrix(_73Vector3, _75Vector3);
    _77Multiply = Multiply(_72Multiply, _76ScalingTranslationMatrix);
    _78ParallelMap = ParallelMap(if (_1GreaterThan)
      {
        Func[Matrix, IArray[Matrix]] _44Pass-through: function1;// 0:Pass-through: function1 75109
        IArray[IArray[Matrix]] _45Map;// 3:FlatMap->4:Map 75111
        IArray[Matrix] _46Flatten;// 3:FlatMap->3:Flatten 75110
        _44Pass-through: function1 = (Matrix x0) => 
          {
            IArray[Matrix] _0ArrayOf;// 6:RepeatElements-ext->4:ArrayOf 75112
            _0ArrayOf = ArrayOf(x0, duplicates);
            _0ArrayOf;
            };
        _45Map = Map(_27Map, _44Pass-through: function1);
        _46Flatten = Flatten(_45Map);
        _46Flatten;
        }else
      {
        _27Map;
        }, (Matrix x0) => 
      {
        if (relative)
          {
            Matrix _0Multiply;// 9:MatrixApplyTransform-ext->4:Multiply 75199
            _0Multiply = Multiply(_77Multiply, x0);
            _0Multiply;
            }else
          {
            Matrix _1Multiply;// 9:MatrixApplyTransform-ext->9:Multiply 75200
            _1Multiply = Multiply(x0, _77Multiply);
            _1Multiply;
            };
        });
    _79Vector3 = Vector3(rand offset  x, rand offset y, rand offset z);
    _80Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 74988
        Vector3 _1Multiply;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->2:Multiply 74986
        Single _2Constant;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->0:Constant 74991
        Vector3 _3MultiplyByScalar;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->11:MultiplyByScalar 74990
        Vector3 _4Subtract;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->10:Subtract 74985
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _79Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_79Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _4Subtract;
        };
    _81One = One();
    _82Add = Add(random seed, _81One);
    _83One = One();
    _84Add = Add(_82Add, _83One);
    _85RandomNumberGenerator = RandomNumberGenerator(_84Add);
    _86Bind = Bind(_80Pass-through: function1, _85RandomNumberGenerator);
    _87Vector3 = Vector3(rand rotation x, rand rotation y, rand rotation z);
    _88Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 75025
        Vector3 _1Multiply;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->2:Multiply 75023
        Single _2Constant;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->0:Constant 75028
        Vector3 _3MultiplyByScalar;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->11:MultiplyByScalar 75027
        Vector3 _4Subtract;// 13:PseudoRandomVectorPlusMinusHalfRange-ext->10:Subtract 75022
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _87Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_87Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _4Subtract;
        };
    _89RandomNumberGenerator = RandomNumberGenerator(_82Add);
    _90Bind = Bind(_88Pass-through: function1, _89RandomNumberGenerator);
    _91Vector3 = Vector3(rand scaling x, rand scaling y, rand scaling z);
    _92FloatOne = FloatOne();
    _93Vector3 = Vector3(_92FloatOne, _92FloatOne, _92FloatOne);
    _94Pass-through: function1 = (Random x0) => 
      {
        Vector3 _0Vector3;// 4:PseudoRandomVector->1:Vector3 75084
        Vector3 _1Multiply;// 10:PseudoRandomVectorPlusMinusHalfRange-ext->2:Multiply 75082
        Single _2Constant;// 10:PseudoRandomVectorPlusMinusHalfRange-ext->0:Constant 75087
        Vector3 _3MultiplyByScalar;// 10:PseudoRandomVectorPlusMinusHalfRange-ext->11:MultiplyByScalar 75086
        Vector3 _4Subtract;// 10:PseudoRandomVectorPlusMinusHalfRange-ext->10:Subtract 75081
        Vector3 _5Add;// 60:ScaleMatricesRandomly-ext->16:Add 75078
        _0Vector3 = Vector3(PseudoRandomFloat(x0), PseudoRandomFloat(x0), PseudoRandomFloat(x0));
        _1Multiply = Multiply(_0Vector3, _91Vector3);
        _2Constant = 0.5;
        _3MultiplyByScalar = MultiplyByScalar(_91Vector3, _2Constant);
        _4Subtract = Subtract(_1Multiply, _3MultiplyByScalar);
        _5Add = Add(_4Subtract, _93Vector3);
        _5Add;
        };
    _95RandomNumberGenerator = RandomNumberGenerator(random seed);
    _96Bind = Bind(_94Pass-through: function1, _95RandomNumberGenerator);
    _97Count = Count(_78ParallelMap);
    _98ArrayOfFunction = ArrayOfFunction(_96Bind, _97Count);
    _99Combine = Combine(_98ArrayOfFunction, _78ParallelMap, (Vector3 x0, Matrix x1) => 
      {
        Single _0Constant;// 8:Origin->0:Constant 75096
        Vector3 _1Vector3;// 8:Origin->1:Vector3 75095
        Matrix _2ScalingTranslationMatrix;// 4:ScalingMatrix-ext->4:ScalingTranslationMatrix 75094
        Matrix _3Multiply;// 60:ScaleMatricesRandomly-ext->9:Multiply 75092
        _0Constant = 0;
        _1Vector3 = Vector3(_0Constant, _0Constant, _0Constant);
        _2ScalingTranslationMatrix = ScalingTranslationMatrix(x0, _1Vector3);
        _3Multiply = Multiply(_2ScalingTranslationMatrix, x1);
        _3Multiply;
        });
    _100Count = Count(_99Combine);
    _101ArrayOfFunction = ArrayOfFunction(_90Bind, _100Count);
    _102Combine = Combine(_101ArrayOfFunction, _99Combine, (Vector3 x0, Matrix x1) => 
      {
        Single _0X;// 1:VectorAsArray->1:X 75064
        IArray[Single] _1Unit;// 4:Array3->2:Unit 75063
        Single _2Y;// 1:VectorAsArray->2:Y 75065
        IArray[Single] _3Append;// 4:Array3->3:Append 75062
        Single _4Z;// 1:VectorAsArray->3:Z 75066
        IArray[Single] _5Append;// 4:Array3->6:Append 75061
        Func[Single, Single] _6Pass-through: function1;// 0:Pass-through: function1 75043
        IArray[Single] _7Map;// 1:VectorMapComponents-ext->2:Map 75056
        Int32 _8Zero;// 3:ArrayToVector-ext->5:Zero 75047
        Single _9At;// 3:ArrayToVector-ext->1:At 75046
        Int32 _10One;// 6:PlusOne->1:One 75051
        Int32 _11Add;// 6:PlusOne->0:Add 75050
        Single _12At;// 3:ArrayToVector-ext->2:At 75048
        Int32 _13One;// 7:PlusOne->1:One 75055
        Int32 _14Add;// 7:PlusOne->0:Add 75054
        Single _15At;// 3:ArrayToVector-ext->3:At 75052
        Vector3 _16Vector3;// 3:ArrayToVector-ext->4:Vector3 75045
        Single _17Y;// 2:QuaternionFromVector3-ext->7:Y 75038
        Single _18X;// 2:QuaternionFromVector3-ext->6:X 75039
        Single _19Z;// 2:QuaternionFromVector3-ext->8:Z 75040
        Quaternion _20QuaternionFromYawPitchRoll;// 2:QuaternionFromVector3-ext->3:QuaternionFromYawPitchRoll 75037
        Matrix _21MatrixFromQuaternion;// 6:EulerDegreesToMatrix-ext->4:MatrixFromQuaternion 75034
        Matrix _22Multiply;// 9:MatrixRotateUsingEuler-ext->5:Multiply 75032
        _0X = X(x0);
        _1Unit = Unit(_0X);
        _2Y = Y(x0);
        _3Append = Append(_1Unit, _2Y);
        _4Z = Z(x0);
        _5Append = Append(_3Append, _4Z);
        _6Pass-through: function1 = (Single x0) => 
          {
            Single _0ToRadians;// 1:EulerDegreesToRadians-ext->2:ToRadians 75067
            _0ToRadians = ToRadians(x0);
            _0ToRadians;
            };
        _7Map = Map(_5Append, _6Pass-through: function1);
        _8Zero = Zero();
        _9At = At(_7Map, _8Zero);
        _10One = One();
        _11Add = Add(_8Zero, _10One);
        _12At = At(_7Map, _11Add);
        _13One = One();
        _14Add = Add(_11Add, _13One);
        _15At = At(_7Map, _14Add);
        _16Vector3 = Vector3(_9At, _12At, _15At);
        _17Y = Y(_16Vector3);
        _18X = X(_16Vector3);
        _19Z = Z(_16Vector3);
        _20QuaternionFromYawPitchRoll = QuaternionFromYawPitchRoll(_17Y, _18X, _19Z);
        _21MatrixFromQuaternion = MatrixFromQuaternion(_20QuaternionFromYawPitchRoll);
        _22Multiply = Multiply(_21MatrixFromQuaternion, x1);
        _22Multiply;
        });
    _103Count = Count(_102Combine);
    _104ArrayOfFunction = ArrayOfFunction(_86Bind, _103Count);
    _105True = True();
    _106Combine = Combine(_104ArrayOfFunction, _102Combine, (Vector3 x0, Matrix x1) => 
      {
        Matrix _0TranslationMatrix;// 9:MatrixTranslate-ext->10:TranslationMatrix 75002
        _0TranslationMatrix = TranslationMatrix(x0);
        if (_105True)
          {
            Matrix _1Multiply;// 6:MatrixApplyTransform-ext->4:Multiply 75000
            _1Multiply = Multiply(_0TranslationMatrix, x1);
            _1Multiply;
            }else
          {
            Matrix _2Multiply;// 6:MatrixApplyTransform-ext->9:Multiply 75001
            _2Multiply = Multiply(x1, _0TranslationMatrix);
            _2Multiply;
            };
        });
    _107IgnoreFirst = IgnoreFirst(random seed, _106Combine);
    _108IgnoreFirst = IgnoreFirst(_78ParallelMap, _107IgnoreFirst);
    _109Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 74959
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 74958
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 74957
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 74963
            Int32 _1Add;// 5:PlusOne->0:Add 74962
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 74960
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _110Map = Map(_108IgnoreFirst, _109Pass-through: function1);
    _111Flatten = Flatten(_110Map);
    _112MeshIndices = MeshIndices(mesh);
    _113SetMapChannel = SetMapChannel(mesh, channel id, _111Flatten, _112MeshIndices);
    _114Constant = 100;
    _115Range = Range(_114Constant);
    _116Two = Two();
    _117Skip = Skip(_115Range, _116Two);
    _118Filter = Filter(_117Skip, (Int32 x0) => 
      {
        Int32 _0Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 74841
        Boolean _1Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 74840
        MapChannel _11Pass-through: any;// 0:Pass-through: any 74832
        Object _12Null;// 6:IsNullFix2-ext->3:Null 74836
        Object _13As;// 6:IsNullFix2-ext->23:As 74834
        Boolean _14Equal;// 6:IsNullFix2-ext->1:Equal 74833
        Boolean _15Not;// 12:MapChannelExists-ext->4:Not 74831
        _0Constant = -3;
        _1Equal = Equal(x0, _0Constant);
        _11Pass-through: any = if (_1Equal)
          {
            MapChannel _9TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 74842
            _9TopologyChannel = TopologyChannel(_113SetMapChannel);
            _9TopologyChannel;
            }else
          {
            MapChannel _10GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 74843
            _10GetMapChannel = GetMapChannel(_113SetMapChannel, x0);
            _10GetMapChannel;
            };
        _12Null = Null();
        _13As = As(_11Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 74835
            _0IgnoreFirst = IgnoreFirst(x0, _12Null);
            _0IgnoreFirst;
            });
        _14Equal = Equal(_13As, _12Null);
        _15Not = Not(_14Equal);
        _15Not;
        });
    _119GetMapChannel = GetMapChannel(_113SetMapChannel, channel id);
    _120MapChannelVertexBuffer = MapChannelVertexBuffer(_119GetMapChannel);
    _121Count = Count(_120MapChannelVertexBuffer);
    _122Constant = 4;
    _123Divide = Divide(_121Count, _122Constant);
    _124Range = Range(_123Divide);
    _125Map = Map(_124Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 74884
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 74883
        _0Multiply = Multiply(_122Constant, x0);
        _1Slice = Slice(_120MapChannelVertexBuffer, _0Multiply, _122Constant);
        _1Slice;
        });
    _126Map = Map(_125Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 74896
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 74897
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 74901
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 74900
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 74895
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 74898
        Int32 _6One;// 8:PlusOne->1:One 74905
        Int32 _7Add;// 8:PlusOne->0:Add 74904
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 74902
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 74894
        Int32 _10Constant;// 25:Three->0:Constant 74899
        Int32 _11One;// 9:PlusOne->1:One 74909
        Int32 _12Add;// 9:PlusOne->0:Add 74908
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 74906
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 74893
        Int32 _15One;// 10:PlusOne->1:One 74913
        Int32 _16Add;// 10:PlusOne->0:Add 74912
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 74910
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 74889
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _127Constant = 0;
    _128Vector3 = Vector3(_127Constant, _127Constant, _127Constant);
    _129Constant = 2;
    _130Divide = Divide(radius, _129Constant);
    _131Sphere = Sphere(_128Vector3, _130Divide);
    _132BoxFromSphere = BoxFromSphere(_131Sphere);
    _133BoxQuadMesh = BoxQuadMesh(_132BoxFromSphere);
    _134Triangulate = Triangulate(_133BoxQuadMesh);
    _135MeshIndices = MeshIndices(_134Triangulate);
    _136Indices = Indices(_135MeshIndices);
    _137Constant = 6;
    _138Constant = 2;
    _139Constant = 3;
    _140Map = Map(_136Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 7:QuadToTriMesh-ext->14:Modulo 74932
        Boolean _1Equal;// 7:QuadToTriMesh-ext->7:Equal 74931
        Boolean _2Equal;// 7:QuadToTriMesh-ext->13:Equal 74935
        Boolean _3OrElse;// 7:QuadToTriMesh-ext->12:OrElse 74930
        Boolean _4Not;// 7:QuadToTriMesh-ext->10:Not 74929
        _0Modulo = Modulo(x0, _137Constant);
        _1Equal = Equal(_0Modulo, _138Constant);
        _2Equal = Equal(_0Modulo, _139Constant);
        _3OrElse = OrElse(_1Equal, _2Equal);
        _4Not = Not(_3OrElse);
        _4Not;
        });
    _141SetVisibleEdges = SetVisibleEdges(_134Triangulate, _140Map);
    _142Map = Map(_126Map, (Matrix x0) => 
      {
        IArray[Vector3] _0MeshVertices;// 2:DeformMeshPoints->0:MeshVertices 74920
        Func[Vector3, Vector3] _1Pass-through: function1;// 0:Pass-through: function1 74917
        IArray[Vector3] _2Map;// 2:DeformMeshPoints->1:Map 74919
        TriMesh _3SetMeshVertices;// 2:DeformMeshPoints->4:SetMeshVertices 74918
        _0MeshVertices = MeshVertices(_141SetVisibleEdges);
        _1Pass-through: function1 = (Vector3 x0) => 
          {
            Vector3 _0Transform;// 36:TransformMesh->0:Transform 74921
            _0Transform = Transform(x0, x0);
            _0Transform;
            };
        _2Map = Map(_0MeshVertices, _1Pass-through: function1);
        _3SetMeshVertices = SetMeshVertices(_141SetVisibleEdges, _2Map);
        _3SetMeshVertices;
        });
    _143CombineAllMeshes = CombineAllMeshes(_142Map);
    _144Aggregate = Aggregate(_118Filter, _143CombineAllMeshes, (TriMesh x0, Int32 x1) => 
      {
        TriMesh _0TryCatch;// 10:MapChannelCopyVertexBuffer-ext->10:TryCatch 74847
        _0TryCatch = TryCatch(() => 
          {
            Int32 _0IgnoreFirst;// 41:MeshCopyCustomMapChannelVertexBuffers-ext->7:IgnoreFirst 74869
            Int32 _1Constant;// 5:GetMapChannelOrGeometry-ext->0:Constant 74861
            Boolean _2Equal;// 5:GetMapChannelOrGeometry-ext->4:Equal 74860
            MapChannel _12Pass-through: any;// 0:Pass-through: any 74852
            Object _13Null;// 6:IsNullFix2-ext->3:Null 74856
            Object _14As;// 6:IsNullFix2-ext->23:As 74854
            Boolean _15Equal;// 6:IsNullFix2-ext->1:Equal 74853
            Boolean _16Not;// 5:MapChannelExists-ext->4:Not 74851
            _0IgnoreFirst = IgnoreFirst(x0, x1);
            _1Constant = -3;
            _2Equal = Equal(_0IgnoreFirst, _1Constant);
            _12Pass-through: any = if (_2Equal)
              {
                MapChannel _10TopologyChannel;// 5:GetMapChannelOrGeometry-ext->6:TopologyChannel 74862
                _10TopologyChannel = TopologyChannel(_113SetMapChannel);
                _10TopologyChannel;
                }else
              {
                MapChannel _11GetMapChannel;// 5:GetMapChannelOrGeometry-ext->3:GetMapChannel 74863
                _11GetMapChannel = GetMapChannel(_113SetMapChannel, _0IgnoreFirst);
                _11GetMapChannel;
                };
            _13Null = Null();
            _14As = As(_12Pass-through: any, (Object x0) => 
              {
                Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 74855
                _0IgnoreFirst = IgnoreFirst(x0, _13Null);
                _0IgnoreFirst;
                });
            _15Equal = Equal(_14As, _13Null);
            _16Not = Not(_15Equal);
            if (_16Not)
              {
                MapChannel _17GetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->1:GetMapChannel 74866
                IArray[Vector3] _18MapChannelVertexBuffer;// 10:MapChannelCopyVertexBuffer-ext->8:MapChannelVertexBuffer 74865
                IArray[Int32] _19MeshIndices;// 10:MapChannelCopyVertexBuffer-ext->0:MeshIndices 74867
                TriMesh _20SetMapChannel;// 10:MapChannelCopyVertexBuffer-ext->7:SetMapChannel 74864
                _17GetMapChannel = GetMapChannel(_113SetMapChannel, _0IgnoreFirst);
                _18MapChannelVertexBuffer = MapChannelVertexBuffer(_17GetMapChannel);
                _19MeshIndices = MeshIndices(x0);
                _20SetMapChannel = SetMapChannel(x0, _0IgnoreFirst, _18MapChannelVertexBuffer, _19MeshIndices);
                _20SetMapChannel;
                }else
              {
                x0;
                };
            }, (Exception x0) => 
          {
            TriMesh _0IgnoreFirst;// 10:MapChannelCopyVertexBuffer-ext->11:IgnoreFirst 74868
            _0IgnoreFirst = IgnoreFirst(x0, x0);
            _0IgnoreFirst;
            });
        _0TryCatch;
        });
    _145IgnoreFirst = IgnoreFirst(_113SetMapChannel, _144Aggregate);
    _145IgnoreFirst;
    }