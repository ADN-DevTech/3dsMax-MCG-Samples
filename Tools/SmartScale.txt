(InstanceState state, TriMesh mesh, Boolean Affect both sides, Int32 axis, Single Center Protection, Single Offset, Boolean Weight distance) => 
  {
    IArray[Vector3] _0MeshVertices;// 10:MeshDeformPoints-ext->0:MeshVertices 110486
    IArray[Vector3] _1MeshVertices;// 6:PlaneAtMeshCenter-ext->6:MeshVertices 110506
    BoundingBox _2BoxFromPoints;// 6:PlaneAtMeshCenter-ext->7:BoxFromPoints 110505
    BoundingSphere _3SphereFromBox;// 8:BoundingBoxCenter->2:SphereFromBox 110504
    Vector3 _4SphereCenter;// 8:BoundingBoxCenter->3:SphereCenter 110503
    Int32 _5Zero;// 7:AxisChoose-ext->9:Zero 110510
    Boolean _6GreaterThanOrEqual;// 7:AxisChoose-ext->8:GreaterThanOrEqual 110509
    Vector3 _7XAxis;// 7:AxisChoose-ext->3:XAxis 110518
    IArray[Vector3] _8Unit;// 2:Array3->2:Unit 110517
    Vector3 _9YAxis;// 7:AxisChoose-ext->4:YAxis 110519
    IArray[Vector3] _10Append;// 2:Array3->3:Append 110516
    Vector3 _11ZAxis;// 7:AxisChoose-ext->5:ZAxis 110520
    IArray[Vector3] _12Append;// 2:Array3->6:Append 110515
    Vector3 _19Pass-through: Vector3;// 0:Pass-through: Vector3 110499
    Ray _20Ray;// 6:PlaneAtMeshCenter-ext->28:Ray 110501
    Plane _21Plane;// 6:PlaneAtMeshCenter-ext->27:Plane 110500
    Single _22Constant;// 23:DivideByTwoFloat->0:Constant 110541
    Single _23Divide;// 23:DivideByTwoFloat->2:Divide 110540
    Func[Vector3, Vector3] _24Pass-through: function1;// 0:Pass-through: function1 110483
    IArray[Vector3] _25Map;// 10:MeshDeformPoints-ext->1:Map 110485
    TriMesh _26SetMeshVertices;// 10:MeshDeformPoints-ext->4:SetMeshVertices 110484
    _0MeshVertices = MeshVertices(mesh);
    _1MeshVertices = MeshVertices(mesh);
    _2BoxFromPoints = BoxFromPoints(_1MeshVertices);
    _3SphereFromBox = SphereFromBox(_2BoxFromPoints);
    _4SphereCenter = SphereCenter(_3SphereFromBox);
    _5Zero = Zero();
    _6GreaterThanOrEqual = GreaterThanOrEqual(axis, _5Zero);
    _7XAxis = XAxis();
    _8Unit = Unit(_7XAxis);
    _9YAxis = YAxis();
    _10Append = Append(_8Unit, _9YAxis);
    _11ZAxis = ZAxis();
    _12Append = Append(_10Append, _11ZAxis);
    _19Pass-through: Vector3 = if (_6GreaterThanOrEqual)
      {
        Vector3 _13At;// 7:AxisChoose-ext->1:At 110511
        _13At = At(_12Append, axis);
        _13At;
        }else
      {
        Int32 _14One;// 10:PlusOne->1:One 110526
        Int32 _15Add;// 10:PlusOne->0:Add 110525
        Int32 _16Negative;// 7:AxisChoose-ext->11:Negative 110523
        Vector3 _17At;// 7:AxisChoose-ext->12:At 110522
        Vector3 _18Negate;// 7:AxisChoose-ext->13:Negate 110521
        _14One = One();
        _15Add = Add(axis, _14One);
        _16Negative = Negative(_15Add);
        _17At = At(_12Append, _16Negative);
        _18Negate = Negate(_17At);
        _18Negate;
        };
    _20Ray = Ray(_4SphereCenter, _19Pass-through: Vector3);
    _21Plane = Plane(_20Ray);
    _22Constant = 2;
    _23Divide = Divide(Offset, _22Constant);
    _24Pass-through: function1 = (Vector3 x0) => 
      {
        Single _0PointPlaneDistance;// 29:PointPlaneDistance 110497
        Boolean _10GreaterThanOrEqual;// 15:GreaterThanOrEqual 110490
        Single _61Pass-through: Single;// 0:Pass-through: Single 110534
        Single _62FloatZero;// 1:GtEqZ-ext->1:FloatZero 110537
        Boolean _63GreaterThanOrEqual;// 1:GtEqZ-ext->2:GreaterThanOrEqual 110536
        Single _94Abs;// 18:Abs 110496
        _0PointPlaneDistance = PointPlaneDistance(_21Plane, x0);
        _10GreaterThanOrEqual = GreaterThanOrEqual(if (Affect both sides)
            {
              Single _7Abs;// 18:Abs 110496
              Single _8Constant;// 26:DivideByTwoFloat->0:Constant 110495
              Single _9Divide;// 26:DivideByTwoFloat->2:Divide 110494
              _7Abs = Abs(_0PointPlaneDistance);
              _8Constant = 2;
              _9Divide = Divide(_7Abs, _8Constant);
              _9Divide;
              }else
            {
              _0PointPlaneDistance;
              }, Center Protection);
        _61Pass-through: Single = if (Affect both sides)
          {
            Single _58Abs;// 18:Abs 110496
            Single _59Constant;// 26:DivideByTwoFloat->0:Constant 110495
            Single _60Divide;// 26:DivideByTwoFloat->2:Divide 110494
            _58Abs = Abs(_0PointPlaneDistance);
            _59Constant = 2;
            _60Divide = Divide(_58Abs, _59Constant);
            _60Divide;
            }else
          {
            _0PointPlaneDistance;
            };
        _62FloatZero = FloatZero();
        _63GreaterThanOrEqual = GreaterThanOrEqual(_61Pass-through: Single, _62FloatZero);
        _94Abs = Abs(_0PointPlaneDistance);
        if (_10GreaterThanOrEqual)
          {
            if (Affect both sides)
              {
                Vector3 _128Add;// 22:Add 110532
                _128Add = Add(x0, if (_63GreaterThanOrEqual)
                    {
                      Vector3 _119MultiplyByScalar;// 24:MultiplyByScalar 110538
                      _119MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                        {
                          Vector3 _113At;// 7:AxisChoose-ext->1:At 110511
                          _113At = At(_12Append, axis);
                          _113At;
                          }else
                        {
                          Int32 _114One;// 10:PlusOne->1:One 110526
                          Int32 _115Add;// 10:PlusOne->0:Add 110525
                          Int32 _116Negative;// 7:AxisChoose-ext->11:Negative 110523
                          Vector3 _117At;// 7:AxisChoose-ext->12:At 110522
                          Vector3 _118Negate;// 7:AxisChoose-ext->13:Negate 110521
                          _114One = One();
                          _115Add = Add(axis, _114One);
                          _116Negative = Negative(_115Add);
                          _117At = At(_12Append, _116Negative);
                          _118Negate = Negate(_117At);
                          _118Negate;
                          }, _23Divide);
                      _119MultiplyByScalar;
                      }else
                    {
                      Vector3 _126MultiplyByScalar;// 24:MultiplyByScalar 110538
                      Vector3 _127Negate;// 21:Negate 110543
                      _126MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                        {
                          Vector3 _120At;// 7:AxisChoose-ext->1:At 110511
                          _120At = At(_12Append, axis);
                          _120At;
                          }else
                        {
                          Int32 _121One;// 10:PlusOne->1:One 110526
                          Int32 _122Add;// 10:PlusOne->0:Add 110525
                          Int32 _123Negative;// 7:AxisChoose-ext->11:Negative 110523
                          Vector3 _124At;// 7:AxisChoose-ext->12:At 110522
                          Vector3 _125Negate;// 7:AxisChoose-ext->13:Negate 110521
                          _121One = One();
                          _122Add = Add(axis, _121One);
                          _123Negative = Negative(_122Add);
                          _124At = At(_12Append, _123Negative);
                          _125Negate = Negate(_124At);
                          _125Negate;
                          }, _23Divide);
                      _127Negate = Negate(_126MultiplyByScalar);
                      _127Negate;
                      });
                _128Add;
                }else
              {
                Vector3 _135MultiplyByScalar;// 11:MultiplyByScalar 110545
                Vector3 _136Add;// 17:Add 110544
                _135MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                  {
                    Vector3 _129At;// 7:AxisChoose-ext->1:At 110511
                    _129At = At(_12Append, axis);
                    _129At;
                    }else
                  {
                    Int32 _130One;// 10:PlusOne->1:One 110526
                    Int32 _131Add;// 10:PlusOne->0:Add 110525
                    Int32 _132Negative;// 7:AxisChoose-ext->11:Negative 110523
                    Vector3 _133At;// 7:AxisChoose-ext->12:At 110522
                    Vector3 _134Negate;// 7:AxisChoose-ext->13:Negate 110521
                    _130One = One();
                    _131Add = Add(axis, _130One);
                    _132Negative = Negative(_131Add);
                    _133At = At(_12Append, _132Negative);
                    _134Negate = Negate(_133At);
                    _134Negate;
                    }, Offset);
                _136Add = Add(x0, _135MultiplyByScalar);
                _136Add;
                };
            }else
          {
            if (Weight distance)
              {
                Single _181Divide;// 35:Divide 110549
                Vector3 _182Lerp;// 36:Lerp 110548
                _181Divide = Divide(if (Affect both sides)
                    {
                      Single _179Constant;// 26:DivideByTwoFloat->0:Constant 110495
                      Single _180Divide;// 26:DivideByTwoFloat->2:Divide 110494
                      _179Constant = 2;
                      _180Divide = Divide(_94Abs, _179Constant);
                      _180Divide;
                      }else
                    {
                      _0PointPlaneDistance;
                      }, Center Protection);
                _182Lerp = Lerp(x0, if (Affect both sides)
                  {
                    Vector3 _164Add;// 22:Add 110532
                    _164Add = Add(x0, if (_63GreaterThanOrEqual)
                        {
                          Vector3 _155MultiplyByScalar;// 24:MultiplyByScalar 110538
                          _155MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                            {
                              Vector3 _149At;// 7:AxisChoose-ext->1:At 110511
                              _149At = At(_12Append, axis);
                              _149At;
                              }else
                            {
                              Int32 _150One;// 10:PlusOne->1:One 110526
                              Int32 _151Add;// 10:PlusOne->0:Add 110525
                              Int32 _152Negative;// 7:AxisChoose-ext->11:Negative 110523
                              Vector3 _153At;// 7:AxisChoose-ext->12:At 110522
                              Vector3 _154Negate;// 7:AxisChoose-ext->13:Negate 110521
                              _150One = One();
                              _151Add = Add(axis, _150One);
                              _152Negative = Negative(_151Add);
                              _153At = At(_12Append, _152Negative);
                              _154Negate = Negate(_153At);
                              _154Negate;
                              }, _23Divide);
                          _155MultiplyByScalar;
                          }else
                        {
                          Vector3 _162MultiplyByScalar;// 24:MultiplyByScalar 110538
                          Vector3 _163Negate;// 21:Negate 110543
                          _162MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                            {
                              Vector3 _156At;// 7:AxisChoose-ext->1:At 110511
                              _156At = At(_12Append, axis);
                              _156At;
                              }else
                            {
                              Int32 _157One;// 10:PlusOne->1:One 110526
                              Int32 _158Add;// 10:PlusOne->0:Add 110525
                              Int32 _159Negative;// 7:AxisChoose-ext->11:Negative 110523
                              Vector3 _160At;// 7:AxisChoose-ext->12:At 110522
                              Vector3 _161Negate;// 7:AxisChoose-ext->13:Negate 110521
                              _157One = One();
                              _158Add = Add(axis, _157One);
                              _159Negative = Negative(_158Add);
                              _160At = At(_12Append, _159Negative);
                              _161Negate = Negate(_160At);
                              _161Negate;
                              }, _23Divide);
                          _163Negate = Negate(_162MultiplyByScalar);
                          _163Negate;
                          });
                    _164Add;
                    }else
                  {
                    Vector3 _171MultiplyByScalar;// 11:MultiplyByScalar 110545
                    Vector3 _172Add;// 17:Add 110544
                    _171MultiplyByScalar = MultiplyByScalar(if (_6GreaterThanOrEqual)
                      {
                        Vector3 _165At;// 7:AxisChoose-ext->1:At 110511
                        _165At = At(_12Append, axis);
                        _165At;
                        }else
                      {
                        Int32 _166One;// 10:PlusOne->1:One 110526
                        Int32 _167Add;// 10:PlusOne->0:Add 110525
                        Int32 _168Negative;// 7:AxisChoose-ext->11:Negative 110523
                        Vector3 _169At;// 7:AxisChoose-ext->12:At 110522
                        Vector3 _170Negate;// 7:AxisChoose-ext->13:Negate 110521
                        _166One = One();
                        _167Add = Add(axis, _166One);
                        _168Negative = Negative(_167Add);
                        _169At = At(_12Append, _168Negative);
                        _170Negate = Negate(_169At);
                        _170Negate;
                        }, Offset);
                    _172Add = Add(x0, _171MultiplyByScalar);
                    _172Add;
                    }, _181Divide);
                _182Lerp;
                }else
              {
                x0;
                };
            };
        };
    _25Map = Map(_0MeshVertices, _24Pass-through: function1);
    _26SetMeshVertices = SetMeshVertices(mesh, _25Map);
    _26SetMeshVertices;
    }