(InstanceState state, TriMesh mesh, Int32 flux channel, Boolean closed) => 
  {
    MapChannel _0GetMapChannel;// 5:MatricesFromMapChannel-ext->9:GetMapChannel 98281
    IArray[Vector3] _1MapChannelVertexBuffer;// 5:MatricesFromMapChannel-ext->8:MapChannelVertexBuffer 98280
    Int32 _2Count;// 2:Slices->2:Count 98277
    Int32 _3Constant;// 5:MatricesFromMapChannel-ext->0:Constant 98282
    Int32 _4Divide;// 2:Slices->3:Divide 98276
    IArray[Int32] _5Range;// 2:Slices->4:Range 98275
    IArray[IArray[Vector3]] _6Map;// 2:Slices->5:Map 98274
    IArray[Matrix] _7Map;// 5:MatricesFromMapChannel-ext->5:Map 98271
    IArray[Matrix] _11Pass-through: array;// 0:Pass-through: array 98245
    Int32 _12Count;// 3:LastIndex->2:Count 98254
    Int32 _13One;// 3:MinusOne->2:One 98253
    Int32 _14Subtract;// 3:MinusOne->1:Subtract 98252
    IArray[Matrix] _15Take;// 1:DropLast->2:Take 98249
    Int32 _16One;// 2:SkipOne->2:One 98257
    IArray[Matrix] _17Skip;// 2:SkipOne->3:Skip 98256
    Func[Matrix, Matrix, IArray[Matrix]] _18Pass-through: function2;// 0:Pass-through: function2 98246
    IArray[IArray[Matrix]] _19Combine;// 17:CombinePairwiseElements-ext->3:Combine 98247
    IArray[Matrix] _20Flatten;// 18:Flatten 98244
    Func[Matrix, IArray[Vector3]] _21Pass-through: function1;// 0:Pass-through: function1 98230
    IArray[IArray[Vector3]] _22Map;// 5:FlatMap->4:Map 98232
    IArray[Vector3] _23Flatten;// 5:FlatMap->3:Flatten 98231
    IArray[Int32] _24MeshIndices;// 3:MapChannelStoreMatrices-ext->0:MeshIndices 98241
    TriMesh _25SetMapChannel;// 3:MapChannelStoreMatrices-ext->7:SetMapChannel 98228
    _0GetMapChannel = GetMapChannel(mesh, flux channel);
    _1MapChannelVertexBuffer = MapChannelVertexBuffer(_0GetMapChannel);
    _2Count = Count(_1MapChannelVertexBuffer);
    _3Constant = 4;
    _4Divide = Divide(_2Count, _3Constant);
    _5Range = Range(_4Divide);
    _6Map = Map(_5Range, (Int32 x0) => 
      {
        Int32 _0Multiply;// 2:Slices->6:Multiply 98279
        IArray[Vector3] _1Slice;// 2:Slices->0:Slice 98278
        _0Multiply = Multiply(_3Constant, x0);
        _1Slice = Slice(_1MapChannelVertexBuffer, _0Multiply, _3Constant);
        _1Slice;
        });
    _7Map = Map(_6Map, (IArray[Vector3] x0) => 
      {
        Matrix _0MatrixIdentity;// 0:SetMatrixFrom3Rows->23:MatrixIdentity 98291
        Int32 _1One;// 0:SetMatrixFrom3Rows->24:One 98292
        Int32 _2Zero;// 6:MatrixFromRows-ext->7:Zero 98296
        Vector3 _3At;// 6:MatrixFromRows-ext->3:At 98295
        Matrix _4SetMatrixRow;// 0:SetMatrixFrom3Rows->22:SetMatrixRow 98290
        Int32 _5Two;// 0:SetMatrixFrom3Rows->26:Two 98293
        Int32 _6One;// 8:PlusOne->1:One 98300
        Int32 _7Add;// 8:PlusOne->0:Add 98299
        Vector3 _8At;// 6:MatrixFromRows-ext->4:At 98297
        Matrix _9SetMatrixRow;// 0:SetMatrixFrom3Rows->27:SetMatrixRow 98289
        Int32 _10Constant;// 25:Three->0:Constant 98294
        Int32 _11One;// 9:PlusOne->1:One 98304
        Int32 _12Add;// 9:PlusOne->0:Add 98303
        Vector3 _13At;// 6:MatrixFromRows-ext->5:At 98301
        Matrix _14SetMatrixRow;// 0:SetMatrixFrom3Rows->28:SetMatrixRow 98288
        Int32 _15One;// 10:PlusOne->1:One 98308
        Int32 _16Add;// 10:PlusOne->0:Add 98307
        Vector3 _17At;// 6:MatrixFromRows-ext->6:At 98305
        Matrix _18SetMatrixTranslation;// 6:MatrixFromRows-ext->2:SetMatrixTranslation 98284
        _0MatrixIdentity = MatrixIdentity();
        _1One = One();
        _2Zero = Zero();
        _3At = At(x0, _2Zero);
        _4SetMatrixRow = SetMatrixRow(_0MatrixIdentity, _1One, _3At);
        _5Two = Two();
        _6One = One();
        _7Add = Add(_2Zero, _6One);
        _8At = At(x0, _7Add);
        _9SetMatrixRow = SetMatrixRow(_4SetMatrixRow, _5Two, _8At);
        _10Constant = 3;
        _11One = One();
        _12Add = Add(_7Add, _11One);
        _13At = At(x0, _12Add);
        _14SetMatrixRow = SetMatrixRow(_9SetMatrixRow, _10Constant, _13At);
        _15One = One();
        _16Add = Add(_12Add, _15One);
        _17At = At(x0, _16Add);
        _18SetMatrixTranslation = SetMatrixTranslation(_14SetMatrixRow, _17At);
        _18SetMatrixTranslation;
        });
    _11Pass-through: array = if (closed)
      {
        Int32 _8Zero;// 2:First->2:Zero 98267
        Matrix _9At;// 2:First->0:At 98266
        IArray[Matrix] _10Append;// 0:AppendIf->1:Append 98264
        _8Zero = Zero();
        _9At = At(_7Map, _8Zero);
        _10Append = Append(_7Map, _9At);
        _10Append;
        }else
      {
        _7Map;
        };
    _12Count = Count(_11Pass-through: array);
    _13One = One();
    _14Subtract = Subtract(_12Count, _13One);
    _15Take = Take(_11Pass-through: array, _14Subtract);
    _16One = One();
    _17Skip = Skip(_11Pass-through: array, _16One);
    _18Pass-through: function2 = (Matrix x0, Matrix x1) => 
      {
        Vector3 _0ZAxis;// 20:MatricesOrientToLineNormalOnXY-ext->11:ZAxis 98345
        Vector3 _1GetMatrixTranslation;// 20:MatricesOrientToLineNormalOnXY-ext->5:GetMatrixTranslation 98355
        Vector3 _2GetMatrixTranslation;// 20:MatricesOrientToLineNormalOnXY-ext->7:GetMatrixTranslation 98356
        Vector3 _3Subtract;// 20:MatricesOrientToLineNormalOnXY-ext->4:Subtract 98354
        Vector3 _4Cross;// 20:MatricesOrientToLineNormalOnXY-ext->15:Cross 98353
        Single _5X;// 1:SetZ->4:X 98350
        Single _6Y;// 1:SetZ->5:Y 98351
        Single _7FloatZero;// 6:VectorProjectionOnXYPlane-ext->2:FloatZero 98352
        Vector3 _8Vector3;// 1:SetZ->2:Vector3 98349
        Vector3 _9XAxis;// 20:MatricesOrientToLineNormalOnXY-ext->13:XAxis 98357
        Vector3 _10Cross;// 12:VectorAngleSigned-ext->5:Cross 98326
        Single _11Dot;// 12:VectorAngleSigned-ext->4:Dot 98325
        Single _12FloatZero;// 7:GtEqZ-ext->1:FloatZero 98324
        Boolean _13GreaterThanOrEqual;// 7:GtEqZ-ext->2:GreaterThanOrEqual 98323
        Single _14Length;// 8:VectorIsSmall-ext->3:Length 98334
        Single _15Constant;// 4:VectorLengthEpsilon-ext->0:Constant 98335
        Boolean _16LessThan;// 8:VectorIsSmall-ext->5:LessThan 98333
        Single _17Length;// 9:VectorIsSmall-ext->3:Length 98338
        Single _18Constant;// 4:VectorLengthEpsilon-ext->0:Constant 98339
        Boolean _19LessThan;// 9:VectorIsSmall-ext->5:LessThan 98337
        Boolean _20OrElse;// 3:VectorsAngle-ext->10:OrElse 98331
        Matrix _37RotationZMatrix;// 20:MatricesOrientToLineNormalOnXY-ext->14:RotationZMatrix 98317
        Matrix _38Multiply;// 20:MatricesOrientToLineNormalOnXY-ext->9:Multiply 98316
        IArray[Matrix] _39Unit;// 3:Array2->2:Unit 98315
        Matrix _40Multiply;// 20:MatricesOrientToLineNormalOnXY-ext->2:Multiply 98358
        IArray[Matrix] _41Append;// 3:Array2->3:Append 98314
        IArray[Matrix] _42IgnoreFirst;// 20:MatricesOrientToLineNormalOnXY-ext->10:IgnoreFirst 98311
        _0ZAxis = ZAxis();
        _1GetMatrixTranslation = GetMatrixTranslation(x0);
        _2GetMatrixTranslation = GetMatrixTranslation(x1);
        _3Subtract = Subtract(_1GetMatrixTranslation, _2GetMatrixTranslation);
        _4Cross = Cross(_0ZAxis, _3Subtract);
        _5X = X(_4Cross);
        _6Y = Y(_4Cross);
        _7FloatZero = FloatZero();
        _8Vector3 = Vector3(_5X, _6Y, _7FloatZero);
        _9XAxis = XAxis();
        _10Cross = Cross(_8Vector3, _9XAxis);
        _11Dot = Dot(_0ZAxis, _10Cross);
        _12FloatZero = FloatZero();
        _13GreaterThanOrEqual = GreaterThanOrEqual(_11Dot, _12FloatZero);
        _14Length = Length(_8Vector3);
        _15Constant = 1E-06;
        _16LessThan = LessThan(_14Length, _15Constant);
        _17Length = Length(_9XAxis);
        _18Constant = 1E-06;
        _19LessThan = LessThan(_17Length, _18Constant);
        _20OrElse = OrElse(_16LessThan, _19LessThan);
        _37RotationZMatrix = RotationZMatrix(if (_13GreaterThanOrEqual)
          {
            Single _31NegativeFloat;// 12:VectorAngleSigned-ext->6:NegativeFloat 98327
            _31NegativeFloat = NegativeFloat(if (_20OrElse)
              {
                Single _26FloatZero;// 3:VectorsAngle-ext->5:FloatZero 98340
                _26FloatZero = FloatZero();
                _26FloatZero;
                }else
              {
                Vector3 _27Cross;// 3:VectorsAngle-ext->11:Cross 98343
                Single _28Length;// 3:VectorsAngle-ext->3:Length 98342
                Single _29Dot;// 3:VectorsAngle-ext->12:Dot 98344
                Single _30Atan2;// 3:VectorsAngle-ext->2:Atan2 98341
                _27Cross = Cross(_8Vector3, _9XAxis);
                _28Length = Length(_27Cross);
                _29Dot = Dot(_8Vector3, _9XAxis);
                _30Atan2 = Atan2(_28Length, _29Dot);
                _30Atan2;
                });
            _31NegativeFloat;
            }else
          {
            if (_20OrElse)
              {
                Single _32FloatZero;// 3:VectorsAngle-ext->5:FloatZero 98340
                _32FloatZero = FloatZero();
                _32FloatZero;
                }else
              {
                Vector3 _33Cross;// 3:VectorsAngle-ext->11:Cross 98343
                Single _34Length;// 3:VectorsAngle-ext->3:Length 98342
                Single _35Dot;// 3:VectorsAngle-ext->12:Dot 98344
                Single _36Atan2;// 3:VectorsAngle-ext->2:Atan2 98341
                _33Cross = Cross(_8Vector3, _9XAxis);
                _34Length = Length(_33Cross);
                _35Dot = Dot(_8Vector3, _9XAxis);
                _36Atan2 = Atan2(_34Length, _35Dot);
                _36Atan2;
                };
            });
        _38Multiply = Multiply(_37RotationZMatrix, x0);
        _39Unit = Unit(_38Multiply);
        _40Multiply = Multiply(_37RotationZMatrix, x1);
        _41Append = Append(_39Unit, _40Multiply);
        _42IgnoreFirst = IgnoreFirst(x0, _41Append);
        _42IgnoreFirst;
        };
    _19Combine = Combine(_15Take, _17Skip, _18Pass-through: function2);
    _20Flatten = Flatten(_19Combine);
    _21Pass-through: function1 = (Matrix x0) => 
      {
        Int32 _0Constant;// 3:MatrixRows-ext->0:Constant 98236
        IArray[Int32] _1Range;// 3:MatrixRows-ext->1:Range 98235
        IArray[Vector3] _2Map;// 3:MatrixRows-ext->3:Map 98234
        _0Constant = 4;
        _1Range = Range(_0Constant);
        _2Map = Map(_1Range, (Int32 x0) => 
          {
            Int32 _0One;// 5:PlusOne->1:One 98240
            Int32 _1Add;// 5:PlusOne->0:Add 98239
            Vector3 _2MatrixRow;// 3:MatrixRows-ext->4:MatrixRow 98237
            _0One = One();
            _1Add = Add(x0, _0One);
            _2MatrixRow = MatrixRow(_1Add, x0);
            _2MatrixRow;
            });
        _2Map;
        };
    _22Map = Map(_20Flatten, _21Pass-through: function1);
    _23Flatten = Flatten(_22Map);
    _24MeshIndices = MeshIndices(mesh);
    _25SetMapChannel = SetMapChannel(mesh, flux channel, _23Flatten, _24MeshIndices);
    _25SetMapChannel;
    }