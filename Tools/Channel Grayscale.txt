(InstanceState state, Int32 channel ID, TriMesh mesh, Int32 method) => 
  {
    Int32 _0Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 91667
    Boolean _1Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 91666
    MapChannel _4Pass-through: any;// 0:Pass-through: any 91658
    Object _5Null;// 6:IsNullFix2-ext->3:Null 91662
    Object _6As;// 6:IsNullFix2-ext->23:As 91660
    Boolean _7Equal;// 6:IsNullFix2-ext->1:Equal 91659
    Boolean _8Not;// 4:MapChannelExists-ext->4:Not 91657
    _0Constant = -3;
    _1Equal = Equal(channel ID, _0Constant);
    _4Pass-through: any = if (_1Equal)
      {
        MapChannel _2TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 91668
        _2TopologyChannel = TopologyChannel(mesh);
        _2TopologyChannel;
        }else
      {
        MapChannel _3GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 91669
        _3GetMapChannel = GetMapChannel(mesh, channel ID);
        _3GetMapChannel;
        };
    _5Null = Null();
    _6As = As(_4Pass-through: any, (Object x0) => 
      {
        Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 91661
        _0IgnoreFirst = IgnoreFirst(x0, _5Null);
        _0IgnoreFirst;
        });
    _7Equal = Equal(_6As, _5Null);
    _8Not = Not(_7Equal);
    if (_8Not)
      {
        Int32 _9Constant;// 9:MapChannelOrGeometrySet-ext->0:Constant 91676
        Boolean _10Equal;// 9:MapChannelOrGeometrySet-ext->6:Equal 91675
        Int32 _11Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 91697
        Boolean _12Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 91696
        MapChannel _15Pass-through: any;// 0:Pass-through: any 91688
        Object _16Null;// 6:IsNullFix2-ext->3:Null 91692
        Object _17As;// 6:IsNullFix2-ext->23:As 91690
        Boolean _18Equal;// 6:IsNullFix2-ext->1:Equal 91689
        Boolean _19Not;// 1:MapChannelExists-ext->4:Not 91687
        IArray[Vector3] _45MapChannelVertexBuffer;// 5:MapChannelTransform-ext->0:MapChannelVertexBuffer 91681
        Func[Vector3, Vector3] _46Pass-through: any;// 0:Pass-through: any 91740
        IArray[Func[Vector3, Vector3]] _47Unit;// 4:Array3->2:Unit 91750
        Func[Vector3, Vector3] _48Pass-through: any;// 0:Pass-through: any 91741
        IArray[Func[Vector3, Vector3]] _49Append;// 4:Array3->3:Append 91749
        Func[Vector3, Vector3] _50Pass-through: any;// 0:Pass-through: any 91742
        IArray[Func[Vector3, Vector3]] _51Append;// 4:Array3->6:Append 91748
        Func[Vector3, Vector3] _52Pass-through: any;// 0:Pass-through: any 91743
        IArray[Func[Vector3, Vector3]] _53Append;// 0:Array4->5:Append 91744
        Func[Vector3, Vector3] _54Pass-through: any;// 0:Pass-through: any 91839
        IArray[Func[Vector3, Vector3]] _55Unit;// 16:Array3-ext->2:Unit 91844
        Func[Vector3, Vector3] _56Pass-through: any;// 0:Pass-through: any 91840
        IArray[Func[Vector3, Vector3]] _57Append;// 16:Array3-ext->3:Append 91843
        Func[Vector3, Vector3] _58Pass-through: any;// 0:Pass-through: any 91841
        IArray[Func[Vector3, Vector3]] _59Append;// 16:Array3-ext->6:Append 91842
        IArray[Func[Vector3, Vector3]] _60Concatenate;// 10:Concatenate 91739
        Func[Vector3, Vector3] _61At;// 3:At 91738
        IArray[Vector3] _62Map;// 5:MapChannelTransform-ext->1:Map 91680
        Int32 _94Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 91704
        Boolean _95Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 91703
        Int32 _98Constant;// 8:MapChannelOrGeometryGet-ext->0:Constant 91711
        Boolean _99Equal;// 8:MapChannelOrGeometryGet-ext->4:Equal 91710
        Int32 _100Constant;// 10:MapChannelOrGeometrySet-ext->0:Constant 91722
        Boolean _101Equal;// 10:MapChannelOrGeometrySet-ext->6:Equal 91721
        Single _102Constant;// 5:Origin->0:Constant 91728
        Vector3 _103Vector3;// 5:Origin->1:Vector3 91727
        IArray[Vector3] _104Unit;// 4:MapChannelClear-ext->4:Unit 91726
        Int32 _105Zero;// 4:MapChannelClear-ext->9:Zero 91730
        Int32 _106FaceCount;// 4:MapChannelClear-ext->6:FaceCount 91734
        Int32 _107Constant;// 1:Three->0:Constant 91733
        Int32 _108Multiply;// 7:MultiplyByThree->2:Multiply 91732
        IArray[Int32] _109ArrayOf;// 4:MapChannelClear-ext->8:ArrayOf 91729
        IArray[Int32] _141MapChannelIndexBuffer;// 5:MapChannelTransform-ext->8:MapChannelIndexBuffer 91735
        _9Constant = -3;
        _10Equal = Equal(_9Constant, channel ID);
        _11Constant = -3;
        _12Equal = Equal(channel ID, _11Constant);
        _15Pass-through: any = if (_12Equal)
          {
            MapChannel _13TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 91698
            _13TopologyChannel = TopologyChannel(mesh);
            _13TopologyChannel;
            }else
          {
            MapChannel _14GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 91699
            _14GetMapChannel = GetMapChannel(mesh, channel ID);
            _14GetMapChannel;
            };
        _16Null = Null();
        _17As = As(_15Pass-through: any, (Object x0) => 
          {
            Object _0IgnoreFirst;// 6:IsNullFix2-ext->5:IgnoreFirst 91691
            _0IgnoreFirst = IgnoreFirst(x0, _16Null);
            _0IgnoreFirst;
            });
        _18Equal = Equal(_17As, _16Null);
        _19Not = Not(_18Equal);
        _45MapChannelVertexBuffer = MapChannelVertexBuffer(if (_19Not)
          {
            Int32 _20Constant;// 5:MapChannelOrGeometryGet-ext->0:Constant 91704
            Boolean _21Equal;// 5:MapChannelOrGeometryGet-ext->4:Equal 91703
            _20Constant = -3;
            _21Equal = Equal(channel ID, _20Constant);
            if (_21Equal)
              {
                MapChannel _22TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 91705
                _22TopologyChannel = TopologyChannel(mesh);
                _22TopologyChannel;
                }else
              {
                MapChannel _23GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 91706
                _23GetMapChannel = GetMapChannel(mesh, channel ID);
                _23GetMapChannel;
                };
            }else
          {
            Int32 _24Constant;// 8:MapChannelOrGeometryGet-ext->0:Constant 91711
            Boolean _25Equal;// 8:MapChannelOrGeometryGet-ext->4:Equal 91710
            Int32 _26Constant;// 10:MapChannelOrGeometrySet-ext->0:Constant 91722
            Boolean _27Equal;// 10:MapChannelOrGeometrySet-ext->6:Equal 91721
            Single _28Constant;// 5:Origin->0:Constant 91728
            Vector3 _29Vector3;// 5:Origin->1:Vector3 91727
            IArray[Vector3] _30Unit;// 4:MapChannelClear-ext->4:Unit 91726
            Int32 _31Zero;// 4:MapChannelClear-ext->9:Zero 91730
            Int32 _32FaceCount;// 4:MapChannelClear-ext->6:FaceCount 91734
            Int32 _33Constant;// 1:Three->0:Constant 91733
            Int32 _34Multiply;// 7:MultiplyByThree->2:Multiply 91732
            IArray[Int32] _35ArrayOf;// 4:MapChannelClear-ext->8:ArrayOf 91729
            TriMesh _39Pass-through: TriMesh;// 0:Pass-through: TriMesh 91708
            _24Constant = -3;
            _25Equal = Equal(channel ID, _24Constant);
            _26Constant = -3;
            _27Equal = Equal(_26Constant, channel ID);
            _28Constant = 0;
            _29Vector3 = Vector3(_28Constant, _28Constant, _28Constant);
            _30Unit = Unit(_29Vector3);
            _31Zero = Zero();
            _32FaceCount = FaceCount(mesh);
            _33Constant = 3;
            _34Multiply = Multiply(_32FaceCount, _33Constant);
            _35ArrayOf = ArrayOf(_31Zero, _34Multiply);
            _39Pass-through: TriMesh = if (_27Equal)
              {
                MeshData _36MeshData;// 10:MapChannelOrGeometrySet-ext->9:MeshData 91724
                TriMesh _37CreateMeshWithMeshData;// 10:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 91723
                _36MeshData = MeshData(mesh);
                _37CreateMeshWithMeshData = CreateMeshWithMeshData(_30Unit, _35ArrayOf, _36MeshData);
                _37CreateMeshWithMeshData;
                }else
              {
                TriMesh _38SetMapChannel;// 10:MapChannelOrGeometrySet-ext->0:SetMapChannel 91725
                _38SetMapChannel = SetMapChannel(mesh, channel ID, _30Unit, _35ArrayOf);
                _38SetMapChannel;
                };
            if (_25Equal)
              {
                MapChannel _43TopologyChannel;// 8:MapChannelOrGeometryGet-ext->6:TopologyChannel 91712
                _43TopologyChannel = TopologyChannel(_39Pass-through: TriMesh);
                _43TopologyChannel;
                }else
              {
                MapChannel _44GetMapChannel;// 8:MapChannelOrGeometryGet-ext->3:GetMapChannel 91713
                _44GetMapChannel = GetMapChannel(_39Pass-through: TriMesh, channel ID);
                _44GetMapChannel;
                };
            });
        _46Pass-through: any = (Vector3 x0) => 
          {
            Single _0X;// 1:VectorAsArray->1:X 91770
            IArray[Single] _1Unit;// 4:Array3->2:Unit 91769
            Single _2Y;// 1:VectorAsArray->2:Y 91771
            IArray[Single] _3Append;// 4:Array3->3:Append 91768
            Single _4Z;// 1:VectorAsArray->3:Z 91772
            IArray[Single] _5Append;// 4:Array3->6:Append 91767
            Single _6DefaultValueOfElement;// 2:Sum->4:DefaultValueOfElement 91759
            Single _7Aggregate;// 2:Sum->0:Aggregate 91758
            Int32 _8Count;// 2:Average->3:Count 91762
            Single _9AsFloat;// 2:Average->5:AsFloat 91761
            Single _10Divide;// 2:Average->1:Divide 91756
            Vector3 _11Vector3;// 1:ScalarToVector-ext->1:Vector3 91753
            _0X = X(x0);
            _1Unit = Unit(_0X);
            _2Y = Y(x0);
            _3Append = Append(_1Unit, _2Y);
            _4Z = Z(x0);
            _5Append = Append(_3Append, _4Z);
            _6DefaultValueOfElement = DefaultValueOfElement(_5Append);
            _7Aggregate = Aggregate(_5Append, _6DefaultValueOfElement, (Single x0, Single x1) => 
              {
                Single _0Add;// 2:Sum->2:Add 91760
                _0Add = Add(x0, x1);
                _0Add;
                });
            _8Count = Count(_5Append);
            _9AsFloat = AsFloat(_8Count);
            _10Divide = Divide(_7Aggregate, _9AsFloat);
            _11Vector3 = Vector3(_10Divide, _10Divide, _10Divide);
            _11Vector3;
            };
        _47Unit = Unit(_46Pass-through: any);
        _48Pass-through: any = (Vector3 x0) => 
          {
            Single _0X;// 1:VectorAsArray->1:X 91801
            IArray[Single] _1Unit;// 4:Array3->2:Unit 91800
            Single _2Y;// 1:VectorAsArray->2:Y 91802
            IArray[Single] _3Append;// 4:Array3->3:Append 91799
            Single _4Z;// 1:VectorAsArray->3:Z 91803
            IArray[Single] _5Append;// 4:Array3->6:Append 91798
            IArray[Int32] _6Indices;// 3:IndexOfMaximum->1:Indices 91785
            Int32 _7Zero;// 3:IndexOfMaximum->3:Zero 91786
            Int32 _8Aggregate;// 3:IndexOfMaximum->2:Aggregate 91784
            Single _9At;// 4:MaximumElement->0:At 91782
            IArray[Int32] _10Indices;// 3:IndexOfMinimum->1:Indices 91808
            Int32 _11Zero;// 3:IndexOfMinimum->3:Zero 91809
            Int32 _12Aggregate;// 3:IndexOfMinimum->2:Aggregate 91807
            Single _13At;// 5:MinimumElement->0:At 91805
            Single _14Add;// 1:Lightness-ext->2:Add 91780
            Single _15Constant;// 6:DivideByTwoFloat->0:Constant 91779
            Single _16Divide;// 6:DivideByTwoFloat->2:Divide 91778
            Vector3 _17Vector3;// 2:ScalarToVector-ext->1:Vector3 91775
            _0X = X(x0);
            _1Unit = Unit(_0X);
            _2Y = Y(x0);
            _3Append = Append(_1Unit, _2Y);
            _4Z = Z(x0);
            _5Append = Append(_3Append, _4Z);
            _6Indices = Indices(_5Append);
            _7Zero = Zero();
            _8Aggregate = Aggregate(_6Indices, _7Zero, (Int32 x0, Int32 x1) => 
              {
                Single _0At;// 4:IndexOfGreaterElement->4:At 91792
                Single _1At;// 4:IndexOfGreaterElement->5:At 91793
                Boolean _2GreaterThanOrEqual;// 4:IndexOfGreaterElement->2:GreaterThanOrEqual 91791
                _0At = At(_5Append, x0);
                _1At = At(_5Append, x1);
                _2GreaterThanOrEqual = GreaterThanOrEqual(_0At, _1At);
                if (_2GreaterThanOrEqual)
                  {
                    x0;
                    }else
                  {
                    x1;
                    };
                });
            _9At = At(_5Append, _8Aggregate);
            _10Indices = Indices(_5Append);
            _11Zero = Zero();
            _12Aggregate = Aggregate(_10Indices, _11Zero, (Int32 x0, Int32 x1) => 
              {
                Single _0At;// 4:IndexOfLesserElement->4:At 91815
                Single _1At;// 4:IndexOfLesserElement->5:At 91816
                Boolean _2LessThanOrEqual;// 4:IndexOfLesserElement->2:LessThanOrEqual 91814
                _0At = At(_5Append, x0);
                _1At = At(_5Append, x1);
                _2LessThanOrEqual = LessThanOrEqual(_0At, _1At);
                if (_2LessThanOrEqual)
                  {
                    x0;
                    }else
                  {
                    x1;
                    };
                });
            _13At = At(_5Append, _12Aggregate);
            _14Add = Add(_9At, _13At);
            _15Constant = 2;
            _16Divide = Divide(_14Add, _15Constant);
            _17Vector3 = Vector3(_16Divide, _16Divide, _16Divide);
            _17Vector3;
            };
        _49Append = Append(_47Unit, _48Pass-through: any);
        _50Pass-through: any = (Vector3 x0) => 
          {
            Single _0X;// 1:Luminosity-ext->4:X 91827
            Single _1Constant;// 1:Luminosity-ext->0:Constant 91828
            Single _2Multiply;// 1:Luminosity-ext->8:Multiply 91826
            Single _3Y;// 1:Luminosity-ext->5:Y 91830
            Single _4Constant;// 1:Luminosity-ext->0:Constant 91831
            Single _5Multiply;// 1:Luminosity-ext->9:Multiply 91829
            Single _6Add;// 11:Add3-ext->5:Add 91825
            Single _7Z;// 1:Luminosity-ext->6:Z 91833
            Single _8Constant;// 1:Luminosity-ext->0:Constant 91834
            Single _9Multiply;// 1:Luminosity-ext->10:Multiply 91832
            Single _10Add;// 11:Add3-ext->7:Add 91824
            Vector3 _11Vector3;// 2:ScalarToVector-ext->1:Vector3 91819
            _0X = X(x0);
            _1Constant = 0.21;
            _2Multiply = Multiply(_0X, _1Constant);
            _3Y = Y(x0);
            _4Constant = 0.72;
            _5Multiply = Multiply(_3Y, _4Constant);
            _6Add = Add(_2Multiply, _5Multiply);
            _7Z = Z(x0);
            _8Constant = 0.07;
            _9Multiply = Multiply(_7Z, _8Constant);
            _10Add = Add(_6Add, _9Multiply);
            _11Vector3 = Vector3(_10Add, _10Add, _10Add);
            _11Vector3;
            };
        _51Append = Append(_49Append, _50Pass-through: any);
        _52Pass-through: any = (Vector3 x0) => 
          {
            Single _0Length;// 1:GrayFromVectorLength-ext->1:Length 91838
            Vector3 _1Vector3;// 2:ScalarToVector-ext->1:Vector3 91837
            _0Length = Length(x0);
            _1Vector3 = Vector3(_0Length, _0Length, _0Length);
            _1Vector3;
            };
        _53Append = Append(_51Append, _52Pass-through: any);
        _54Pass-through: any = (Vector3 x0) => 
          {
            Single _0X;// 15:GrayFromRed-ext->0:X 91848
            Vector3 _1Vector3;// 2:ScalarToVector-ext->1:Vector3 91847
            _0X = X(x0);
            _1Vector3 = Vector3(_0X, _0X, _0X);
            _1Vector3;
            };
        _55Unit = Unit(_54Pass-through: any);
        _56Pass-through: any = (Vector3 x0) => 
          {
            Single _0Z;// 13:GrayFromBlue-ext->0:Z 91852
            Vector3 _1Vector3;// 2:ScalarToVector-ext->1:Vector3 91851
            _0Z = Z(x0);
            _1Vector3 = Vector3(_0Z, _0Z, _0Z);
            _1Vector3;
            };
        _57Append = Append(_55Unit, _56Pass-through: any);
        _58Pass-through: any = (Vector3 x0) => 
          {
            Single _0Y;// 14:GrayFromGreen-ext->1:Y 91856
            Vector3 _1Vector3;// 2:ScalarToVector-ext->1:Vector3 91855
            _0Y = Y(x0);
            _1Vector3 = Vector3(_0Y, _0Y, _0Y);
            _1Vector3;
            };
        _59Append = Append(_57Append, _58Pass-through: any);
        _60Concatenate = Concatenate(_53Append, _59Append);
        _61At = At(_60Concatenate, method);
        _62Map = Map(_45MapChannelVertexBuffer, _61At);
        _94Constant = -3;
        _95Equal = Equal(channel ID, _94Constant);
        _98Constant = -3;
        _99Equal = Equal(channel ID, _98Constant);
        _100Constant = -3;
        _101Equal = Equal(_100Constant, channel ID);
        _102Constant = 0;
        _103Vector3 = Vector3(_102Constant, _102Constant, _102Constant);
        _104Unit = Unit(_103Vector3);
        _105Zero = Zero();
        _106FaceCount = FaceCount(mesh);
        _107Constant = 3;
        _108Multiply = Multiply(_106FaceCount, _107Constant);
        _109ArrayOf = ArrayOf(_105Zero, _108Multiply);
        _141MapChannelIndexBuffer = MapChannelIndexBuffer(if (_19Not)
          {
            if (_95Equal)
              {
                MapChannel _126TopologyChannel;// 5:MapChannelOrGeometryGet-ext->6:TopologyChannel 91705
                _126TopologyChannel = TopologyChannel(mesh);
                _126TopologyChannel;
                }else
              {
                MapChannel _127GetMapChannel;// 5:MapChannelOrGeometryGet-ext->3:GetMapChannel 91706
                _127GetMapChannel = GetMapChannel(mesh, channel ID);
                _127GetMapChannel;
                };
            }else
          {
            if (_99Equal)
              {
                TriMesh _134Pass-through: TriMesh;// 0:Pass-through: TriMesh 91708
                MapChannel _135TopologyChannel;// 8:MapChannelOrGeometryGet-ext->6:TopologyChannel 91712
                _134Pass-through: TriMesh = if (_101Equal)
                  {
                    MeshData _131MeshData;// 10:MapChannelOrGeometrySet-ext->9:MeshData 91724
                    TriMesh _132CreateMeshWithMeshData;// 10:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 91723
                    _131MeshData = MeshData(mesh);
                    _132CreateMeshWithMeshData = CreateMeshWithMeshData(_104Unit, _109ArrayOf, _131MeshData);
                    _132CreateMeshWithMeshData;
                    }else
                  {
                    TriMesh _133SetMapChannel;// 10:MapChannelOrGeometrySet-ext->0:SetMapChannel 91725
                    _133SetMapChannel = SetMapChannel(mesh, channel ID, _104Unit, _109ArrayOf);
                    _133SetMapChannel;
                    };
                _135TopologyChannel = TopologyChannel(_134Pass-through: TriMesh);
                _135TopologyChannel;
                }else
              {
                TriMesh _139Pass-through: TriMesh;// 0:Pass-through: TriMesh 91708
                MapChannel _140GetMapChannel;// 8:MapChannelOrGeometryGet-ext->3:GetMapChannel 91713
                _139Pass-through: TriMesh = if (_101Equal)
                  {
                    MeshData _136MeshData;// 10:MapChannelOrGeometrySet-ext->9:MeshData 91724
                    TriMesh _137CreateMeshWithMeshData;// 10:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 91723
                    _136MeshData = MeshData(mesh);
                    _137CreateMeshWithMeshData = CreateMeshWithMeshData(_104Unit, _109ArrayOf, _136MeshData);
                    _137CreateMeshWithMeshData;
                    }else
                  {
                    TriMesh _138SetMapChannel;// 10:MapChannelOrGeometrySet-ext->0:SetMapChannel 91725
                    _138SetMapChannel = SetMapChannel(mesh, channel ID, _104Unit, _109ArrayOf);
                    _138SetMapChannel;
                    };
                _140GetMapChannel = GetMapChannel(_139Pass-through: TriMesh, channel ID);
                _140GetMapChannel;
                };
            });
        if (_10Equal)
          {
            MeshData _142MeshData;// 9:MapChannelOrGeometrySet-ext->9:MeshData 91678
            TriMesh _143CreateMeshWithMeshData;// 9:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 91677
            _142MeshData = MeshData(mesh);
            _143CreateMeshWithMeshData = CreateMeshWithMeshData(_62Map, _141MapChannelIndexBuffer, _142MeshData);
            _143CreateMeshWithMeshData;
            }else
          {
            TriMesh _144SetMapChannel;// 9:MapChannelOrGeometrySet-ext->0:SetMapChannel 91679
            _144SetMapChannel = SetMapChannel(mesh, channel ID, _62Map, _141MapChannelIndexBuffer);
            _144SetMapChannel;
            };
        }else
      {
        mesh;
        };
    }