(InstanceState state, TriMesh mesh, Single x, Single y, Single z) => 
  {
    String _0Constant;// 0:HasPerVertexChannel->0:Constant 110761
    Int32 _1Zero;// 4:HasSoftSelection->3:Zero 110763
    String _2ToString;// 0:HasPerVertexChannel->7:ToString 110762
    String _3ConcatenateStrings;// 0:HasPerVertexChannel->3:ConcatenateStrings 110760
    Boolean _4IsChannelAvailable;// 0:HasPerVertexChannel->4:IsChannelAvailable 110759
    TriMesh _5IfThen;// 5:MeshVerticesSetUsingSoftSelection-ext->10:IfThen 110755
    _0Constant = per-vertex data channel ;
    _1Zero = Zero();
    _2ToString = ToString(_1Zero);
    _3ConcatenateStrings = ConcatenateStrings(_0Constant, _2ToString);
    _4IsChannelAvailable = IsChannelAvailable(mesh, _3ConcatenateStrings);
    _5IfThen = IfThen(_4IsChannelAvailable, () => 
      {
        IArray[Vector3] _0MeshVertices;// 5:MeshVerticesSetUsingSoftSelection-ext->0:MeshVertices 110770
        IArray[Vector3] _1MeshVertices;// 6:MeshVertices 110777
        Vector3 _2Vector3;// 0:Vector3 110779
        IArray[Vector3] _3Map;// 7:Map 110776
        Int32 _4Zero;// 7:SoftSelection->2:Zero 110773
        IArray[Single] _5PerVertexData;// 7:SoftSelection->3:PerVertexData 110772
        IArray[Vector3] _6Combine3;// 1:LerpVectors-ext->10:Combine3 110768
        TriMesh _7SetMeshVertices;// 5:MeshVerticesSetUsingSoftSelection-ext->6:SetMeshVertices 110764
        _0MeshVertices = MeshVertices(mesh);
        _1MeshVertices = MeshVertices(mesh);
        _2Vector3 = Vector3(x, y, z);
        _3Map = Map(_1MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Add;// 8:Add 110778
            _0Add = Add(x0, _2Vector3);
            _0Add;
            });
        _4Zero = Zero();
        _5PerVertexData = PerVertexData(mesh, _4Zero);
        _6Combine3 = Combine3(_0MeshVertices, _3Map, _5PerVertexData, (Vector3 x0, Vector3 x1, Single x2) => 
          {
            Vector3 _0Lerp;// 1:LerpVectors-ext->8:Lerp 110769
            _0Lerp = Lerp(x0, x1, x2);
            _0Lerp;
            });
        _7SetMeshVertices = SetMeshVertices(mesh, _6Combine3);
        _7SetMeshVertices;
        }, () => 
      {
        IArray[Vector3] _0MeshVertices;// 6:MeshVertices 110777
        Vector3 _1Vector3;// 0:Vector3 110779
        IArray[Vector3] _2Map;// 7:Map 110776
        TriMesh _3SetMeshVertices;// 5:MeshVerticesSetUsingSoftSelection-ext->8:SetMeshVertices 110774
        _0MeshVertices = MeshVertices(mesh);
        _1Vector3 = Vector3(x, y, z);
        _2Map = Map(_0MeshVertices, (Vector3 x0) => 
          {
            Vector3 _0Add;// 8:Add 110778
            _0Add = Add(x0, _1Vector3);
            _0Add;
            });
        _3SetMeshVertices = SetMeshVertices(mesh, _2Map);
        _3SetMeshVertices;
        });
    _5IfThen;
    }