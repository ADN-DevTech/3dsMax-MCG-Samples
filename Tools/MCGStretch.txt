(InstanceState state, TriMesh mesh, Int32 axis, Single stretch, Boolean useGizmoXform, INode gizmo, Matrix modifierTransform, Single amplify) => 
  {
    IArray[Vector3] _0MeshVertices;// 2:StretchMesh->15:MeshVertices 123504
    IArray[Vector3] _1MeshVertices;// 2:MeshBoundingBox->1:MeshVertices 123667
    BoundingBox _2BoxFromPoints;// 2:MeshBoundingBox->0:BoxFromPoints 123666
    Matrix _11Pass-through: Matrix;// 0:Pass-through: Matrix 123499
    IArray[Vector3] _12ParallelMap;// 2:StretchMesh->11:ParallelMap 123503
    TriMesh _13SetMeshVertices;// 2:StretchMesh->18:SetMeshVertices 123501
    _0MeshVertices = MeshVertices(mesh);
    _1MeshVertices = MeshVertices(mesh);
    _2BoxFromPoints = BoxFromPoints(_1MeshVertices);
    _11Pass-through: Matrix = if (useGizmoXform)
      {
        Boolean _3IsValidNode;// 1:GizmoTransformInLocalSpace->35:IsValidNode 123676
        _3IsValidNode = IsValidNode(gizmo);
        if (_3IsValidNode)
          {
            Boolean _4IsValidNode;// 3:ValidNodeWorldTransform->2:IsValidNode 123682
            Matrix _7InvertMatrix;// 37:MaxtoolMatrixWorldToLocalTransform->2:InvertMatrix 123686
            Matrix _8Multiply;// 32:NodeToLocalTransform->18:Multiply 123679
            _4IsValidNode = IsValidNode(gizmo);
            _7InvertMatrix = InvertMatrix(modifierTransform);
            _8Multiply = Multiply(if (_4IsValidNode)
                {
                  Matrix _5WorldTransform;// 3:ValidNodeWorldTransform->1:WorldTransform 123683
                  _5WorldTransform = WorldTransform(gizmo);
                  _5WorldTransform;
                  }else
                {
                  Matrix _6MatrixIdentity;// 3:ValidNodeWorldTransform->4:MatrixIdentity 123684
                  _6MatrixIdentity = MatrixIdentity();
                  _6MatrixIdentity;
                  }, _7InvertMatrix);
            _8Multiply;
            }else
          {
            Matrix _9MatrixIdentity;// 1:GizmoTransformInLocalSpace->40:MatrixIdentity 123687
            _9MatrixIdentity = MatrixIdentity();
            _9MatrixIdentity;
            };
        }else
      {
        Matrix _10MatrixIdentity;// 12:MatrixIdentity 123690
        _10MatrixIdentity = MatrixIdentity();
        _10MatrixIdentity;
        };
    _12ParallelMap = ParallelMap(_0MeshVertices, (Vector3 x0) => 
      {
        Single _0FloatZero;// 1:StretchDeformer->67:FloatZero 123516
        Vector3 _1BoxMax;// 1:StretchDeformer->13:BoxMax 123540
        Single _2X;// 2:Vector3ToArray->1:X 123529
        IArray[Single] _3Unit;// 4:Array3->2:Unit 123528
        Single _4Y;// 2:Vector3ToArray->2:Y 123530
        IArray[Single] _5Append;// 4:Array3->3:Append 123527
        Single _6Z;// 2:Vector3ToArray->3:Z 123531
        IArray[Single] _7Append;// 4:Array3->6:Append 123526
        Int32 _8Zero;// 4:ValidIndex->2:Zero 123535
        Int32 _9Count;// 4:ValidIndex->4:Count 123539
        Int32 _10One;// 5:MinusOne->2:One 123538
        Int32 _11Subtract;// 5:MinusOne->1:Subtract 123537
        Int32 _12ClampInt;// 4:ValidIndex->3:ClampInt 123534
        Single _13At;// 16:Vector3At->3:At 123521
        Vector3 _14BoxMin;// 1:StretchDeformer->9:BoxMin 123563
        Single _15X;// 2:Vector3ToArray->1:X 123552
        IArray[Single] _16Unit;// 4:Array3->2:Unit 123551
        Single _17Y;// 2:Vector3ToArray->2:Y 123553
        IArray[Single] _18Append;// 4:Array3->3:Append 123550
        Single _19Z;// 2:Vector3ToArray->3:Z 123554
        IArray[Single] _20Append;// 4:Array3->6:Append 123549
        Int32 _21Zero;// 4:ValidIndex->2:Zero 123558
        Int32 _22Count;// 4:ValidIndex->4:Count 123562
        Int32 _23One;// 5:MinusOne->2:One 123561
        Int32 _24Subtract;// 5:MinusOne->1:Subtract 123560
        Int32 _25ClampInt;// 4:ValidIndex->3:ClampInt 123557
        Single _26At;// 15:Vector3At->3:At 123544
        Single _27Subtract;// 1:StretchDeformer->65:Subtract 123518
        Boolean _28Equal;// 1:StretchDeformer->66:Equal 123515
        Single _29FloatZero;// 1:StretchDeformer->71:FloatZero 123565
        Boolean _30Equal;// 1:StretchDeformer->70:Equal 123564
        Boolean _31OrElse;// 1:StretchDeformer->69:OrElse 123514
        Matrix _32InvertMatrix;// 1:StretchDeformer->79:InvertMatrix 123571
        Vector3 _33Transform;// 1:StretchDeformer->78:Transform 123570
        Boolean _42IsValidNode;// 1:GizmoTransformInLocalSpace->35:IsValidNode 123676
        Boolean _49IsValidNode;// 3:ValidNodeWorldTransform->2:IsValidNode 123682
        Matrix _52InvertMatrix;// 37:MaxtoolMatrixWorldToLocalTransform->2:InvertMatrix 123686
        Vector3 _125Transform;// 1:StretchDeformer->83:Transform 123511
        _0FloatZero = FloatZero();
        _1BoxMax = BoxMax(_2BoxFromPoints);
        _2X = X(_1BoxMax);
        _3Unit = Unit(_2X);
        _4Y = Y(_1BoxMax);
        _5Append = Append(_3Unit, _4Y);
        _6Z = Z(_1BoxMax);
        _7Append = Append(_5Append, _6Z);
        _8Zero = Zero();
        _9Count = Count(_7Append);
        _10One = One();
        _11Subtract = Subtract(_9Count, _10One);
        _12ClampInt = ClampInt(axis, _8Zero, _11Subtract);
        _13At = At(_7Append, _12ClampInt);
        _14BoxMin = BoxMin(_2BoxFromPoints);
        _15X = X(_14BoxMin);
        _16Unit = Unit(_15X);
        _17Y = Y(_14BoxMin);
        _18Append = Append(_16Unit, _17Y);
        _19Z = Z(_14BoxMin);
        _20Append = Append(_18Append, _19Z);
        _21Zero = Zero();
        _22Count = Count(_20Append);
        _23One = One();
        _24Subtract = Subtract(_22Count, _23One);
        _25ClampInt = ClampInt(axis, _21Zero, _24Subtract);
        _26At = At(_20Append, _25ClampInt);
        _27Subtract = Subtract(_13At, _26At);
        _28Equal = Equal(_0FloatZero, _27Subtract);
        _29FloatZero = FloatZero();
        _30Equal = Equal(_29FloatZero, stretch);
        _31OrElse = OrElse(_28Equal, _30Equal);
        _32InvertMatrix = InvertMatrix(_11Pass-through: Matrix);
        _33Transform = Transform(x0, _32InvertMatrix);
        _42IsValidNode = IsValidNode(gizmo);
        _49IsValidNode = IsValidNode(gizmo);
        _52InvertMatrix = InvertMatrix(modifierTransform);
        _125Transform = Transform(if (_31OrElse)
          {
            _33Transform;
            }else
          {
            Single _53HalfPi;// 1:StretchDeformer->3:HalfPi 123591
            Single _54NegativeFloat;// 1:StretchDeformer->4:NegativeFloat 123590
            Matrix _55RotationYMatrix;// 1:StretchDeformer->1:RotationYMatrix 123589
            Func[Matrix] _56Pass-through: any;// 0:Pass-through: any 123583
            IArray[Func[Matrix]] _57Unit;// 7:Array3->2:Unit 123588
            Matrix _58RotationXMatrix;// 1:StretchDeformer->6:RotationXMatrix 123592
            Func[Matrix] _59Pass-through: any;// 0:Pass-through: any 123584
            IArray[Func[Matrix]] _60Append;// 7:Array3->3:Append 123587
            Matrix _61MatrixIdentity;// 1:StretchDeformer->5:MatrixIdentity 123593
            Func[Matrix] _62Pass-through: any;// 0:Pass-through: any 123585
            IArray[Func[Matrix]] _63Append;// 7:Array3->6:Append 123586
            Func[Matrix] _64At;// 1:StretchDeformer->8:At 123582
            Matrix _65Apply0;// 1:StretchDeformer->74:Apply0 123581
            Vector3 _66Transform;// 1:StretchDeformer->18:Transform 123578
            Single _67X;// 1:StretchDeformer->40:X 123576
            Single _68Constant;// 1:StretchDeformer->0:Constant 123602
            Single _69FloatOne;// 1:StretchDeformer->144:FloatOne 123604
            Single _70FloatZero;// 1:StretchDeformer->105:FloatZero 123608
            Boolean _71LessThan;// 1:StretchDeformer->82:LessThan 123606
            Single _72FloatZero;// 1:StretchDeformer->37:FloatZero 123618
            Boolean _73GreaterThanOrEqual;// 1:StretchDeformer->35:GreaterThanOrEqual 123616
            Single _81Pass-through: Single;// 1:StretchDeformer->29:Pass-through: Single 123614
            Single _98Subtract;// 1:StretchDeformer->145:Subtract 123603
            Single _99Multiply;// 1:StretchDeformer->146:Multiply 123601
            Single _100Z;// 1:StretchDeformer->38:Z 123639
            Single _101Subtract;// 1:StretchDeformer->93:Subtract 123638
            Single _102Divide;// 1:StretchDeformer->87:Divide 123637
            Single _103Multiply;// 1:StretchDeformer->138:Multiply 123600
            Single _104NegativeFloat;// 1:StretchDeformer->148:NegativeFloat 123643
            Single _105Multiply;// 1:StretchDeformer->147:Multiply 123642
            Single _106Add;// 1:StretchDeformer->152:Add 123599
            Single _107Multiply;// 1:StretchDeformer->153:Multiply 123598
            Single _108FloatOne;// 1:StretchDeformer->143:FloatOne 123645
            Single _109Add;// 1:StretchDeformer->154:Add 123597
            Single _110Multiply;// 1:StretchDeformer->150:Multiply 123575
            Single _111Y;// 1:StretchDeformer->41:Y 123648
            Single _112Multiply;// 1:StretchDeformer->155:Multiply 123647
            Single _120Pass-through: Single;// 1:StretchDeformer->160:Pass-through: Single 123651
            Single _121Multiply;// 1:StretchDeformer->156:Multiply 123650
            Vector3 _122Vector3;// 1:StretchDeformer->36:Vector3 123573
            Matrix _123InvertMatrix;// 1:StretchDeformer->14:InvertMatrix 123663
            Vector3 _124Transform;// 1:StretchDeformer->19:Transform 123572
            _53HalfPi = HalfPi();
            _54NegativeFloat = NegativeFloat(_53HalfPi);
            _55RotationYMatrix = RotationYMatrix(_54NegativeFloat);
            _56Pass-through: any = () => 
              {
                _55RotationYMatrix;
                };
            _57Unit = Unit(_56Pass-through: any);
            _58RotationXMatrix = RotationXMatrix(_53HalfPi);
            _59Pass-through: any = () => 
              {
                _58RotationXMatrix;
                };
            _60Append = Append(_57Unit, _59Pass-through: any);
            _61MatrixIdentity = MatrixIdentity();
            _62Pass-through: any = () => 
              {
                _61MatrixIdentity;
                };
            _63Append = Append(_60Append, _62Pass-through: any);
            _64At = At(_63Append, axis);
            _65Apply0 = Apply0(_64At);
            _66Transform = Transform(_33Transform, _65Apply0);
            _67X = X(_66Transform);
            _68Constant = 4;
            _69FloatOne = FloatOne();
            _70FloatZero = FloatZero();
            _71LessThan = LessThan(stretch, _70FloatZero);
            _72FloatZero = FloatZero();
            _73GreaterThanOrEqual = GreaterThanOrEqual(amplify, _72FloatZero);
            _81Pass-through: Single = if (_73GreaterThanOrEqual)
              {
                Single _74FloatOne;// 1:StretchDeformer->46:FloatOne 123621
                Single _75Add;// 1:StretchDeformer->39:Add 123619
                _74FloatOne = FloatOne();
                _75Add = Add(amplify, _74FloatOne);
                _75Add;
                }else
              {
                Single _76FloatOne;// 1:StretchDeformer->49:FloatOne 123623
                Single _77NegativeFloat;// 1:StretchDeformer->51:NegativeFloat 123625
                Single _78FloatOne;// 1:StretchDeformer->56:FloatOne 123626
                Single _79Add;// 1:StretchDeformer->55:Add 123624
                Single _80Divide;// 1:StretchDeformer->50:Divide 123622
                _76FloatOne = FloatOne();
                _77NegativeFloat = NegativeFloat(amplify);
                _78FloatOne = FloatOne();
                _79Add = Add(_77NegativeFloat, _78FloatOne);
                _80Divide = Divide(_76FloatOne, _79Add);
                _80Divide;
                };
            _98Subtract = Subtract(_69FloatOne, if (_71LessThan)
                {
                  Single _89FloatOne;// 1:StretchDeformer->98:FloatOne 123610
                  Single _90NegativeFloat;// 1:StretchDeformer->99:NegativeFloat 123627
                  Single _91Multiply;// 1:StretchDeformer->100:Multiply 123611
                  Single _92Add;// 1:StretchDeformer->97:Add 123609
                  _89FloatOne = FloatOne();
                  _90NegativeFloat = NegativeFloat(stretch);
                  _91Multiply = Multiply(_81Pass-through: Single, _90NegativeFloat);
                  _92Add = Add(_89FloatOne, _91Multiply);
                  _92Add;
                  }else
                {
                  Single _93FloatOne;// 1:StretchDeformer->113:FloatOne 123630
                  Single _94Multiply;// 1:StretchDeformer->114:Multiply 123632
                  Single _95FloatOne;// 1:StretchDeformer->120:FloatOne 123635
                  Single _96Add;// 1:StretchDeformer->119:Add 123631
                  Single _97Divide;// 1:StretchDeformer->112:Divide 123629
                  _93FloatOne = FloatOne();
                  _94Multiply = Multiply(_81Pass-through: Single, stretch);
                  _95FloatOne = FloatOne();
                  _96Add = Add(_94Multiply, _95FloatOne);
                  _97Divide = Divide(_93FloatOne, _96Add);
                  _97Divide;
                  });
            _99Multiply = Multiply(_68Constant, _98Subtract);
            _100Z = Z(_66Transform);
            _101Subtract = Subtract(_100Z, _26At);
            _102Divide = Divide(_101Subtract, _27Subtract);
            _103Multiply = Multiply(_99Multiply, _102Divide);
            _104NegativeFloat = NegativeFloat(_68Constant);
            _105Multiply = Multiply(_104NegativeFloat, _98Subtract);
            _106Add = Add(_103Multiply, _105Multiply);
            _107Multiply = Multiply(_106Add, _102Divide);
            _108FloatOne = FloatOne();
            _109Add = Add(_107Multiply, _108FloatOne);
            _110Multiply = Multiply(_67X, _109Add);
            _111Y = Y(_66Transform);
            _112Multiply = Multiply(_111Y, _109Add);
            _120Pass-through: Single = if (_71LessThan)
              {
                Single _113FloatOne;// 1:StretchDeformer->126:FloatOne 123655
                Single _114NegativeFloat;// 1:StretchDeformer->125:NegativeFloat 123654
                Single _115FloatOne;// 1:StretchDeformer->130:FloatOne 123659
                Single _116Subtract;// 1:StretchDeformer->127:Subtract 123656
                Single _117Divide;// 1:StretchDeformer->124:Divide 123653
                _113FloatOne = FloatOne();
                _114NegativeFloat = NegativeFloat(_113FloatOne);
                _115FloatOne = FloatOne();
                _116Subtract = Subtract(stretch, _115FloatOne);
                _117Divide = Divide(_114NegativeFloat, _116Subtract);
                _117Divide;
                }else
              {
                Single _118FloatOne;// 1:StretchDeformer->133:FloatOne 123661
                Single _119Add;// 1:StretchDeformer->132:Add 123660
                _118FloatOne = FloatOne();
                _119Add = Add(_118FloatOne, stretch);
                _119Add;
                };
            _121Multiply = Multiply(_100Z, _120Pass-through: Single);
            _122Vector3 = Vector3(_110Multiply, _112Multiply, _121Multiply);
            _123InvertMatrix = InvertMatrix(_65Apply0);
            _124Transform = Transform(_122Vector3, _123InvertMatrix);
            _124Transform;
            }, _11Pass-through: Matrix);
        _125Transform;
        });
    _13SetMeshVertices = SetMeshVertices(mesh, _12ParallelMap);
    _13SetMeshVertices;
    }