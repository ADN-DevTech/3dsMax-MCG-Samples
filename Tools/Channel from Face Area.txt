(InstanceState state, Int32 target channel, TriMesh mesh, Int32 source channel) => 
  {
    Int32 _0Constant;// 0:MapChannelOrGeometrySet-ext->0:Constant 93227
    Boolean _1Equal;// 0:MapChannelOrGeometrySet-ext->6:Equal 93226
    IArray[Int32] _2MeshIndices;// 0:MapChannelFromFaceVertex-ext->3:MeshIndices 93235
    IArray[Int32] _3Indices;// 4:MapIndices-ext->4:Indices 93234
    Int32 _4Constant;// 4:MapChannelOrGeometryGet-ext->0:Constant 93287
    Boolean _5Equal;// 4:MapChannelOrGeometryGet-ext->4:Equal 93286
    Func[Int32, Vector3] _8Pass-through: function1;// 0:Pass-through: function1 93217
    Func[Int32, Vector3] _9Pass-through: function1;// 0:Pass-through: function1 93220
    IArray[Vector3] _10Map;// 4:MapIndices-ext->2:Map 93233
    IArray[Int32] _11Indices;// 0:MapChannelFromFaceVertex-ext->5:Indices 93236
    _0Constant = -3;
    _1Equal = Equal(_0Constant, target channel);
    _2MeshIndices = MeshIndices(mesh);
    _3Indices = Indices(_2MeshIndices);
    _4Constant = -3;
    _5Equal = Equal(source channel, _4Constant);
    _8Pass-through: function1 = (Int32 x0) => 
      {
        Int32 _0Constant;// 5:Three->0:Constant 93262
        IArray[Int32] _1Range;// 0:MapChannelFace-ext->4:Range 93261
        MapChannel _4Pass-through: MapChannel;// 0:Pass-through: MapChannel 93245
        Int32 _5Constant;// 1:Three->0:Constant 93275
        Int32 _6Multiply;// 3:MultiplyByThree->2:Multiply 93274
        IArray[Vector3] _7Map;// 0:MapChannelFace-ext->7:Map 93260
        Int32 _8One;// 4:Second->2:One 93257
        Vector3 _9At;// 4:Second->0:At 93256
        Int32 _10Zero;// 3:First->2:Zero 93278
        Vector3 _11At;// 3:First->0:At 93277
        Vector3 _12Subtract;// 0:MapChannelFaceNormal-ext->6:Subtract 93254
        Int32 _13Two;// 5:Third->4:Two 93282
        Vector3 _14At;// 5:Third->0:At 93281
        Vector3 _15Subtract;// 0:MapChannelFaceNormal-ext->7:Subtract 93279
        Vector3 _16Cross;// 0:MapChannelFaceNormal-ext->8:Cross 93253
        Single _17Length;// 5:MapChannelFaceArea-ext->4:Length 93250
        Single _18Constant;// 5:DivideByTwoFloat->0:Constant 93249
        Single _19Divide;// 5:DivideByTwoFloat->2:Divide 93248
        Vector3 _20Vector3;// 7:ScalarToVector-ext->1:Vector3 93244
        _0Constant = 3;
        _1Range = Range(_0Constant);
        _4Pass-through: MapChannel = if (_5Equal)
          {
            MapChannel _2TopologyChannel;// 4:MapChannelOrGeometryGet-ext->6:TopologyChannel 93288
            _2TopologyChannel = TopologyChannel(mesh);
            _2TopologyChannel;
            }else
          {
            MapChannel _3GetMapChannel;// 4:MapChannelOrGeometryGet-ext->3:GetMapChannel 93289
            _3GetMapChannel = GetMapChannel(mesh, source channel);
            _3GetMapChannel;
            };
        _5Constant = 3;
        _6Multiply = Multiply(x0, _5Constant);
        _7Map = Map(_1Range, (Int32 x0) => 
          {
            IArray[Vector3] _0MapChannelVertexBuffer;// 1:MapChannelFaceVertexValue-ext->1:MapChannelVertexBuffer 93270
            IArray[Int32] _1MapChannelIndexBuffer;// 1:MapChannelFaceVertexValue-ext->6:MapChannelIndexBuffer 93271
            Int32 _2Add;// 0:MapChannelFace-ext->6:Add 93272
            Int32 _3At;// 3:ArrayIndirectLookup-ext->3:At 93269
            Vector3 _4At;// 3:ArrayIndirectLookup-ext->4:At 93268
            _0MapChannelVertexBuffer = MapChannelVertexBuffer(_4Pass-through: MapChannel);
            _1MapChannelIndexBuffer = MapChannelIndexBuffer(_4Pass-through: MapChannel);
            _2Add = Add(_6Multiply, x0);
            _3At = At(_1MapChannelIndexBuffer, _2Add);
            _4At = At(_0MapChannelVertexBuffer, _3At);
            _4At;
            });
        _8One = One();
        _9At = At(_7Map, _8One);
        _10Zero = Zero();
        _11At = At(_7Map, _10Zero);
        _12Subtract = Subtract(_9At, _11At);
        _13Two = Two();
        _14At = At(_7Map, _13Two);
        _15Subtract = Subtract(_14At, _11At);
        _16Cross = Cross(_12Subtract, _15Subtract);
        _17Length = Length(_16Cross);
        _18Constant = 2;
        _19Divide = Divide(_17Length, _18Constant);
        _20Vector3 = Vector3(_19Divide, _19Divide, _19Divide);
        _20Vector3;
        };
    _9Pass-through: function1 = (Int32 x0) => 
      {
        Int32 _0Constant;// 2:Three->0:Constant 93240
        Int32 _1Divide;// 6:DivideByThree->1:Divide 93239
        Vector3 _2Apply1;// 0:MapChannelFromFace-ext->5:Apply1 93237
        _0Constant = 3;
        _1Divide = Divide(x0, _0Constant);
        _2Apply1 = Apply1(_8Pass-through: function1, _1Divide);
        _2Apply1;
        };
    _10Map = Map(_3Indices, _9Pass-through: function1);
    _11Indices = Indices(_10Map);
    if (_1Equal)
      {
        MeshData _12MeshData;// 0:MapChannelOrGeometrySet-ext->9:MeshData 93229
        TriMesh _13CreateMeshWithMeshData;// 0:MapChannelOrGeometrySet-ext->8:CreateMeshWithMeshData 93228
        _12MeshData = MeshData(mesh);
        _13CreateMeshWithMeshData = CreateMeshWithMeshData(_10Map, _11Indices, _12MeshData);
        _13CreateMeshWithMeshData;
        }else
      {
        TriMesh _14SetMapChannel;// 0:MapChannelOrGeometrySet-ext->0:SetMapChannel 93230
        _14SetMapChannel = SetMapChannel(mesh, target channel, _10Map, _11Indices);
        _14SetMapChannel;
        };
    }