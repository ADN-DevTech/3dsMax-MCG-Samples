(InstanceState state, Int32  segments, Int32 sides, Single major radius, Single minor radius) => 
  {
    IArray[Single] _0RangeExclusiveFloat;// 1:QuadMeshFromUVs-ext->9:RangeExclusiveFloat 87121
    IArray[Single] _1Reverse;// 0:QuadMeshFromUVPoints-ext->13:Reverse 87115
    IArray[Single] _2RangeExclusiveFloat;// 1:QuadMeshFromUVs-ext->4:RangeExclusiveFloat 87122
    Func[Single, Single, Vector3] _3Pass-through: function2;// 0:Pass-through: function2 87097
    Func[Single, Single, Vector3] _4Pass-through: function2;// 0:Pass-through: function2 87108
    Func[Single, IArray[Vector3]] _5Pass-through: function1;// 0:Pass-through: function1 87110
    IArray[IArray[Vector3]] _6Map;// 4:FlatMap->4:Map 87112
    IArray[Vector3] _7Flatten;// 4:FlatMap->3:Flatten 87111
    Int32 _8Count;// 0:QuadMeshFromUVPoints-ext->14:Count 87120
    Boolean _9True;// 0:Torus-ext->13:True 87141
    QuadMesh _10QuadMeshStrip;// 0:QuadMeshFromUVPoints-ext->5:QuadMeshStrip 87105
    TriMesh _11Triangulate;// 5:QuadToTriMesh-ext->4:Triangulate 87079
    IArray[Int32] _12MeshIndices;// 5:QuadToTriMesh-ext->3:MeshIndices 87082
    IArray[Int32] _13Indices;// 5:QuadToTriMesh-ext->8:Indices 87081
    Int32 _14Constant;// 5:QuadToTriMesh-ext->0:Constant 87087
    Int32 _15Constant;// 5:QuadToTriMesh-ext->0:Constant 87088
    Int32 _16Constant;// 5:QuadToTriMesh-ext->0:Constant 87090
    IArray[Boolean] _17Map;// 5:QuadToTriMesh-ext->5:Map 87080
    TriMesh _18SetVisibleEdges;// 5:QuadToTriMesh-ext->9:SetVisibleEdges 87078
    _0RangeExclusiveFloat = RangeExclusiveFloat( segments);
    _1Reverse = Reverse(_0RangeExclusiveFloat);
    _2RangeExclusiveFloat = RangeExclusiveFloat(sides);
    _3Pass-through: function2 = (Single x0, Single x1) => 
      {
        Single _0TwoPi;// 10:PointTorus-ext->5:TwoPi 87133
        Single _1Multiply;// 10:PointTorus-ext->4:Multiply 87132
        Single _2Cos;// 10:PointTorus-ext->3:Cos 87131
        Single _3Multiply;// 10:PointTorus-ext->6:Multiply 87130
        Single _4Add;// 10:PointTorus-ext->2:Add 87129
        Single _5TwoPi;// 10:PointTorus-ext->8:TwoPi 87136
        Single _6Multiply;// 10:PointTorus-ext->7:Multiply 87135
        Single _7Cos;// 10:PointTorus-ext->17:Cos 87134
        Single _8Multiply;// 10:PointTorus-ext->20:Multiply 87128
        Single _9Sin;// 10:PointTorus-ext->18:Sin 87138
        Single _10Multiply;// 10:PointTorus-ext->19:Multiply 87137
        Single _11Sin;// 10:PointTorus-ext->13:Sin 87140
        Single _12Multiply;// 10:PointTorus-ext->16:Multiply 87139
        Vector3 _13Vector3;// 10:PointTorus-ext->9:Vector3 87127
        _0TwoPi = TwoPi();
        _1Multiply = Multiply(x0, _0TwoPi);
        _2Cos = Cos(_1Multiply);
        _3Multiply = Multiply(_2Cos, minor radius);
        _4Add = Add(major radius, _3Multiply);
        _5TwoPi = TwoPi();
        _6Multiply = Multiply(x1, _5TwoPi);
        _7Cos = Cos(_6Multiply);
        _8Multiply = Multiply(_4Add, _7Cos);
        _9Sin = Sin(_6Multiply);
        _10Multiply = Multiply(_4Add, _9Sin);
        _11Sin = Sin(_1Multiply);
        _12Multiply = Multiply(_11Sin, minor radius);
        _13Vector3 = Vector3(_8Multiply, _10Multiply, _12Multiply);
        _13Vector3;
        };
    _4Pass-through: function2 = (Single x0, Single x1) => 
      {
        Single _0IgnoreFirst;// 0:QuadMeshFromUVPoints-ext->10:IgnoreFirst 87117
        Vector3 _1Apply2;// 0:QuadMeshFromUVPoints-ext->9:Apply2 87116
        _0IgnoreFirst = IgnoreFirst(x0, x1);
        _1Apply2 = Apply2(_3Pass-through: function2, _0IgnoreFirst, x0);
        _1Apply2;
        };
    _5Pass-through: function1 = (Single x0) => 
      {
        Func[Single, Vector3] _0Bind1of2;// 6:CartesianProduct->5:Bind1of2 87114
        IArray[Vector3] _1Map;// 6:CartesianProduct->1:Map 87113
        _0Bind1of2 = Bind1of2(_4Pass-through: function2, x0);
        _1Map = Map(_2RangeExclusiveFloat, _0Bind1of2);
        _1Map;
        };
    _6Map = Map(_1Reverse, _5Pass-through: function1);
    _7Flatten = Flatten(_6Map);
    _8Count = Count(_0RangeExclusiveFloat);
    _9True = True();
    _10QuadMeshStrip = QuadMeshStrip(_7Flatten, _8Count, _9True, _9True);
    _11Triangulate = Triangulate(_10QuadMeshStrip);
    _12MeshIndices = MeshIndices(_11Triangulate);
    _13Indices = Indices(_12MeshIndices);
    _14Constant = 6;
    _15Constant = 2;
    _16Constant = 3;
    _17Map = Map(_13Indices, (Int32 x0) => 
      {
        Int32 _0Modulo;// 5:QuadToTriMesh-ext->14:Modulo 87086
        Boolean _1Equal;// 5:QuadToTriMesh-ext->7:Equal 87085
        Boolean _2Equal;// 5:QuadToTriMesh-ext->13:Equal 87089
        Boolean _3OrElse;// 5:QuadToTriMesh-ext->12:OrElse 87084
        Boolean _4Not;// 5:QuadToTriMesh-ext->10:Not 87083
        _0Modulo = Modulo(x0, _14Constant);
        _1Equal = Equal(_0Modulo, _15Constant);
        _2Equal = Equal(_0Modulo, _16Constant);
        _3OrElse = OrElse(_1Equal, _2Equal);
        _4Not = Not(_3OrElse);
        _4Not;
        });
    _18SetVisibleEdges = SetVisibleEdges(_11Triangulate, _17Map);
    _18SetVisibleEdges;
    }